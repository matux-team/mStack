
stm32g431rbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  080092c8  080092c8  000192c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009874  08009874  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009874  08009874  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009874  08009874  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a68  20000078  080098f8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003ae0  080098f8  00023ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a9a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058f2  00000000  00000000  00041b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00047438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  00048dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025026  00000000  00000000  0004a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151c9  00000000  00000000  0006f5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c62  00000000  00000000  000847a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b3c  00000000  00000000  0014b45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092ac 	.word	0x080092ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080092ac 	.word	0x080092ac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <_ZN4core9Component4initEv>:
};

class Component
{
public:
    virtual void init(){/*empty*/}
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_ZN4core9ComponentD1Ev>:
    virtual ~Component(){}
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <_ZN4core9ComponentD1Ev+0x1c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	08009400 	.word	0x08009400

08000c00 <_ZN4core9ComponentD0Ev>:
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ffe9 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 8000c0e:	2104      	movs	r1, #4
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f006 f80b 	bl	8006c2c <_ZdlPvj>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN4core5EventD1Ev>:

class Event
{
public:
    Event();
    virtual ~Event(){};
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <_ZN4core5EventD1Ev+0x1c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	080093ec 	.word	0x080093ec

08000c40 <_ZN4core5EventD0Ev>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe9 	bl	8000c20 <_ZN4core5EventD1Ev>
 8000c4e:	2108      	movs	r1, #8
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f005 ffeb 	bl	8006c2c <_ZdlPvj>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN7console10ControllerD1Ev>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_ZN7console10ControllerD1Ev+0x20>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ffb5 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	080093d8 	.word	0x080093d8

08000c84 <_ZN7console10ControllerD0Ev>:
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffe7 	bl	8000c60 <_ZN7console10ControllerD1Ev>
 8000c92:	2158      	movs	r1, #88	; 0x58
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f005 ffc9 	bl	8006c2c <_ZdlPvj>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_ZN4core9ComponentC1Ev>:
class Component
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <_ZN4core9ComponentC1Ev+0x1c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	08009400 	.word	0x08009400

08000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>:

class EmptyEvent: public Event
{
public:
    typedef void (Component::*Handler) ();
    EmptyEvent(Component* component, Handler handler):component_(component), handler_(handler){}
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	4639      	mov	r1, r7
 8000cd0:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fe74 	bl	80029c4 <_ZN4core5EventC1Ev>
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE+0x3c>)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	330c      	adds	r3, #12
 8000cec:	463a      	mov	r2, r7
 8000cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	080093c4 	.word	0x080093c4

08000d04 <_ZN4core10EmptyEvent7executeEPNS_18AbstractEventQueueE>:
    void post()
    {
        core::Engine::instance().events().post(index_);
    }
private:
    void execute(core::AbstractEventQueue* queue) override
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
    {
        (component_->*handler_)();
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6912      	ldr	r2, [r2, #16]
 8000d16:	1052      	asrs	r2, r2, #1
 8000d18:	1899      	adds	r1, r3, r2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <_ZN4core10EmptyEvent7executeEPNS_18AbstractEventQueueE+0x28>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	e00a      	b.n	8000d42 <_ZN4core10EmptyEvent7executeEPNS_18AbstractEventQueueE+0x3e>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6912      	ldr	r2, [r2, #16]
 8000d34:	1052      	asrs	r2, r2, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68d2      	ldr	r2, [r2, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4608      	mov	r0, r1
 8000d44:	4798      	blx	r3
    }
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_ZN4core7Machine9NullStateEv>:
class Machine: public core::Component
{
public:
	typedef void (Machine::*State)();
protected:
	void NullState(){}
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_ZN4core7Machine6check_EhMS0_FvvE>:
	State nextState_ = nullptr;
	State currentState_ = &Machine::NullState;
	virtual bool check_(uint8_t event, State next){return false;}
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e881 000c 	stmia.w	r1, {r2, r3}
 8000d72:	4603      	mov	r3, r0
 8000d74:	72fb      	strb	r3, [r7, #11]
 8000d76:	2300      	movs	r3, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN4core7Machine6start_EMS0_FvvE>:
	virtual void start_(State state){currentState_ = state;}
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	330c      	adds	r3, #12
 8000d96:	1d3a      	adds	r2, r7, #4
 8000d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_ZN4core13SimpleMachine7executeERh>:
	void postEvent(uint8_t event)
	{
		postEvent_.post(event);
	}

	void execute(uint8_t& event)
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	{
		nextState_ = nullptr;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
		nextEvent_ = event; (this->*currentState_)();
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	751a      	strb	r2, [r3, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6912      	ldr	r2, [r2, #16]
 8000dd0:	1052      	asrs	r2, r2, #1
 8000dd2:	1899      	adds	r1, r3, r2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_ZN4core13SimpleMachine7executeERh+0x3a>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	e009      	b.n	8000dfa <_ZN4core13SimpleMachine7executeERh+0x4e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6912      	ldr	r2, [r2, #16]
 8000dec:	1052      	asrs	r2, r2, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68d2      	ldr	r2, [r2, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4798      	blx	r3
		if (nextState_ != nullptr && nextState_ != currentState_)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d107      	bne.n	8000e16 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <_ZN4core13SimpleMachine7executeERh+0x6c>
 8000e16:	2300      	movs	r3, #0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d062      	beq.n	8000ee2 <_ZN4core13SimpleMachine7executeERh+0x136>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d117      	bne.n	8000e58 <_ZN4core13SimpleMachine7executeERh+0xac>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d00f      	beq.n	8000e54 <_ZN4core13SimpleMachine7executeERh+0xa8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10d      	bne.n	8000e58 <_ZN4core13SimpleMachine7executeERh+0xac>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <_ZN4core13SimpleMachine7executeERh+0xac>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <_ZN4core13SimpleMachine7executeERh+0xac>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <_ZN4core13SimpleMachine7executeERh+0xae>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d141      	bne.n	8000ee2 <_ZN4core13SimpleMachine7executeERh+0x136>
		{
			nextEvent_ = EXIT; (this->*currentState_)();
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	22ff      	movs	r2, #255	; 0xff
 8000e62:	751a      	strb	r2, [r3, #20]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6912      	ldr	r2, [r2, #16]
 8000e6a:	1052      	asrs	r2, r2, #1
 8000e6c:	1899      	adds	r1, r3, r2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <_ZN4core13SimpleMachine7executeERh+0xd4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	e009      	b.n	8000e94 <_ZN4core13SimpleMachine7executeERh+0xe8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6912      	ldr	r2, [r2, #16]
 8000e86:	1052      	asrs	r2, r2, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68d2      	ldr	r2, [r2, #12]
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4608      	mov	r0, r1
 8000e96:	4798      	blx	r3
			currentState_ = nextState_;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	330c      	adds	r3, #12
 8000e9e:	3204      	adds	r2, #4
 8000ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea4:	e883 0003 	stmia.w	r3, {r0, r1}
			nextEvent_ = ENTER; (this->*currentState_)();
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	22fe      	movs	r2, #254	; 0xfe
 8000eac:	751a      	strb	r2, [r3, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6912      	ldr	r2, [r2, #16]
 8000eb4:	1052      	asrs	r2, r2, #1
 8000eb6:	1899      	adds	r1, r3, r2
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_ZN4core13SimpleMachine7executeERh+0x11e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	e009      	b.n	8000ede <_ZN4core13SimpleMachine7executeERh+0x132>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6912      	ldr	r2, [r2, #16]
 8000ed0:	1052      	asrs	r2, r2, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68d2      	ldr	r2, [r2, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4798      	blx	r3
		}
	}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE>:
protected:
	uint8_t nextEvent_ = 0;
protected:
	core::ByteEvent postEvent_ = core::ByteEvent(this, (core::ByteEvent::Handler)&SimpleMachine::execute);

	bool check_(uint8_t input, State state) override
 8000eea:	b480      	push	{r7}
 8000eec:	b085      	sub	sp, #20
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	e881 000c 	stmia.w	r1, {r2, r3}
 8000efa:	4603      	mov	r3, r0
 8000efc:	72fb      	strb	r3, [r7, #11]
	{
		if (nextEvent_ != input) return false;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	7d1b      	ldrb	r3, [r3, #20]
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d001      	beq.n	8000f0c <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x22>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e007      	b.n	8000f1c <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x32>
		nextState_ = state;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	463a      	mov	r2, r7
 8000f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f16:	e883 0003 	stmia.w	r3, {r0, r1}
		return true;
 8000f1a:	2301      	movs	r3, #1
	}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE>:

	void start_(State s) override
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	e883 0006 	stmia.w	r3, {r1, r2}
	{
		currentState_ = s;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	330c      	adds	r3, #12
 8000f3a:	1d3a      	adds	r2, r7, #4
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
		nextEvent_ = ENTER;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	22fe      	movs	r2, #254	; 0xfe
 8000f48:	751a      	strb	r2, [r3, #20]
		(this->*currentState_)();
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	6912      	ldr	r2, [r2, #16]
 8000f50:	1052      	asrs	r2, r2, #1
 8000f52:	1899      	adds	r1, r3, r2
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x3e>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	e009      	b.n	8000f7a <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x52>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	6912      	ldr	r2, [r2, #16]
 8000f6c:	1052      	asrs	r2, r2, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	68d2      	ldr	r2, [r2, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4798      	blx	r3
	}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <__tcf_3>:
#define TX_BUF_SIZE   		4096
#define HEADER_INDICATOR	0xFE
#define FOOTER_INDICATOR	0xFD
#define MAX_PACKET_LENGTH	250

MACHINE(console, Driver)
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4801      	ldr	r0, [pc, #4]	; (8000f94 <__tcf_3+0xc>)
 8000f8e:	f000 f87b 	bl	8001088 <_ZN7console6DriverD1Ev>
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000094 	.word	0x20000094

08000f98 <_ZN7console6Driver8instanceEv>:
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <_ZN7console6Driver8instanceEv+0x50>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f3bf 8f5b 	dmb	ish
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf0c      	ite	eq
 8000fae:	2301      	moveq	r3, #1
 8000fb0:	2300      	movne	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <_ZN7console6Driver8instanceEv+0x48>
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <_ZN7console6Driver8instanceEv+0x50>)
 8000fba:	f005 fe39 	bl	8006c30 <__cxa_guard_acquire>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <_ZN7console6Driver8instanceEv+0x48>
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <_ZN7console6Driver8instanceEv+0x54>)
 8000fd0:	f000 f8cc 	bl	800116c <_ZN7console6DriverC1Ev>
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <_ZN7console6Driver8instanceEv+0x50>)
 8000fd6:	f005 fe37 	bl	8006c48 <__cxa_guard_release>
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <_ZN7console6Driver8instanceEv+0x58>)
 8000fdc:	f006 fef5 	bl	8007dca <atexit>
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <_ZN7console6Driver8instanceEv+0x54>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20002204 	.word	0x20002204
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	08000f89 	.word	0x08000f89

08000ff4 <_ZN4core7MachineD1Ev>:
class Machine: public core::Component
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_ZN4core7MachineD1Ev+0x20>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fdeb 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	080093a8 	.word	0x080093a8

08001018 <_ZN4core7MachineD0Ev>:
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe7 	bl	8000ff4 <_ZN4core7MachineD1Ev>
 8001026:	2114      	movs	r1, #20
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f005 fdff 	bl	8006c2c <_ZdlPvj>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZN4core13SimpleMachineD1Ev>:
class SimpleMachine: public core::Machine
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <_ZN4core13SimpleMachineD1Ev+0x2c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3318      	adds	r3, #24
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fa9e 	bl	800158c <_ZN4core10FixedEventIhED1Ev>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ffce 	bl	8000ff4 <_ZN4core7MachineD1Ev>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08009378 	.word	0x08009378

08001068 <_ZN4core13SimpleMachineD0Ev>:
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffe1 	bl	8001038 <_ZN4core13SimpleMachineD1Ev>
 8001076:	212c      	movs	r1, #44	; 0x2c
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f005 fdd7 	bl	8006c2c <_ZdlPvj>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN7console6DriverD1Ev>:
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <_ZN7console6DriverD1Ev+0x34>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3340      	adds	r3, #64	; 0x40
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa76 	bl	800158c <_ZN4core10FixedEventIhED1Ev>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	332c      	adds	r3, #44	; 0x2c
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fa93 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffc3 	bl	8001038 <_ZN4core13SimpleMachineD1Ev>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800941c 	.word	0x0800941c

080010c0 <_ZN7console6DriverD0Ev>:
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffdd 	bl	8001088 <_ZN7console6DriverD1Ev>
 80010ce:	f242 1170 	movw	r1, #8560	; 0x2170
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f005 fdaa 	bl	8006c2c <_ZdlPvj>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <_ZN4core7MachineC1Ev>:
class Machine: public core::Component
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fdd8 	bl	8000ca4 <_ZN4core9ComponentC1Ev>
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <_ZN4core7MachineC1Ev+0x38>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_ZN4core7MachineC1Ev+0x3c>)
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	080093a8 	.word	0x080093a8
 8001120:	08000d4f 	.word	0x08000d4f

08001124 <_ZN4core13SimpleMachineC1Ev>:
class SimpleMachine: public core::Machine
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffd8 	bl	80010e4 <_ZN4core7MachineC1Ev>
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <_ZN4core13SimpleMachineC1Ev+0x40>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f103 0018 	add.w	r0, r3, #24
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_ZN4core13SimpleMachineC1Ev+0x44>)
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	cb0c      	ldmia	r3, {r2, r3}
 8001156:	f000 f9f9 	bl	800154c <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08009378 	.word	0x08009378
 8001168:	08000dad 	.word	0x08000dad

0800116c <_ZN7console6DriverC1Ev>:
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffd4 	bl	8001124 <_ZN4core13SimpleMachineC1Ev>
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <_ZN7console6DriverC1Ev+0xb0>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <_ZN7console6DriverC1Ev+0xb4>)
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	cb0c      	ldmia	r3, {r2, r3}
 8001198:	f7ff fd94 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <_ZN7console6DriverC1Ev+0xb8>)
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	cb0c      	ldmia	r3, {r2, r3}
 80011b2:	f000 f9cb 	bl	800154c <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <_ZN7console6DriverC1Ev+0xbc>)
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	659a      	str	r2, [r3, #88]	; 0x58
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f203 125d 	addw	r2, r3, #349	; 0x15d
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 80011d8:	3320      	adds	r3, #32
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80011e2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 80011ec:	3324      	adds	r3, #36	; 0x24
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 80011f6:	3320      	adds	r3, #32
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001200:	3328      	adds	r3, #40	; 0x28
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800120a:	332c      	adds	r3, #44	; 0x2c
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800941c 	.word	0x0800941c
 8001220:	08001c6d 	.word	0x08001c6d
 8001224:	08001ca7 	.word	0x08001ca7
 8001228:	08001879 	.word	0x08001879

0800122c <_ZN7console10Controller4initEv>:
#include <stdio.h>
#include <stdarg.h>
#include <console/driver.h>

void console::Controller::init()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    console::Driver::instance().init();
 8001234:	f7ff feb0 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 8001238:	4603      	mov	r3, r0
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	4790      	blx	r2
    plotTask_.start(10);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3308      	adds	r3, #8
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	210a      	movs	r1, #10
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fd73 	bl	8002d38 <_ZN4core4Task5startEml>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZN7console10Controller5printEPKc>:

void console::Controller::print(const char* text)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
    int l = strlen(text) + 1;
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f7fe ffdb 	bl	8000220 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)text);
 8001270:	f7ff fe92 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	f000 fc14 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN7console10Controller7sendOSCEhhtPKh>:

bool console::Controller::sendOSC(uint8_t channel, uint8_t length, uint16_t index, const uint8_t* data)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b0c5      	sub	sp, #276	; 0x114
 800128c:	af00      	add	r7, sp, #0
 800128e:	1d3c      	adds	r4, r7, #4
 8001290:	6020      	str	r0, [r4, #0]
 8001292:	460c      	mov	r4, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	4622      	mov	r2, r4
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	1cbb      	adds	r3, r7, #2
 80012a0:	4602      	mov	r2, r0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	463b      	mov	r3, r7
 80012a6:	460a      	mov	r2, r1
 80012a8:	801a      	strh	r2, [r3, #0]
    uint8_t buf[256];
    buf[0] = channel;
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	1cfa      	adds	r2, r7, #3
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	701a      	strb	r2, [r3, #0]
    buf[1] = (index >> 8) & 0xFF;
 80012b4:	463b      	mov	r3, r7
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	705a      	strb	r2, [r3, #1]
    buf[2] = index & 0xFF;
 80012c4:	463b      	mov	r3, r7
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	709a      	strb	r2, [r3, #2]

    for (int i =0;i < length;i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80012de:	429a      	cmp	r2, r3
 80012e0:	da11      	bge.n	8001306 <_ZN7console10Controller7sendOSCEhhtPKh+0x7e>
    {
        buf[i+3] = data[i];
 80012e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012e6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80012ea:	441a      	add	r2, r3
 80012ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012f0:	3303      	adds	r3, #3
 80012f2:	7811      	ldrb	r1, [r2, #0]
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	54d1      	strb	r1, [r2, r3]
    for (int i =0;i < length;i++)
 80012fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012fe:	3301      	adds	r3, #1
 8001300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001304:	e7e7      	b.n	80012d6 <_ZN7console10Controller7sendOSCEhhtPKh+0x4e>
    }
    console::Driver::instance().sendPacket(console::Controller::Oscilloscope, length+3, buf);
 8001306:	f7ff fe47 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 800130a:	1cbb      	adds	r3, r7, #2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3303      	adds	r3, #3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2106      	movs	r1, #6
 8001318:	f000 fbc6 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
    return true;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}

08001328 <_ZN7console10Controller6printfEPKcz>:

void console::Controller::printf(const char* format, ...)
{
 8001328:	b40e      	push	{r1, r2, r3}
 800132a:	b580      	push	{r7, lr}
 800132c:	b0c5      	sub	sp, #276	; 0x114
 800132e:	af00      	add	r7, sp, #0
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	6018      	str	r0, [r3, #0]
    char buf[256];
    va_list args;
    va_start (args, format);
 8001334:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	601a      	str	r2, [r3, #0]
    int l = vsprintf(buf, format ,args) + 1;
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	f107 000c 	add.w	r0, r7, #12
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800134c:	f006 fee8 	bl	8008120 <vsiprintf>
 8001350:	4603      	mov	r3, r0
 8001352:	3301      	adds	r3, #1
 8001354:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    va_end(args);
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
 8001358:	f7ff fe1e 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 800135c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001360:	b2da      	uxtb	r2, r3
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2101      	movs	r1, #1
 8001368:	f000 fb9e 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
}
 800136c:	bf00      	nop
 800136e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001372:	46bd      	mov	sp, r7
 8001374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001378:	b003      	add	sp, #12
 800137a:	4770      	bx	lr

0800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>:

console::Command* console::Controller::registerCommand(uint16_t type, Handler handler)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	460b      	mov	r3, r1
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	817b      	strh	r3, [r7, #10]
    Command* cmd = new Command();
 800138a:	200c      	movs	r0, #12
 800138c:	f005 fc5f 	bl	8006c4e <_Znwj>
 8001390:	4603      	mov	r3, r0
 8001392:	2200      	movs	r2, #0
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	617b      	str	r3, [r7, #20]
    cmd->type = type;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	897a      	ldrh	r2, [r7, #10]
 80013a4:	801a      	strh	r2, [r3, #0]
    cmd->handler = handler;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
    cmd->next = commands_;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	609a      	str	r2, [r3, #8]
    commands_ = cmd;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
    return cmd;
 80013ba:	697b      	ldr	r3, [r7, #20]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN7console10Controller14updateIntFieldEtl>:

void console::Controller::updateIntField(uint16_t command, int32_t value)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	460b      	mov	r3, r1
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	817b      	strh	r3, [r7, #10]
    uint8_t buf[6];
    ENCODE_16(command,buf,0);
 80013d2:	897b      	ldrh	r3, [r7, #10]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	743b      	strb	r3, [r7, #16]
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	747b      	strb	r3, [r7, #17]
    ENCODE_32(value,buf,2);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0e1b      	lsrs	r3, r3, #24
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	74bb      	strb	r3, [r7, #18]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	141b      	asrs	r3, r3, #16
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	74fb      	strb	r3, [r7, #19]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	121b      	asrs	r3, r3, #8
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	753b      	strb	r3, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	757b      	strb	r3, [r7, #21]
    console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
 8001400:	f7ff fdca 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2206      	movs	r2, #6
 800140a:	2102      	movs	r1, #2
 800140c:	f000 fb4c 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN7console10Controller14processCommandEthPh>:

void console::Controller::processCommand(uint16_t type, uint8_t length, uint8_t* data)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	4613      	mov	r3, r2
 8001428:	727b      	strb	r3, [r7, #9]
	Command* it = commands_;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d010      	beq.n	8001458 <_ZN7console10Controller14processCommandEthPh+0x40>
	{
		if (it->type==type)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	897a      	ldrh	r2, [r7, #10]
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <_ZN7console10Controller14processCommandEthPh+0x38>
		{
			(*it->handler)(type, length,data);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	7a79      	ldrb	r1, [r7, #9]
 8001446:	8978      	ldrh	r0, [r7, #10]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4798      	blx	r3
			break;
 800144c:	bf00      	nop
		}
		it=it->next;
	}
}
 800144e:	e003      	b.n	8001458 <_ZN7console10Controller14processCommandEthPh+0x40>
		it=it->next;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 8001456:	e7eb      	b.n	8001430 <_ZN7console10Controller14processCommandEthPh+0x18>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZN7console10Controller15updateTextFieldEtPc>:

void console::Controller::updateTextField(uint16_t command, char* data)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	817b      	strh	r3, [r7, #10]
    int8_t length = strlen(data);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7fe fed6 	bl	8000220 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
    updateTextField(command, length, (uint8_t*)data);
 8001478:	7dfa      	ldrb	r2, [r7, #23]
 800147a:	8979      	ldrh	r1, [r7, #10]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f804 	bl	800148c <_ZN7console10Controller15updateTextFieldEthPh>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_ZN7console10Controller15updateTextFieldEthPh>:

void console::Controller::updateTextField(uint16_t command, uint8_t length, uint8_t* data)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	817b      	strh	r3, [r7, #10]
 800149a:	4613      	mov	r3, r2
 800149c:	727b      	strb	r3, [r7, #9]
    if (length > MAX_PACKET_LENGTH-6) return;
    uint8_t buf[length+2];
    ENCODE_16(command,buf,0);
    for (int i=0;i<length;i++) buf[i+2] = data[i];
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 800149e:	466b      	mov	r3, sp
 80014a0:	461d      	mov	r5, r3
    if (length > MAX_PACKET_LENGTH-6) return;
 80014a2:	7a7b      	ldrb	r3, [r7, #9]
 80014a4:	2bf4      	cmp	r3, #244	; 0xf4
 80014a6:	d901      	bls.n	80014ac <_ZN7console10Controller15updateTextFieldEthPh+0x20>
 80014a8:	46ad      	mov	sp, r5
 80014aa:	e04c      	b.n	8001546 <_ZN7console10Controller15updateTextFieldEthPh+0xba>
    uint8_t buf[length+2];
 80014ac:	7a7b      	ldrb	r3, [r7, #9]
 80014ae:	1c5c      	adds	r4, r3, #1
 80014b0:	61bc      	str	r4, [r7, #24]
 80014b2:	4623      	mov	r3, r4
 80014b4:	3301      	adds	r3, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	00cb      	lsls	r3, r1, #3
 80014c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014ca:	00c2      	lsls	r2, r0, #3
 80014cc:	4623      	mov	r3, r4
 80014ce:	3301      	adds	r3, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	00cb      	lsls	r3, r1, #3
 80014e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014e4:	00c2      	lsls	r2, r0, #3
 80014e6:	4623      	mov	r3, r4
 80014e8:	3301      	adds	r3, #1
 80014ea:	3307      	adds	r3, #7
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	ebad 0d03 	sub.w	sp, sp, r3
 80014f4:	466b      	mov	r3, sp
 80014f6:	3300      	adds	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
    ENCODE_16(command,buf,0);
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	705a      	strb	r2, [r3, #1]
    for (int i=0;i<length;i++) buf[i+2] = data[i];
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	7a7b      	ldrb	r3, [r7, #9]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	429a      	cmp	r2, r3
 8001518:	da0b      	bge.n	8001532 <_ZN7console10Controller15updateTextFieldEthPh+0xa6>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	441a      	add	r2, r3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3302      	adds	r3, #2
 8001524:	7811      	ldrb	r1, [r2, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	54d1      	strb	r1, [r2, r3]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	e7ef      	b.n	8001512 <_ZN7console10Controller15updateTextFieldEthPh+0x86>
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 8001532:	f7ff fd31 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 8001536:	7a7b      	ldrb	r3, [r7, #9]
 8001538:	3302      	adds	r3, #2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2103      	movs	r1, #3
 8001540:	f000 fab2 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
 8001544:	46ad      	mov	sp, r5
}
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>:
template <typename E>
class FixedEvent: public Event
{
public:
    typedef void (Component::*Handler) (const E&);
    FixedEvent(Component* component, Handler handler): component_(component), handler_(handler){}
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	4639      	mov	r1, r7
 8001558:	e881 000c 	stmia.w	r1, {r2, r3}
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fa30 	bl	80029c4 <_ZN4core5EventC1Ev>
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE+0x3c>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	330c      	adds	r3, #12
 8001574:	463a      	mov	r2, r7
 8001576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157a:	e883 0003 	stmia.w	r3, {r0, r1}
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	08009394 	.word	0x08009394

0800158c <_ZN4core10FixedEventIhED1Ev>:
class FixedEvent: public Event
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_ZN4core10FixedEventIhED1Ev+0x20>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb3f 	bl	8000c20 <_ZN4core5EventD1Ev>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	08009394 	.word	0x08009394

080015b0 <_ZN4core10FixedEventIhED0Ev>:
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ffe7 	bl	800158c <_ZN4core10FixedEventIhED1Ev>
 80015be:	2114      	movs	r1, #20
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f005 fb33 	bl	8006c2c <_ZdlPvj>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZN4core10EmptyEventD1Ev>:
class EmptyEvent: public Event
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_ZN4core10EmptyEventD1Ev+0x20>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fb1d 	bl	8000c20 <_ZN4core5EventD1Ev>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	080093c4 	.word	0x080093c4

080015f4 <_ZN4core10EmptyEventD0Ev>:
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 8001602:	2114      	movs	r1, #20
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f005 fb11 	bl	8006c2c <_ZdlPvj>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN4core10FixedEventIhE7executeEPNS_18AbstractEventQueueE>:
    {
        uint8_t* ptr = (uint8_t*)&e;
        core::Engine::instance().events().pushFixed(index_,ptr,sizeof (E));
    }
protected:
    void execute(core::AbstractEventQueue* queue) override
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    {
        E e;
        uint8_t* ptr = (uint8_t*)&e;
 800161e:	f107 030b 	add.w	r3, r7, #11
 8001622:	60fb      	str	r3, [r7, #12]
        queue->popFixed(ptr, sizeof (E));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3304      	adds	r3, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	4798      	blx	r3
        (component_->*handler_)(e);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6912      	ldr	r2, [r2, #16]
 800163c:	1052      	asrs	r2, r2, #1
 800163e:	1898      	adds	r0, r3, r2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_ZN4core10FixedEventIhE7executeEPNS_18AbstractEventQueueE+0x3e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	e00a      	b.n	8001668 <_ZN4core10FixedEventIhE7executeEPNS_18AbstractEventQueueE+0x54>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6912      	ldr	r2, [r2, #16]
 800165a:	1052      	asrs	r2, r2, #1
 800165c:	4413      	add	r3, r2
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68d2      	ldr	r2, [r2, #12]
 8001664:	4413      	add	r3, r2
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f107 020b 	add.w	r2, r7, #11
 800166c:	4611      	mov	r1, r2
 800166e:	4798      	blx	r3
    }
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <LL_DMA_EnableChannel+0x40>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <LL_DMA_EnableChannel+0x40>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	440a      	add	r2, r1
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4611      	mov	r1, r2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	440a      	add	r2, r1
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	0800940c 	.word	0x0800940c

080016bc <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <LL_DMA_SetDataLength+0x48>)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	4908      	ldr	r1, [pc, #32]	; (8001704 <LL_DMA_SetDataLength+0x48>)
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	440a      	add	r2, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	4611      	mov	r1, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	440a      	add	r2, r1
 80016ee:	4611      	mov	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	0800940c 	.word	0x0800940c

08001708 <__tcf_1>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
 800170c:	4801      	ldr	r0, [pc, #4]	; (8001714 <__tcf_1+0xc>)
 800170e:	f7ff faa7 	bl	8000c60 <_ZN7console10ControllerD1Ev>
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20002208 	.word	0x20002208

08001718 <_ZN7console10Controller8instanceEv>:
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <_ZN7console10Controller8instanceEv+0x50>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f3bf 8f5b 	dmb	ish
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <_ZN7console10Controller8instanceEv+0x48>
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <_ZN7console10Controller8instanceEv+0x50>)
 800173a:	f005 fa79 	bl	8006c30 <__cxa_guard_acquire>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d008      	beq.n	8001760 <_ZN7console10Controller8instanceEv+0x48>
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <_ZN7console10Controller8instanceEv+0x54>)
 8001750:	f000 f810 	bl	8001774 <_ZN7console10ControllerC1Ev>
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <_ZN7console10Controller8instanceEv+0x50>)
 8001756:	f005 fa77 	bl	8006c48 <__cxa_guard_release>
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <_ZN7console10Controller8instanceEv+0x58>)
 800175c:	f006 fb35 	bl	8007dca <atexit>
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <_ZN7console10Controller8instanceEv+0x54>)
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20002260 	.word	0x20002260
 800176c:	20002208 	.word	0x20002208
 8001770:	08001709 	.word	0x08001709

08001774 <_ZN7console10ControllerC1Ev>:
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa90 	bl	8000ca4 <_ZN4core9ComponentC1Ev>
 8001784:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <_ZN7console10ControllerC1Ev+0x50>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f103 0008 	add.w	r0, r3, #8
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <_ZN7console10ControllerC1Ev+0x54>)
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	cb0c      	ldmia	r3, {r2, r3}
 80017a0:	f001 faa6 	bl	8002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	651a      	str	r2, [r3, #80]	; 0x50
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	080093d8 	.word	0x080093d8
 80017c8:	080026dd 	.word	0x080026dd

080017cc <_ZN7console6Driver11txAvailableEv>:
    M_EVENT(send);
	M_EVENT(receive, uint8_t)
public:
	void init();
    inline uint16_t getMinAvail(){return txMinAvail_;}
    inline uint16_t txAvailable(){return txLast_ - txIndex_;}
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 80017da:	3324      	adds	r3, #36	; 0x24
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 80017e4:	3328      	adds	r3, #40	; 0x28
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_ZN7console6Driver12transferDMA_Ev>:
	void ReceiveChecksum_(uint8_t data);
	void ReceiveFooter_(uint8_t data);
	RxState rxState_ = &Driver::ReceiveHeader_;

private:
	inline void transferDMA_()
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	{
		uint16_t len = txIndex_ - txFirst_;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001806:	3328      	adds	r3, #40	; 0x28
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001810:	3320      	adds	r3, #32
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	81fb      	strh	r3, [r7, #14]
    	memcpy(txBufferDMA_, txBuffer_, len);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800181e:	331d      	adds	r3, #29
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	f202 115d 	addw	r1, r2, #349	; 0x15d
 8001826:	89fa      	ldrh	r2, [r7, #14]
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fb0f 	bl	8007e4c <memcpy>
        LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, len);
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	461a      	mov	r2, r3
 8001832:	2100      	movs	r1, #0
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <_ZN7console6Driver12transferDMA_Ev+0x68>)
 8001836:	f7ff ff41 	bl	80016bc <LL_DMA_SetDataLength>
        LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <_ZN7console6Driver12transferDMA_Ev+0x68>)
 800183e:	f7ff ff1b 	bl	8001678 <LL_DMA_EnableChannel>
        txIndex_ = txFirst_;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001848:	3320      	adds	r3, #32
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001852:	3328      	adds	r3, #40	; 0x28
 8001854:	601a      	str	r2, [r3, #0]
	}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000

08001864 <_ZN7console6Driver4initEv>:
#include <console/controller.h>
#include <console/driver.h>
#include <console/hal.h>

void console::Driver::init()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    console::_HAL::init();
 800186c:	f000 fe22 	bl	80024b4 <_ZN7console4_HAL4initEv>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZN7console6Driver14ReceiveHeader_Eh>:

void console::Driver::ReceiveHeader_(uint8_t data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
    if (data == HEADER_INDICATOR) rxState_ = &Driver::ReceiveLength_;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2bfe      	cmp	r3, #254	; 0xfe
 8001888:	d105      	bne.n	8001896 <_ZN7console6Driver14ReceiveHeader_Eh+0x1e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_ZN7console6Driver14ReceiveHeader_Eh+0x2c>)
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	080018a9 	.word	0x080018a9

080018a8 <_ZN7console6Driver14ReceiveLength_Eh>:

void console::Driver::ReceiveLength_(uint8_t data)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
    rxLength_ = data;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    if (rxLength_ < MAX_PACKET_LENGTH)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80018c2:	2bf9      	cmp	r3, #249	; 0xf9
 80018c4:	d816      	bhi.n	80018f4 <_ZN7console6Driver14ReceiveLength_Eh+0x4c>
    {
        rxIndex_ = 2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
        rxType_ = 0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        checksum_ = HEADER_INDICATOR + rxLength_;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80018dc:	3b02      	subs	r3, #2
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
        rxState_ = &Driver::ReceiveType_;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <_ZN7console6Driver14ReceiveLength_Eh+0x64>)
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else rxState_ = &Driver::ReceiveHeader_;
}
 80018f2:	e005      	b.n	8001900 <_ZN7console6Driver14ReceiveLength_Eh+0x58>
    else rxState_ = &Driver::ReceiveHeader_;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <_ZN7console6Driver14ReceiveLength_Eh+0x68>)
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	08001915 	.word	0x08001915
 8001910:	08001879 	.word	0x08001879

08001914 <_ZN7console6Driver12ReceiveType_Eh>:

void console::Driver::ReceiveType_(uint8_t data)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
    checksum_ += data;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	4413      	add	r3, r2
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
    rxType_ <<= 8;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    rxType_+= data;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    if (--rxIndex_ == 0)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800195c:	3b01      	subs	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d011      	beq.n	800199e <_ZN7console6Driver12ReceiveType_Eh+0x8a>
    {
        if (rxLength_ > 0) rxState_ = &Driver::ReceiveData_;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <_ZN7console6Driver12ReceiveType_Eh+0x7e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <_ZN7console6Driver12ReceiveType_Eh+0x98>)
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
        else rxState_ = &Driver::ReceiveChecksum_;
    }
}
 8001990:	e005      	b.n	800199e <_ZN7console6Driver12ReceiveType_Eh+0x8a>
        else rxState_ = &Driver::ReceiveChecksum_;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <_ZN7console6Driver12ReceiveType_Eh+0x9c>)
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	080019b5 	.word	0x080019b5
 80019b0:	08001a1d 	.word	0x08001a1d

080019b4 <_ZN7console6Driver12ReceiveData_Eh>:

void console::Driver::ReceiveData_(uint8_t data)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
    checksum_ += data;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	4413      	add	r3, r2
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
    rxBuffer_[rxIndex_++] = data;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	b2d1      	uxtb	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f882 115c 	strb.w	r1, [r2, #348]	; 0x15c
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    if (rxIndex_==rxLength_) rxState_ = &Driver::ReceiveChecksum_;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d105      	bne.n	8001a0a <_ZN7console6Driver12ReceiveData_Eh+0x56>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_ZN7console6Driver12ReceiveData_Eh+0x64>)
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	08001a1d 	.word	0x08001a1d

08001a1c <_ZN7console6Driver16ReceiveChecksum_Eh>:
void console::Driver::ReceiveChecksum_(uint8_t data)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
    if (data == checksum_) rxState_ = &Driver::ReceiveFooter_;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d106      	bne.n	8001a42 <_ZN7console6Driver16ReceiveChecksum_Eh+0x26>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <_ZN7console6Driver16ReceiveChecksum_Eh+0x40>)
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58
    else rxState_ = &Driver::ReceiveHeader_;
}
 8001a40:	e005      	b.n	8001a4e <_ZN7console6Driver16ReceiveChecksum_Eh+0x32>
    else rxState_ = &Driver::ReceiveHeader_;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <_ZN7console6Driver16ReceiveChecksum_Eh+0x44>)
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	08001a65 	.word	0x08001a65
 8001a60:	08001879 	.word	0x08001879

08001a64 <_ZN7console6Driver14ReceiveFooter_Eh>:

void console::Driver::ReceiveFooter_(uint8_t data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
    if (data == FOOTER_INDICATOR)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	2bfd      	cmp	r3, #253	; 0xfd
 8001a74:	d10b      	bne.n	8001a8e <_ZN7console6Driver14ReceiveFooter_Eh+0x2a>
    {
        Controller::instance().processCommand(rxType_, rxLength_, rxBuffer_);
 8001a76:	f7ff fe4f 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 215a 	ldrb.w	r2, [r3, #346]	; 0x15a
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3360      	adds	r3, #96	; 0x60
 8001a8a:	f7ff fcc5 	bl	8001418 <_ZN7console10Controller14processCommandEthPh>
    }
    rxState_ = &Driver::ReceiveHeader_;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <_ZN7console6Driver14ReceiveFooter_Eh+0x40>)
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08001879 	.word	0x08001879

08001aa8 <_ZN7console6Driver10sendPacketEthPKh>:

bool console::Driver::sendPacket(uint16_t type, uint8_t length, const uint8_t* data)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	727b      	strb	r3, [r7, #9]
    uint8_t checksum = 0u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	77fb      	strb	r3, [r7, #31]
    uint16_t avail = txAvailable();
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7ff fe84 	bl	80017cc <_ZN7console6Driver11txAvailableEv>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	82fb      	strh	r3, [r7, #22]
    if(avail < txMinAvail_) txMinAvail_ = avail;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001ace:	8afa      	ldrh	r2, [r7, #22]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d203      	bcs.n	8001adc <_ZN7console6Driver10sendPacketEthPKh+0x34>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8afa      	ldrh	r2, [r7, #22]
 8001ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    if (avail < length + 6)
 8001adc:	7a7b      	ldrb	r3, [r7, #9]
 8001ade:	1d5a      	adds	r2, r3, #5
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	db01      	blt.n	8001aea <_ZN7console6Driver10sendPacketEthPKh+0x42>
	{
//    	Error_Handler();
    	return false;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e0bc      	b.n	8001c64 <_ZN7console6Driver10sendPacketEthPKh+0x1bc>
	}
    (*txIndex_) = HEADER_INDICATOR; txIndex_++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001af0:	3328      	adds	r3, #40	; 0x28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	22fe      	movs	r2, #254	; 0xfe
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001afe:	3328      	adds	r3, #40	; 0x28
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b0a:	3328      	adds	r3, #40	; 0x28
 8001b0c:	601a      	str	r2, [r3, #0]
    checksum += (uint8_t) HEADER_INDICATOR;
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	3b02      	subs	r3, #2
 8001b12:	77fb      	strb	r3, [r7, #31]
    (*txIndex_) = length; txIndex_++;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b1a:	3328      	adds	r3, #40	; 0x28
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	7a7a      	ldrb	r2, [r7, #9]
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b28:	3328      	adds	r3, #40	; 0x28
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b34:	3328      	adds	r3, #40	; 0x28
 8001b36:	601a      	str	r2, [r3, #0]
    checksum += length;
 8001b38:	7ffa      	ldrb	r2, [r7, #31]
 8001b3a:	7a7b      	ldrb	r3, [r7, #9]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	77fb      	strb	r3, [r7, #31]
    (*txIndex_) = (type >> 8) & 0xFF; txIndex_++;
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b4c:	3328      	adds	r3, #40	; 0x28
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b5a:	3328      	adds	r3, #40	; 0x28
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b66:	3328      	adds	r3, #40	; 0x28
 8001b68:	601a      	str	r2, [r3, #0]
    checksum += (uint8_t) ((type >> 8) & 0xFF);
 8001b6a:	897b      	ldrh	r3, [r7, #10]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	4413      	add	r3, r2
 8001b76:	77fb      	strb	r3, [r7, #31]
    (*txIndex_) = type & 0xFF; txIndex_++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b7e:	3328      	adds	r3, #40	; 0x28
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	897a      	ldrh	r2, [r7, #10]
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b8e:	3328      	adds	r3, #40	; 0x28
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001b9a:	3328      	adds	r3, #40	; 0x28
 8001b9c:	601a      	str	r2, [r3, #0]
    checksum += (uint8_t) (type & 0xFF);
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	77fb      	strb	r3, [r7, #31]

    for (int i =0;i < length;i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	7a7b      	ldrb	r3, [r7, #9]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	da1f      	bge.n	8001bf4 <_ZN7console6Driver10sendPacketEthPKh+0x14c>
    {
    	(*txIndex_) = data[i]; txIndex_++;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	441a      	add	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001bc0:	3328      	adds	r3, #40	; 0x28
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001bce:	3328      	adds	r3, #40	; 0x28
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001bda:	3328      	adds	r3, #40	; 0x28
 8001bdc:	601a      	str	r2, [r3, #0]
        checksum += data[i];
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
 8001be8:	4413      	add	r3, r2
 8001bea:	77fb      	strb	r3, [r7, #31]
    for (int i =0;i < length;i++)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e7db      	b.n	8001bac <_ZN7console6Driver10sendPacketEthPKh+0x104>
    }
    (*txIndex_) = checksum; txIndex_++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	7ffa      	ldrb	r2, [r7, #31]
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c08:	3328      	adds	r3, #40	; 0x28
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c14:	3328      	adds	r3, #40	; 0x28
 8001c16:	601a      	str	r2, [r3, #0]
    (*txIndex_) = FOOTER_INDICATOR; txIndex_++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c1e:	3328      	adds	r3, #40	; 0x28
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	22fd      	movs	r2, #253	; 0xfd
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c2c:	3328      	adds	r3, #40	; 0x28
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c38:	3328      	adds	r3, #40	; 0x28
 8001c3a:	601a      	str	r2, [r3, #0]

    if(!sending_)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c42:	332c      	adds	r3, #44	; 0x2c
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <_ZN7console6Driver10sendPacketEthPKh+0x1ba>
    {
    	sending_ = true;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c56:	332c      	adds	r3, #44	; 0x2c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    	transferDMA_();
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fdcb 	bl	80017f8 <_ZN7console6Driver12transferDMA_Ev>
    }
    return true;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN7console6Driver12sendHandler_Ev>:

M_EVENT_HANDLER(console::Driver,send)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	if(txIndex_ == txFirst_){sending_ = false; return;}
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c7a:	3328      	adds	r3, #40	; 0x28
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c84:	3320      	adds	r3, #32
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d106      	bne.n	8001c9a <_ZN7console6Driver12sendHandler_Ev+0x2e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8001c92:	332c      	adds	r3, #44	; 0x2c
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e002      	b.n	8001ca0 <_ZN7console6Driver12sendHandler_Ev+0x34>
	transferDMA_();
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fdac 	bl	80017f8 <_ZN7console6Driver12transferDMA_Ev>
}
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZN7console6Driver15receiveHandler_ERKh>:

M_EVENT_HANDLER(console::Driver, receive, uint8_t)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
	(this->*(rxState_))(event);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	105b      	asrs	r3, r3, #1
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1898      	adds	r0, r3, r2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <_ZN7console6Driver15receiveHandler_ERKh+0x3a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	105b      	asrs	r3, r3, #1
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e001      	b.n	8001ce4 <_ZN7console6Driver15receiveHandler_ERKh+0x3e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4798      	blx	r3
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LL_DMA_DisableChannel>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <LL_DMA_DisableChannel+0x40>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <LL_DMA_DisableChannel+0x40>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	440a      	add	r2, r1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	440a      	add	r2, r1
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	08009430 	.word	0x08009430

08001d38 <LL_DMA_GetDataTransferDirection>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <LL_DMA_GetDataTransferDirection+0x30>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	681a      	ldr	r2, [r3, #0]
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 8001d56:	f244 0310 	movw	r3, #16400	; 0x4010
 8001d5a:	4013      	ands	r3, r2
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	08009430 	.word	0x08009430

08001d6c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d114      	bne.n	8001dae <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <LL_DMA_ConfigAddresses+0x78>)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4413      	add	r3, r2
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <LL_DMA_ConfigAddresses+0x78>)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 8001dac:	e013      	b.n	8001dd6 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 8001dae:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <LL_DMA_ConfigAddresses+0x78>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4413      	add	r3, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <LL_DMA_ConfigAddresses+0x78>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	60d3      	str	r3, [r2, #12]
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	08009430 	.word	0x08009430

08001de8 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d101      	bne.n	8001e00 <LL_DMA_IsActiveFlag_TC1+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d101      	bne.n	8001e26 <LL_DMA_IsActiveFlag_TE1+0x18>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_DMA_IsActiveFlag_TE1+0x1a>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	605a      	str	r2, [r3, #4]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	605a      	str	r2, [r3, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <LL_DMA_EnableIT_TC+0x40>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <LL_DMA_EnableIT_TC+0x40>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	440a      	add	r2, r1
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	440a      	add	r2, r1
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	08009430 	.word	0x08009430

08001eac <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <LL_DMA_EnableIT_TE+0x40>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <LL_DMA_EnableIT_TE+0x40>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	440a      	add	r2, r1
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	440a      	add	r2, r1
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	08009430 	.word	0x08009430

08001ef0 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d101      	bne.n	8001f08 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d101      	bne.n	8001f2e <LL_USART_IsActiveFlag_TC+0x18>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_USART_IsActiveFlag_TC+0x1a>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d101      	bne.n	8001f54 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d101      	bne.n	8001ffa <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3328      	adds	r3, #40	; 0x28
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e002      	b.n	8002046 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3324      	adds	r3, #36	; 0x24
 8002044:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	b2db      	uxtb	r3, r3
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <_ZN4core10EventQueueD1Ev>:
{

class EventQueue: public AbstractEventQueue
{
public:
	virtual ~EventQueue(){}
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <_ZN4core10EventQueueD1Ev+0x1c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	08009440 	.word	0x08009440

08002090 <_ZN4core10EventQueueD0Ev>:
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ffe9 	bl	8002070 <_ZN4core10EventQueueD1Ev>
 800209e:	f240 511c 	movw	r1, #1308	; 0x51c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f004 fdc2 	bl	8006c2c <_ZdlPvj>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_ZN4core10EventQueue4postEh>:
            e->execute(this);
        }
		return true;
	}

    inline void post(uint8_t index)
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
    {
        uint16_t avail = size_ + outPtr_ - inPtr_;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 80020ca:	441a      	add	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
        if (avail > size_) avail -= size_;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80020dc:	89fa      	ldrh	r2, [r7, #14]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d905      	bls.n	80020ee <_ZN4core10EventQueue4postEh+0x3c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	81fb      	strh	r3, [r7, #14]
#ifndef RELEASE
        if (avail < minimumAvail_) minimumAvail_ = avail;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8b3 3518 	ldrh.w	r3, [r3, #1304]	; 0x518
 80020f4:	89fa      	ldrh	r2, [r7, #14]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d203      	bcs.n	8002102 <_ZN4core10EventQueue4postEh+0x50>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	89fa      	ldrh	r2, [r7, #14]
 80020fe:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
        if (avail < 2) Error_Handler();
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d801      	bhi.n	800210c <_ZN4core10EventQueue4postEh+0x5a>
 8002108:	f002 fb04 	bl	8004714 <Error_Handler>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
#else
        if (avail < 2) return;
#endif
        DISABLE_INTERRUPT;
        push_(index);
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8f1 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
  __ASM volatile ("cpsie i" : : : "memory");
 800211a:	b662      	cpsie	i
}
 800211c:	bf00      	nop
        ENABLE_INTERRUPT;
    }
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_ZN4core10EventQueue9pushFixedEhPhh>:

    inline void pushFixed(uint8_t index, uint8_t* data, uint8_t size) override
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	461a      	mov	r2, r3
 8002132:	460b      	mov	r3, r1
 8002134:	72fb      	strb	r3, [r7, #11]
 8002136:	4613      	mov	r3, r2
 8002138:	72bb      	strb	r3, [r7, #10]
    {
        uint16_t avail = size_ + outPtr_ - inPtr_;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	82fb      	strh	r3, [r7, #22]
        if (avail > size_) avail -= size_;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002158:	8afa      	ldrh	r2, [r7, #22]
 800215a:	429a      	cmp	r2, r3
 800215c:	d905      	bls.n	800216a <_ZN4core10EventQueue9pushFixedEhPhh+0x44>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002164:	8afa      	ldrh	r2, [r7, #22]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	82fb      	strh	r3, [r7, #22]
#ifndef RELEASE
        if (avail < minimumAvail_) minimumAvail_ = avail;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f8b3 3518 	ldrh.w	r3, [r3, #1304]	; 0x518
 8002170:	8afa      	ldrh	r2, [r7, #22]
 8002172:	429a      	cmp	r2, r3
 8002174:	d203      	bcs.n	800217e <_ZN4core10EventQueue9pushFixedEhPhh+0x58>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8afa      	ldrh	r2, [r7, #22]
 800217a:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
        if (avail < size+2) Error_Handler();
 800217e:	7abb      	ldrb	r3, [r7, #10]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	429a      	cmp	r2, r3
 8002186:	db01      	blt.n	800218c <_ZN4core10EventQueue9pushFixedEhPhh+0x66>
 8002188:	f002 fac4 	bl	8004714 <Error_Handler>
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
#else
        if (avail < size+2) return;
#endif
        DISABLE_INTERRUPT;
        push_(index);
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	4619      	mov	r1, r3
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f8b1 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
        for (int i=0;i<size;i++)
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	7abb      	ldrb	r3, [r7, #10]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	da0b      	bge.n	80021be <_ZN4core10EventQueue9pushFixedEhPhh+0x98>
        {
            push_(data[i]);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f8a3 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
        for (int i=0;i<size;i++)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3301      	adds	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e7ef      	b.n	800219e <_ZN4core10EventQueue9pushFixedEhPhh+0x78>
  __ASM volatile ("cpsie i" : : : "memory");
 80021be:	b662      	cpsie	i
}
 80021c0:	bf00      	nop
        }
        ENABLE_INTERRUPT;
    }
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_ZN4core10EventQueue8popFixedEPhh>:

    inline void popFixed(uint8_t* data, uint8_t size) override
 80021ca:	b590      	push	{r4, r7, lr}
 80021cc:	b087      	sub	sp, #28
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71fb      	strb	r3, [r7, #7]
    {
        for (int i=0;i<size;i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	da0b      	bge.n	80021fc <_ZN4core10EventQueue8popFixedEPhh+0x32>
        {
            data[i] = pop_();
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	18d4      	adds	r4, r2, r3
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f8ac 	bl	8002348 <_ZN4core10EventQueue4pop_Ev>
 80021f0:	4603      	mov	r3, r0
 80021f2:	7023      	strb	r3, [r4, #0]
        for (int i=0;i<size;i++)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e7ef      	b.n	80021dc <_ZN4core10EventQueue8popFixedEPhh+0x12>
        }
    }
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}

08002204 <_ZN4core10EventQueue10pushBufferEhPhh>:

    inline void pushBuffer(uint8_t index, uint8_t* data, uint8_t size) override
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	461a      	mov	r2, r3
 8002210:	460b      	mov	r3, r1
 8002212:	72fb      	strb	r3, [r7, #11]
 8002214:	4613      	mov	r3, r2
 8002216:	72bb      	strb	r3, [r7, #10]
    {
        uint16_t avail = size_ + outPtr_ - inPtr_;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
 8002224:	441a      	add	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	82fb      	strh	r3, [r7, #22]
        if (avail > size_) avail -= size_;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002236:	8afa      	ldrh	r2, [r7, #22]
 8002238:	429a      	cmp	r2, r3
 800223a:	d905      	bls.n	8002248 <_ZN4core10EventQueue10pushBufferEhPhh+0x44>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8002242:	8afa      	ldrh	r2, [r7, #22]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	82fb      	strh	r3, [r7, #22]
#ifndef RELEASE
        if (avail < minimumAvail_) minimumAvail_ = avail;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8b3 3518 	ldrh.w	r3, [r3, #1304]	; 0x518
 800224e:	8afa      	ldrh	r2, [r7, #22]
 8002250:	429a      	cmp	r2, r3
 8002252:	d203      	bcs.n	800225c <_ZN4core10EventQueue10pushBufferEhPhh+0x58>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8afa      	ldrh	r2, [r7, #22]
 8002258:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
        if (avail < size+3) Error_Handler();
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	1c9a      	adds	r2, r3, #2
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	429a      	cmp	r2, r3
 8002264:	db01      	blt.n	800226a <_ZN4core10EventQueue10pushBufferEhPhh+0x66>
 8002266:	f002 fa55 	bl	8004714 <Error_Handler>
  __ASM volatile ("cpsid i" : : : "memory");
 800226a:	b672      	cpsid	i
}
 800226c:	bf00      	nop
#else
        if (avail < size+3) return;
#endif

        DISABLE_INTERRUPT;
        push_(index);
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	4619      	mov	r1, r3
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f842 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
        push_(size);
 8002278:	7abb      	ldrb	r3, [r7, #10]
 800227a:	4619      	mov	r1, r3
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f83d 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
        for (int i=0;i<size;i++)
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	7abb      	ldrb	r3, [r7, #10]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	da0b      	bge.n	80022a6 <_ZN4core10EventQueue10pushBufferEhPhh+0xa2>
        {
            push_(data[i]);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f82f 	bl	80022fc <_ZN4core10EventQueue5push_Eh>
        for (int i=0;i<size;i++)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	3301      	adds	r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e7ef      	b.n	8002286 <_ZN4core10EventQueue10pushBufferEhPhh+0x82>
  __ASM volatile ("cpsie i" : : : "memory");
 80022a6:	b662      	cpsie	i
}
 80022a8:	bf00      	nop
        }
        ENABLE_INTERRUPT;
    }
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN4core10EventQueue9popBufferEPhRh>:

    inline void popBuffer(uint8_t* data, uint8_t& size) override
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
    {
        size = pop_();
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f842 	bl	8002348 <_ZN4core10EventQueue4pop_Ev>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	701a      	strb	r2, [r3, #0]
        for (int i=0;i<size;i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4293      	cmp	r3, r2
 80022da:	da0b      	bge.n	80022f4 <_ZN4core10EventQueue9popBufferEPhRh+0x42>
        {
            data[i] = pop_();
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	18d4      	adds	r4, r2, r3
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f830 	bl	8002348 <_ZN4core10EventQueue4pop_Ev>
 80022e8:	4603      	mov	r3, r0
 80022ea:	7023      	strb	r3, [r4, #0]
        for (int i=0;i<size;i++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e7ed      	b.n	80022d0 <_ZN4core10EventQueue9popBufferEPhRh+0x1e>
        }
    }
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <_ZN4core10EventQueue5push_Eh>:

private:
    inline void push_(uint8_t val)
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
    {
        *(inPtr_) = val;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	701a      	strb	r2, [r3, #0]
        inPtr_++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (inPtr_ == last_) inPtr_ = first_;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800232c:	429a      	cmp	r2, r3
 800232e:	d105      	bne.n	800233c <_ZN4core10EventQueue5push_Eh+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    }
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_ZN4core10EventQueue4pop_Ev>:

    inline uint8_t pop_()
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    {
		uint8_t ret = *(outPtr_);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	73fb      	strb	r3, [r7, #15]
		outPtr_++;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		if (outPtr_ == last_) outPtr_ = first_;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002374:	429a      	cmp	r2, r3
 8002376:	d105      	bne.n	8002384 <_ZN4core10EventQueue4pop_Ev+0x3c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		return ret;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
    }
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <_ZN4core6EngineD1Ev>:
class Task;

class Engine: public Event
{
public:
    ~Engine(){}
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <_ZN4core6EngineD1Ev+0x2c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe62 	bl	8002070 <_ZN4core10EventQueueD1Ev>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fc36 	bl	8000c20 <_ZN4core5EventD1Ev>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08009460 	.word	0x08009460

080023c4 <_ZN4core6EngineD0Ev>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe1 	bl	8002394 <_ZN4core6EngineD1Ev>
 80023d2:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f004 fc28 	bl	8006c2c <_ZdlPvj>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_ZN4core6Engine6eventsEv>:
    void run();
    inline void tick(); /*must be called in timer interrupt or SysTick interrupt, 1ms usually*/
    inline uint64_t tickCount(){return tickCount_;}
    void delay(uint32_t t); //t in ms, WARNING: this function is blocking, use in some limited context only
    EventQueue& events(){return events_;}
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3308      	adds	r3, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <__tcf_0>:
    inline uint16_t checkNumOfEvent(){return events_.poolSize_ - 1;}
    static Engine& instance()
    {
        static Engine engine;
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <__tcf_0+0xc>)
 8002406:	f7ff ffc5 	bl	8002394 <_ZN4core6EngineD1Ev>
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20002268 	.word	0x20002268

08002410 <_ZN4core6Engine8instanceEv>:
    static Engine& instance()
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
        static Engine engine;
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <_ZN4core6Engine8instanceEv+0x50>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f3bf 8f5b 	dmb	ish
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <_ZN4core6Engine8instanceEv+0x48>
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <_ZN4core6Engine8instanceEv+0x50>)
 8002432:	f004 fbfd 	bl	8006c30 <__cxa_guard_acquire>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <_ZN4core6Engine8instanceEv+0x48>
 8002446:	4807      	ldr	r0, [pc, #28]	; (8002464 <_ZN4core6Engine8instanceEv+0x54>)
 8002448:	f000 fada 	bl	8002a00 <_ZN4core6EngineC1Ev>
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <_ZN4core6Engine8instanceEv+0x50>)
 800244e:	f004 fbfb 	bl	8006c48 <__cxa_guard_release>
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <_ZN4core6Engine8instanceEv+0x58>)
 8002454:	f005 fcb9 	bl	8007dca <atexit>
        return engine;
 8002458:	4b02      	ldr	r3, [pc, #8]	; (8002464 <_ZN4core6Engine8instanceEv+0x54>)
    }
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200027a8 	.word	0x200027a8
 8002464:	20002268 	.word	0x20002268
 8002468:	08002401 	.word	0x08002401

0800246c <_ZN4core10EmptyEvent4postEv>:
    void post()
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
        core::Engine::instance().events().post(index_);
 8002474:	f7ff ffcc 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ffb3 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	791b      	ldrb	r3, [r3, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7ff fe12 	bl	80020b2 <_ZN4core10EventQueue4postEh>
    }
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZN7console6Driver7txQueueEv>:
    uint8_t * txQueue(){return &txBufferDMA_[0];}
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80024a4:	331d      	adds	r3, #29
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <_ZN7console4_HAL4initEv>:
#include "dma.h"

console::Driver& console_ = console::Driver::instance();

void console::_HAL::init()
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af02      	add	r7, sp, #8
	MX_DMA_Init();
 80024ba:	f002 f88b 	bl	80045d4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80024be:	f002 fca1 	bl	8004e04 <MX_USART2_UART_Init>

	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1,
						 (uint32_t)Driver::instance().txQueue(),
 80024c2:	f7fe fd69 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ffe4 	bl	8002496 <_ZN7console6Driver7txQueueEv>
 80024ce:	4603      	mov	r3, r0
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1,
 80024d0:	461d      	mov	r5, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	4814      	ldr	r0, [pc, #80]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 80024d6:	f7ff fda7 	bl	8002028 <LL_USART_DMA_GetRegAddr>
 80024da:	4604      	mov	r4, r0
 80024dc:	2100      	movs	r1, #0
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <_ZN7console4_HAL4initEv+0x78>)
 80024e0:	f7ff fc2a 	bl	8001d38 <LL_DMA_GetDataTransferDirection>
 80024e4:	4603      	mov	r3, r0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4623      	mov	r3, r4
 80024ea:	462a      	mov	r2, r5
 80024ec:	2100      	movs	r1, #0
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <_ZN7console4_HAL4initEv+0x78>)
 80024f0:	f7ff fc3c 	bl	8001d6c <LL_DMA_ConfigAddresses>
						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT),
						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
//	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, TX_BUF_SIZE);

	/* Enable DMA transfer complete/error interrupts  */
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80024f4:	2100      	movs	r1, #0
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <_ZN7console4_HAL4initEv+0x78>)
 80024f8:	f7ff fcb6 	bl	8001e68 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 80024fc:	2100      	movs	r1, #0
 80024fe:	480b      	ldr	r0, [pc, #44]	; (800252c <_ZN7console4_HAL4initEv+0x78>)
 8002500:	f7ff fcd4 	bl	8001eac <LL_DMA_EnableIT_TE>

	/* Enable DMA TX Interrupt */
	LL_USART_EnableDMAReq_TX(USART2);
 8002504:	4808      	ldr	r0, [pc, #32]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 8002506:	f7ff fd7f 	bl	8002008 <LL_USART_EnableDMAReq_TX>

	LL_USART_EnableIT_RXNE(UART_PORT);
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 800250c:	f7ff fd29 	bl	8001f62 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(UART_PORT);
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 8002512:	f7ff fd36 	bl	8001f82 <LL_USART_EnableIT_ERROR>
	LL_USART_DisableIT_TC(UART_PORT);
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 8002518:	f7ff fd43 	bl	8001fa2 <LL_USART_DisableIT_TC>
	LL_USART_DisableIT_TXE(UART_PORT);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <_ZN7console4_HAL4initEv+0x74>)
 800251e:	f7ff fd50 	bl	8001fc2 <LL_USART_DisableIT_TXE_TXFNF>
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bdb0      	pop	{r4, r5, r7, pc}
 8002528:	40004400 	.word	0x40004400
 800252c:	40020000 	.word	0x40020000

08002530 <USART2_IRQHandler>:
{
	LL_USART_TransmitData8(UART_PORT, c);
}

UART_ISR_HANDLER()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(UART_PORT) && LL_USART_IsEnabledIT_RXNE(UART_PORT))
 8002536:	4820      	ldr	r0, [pc, #128]	; (80025b8 <USART2_IRQHandler+0x88>)
 8002538:	f7ff fcda 	bl	8001ef0 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <USART2_IRQHandler+0x22>
 8002542:	481d      	ldr	r0, [pc, #116]	; (80025b8 <USART2_IRQHandler+0x88>)
 8002544:	f7ff fd4d 	bl	8001fe2 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <USART2_IRQHandler+0x22>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <USART2_IRQHandler+0x24>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <USART2_IRQHandler+0x44>
	{
		uint8_t c = LL_USART_ReceiveData8(UART_PORT);
 8002558:	4817      	ldr	r0, [pc, #92]	; (80025b8 <USART2_IRQHandler+0x88>)
 800255a:	f7ff fd7b 	bl	8002054 <LL_USART_ReceiveData8>
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
		console_.receiveEvent.post(c);
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <USART2_IRQHandler+0x8c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3340      	adds	r3, #64	; 0x40
 8002568:	1dfa      	adds	r2, r7, #7
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f857 	bl	8002620 <_ZN4core10FixedEventIhE4postERKh>
	}
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
	{
		LL_USART_DisableIT_TXE(UART_PORT);
	}
}
 8002572:	e01c      	b.n	80025ae <USART2_IRQHandler+0x7e>
	else if(LL_USART_IsActiveFlag_TC(UART_PORT))
 8002574:	4810      	ldr	r0, [pc, #64]	; (80025b8 <USART2_IRQHandler+0x88>)
 8002576:	f7ff fcce 	bl	8001f16 <LL_USART_IsActiveFlag_TC>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <USART2_IRQHandler+0x62>
		LL_USART_DisableIT_TC(UART_PORT);
 800258a:	480b      	ldr	r0, [pc, #44]	; (80025b8 <USART2_IRQHandler+0x88>)
 800258c:	f7ff fd09 	bl	8001fa2 <LL_USART_DisableIT_TC>
}
 8002590:	e00d      	b.n	80025ae <USART2_IRQHandler+0x7e>
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
 8002592:	4809      	ldr	r0, [pc, #36]	; (80025b8 <USART2_IRQHandler+0x88>)
 8002594:	f7ff fcd2 	bl	8001f3c <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <USART2_IRQHandler+0x7e>
		LL_USART_DisableIT_TXE(UART_PORT);
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <USART2_IRQHandler+0x88>)
 80025aa:	f7ff fd0a 	bl	8001fc2 <LL_USART_DisableIT_TXE_TXFNF>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40004400 	.word	0x40004400
 80025bc:	200027ac 	.word	0x200027ac

080025c0 <DMA1_Channel1_IRQHandler>:

extern "C" void DMA1_Channel1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	if (LL_DMA_IsActiveFlag_TC1(DMA1))
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <DMA1_Channel1_IRQHandler+0x58>)
 80025c6:	f7ff fc0f 	bl	8001de8 <LL_DMA_IsActiveFlag_TC1>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <DMA1_Channel1_IRQHandler+0x36>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 80025da:	480f      	ldr	r0, [pc, #60]	; (8002618 <DMA1_Channel1_IRQHandler+0x58>)
 80025dc:	f7ff fc2a 	bl	8001e34 <LL_DMA_ClearFlag_TC1>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 80025e0:	2100      	movs	r1, #0
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <DMA1_Channel1_IRQHandler+0x58>)
 80025e4:	f7ff fb86 	bl	8001cf4 <LL_DMA_DisableChannel>
		console_.sendEvent.post();
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <DMA1_Channel1_IRQHandler+0x5c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	332c      	adds	r3, #44	; 0x2c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff3c 	bl	800246c <_ZN4core10EmptyEvent4postEv>
	else if (LL_DMA_IsActiveFlag_TE1(DMA1))
	{
		/* Call Error function */
		LL_DMA_ClearFlag_TE1(DMA1);
	}
}
 80025f4:	e00d      	b.n	8002612 <DMA1_Channel1_IRQHandler+0x52>
	else if (LL_DMA_IsActiveFlag_TE1(DMA1))
 80025f6:	4808      	ldr	r0, [pc, #32]	; (8002618 <DMA1_Channel1_IRQHandler+0x58>)
 80025f8:	f7ff fc09 	bl	8001e0e <LL_DMA_IsActiveFlag_TE1>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <DMA1_Channel1_IRQHandler+0x52>
		LL_DMA_ClearFlag_TE1(DMA1);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Channel1_IRQHandler+0x58>)
 800260e:	f7ff fc1e 	bl	8001e4e <LL_DMA_ClearFlag_TE1>
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40020000 	.word	0x40020000
 800261c:	200027ac 	.word	0x200027ac

08002620 <_ZN4core10FixedEventIhE4postERKh>:
    void post(const E& e)
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
        uint8_t* ptr = (uint8_t*)&e;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	60fb      	str	r3, [r7, #12]
        core::Engine::instance().events().pushFixed(index_,ptr,sizeof (E));
 800262e:	f7ff feef 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002632:	4603      	mov	r3, r0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fed6 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 800263a:	6803      	ldr	r3, [r0, #0]
 800263c:	681c      	ldr	r4, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7919      	ldrb	r1, [r3, #4]
 8002642:	2301      	movs	r3, #1
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	47a0      	blx	r4
    }
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <_Z41__static_initialization_and_destruction_0ii>:
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d109      	bne.n	8002674 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002666:	4293      	cmp	r3, r2
 8002668:	d104      	bne.n	8002674 <_Z41__static_initialization_and_destruction_0ii+0x24>
console::Driver& console_ = console::Driver::instance();
 800266a:	f7fe fc95 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 800266e:	4603      	mov	r3, r0
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200027ac 	.word	0x200027ac

08002680 <_GLOBAL__sub_I_console_>:
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
 8002684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff ffe1 	bl	8002650 <_Z41__static_initialization_and_destruction_0ii>
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZN7console10Controller4plotEhl>:

#define MAX_ONE (1<<7)
#define MAX_TWO (1<<15)

void console::Controller::plot(uint8_t channel, int32_t value)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	460b      	mov	r3, r1
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	72fb      	strb	r3, [r7, #11]
    if (channel>7) return;
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	2b07      	cmp	r3, #7
 80026a2:	d815      	bhi.n	80026d0 <_ZN7console10Controller4plotEhl+0x40>
    plotReg_ |= (1<<channel);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026aa:	b25a      	sxtb	r2, r3
 80026ac:	7afb      	ldrb	r3, [r7, #11]
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    plotValues_[channel] = value;
 80026c2:	7afa      	ldrb	r2, [r7, #11]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	320c      	adds	r2, #12
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80026ce:	e000      	b.n	80026d2 <_ZN7console10Controller4plotEhl+0x42>
    if (channel>7) return;
 80026d0:	bf00      	nop
}
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZN7console10Controller12plotHandler_Ev>:

M_TASK_HANDLER(console::Controller,plot)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08e      	sub	sp, #56	; 0x38
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    if (plotReg_ == 0) return;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80bf 	beq.w	800286e <_ZN7console10Controller12plotHandler_Ev+0x192>
    uint16_t plotMask = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t buf[34];
    uint8_t index = 2;
 80026f4:	2302      	movs	r3, #2
 80026f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    for (int i=0;i<8;i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	2b07      	cmp	r3, #7
 8002702:	f300 80a2 	bgt.w	800284a <_ZN7console10Controller12plotHandler_Ev+0x16e>
    {
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800270c:	461a      	mov	r2, r3
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	fa42 f303 	asr.w	r3, r2, r3
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8091 	beq.w	8002840 <_ZN7console10Controller12plotHandler_Ev+0x164>
        int32_t value = plotValues_[i];
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	320c      	adds	r2, #12
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (value < MAX_ONE && value > -MAX_ONE)
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b7f      	cmp	r3, #127	; 0x7f
 800272e:	dc1b      	bgt.n	8002768 <_ZN7console10Controller12plotHandler_Ev+0x8c>
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8002736:	db17      	blt.n	8002768 <_ZN7console10Controller12plotHandler_Ev+0x8c>
        {
        	plotMask |= (1 << (i*2));
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002748:	4313      	orrs	r3, r2
 800274a:	b21b      	sxth	r3, r3
 800274c:	86fb      	strh	r3, [r7, #54]	; 0x36
        	buf[index++] = (value & 0xFF);
 800274e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002760:	440b      	add	r3, r1
 8002762:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002766:	e06c      	b.n	8002842 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else if (value < MAX_TWO && value > -MAX_TWO)
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276e:	da28      	bge.n	80027c2 <_ZN7console10Controller12plotHandler_Ev+0xe6>
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002776:	dd24      	ble.n	80027c2 <_ZN7console10Controller12plotHandler_Ev+0xe6>
        {
        	plotMask |= (2 << (i*2));
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2202      	movs	r2, #2
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	b21a      	sxth	r2, r3
 8002784:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value >>8) & 0xFF);
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	121a      	asrs	r2, r3, #8
 8002792:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027a2:	440b      	add	r3, r1
 80027a4:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 80027a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 80027b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027ba:	440b      	add	r3, r1
 80027bc:	f803 2c30 	strb.w	r2, [r3, #-48]
 80027c0:	e03f      	b.n	8002842 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else
        {
        	plotMask |= (3 << (i*2));
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b21b      	sxth	r3, r3
 80027d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value>>24) & 0xFF);
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	0e1a      	lsrs	r2, r3, #24
 80027dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027ec:	440b      	add	r3, r1
 80027ee:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>16) & 0xFF);
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	141a      	asrs	r2, r3, #16
 80027f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002806:	440b      	add	r3, r1
 8002808:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>8) & 0xFF);
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	121a      	asrs	r2, r3, #8
 8002810:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002814:	1c59      	adds	r1, r3, #1
 8002816:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002820:	440b      	add	r3, r1
 8002822:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 8002826:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002838:	440b      	add	r3, r1
 800283a:	f803 2c30 	strb.w	r2, [r3, #-48]
 800283e:	e000      	b.n	8002842 <_ZN7console10Controller12plotHandler_Ev+0x166>
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 8002840:	bf00      	nop
    for (int i=0;i<8;i++)
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	3301      	adds	r3, #1
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
 8002848:	e759      	b.n	80026fe <_ZN7console10Controller12plotHandler_Ev+0x22>
        }
    }

    buf[0] = ((plotMask>>8) & 0xFF);
 800284a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	723b      	strb	r3, [r7, #8]
    buf[1] = (plotMask& 0xFF);
 8002854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002856:	b2db      	uxtb	r3, r3
 8002858:	727b      	strb	r3, [r7, #9]

    console::Driver::instance().sendPacket(PlotReceived,index,buf);
 800285a:	f7fe fb9d 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002866:	2104      	movs	r1, #4
 8002868:	f7ff f91e 	bl	8001aa8 <_ZN7console6Driver10sendPacketEthPKh>
 800286c:	e000      	b.n	8002870 <_ZN7console10Controller12plotHandler_Ev+0x194>
    if (plotReg_ == 0) return;
 800286e:	bf00      	nop
}
 8002870:	3738      	adds	r7, #56	; 0x38
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <_ZN4core5EventC1Eh>:
protected:
    virtual void execute(core::AbstractEventQueue* queue) = 0;
    Event(uint8_t index): index_(index){}
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
 8002884:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <_ZN4core5EventC1Eh+0x28>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	711a      	strb	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	080093ec 	.word	0x080093ec

080028a4 <_ZN4core18AbstractEventQueueC1Ev>:
class AbstractEventQueue
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <_ZN4core18AbstractEventQueueC1Ev+0x1c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	08009474 	.word	0x08009474

080028c4 <_ZN4core10EventQueueC1Ev>:
    EventQueue(){}
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffe8 	bl	80028a4 <_ZN4core18AbstractEventQueueC1Ev>
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <_ZN4core10EventQueueC1Ev+0x68>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	1d1a      	adds	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1d1a      	adds	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002916:	f8a3 2518 	strh.w	r2, [r3, #1304]	; 0x518
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	08009440 	.word	0x08009440

08002930 <_ZN4core10EventQueue4nextEv>:
	inline bool next()
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
		if (inPtr_ == outPtr_) return false;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002944:	429a      	cmp	r2, r3
 8002946:	d101      	bne.n	800294c <_ZN4core10EventQueue4nextEv+0x1c>
 8002948:	2300      	movs	r3, #0
 800294a:	e01a      	b.n	8002982 <_ZN4core10EventQueue4nextEv+0x52>
        uint8_t index = pop_();
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fcfb 	bl	8002348 <_ZN4core10EventQueue4pop_Ev>
 8002952:	4603      	mov	r3, r0
 8002954:	73fb      	strb	r3, [r7, #15]
        if (index < poolSize_)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	429a      	cmp	r2, r3
 8002960:	d20e      	bcs.n	8002980 <_ZN4core10EventQueue4nextEv+0x50>
            Event* e = events_[index];
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800296a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296e:	60bb      	str	r3, [r7, #8]
            e->execute(this);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3308      	adds	r3, #8
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4611      	mov	r1, r2
 800297c:	68b8      	ldr	r0, [r7, #8]
 800297e:	4798      	blx	r3
		return true;
 8002980:	2301      	movs	r3, #1
	}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>:
private:
    Event* events_[EVENT_POOL_SIZE];
    uint16_t minimumAvail_ = EVENT_QUEUE_SIZE;
    uint8_t poolSize_ = 0;

    uint8_t registerEvent_(Event* event)
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
    {
        events_[poolSize_] = event;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (poolSize_>= EVENT_POOL_SIZE)
        {
            /*TODO: warning here*/
        }
        return poolSize_++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	b2d1      	uxtb	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	f882 151a 	strb.w	r1, [r2, #1306]	; 0x51a
    }
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_ZN4core5EventC1Ev>:
#include "engine.h"
#include <core/system.h>
#include <core/event.h>
#include <console/log.h>

core::Event::Event()
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <_ZN4core5EventC1Ev+0x38>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
{
    index_ = core::Engine::instance().events().registerEvent_(this);
 80029d2:	f7ff fd1d 	bl	8002410 <_ZN4core6Engine8instanceEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fd04 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 80029de:	4603      	mov	r3, r0
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffd1 	bl	800298a <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	711a      	strb	r2, [r3, #4]
}
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	080093ec 	.word	0x080093ec

08002a00 <_ZN4core6EngineC1Ev>:

core::Engine::Engine(): Event(0)
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff33 	bl	8002878 <_ZN4core5EventC1Eh>
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <_ZN4core6EngineC1Ev+0x74>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff51 	bl	80028c4 <_ZN4core10EventQueueC1Ev>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 61a6 	add.w	r1, r3, #1328	; 0x530
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c1 2300 	strd	r2, r3, [r1]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 8002a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e9c1 2300 	strd	r2, r3, [r1]
{
    events_.registerEvent_(this);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff93 	bl	800298a <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
    systemInit();
 8002a64:	f000 f938 	bl	8002cd8 <_Z10systemInitv>
}
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	08009460 	.word	0x08009460

08002a78 <_ZN4core6Engine3runEv>:

void core::Engine::run()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    while (true)
    {
        if (events_.next()) continue;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3308      	adds	r3, #8
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff53 	bl	8002930 <_ZN4core10EventQueue4nextEv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <_ZN4core6Engine3runEv+0x1c>
        WAIT_FOR_INTERUPT;
 8002a90:	bf30      	wfi
 8002a92:	e7f5      	b.n	8002a80 <_ZN4core6Engine3runEv+0x8>
        if (events_.next()) continue;
 8002a94:	bf00      	nop
 8002a96:	e7f3      	b.n	8002a80 <_ZN4core6Engine3runEv+0x8>

08002a98 <_ZN4core6Engine13registerTask_EPNS_4TaskE>:
    }
}

void core::Engine::registerTask_(Task* task)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    task->next_ = tasks_;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	601a      	str	r2, [r3, #0]
    tasks_ = task;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZN4core6Engine10startTask_EPNS_4TaskE>:

void core::Engine::startTask_(Task* task)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
    {
        if (it == task)
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d116      	bne.n	8002b12 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x52>
        {
            if (prev == nullptr) tasks_ = it->next_;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x36>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
 8002af4:	e003      	b.n	8002afe <_ZN4core6Engine10startTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]
            task->next_ = activeTasks_;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 2528 	ldr.w	r2, [r3, #1320]	; 0x528
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	601a      	str	r2, [r3, #0]
            activeTasks_ = task;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
            break;
 8002b10:	e005      	b.n	8002b1e <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
        }
        prev = it;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	e7db      	b.n	8002ad6 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x16>
    }
    if (nextTick_ > task->nextTick_) nextTick_ = task->nextTick_;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002b2e:	4299      	cmp	r1, r3
 8002b30:	bf08      	it	eq
 8002b32:	4290      	cmpeq	r0, r2
 8002b34:	d207      	bcs.n	8002b46 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x86>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 8002b42:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <_ZN4core6Engine9stopTask_EPNS_4TaskE>:

void core::Engine::stopTask_(Task* task)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d021      	beq.n	8002bb2 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
    {
        if (it == task)
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d117      	bne.n	8002ba6 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x54>
        {
            if (prev == nullptr) activeTasks_ = it->next_;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x36>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
 8002b86:	e003      	b.n	8002b90 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	601a      	str	r2, [r3, #0]
            task->next_ = tasks_;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
            tasks_ = task;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
            break;
 8002ba2:	bf00      	nop
        }
        prev = it;
    }
}
 8002ba4:	e005      	b.n	8002bb2 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
        prev = it;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	e7da      	b.n	8002b68 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x16>
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_ZN4core6Engine7executeEPNS_18AbstractEventQueueE>:
    auto timeout = tickCount_ + t;
    while (tickCount_ < timeout){NO_OPERATION;}
}

void core::Engine::execute(core::AbstractEventQueue* queue)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
    uint64_t min = LAST_TICK;
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    Task* it = activeTasks_;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8002bda:	60fb      	str	r3, [r7, #12]
    Task* next;
    while (it!=nullptr)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d027      	beq.n	8002c32 <_ZN4core6Engine7executeEPNS_18AbstractEventQueueE+0x74>
    {
        next = it->next_;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60bb      	str	r3, [r7, #8]
        if (tickCount_ >= it->nextTick_) it->run_();
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8002bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bf8:	4299      	cmp	r1, r3
 8002bfa:	bf08      	it	eq
 8002bfc:	4290      	cmpeq	r0, r2
 8002bfe:	bf2c      	ite	cs
 8002c00:	2301      	movcs	r3, #1
 8002c02:	2300      	movcc	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <_ZN4core6Engine7executeEPNS_18AbstractEventQueueE+0x52>
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f8d3 	bl	8002db6 <_ZN4core4Task4run_Ev>
        if (min > it->nextTick_) min = it->nextTick_;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c1a:	4299      	cmp	r1, r3
 8002c1c:	bf08      	it	eq
 8002c1e:	4290      	cmpeq	r0, r2
 8002c20:	d204      	bcs.n	8002c2c <_ZN4core6Engine7executeEPNS_18AbstractEventQueueE+0x6e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
        it = next;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60fb      	str	r3, [r7, #12]
    while (it!=nullptr)
 8002c30:	e7d4      	b.n	8002bdc <_ZN4core6Engine7executeEPNS_18AbstractEventQueueE+0x1e>
    }
    nextTick_ = min;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f503 61a7 	add.w	r1, r3, #1336	; 0x538
 8002c38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <LL_SYSTICK_EnableIT+0x1c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <LL_SYSTICK_EnableIT+0x1c>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <_ZN4core6Engine4tickEv>:
private:
    friend class Task;
};

inline void core::Engine::tick()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    if (++tickCount_ >= nextTick_) events_.post(index_);
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8002c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c7a:	1c42      	adds	r2, r0, #1
 8002c7c:	f141 0300 	adc.w	r3, r1, #0
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8002c86:	e9c1 2300 	strd	r2, r3, [r1]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	f501 61a7 	add.w	r1, r1, #1336	; 0x538
 8002c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c94:	428b      	cmp	r3, r1
 8002c96:	bf08      	it	eq
 8002c98:	4282      	cmpeq	r2, r0
 8002c9a:	bf2c      	ite	cs
 8002c9c:	2301      	movcs	r3, #1
 8002c9e:	2300      	movcc	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <_ZN4core6Engine4tickEv+0x50>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 0208 	add.w	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	791b      	ldrb	r3, [r3, #4]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f7ff f9fd 	bl	80020b2 <_ZN4core10EventQueue4postEh>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <SysTick_Handler>:
#include "gpio.h"

extern "C" void SystemClock_Config(void);

extern "C" void SysTick_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002cc4:	f002 f9ce 	bl	8005064 <HAL_IncTick>
	core::Engine::instance().tick();
 8002cc8:	f7ff fba2 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffca 	bl	8002c68 <_ZN4core6Engine4tickEv>
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_Z10systemInitv>:

void systemInit()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	HAL_Init();
 8002cdc:	f002 f96f 	bl	8004fbe <HAL_Init>
	SystemClock_Config();
 8002ce0:	f001 fcb4 	bl	800464c <SystemClock_Config>
	MX_GPIO_Init();
 8002ce4:	f001 fca8 	bl	8004638 <MX_GPIO_Init>
	LL_SYSTICK_EnableIT();
 8002ce8:	f7ff ffae 	bl	8002c48 <LL_SYSTICK_EnableIT>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>:
#include <core/task.h>
#include <core/engine.h>

core::Task::Task(Component* component, Handler handler): component_(component), handler_(handler)
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4639      	mov	r1, r7
 8002cfc:	e881 000c 	stmia.w	r1, {r2, r3}
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	615a      	str	r2, [r3, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3318      	adds	r3, #24
 8002d16:	463a      	mov	r2, r7
 8002d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d1c:	e883 0003 	stmia.w	r3, {r0, r1}
{
    core::Engine::instance().registerTask_(this);
 8002d20:	f7ff fb76 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002d24:	4603      	mov	r3, r0
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff feb5 	bl	8002a98 <_ZN4core6Engine13registerTask_EPNS_4TaskE>
}
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN4core4Task5startEml>:

void core::Task::start(uint32_t interval, int32_t loop)
{
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
    core::Engine& engine = core::Engine::instance();
 8002d44:	f7ff fb64 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002d48:	6178      	str	r0, [r7, #20]
    this->interval_ = interval;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	605a      	str	r2, [r3, #4]
    this->nextTick_ = engine.tickCount_ + interval;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8002d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	1884      	adds	r4, r0, r2
 8002d64:	eb41 0503 	adc.w	r5, r1, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	e9c3 4502 	strd	r4, r5, [r3, #8]
    this->loop_ = loop;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
    engine.startTask_(this);
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff fea2 	bl	8002ac0 <_ZN4core6Engine10startTask_EPNS_4TaskE>
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdb0      	pop	{r4, r5, r7, pc}

08002d84 <_ZN4core4Task4stopEv>:

void core::Task::stop()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	loop_ = 0;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
    core::Engine::instance().stopTask_(this);
 8002d92:	f7ff fb3d 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fed9 	bl	8002b52 <_ZN4core6Engine9stopTask_EPNS_4TaskE>
    this->nextTick_ = LAST_TICK - 1;
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	f06f 0201 	mvn.w	r2, #1
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZN4core4Task4run_Ev>:

void core::Task::run_()
{
 8002db6:	b5b0      	push	{r4, r5, r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    if (--loop_ == 0)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	611a      	str	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <_ZN4core4Task4run_Ev+0x42>
    {
        core::Engine::instance().stopTask_(this);
 8002dda:	f7ff fb19 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8002dde:	4603      	mov	r3, r0
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff feb5 	bl	8002b52 <_ZN4core6Engine9stopTask_EPNS_4TaskE>
        this->nextTick_ = LAST_TICK - 1;
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	f06f 0201 	mvn.w	r2, #1
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002df6:	e015      	b.n	8002e24 <_ZN4core4Task4run_Ev+0x6e>
    }
    else
    {
        nextTick_ += interval_;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	1884      	adds	r4, r0, r2
 8002e0a:	eb41 0503 	adc.w	r5, r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	e9c3 4502 	strd	r4, r5, [r3, #8]
        if (loop_ < 0) loop_ = -1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da03      	bge.n	8002e24 <_ZN4core4Task4run_Ev+0x6e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e22:	611a      	str	r2, [r3, #16]
    }

    (component_->*handler_)();
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	69d2      	ldr	r2, [r2, #28]
 8002e2c:	1052      	asrs	r2, r2, #1
 8002e2e:	1899      	adds	r1, r3, r2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <_ZN4core4Task4run_Ev+0x8c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	e00a      	b.n	8002e58 <_ZN4core4Task4run_Ev+0xa2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	69d2      	ldr	r2, [r2, #28]
 8002e4a:	1052      	asrs	r2, r2, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6992      	ldr	r2, [r2, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4798      	blx	r3
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdb0      	pop	{r4, r5, r7, pc}

08002e64 <_ZN3osc4Data5resetEt>:
    uint16_t lastVal;
    uint8_t buffer[1200];
    uint16_t index;
    uint16_t countIndex;

    void reset(uint16_t v)
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
    {
        countIndex = 0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
        buffer[0] = 1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	711a      	strb	r2, [r3, #4]
        buffer[1] = ((v>>8) & 0xFF);
 8002e7e:	887b      	ldrh	r3, [r7, #2]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	715a      	strb	r2, [r3, #5]
        buffer[2] = (v & 0xFF);
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	719a      	strb	r2, [r3, #6]
        index = 3;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
    }
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZN3osc4Data3addEt>:

    void add(uint16_t v)
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]
    {
        int16_t d = v - lastVal;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	81fb      	strh	r3, [r7, #14]
        if ((d > 127) || (d < -127) || (buffer[countIndex] > 80))
 8002ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec4:	dc0d      	bgt.n	8002ee2 <_ZN3osc4Data3addEt+0x3c>
 8002ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eca:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8002ece:	db08      	blt.n	8002ee2 <_ZN3osc4Data3addEt+0x3c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	791b      	ldrb	r3, [r3, #4]
 8002ede:	2b50      	cmp	r3, #80	; 0x50
 8002ee0:	d931      	bls.n	8002f46 <_ZN3osc4Data3addEt+0xa0>
        {
            countIndex = index;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            buffer[index++] = 1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	b291      	uxth	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	2201      	movs	r2, #1
 8002f06:	711a      	strb	r2, [r3, #4]
            buffer[index++] = ((v >> 8)& 0xFF);
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	b298      	uxth	r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	b291      	uxth	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	b2c2      	uxtb	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	440b      	add	r3, r1
 8002f26:	711a      	strb	r2, [r3, #4]
            buffer[index++] = (v & 0xFF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	b291      	uxth	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	440b      	add	r3, r1
 8002f42:	711a      	strb	r2, [r3, #4]
 8002f44:	e01a      	b.n	8002f7c <_ZN3osc4Data3addEt+0xd6>
        }
        else
        {
            buffer[countIndex]++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	441a      	add	r2, r3
 8002f50:	7912      	ldrb	r2, [r2, #4]
 8002f52:	3201      	adds	r2, #1
 8002f54:	b2d1      	uxtb	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	711a      	strb	r2, [r3, #4]
            buffer[index++] = d;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	b291      	uxth	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	440b      	add	r3, r1
 8002f78:	711a      	strb	r2, [r3, #4]
        }
    }
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_ZN3osc4Data5flushEv>:

    bool flush()
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
    {
        uint8_t count = buffer[index];
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
        if (console::Controller::instance().sendOSC(channel, count+1, countIndex, buffer+index+1))
 8002fa0:	f7fe fbba 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7819      	ldrb	r1, [r3, #0]
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2d8      	uxtb	r0, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 44b6 	ldrh.w	r4, [r3, #1206]	; 0x4b6
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f7fe f95c 	bl	8001288 <_ZN7console10Controller7sendOSCEhhtPKh>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d02c      	beq.n	8003030 <_ZN3osc4Data5flushEv+0xa8>
        {
            countIndex += count;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            index += count+2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
            if ((countIndex > 999) || (index > 1198))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8003008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800300c:	d206      	bcs.n	800301c <_ZN3osc4Data5flushEv+0x94>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8003014:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8003018:	4293      	cmp	r3, r2
 800301a:	d909      	bls.n	8003030 <_ZN3osc4Data5flushEv+0xa8>
            {
                index = 0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
                countIndex = 0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
                return true;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <_ZN3osc4Data5flushEv+0xaa>
            }
        }
        return false;
 8003030:	2300      	movs	r3, #0
    }
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bdb0      	pop	{r4, r5, r7, pc}

0800303a <_ZN3osc4Data12prepareFlushEv>:
    void prepareFlush()
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
    {
        index = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
        countIndex = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
    }
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_ZN3osc4Dual5idle_Ett>:
        (this->*state_)(v1, v2);
        c1_.lastVal = v1;
        c2_.lastVal = v2;
    }
private:
    void idle_(uint16_t, uint16_t){}
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]
 800306a:	4613      	mov	r3, r2
 800306c:	803b      	strh	r3, [r7, #0]
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <_ZN3osc4DualC1Eht>:
#include "dual.h"
#include <console/controller.h>

osc::Dual::Dual(uint8_t c1, uint16_t c2)
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
 8003088:	4613      	mov	r3, r2
 800308a:	803b      	strh	r3, [r7, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fe08 	bl	8000ca4 <_ZN4core9ComponentC1Ev>
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <_ZN3osc4DualC1Eht+0x98>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <_ZN3osc4DualC1Eht+0x9c>)
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ac:	819a      	strh	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	81da      	strh	r2, [r3, #14]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ba:	821a      	strh	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f603 1084 	addw	r0, r3, #2436	; 0x984
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <_ZN3osc4DualC1Eht+0xa0>)
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	cb0c      	ldmia	r3, {r2, r3}
 80030da:	f7fd fdf3 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f603 1098 	addw	r0, r3, #2456	; 0x998
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <_ZN3osc4DualC1Eht+0xa4>)
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	cb0c      	ldmia	r3, {r2, r3}
 80030f4:	f7fd fde6 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
{
    c1_.channel = c1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	749a      	strb	r2, [r3, #18]
    c2_.channel = c2;
 80030fe:	883b      	ldrh	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
}
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	0800948c 	.word	0x0800948c
 8003118:	08003125 	.word	0x08003125
 800311c:	08003375 	.word	0x08003375
 8003120:	080033b1 	.word	0x080033b1

08003124 <_ZN3osc4Dual13thresholding_Ett>:

void osc::Dual::thresholding_(uint16_t v1, uint16_t v2)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	803b      	strh	r3, [r7, #0]
    if (threshold_ > 0)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	dd0a      	ble.n	8003154 <_ZN3osc4Dual13thresholding_Ett+0x30>
    {
        total_ = 0;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
        state_ = &osc::Dual::probing_;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <_ZN3osc4Dual13thresholding_Ett+0xc4>)
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
        return;
 8003152:	e045      	b.n	80031e0 <_ZN3osc4Dual13thresholding_Ett+0xbc>
    }

    if (v1 < min_) min_ = v1;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	899b      	ldrh	r3, [r3, #12]
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	429a      	cmp	r2, r3
 800315c:	d202      	bcs.n	8003164 <_ZN3osc4Dual13thresholding_Ett+0x40>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	819a      	strh	r2, [r3, #12]
    if (v1 > max_) max_ = v1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	89db      	ldrh	r3, [r3, #14]
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	429a      	cmp	r2, r3
 800316c:	d902      	bls.n	8003174 <_ZN3osc4Dual13thresholding_Ett+0x50>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	81da      	strh	r2, [r3, #14]
    if (total_++ > 1000)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8b3 3982 	ldrh.w	r3, [r3, #2434]	; 0x982
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	b291      	uxth	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	f8a2 1982 	strh.w	r1, [r2, #2434]	; 0x982
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	bf8c      	ite	hi
 800318a:	2301      	movhi	r3, #1
 800318c:	2300      	movls	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d025      	beq.n	80031e0 <_ZN3osc4Dual13thresholding_Ett+0xbc>
    {
        threshold_ = (min_+max_)/2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	899b      	ldrh	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	89db      	ldrh	r3, [r3, #14]
 800319e:	4413      	add	r3, r2
 80031a0:	0fda      	lsrs	r2, r3, #31
 80031a2:	4413      	add	r3, r2
 80031a4:	105b      	asrs	r3, r3, #1
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	821a      	strh	r2, [r3, #16]
        min_ = 65535;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b2:	819a      	strh	r2, [r3, #12]
        max_ = 0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	81da      	strh	r2, [r3, #14]
        total_ = 0;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
        console::Controller::instance().printf("Auto detect threshold:%d", threshold_);
 80031c2:	f7fe faa9 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4907      	ldr	r1, [pc, #28]	; (80031ec <_ZN3osc4Dual13thresholding_Ett+0xc8>)
 80031d0:	f7fe f8aa 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
        state_ = &osc::Dual::probing_;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <_ZN3osc4Dual13thresholding_Ett+0xc4>)
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
    }
}
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	080031f1 	.word	0x080031f1
 80031ec:	080092c8 	.word	0x080092c8

080031f0 <_ZN3osc4Dual8probing_Ett>:

void osc::Dual::probing_(uint16_t v1, uint16_t v2)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	803b      	strh	r3, [r7, #0]
    if (++total_ > 1000)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b3 3982 	ldrh.w	r3, [r3, #2434]	; 0x982
 8003206:	3301      	adds	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 3982 	ldrh.w	r3, [r3, #2434]	; 0x982
 8003216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321a:	bf8c      	ite	hi
 800321c:	2301      	movhi	r3, #1
 800321e:	2300      	movls	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <_ZN3osc4Dual8probing_Ett+0x52>
    {
        total_ = 0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
        threshold_ = -1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003234:	821a      	strh	r2, [r3, #16]
        state_ = &osc::Dual::thresholding_;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <_ZN3osc4Dual8probing_Ett+0x88>)
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    }

    if ((c1_.lastVal < threshold_) && (v1 >= threshold_))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8a9b      	ldrh	r3, [r3, #20]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	da0b      	bge.n	800326a <_ZN3osc4Dual8probing_Ett+0x7a>
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800325a:	4293      	cmp	r3, r2
 800325c:	db05      	blt.n	800326a <_ZN3osc4Dual8probing_Ett+0x7a>
    {
        state_ = &osc::Dual::first_;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <_ZN3osc4Dual8probing_Ett+0x8c>)
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
    }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	08003125 	.word	0x08003125
 800327c:	08003281 	.word	0x08003281

08003280 <_ZN3osc4Dual6first_Ett>:

void osc::Dual::first_(uint16_t v1, uint16_t v2)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
 800328c:	4613      	mov	r3, r2
 800328e:	803b      	strh	r3, [r7, #0]
    c1_.reset(v1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3312      	adds	r3, #18
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fde3 	bl	8002e64 <_ZN3osc4Data5resetEt>
    c2_.reset(v2);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80032a4:	883a      	ldrh	r2, [r7, #0]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fddb 	bl	8002e64 <_ZN3osc4Data5resetEt>
    total_ = 1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
    state_ = &osc::Dual::adding_;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <_ZN3osc4Dual6first_Ett+0x4c>)
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	080032d1 	.word	0x080032d1

080032d0 <_ZN3osc4Dual7adding_Ett>:

void osc::Dual::adding_(uint16_t v1, uint16_t v2)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	803b      	strh	r3, [r7, #0]
    c1_.add(v1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3312      	adds	r3, #18
 80032e4:	887a      	ldrh	r2, [r7, #2]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fddc 	bl	8002ea6 <_ZN3osc4Data3addEt>
    c2_.add(v2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80032f4:	883a      	ldrh	r2, [r7, #0]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fdd4 	bl	8002ea6 <_ZN3osc4Data3addEt>

    total_++;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 3982 	ldrh.w	r3, [r3, #2434]	; 0x982
 8003304:	3301      	adds	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
    if ((total_ > 1000) || (c1_.index > 1199) || (c2_.index > 1199))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8b3 3982 	ldrh.w	r3, [r3, #2434]	; 0x982
 8003314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003318:	d80b      	bhi.n	8003332 <_ZN3osc4Dual7adding_Ett+0x62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8003320:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003324:	d205      	bcs.n	8003332 <_ZN3osc4Dual7adding_Ett+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8b3 397e 	ldrh.w	r3, [r3, #2430]	; 0x97e
 800332c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003330:	d31a      	bcc.n	8003368 <_ZN3osc4Dual7adding_Ett+0x98>
    {
        state_ = &osc::Dual::idle_;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <_ZN3osc4Dual7adding_Ett+0xa0>)
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
        total_ = 0;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f8a3 2982 	strh.w	r2, [r3, #2434]	; 0x982
        c1_.prepareFlush();
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3312      	adds	r3, #18
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fe75 	bl	800303a <_ZN3osc4Data12prepareFlushEv>
        c2_.prepareFlush();
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe6f 	bl	800303a <_ZN3osc4Data12prepareFlushEv>
        c1FlushEvent_.post();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f603 1384 	addw	r3, r3, #2436	; 0x984
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f882 	bl	800246c <_ZN4core10EmptyEvent4postEv>
    }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800305f 	.word	0x0800305f

08003374 <_ZN3osc4Dual8c1Flush_Ev>:

void osc::Dual::c1Flush_()
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    if (c1_.flush())
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3312      	adds	r3, #18
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fe01 	bl	8002f88 <_ZN3osc4Data5flushEv>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <_ZN3osc4Dual8c1Flush_Ev+0x26>
    {
        c2FlushEvent_.post();
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f86a 	bl	800246c <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c1FlushEvent_.post();
    }
}
 8003398:	e005      	b.n	80033a6 <_ZN3osc4Dual8c1Flush_Ev+0x32>
        c1FlushEvent_.post();
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f603 1384 	addw	r3, r3, #2436	; 0x984
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f863 	bl	800246c <_ZN4core10EmptyEvent4postEv>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <_ZN3osc4Dual8c2Flush_Ev>:

void osc::Dual::c2Flush_()
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    if (c2_.flush())
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fde2 	bl	8002f88 <_ZN3osc4Data5flushEv>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <_ZN3osc4Dual8c2Flush_Ev+0x28>
    {
        state_ = &osc::Dual::probing_;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a07      	ldr	r2, [pc, #28]	; (80033ec <_ZN3osc4Dual8c2Flush_Ev+0x3c>)
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    }
    else
    {
        c2FlushEvent_.post();
    }
}
 80033d6:	e005      	b.n	80033e4 <_ZN3osc4Dual8c2Flush_Ev+0x34>
        c2FlushEvent_.post();
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f603 1398 	addw	r3, r3, #2456	; 0x998
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f844 	bl	800246c <_ZN4core10EmptyEvent4postEv>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	080031f1 	.word	0x080031f1

080033f0 <_ZN3osc4DualD1Ev>:
class Dual: public core::Component
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <_ZN3osc4DualD1Ev+0x38>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe f8e3 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f603 1384 	addw	r3, r3, #2436	; 0x984
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe f8dd 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fbe1 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	0800948c 	.word	0x0800948c

0800342c <_ZN3osc4DualD0Ev>:
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffdb 	bl	80033f0 <_ZN3osc4DualD1Ev>
 800343a:	f640 11ac 	movw	r1, #2476	; 0x9ac
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f003 fbf4 	bl	8006c2c <_ZdlPvj>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <_ZN4core5Queue9availableEv>:
        size_ = size;
        last_ = first_ + size;
        inPtr_ = first_;
        outPtr_ = first_;
    }
    uint16_t available()
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
    {
    	uint16_t ret = size_+outPtr_-inPtr_;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	81fb      	strh	r3, [r7, #14]
    	if (ret > size_) ret -= size_;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	429a      	cmp	r2, r3
 8003470:	d904      	bls.n	800347c <_ZN4core5Queue9availableEv+0x2e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	89fa      	ldrh	r2, [r7, #14]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	81fb      	strh	r3, [r7, #14]
    	return ret - 1;
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	3b01      	subs	r3, #1
 8003480:	b29b      	uxth	r3, r3
    }
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_ZN4core5Queue5emptyEv>:
    bool notEmpty(){return (inPtr_ != outPtr_);}
    bool empty(){return (inPtr_ == outPtr_);}
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_ZN4core5Queue4pushEh>:
    {
        inPtr_ = first_;
        outPtr_ = first_;
    }

    void push(uint8_t val)
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
    {
    	uint8_t* next = inPtr_ + 1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
    	if (next == last_) next = first_;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d102      	bne.n	80034d8 <_ZN4core5Queue4pushEh+0x24>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]
		if (next!=outPtr_) //queue not full
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d006      	beq.n	80034f0 <_ZN4core5Queue4pushEh+0x3c>
		{
			*inPtr_ = val;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	701a      	strb	r2, [r3, #0]
			inPtr_ = next;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
		}
    }
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_ZN4core5Queue3popEv>:

    uint8_t pop()
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    {
    	if (outPtr_ != inPtr_)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d014      	beq.n	800353a <_ZN4core5Queue3popEv+0x3e>
		{
			uint8_t ret = *outPtr_;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	73fb      	strb	r3, [r7, #15]
			outPtr_++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]
			if (outPtr_ == last_) outPtr_ = first_;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d103      	bne.n	8003536 <_ZN4core5Queue3popEv+0x3a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
			return ret;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	e000      	b.n	800353c <_ZN4core5Queue3popEv+0x40>
		}
        return 0;
 800353a:	2300      	movs	r3, #0
    }
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZN4core10EventQueue11getMinAvailEv>:
    inline uint16_t getMinAvail(){return this->minimumAvail_;}
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b3 3518 	ldrh.w	r3, [r3, #1304]	; 0x518
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <_ZN3osc4Dual4plotEtt>:

public:
    Dual(uint8_t c1, uint16_t c2);
    typedef void (osc::Dual::*State) (uint16_t, uint16_t);

    inline void plot(uint16_t v1, uint16_t v2)
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]
 800356e:	4613      	mov	r3, r2
 8003570:	803b      	strh	r3, [r7, #0]
    {
        (this->*state_)(v1, v2);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	105b      	asrs	r3, r3, #1
 8003578:	461a      	mov	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1898      	adds	r0, r3, r2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <_ZN3osc4Dual4plotEtt+0x40>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	105b      	asrs	r3, r3, #1
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6852      	ldr	r2, [r2, #4]
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	e001      	b.n	80035a6 <_ZN3osc4Dual4plotEtt+0x44>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	883a      	ldrh	r2, [r7, #0]
 80035a8:	8879      	ldrh	r1, [r7, #2]
 80035aa:	4798      	blx	r3
        c1_.lastVal = v1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	887a      	ldrh	r2, [r7, #2]
 80035b0:	829a      	strh	r2, [r3, #20]
        c2_.lastVal = v2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	883a      	ldrh	r2, [r7, #0]
 80035b6:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
    }
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE>:
class Strand: public core::Component, public AbstractEventQueue
{
public:
    Strand(core::Queue& queue): queue_(queue){}

    void post(EmptyEvent* event, ByteEvent* finished = nullptr)
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
    {
        if (queue_.available() < 3) return;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff3b 	bl	800344e <_ZN4core5Queue9availableEv>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b02      	cmp	r3, #2
 80035dc:	bf94      	ite	ls
 80035de:	2301      	movls	r3, #1
 80035e0:	2300      	movhi	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d127      	bne.n	8003638 <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE+0x76>
  __ASM volatile ("cpsid i" : : : "memory");
 80035e8:	b672      	cpsid	i
}
 80035ea:	bf00      	nop

        DISABLE_INTERRUPT;
        if (finished!=nullptr)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE+0x4e>
        {
            queue_.push(CALLBACK);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5b 	bl	80034b4 <_ZN4core5Queue4pushEh>
            queue_.push(finished->index_);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff ff53 	bl	80034b4 <_ZN4core5Queue4pushEh>
 800360e:	e005      	b.n	800361c <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE+0x5a>
        }
        else queue_.push(VOID);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff4c 	bl	80034b4 <_ZN4core5Queue4pushEh>
        queue_.push(event->index_);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7ff ff44 	bl	80034b4 <_ZN4core5Queue4pushEh>
  __ASM volatile ("cpsie i" : : : "memory");
 800362c:	b662      	cpsie	i
}
 800362e:	bf00      	nop
        ENABLE_INTERRUPT;
        next_();
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f877 	bl	8003724 <_ZN4core6Strand5next_Ev>
 8003636:	e000      	b.n	800363a <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE+0x78>
        if (queue_.available() < 3) return;
 8003638:	bf00      	nop
    }
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_ZN4core6Strand4doneEh>:
    {
        busy_ = false;
        next_();
    }

    void done(uint8_t error)
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
    {
        busy_ = false;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	731a      	strb	r2, [r3, #12]
        //if (finished_ != nullptr) finished_->post();
        if (finished_ != nullptr) finished_->execute_(&error);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <_ZN4core6Strand4doneEh+0x28>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	1cfa      	adds	r2, r7, #3
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fb44 	bl	8003cf0 <_ZN4core10FixedEventIhE8execute_EPh>
        next_();
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f85b 	bl	8003724 <_ZN4core6Strand5next_Ev>
    }
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZN4core6Strand8popFixedEPhh>:
private:
    inline void popFixed(uint8_t* data, uint8_t size) override
 8003676:	b590      	push	{r4, r7, lr}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	4613      	mov	r3, r2
 8003682:	71fb      	strb	r3, [r7, #7]
    {
        for (int i=0;i<size;i++)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	da0d      	bge.n	80036ac <_ZN4core6Strand8popFixedEPhh+0x36>
        {
            data[i] = queue_.pop();
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	18d4      	adds	r4, r2, r3
 800369a:	4608      	mov	r0, r1
 800369c:	f7ff ff2e 	bl	80034fc <_ZN4core5Queue3popEv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	7023      	strb	r3, [r4, #0]
        for (int i=0;i<size;i++)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e7ed      	b.n	8003688 <_ZN4core6Strand8popFixedEPhh+0x12>
        }
    }
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}

080036b4 <_ZThn4_N4core6Strand8popFixedEPhh>:
    inline void popFixed(uint8_t* data, uint8_t size) override
 80036b4:	f1a0 0004 	sub.w	r0, r0, #4
 80036b8:	e7dd      	b.n	8003676 <_ZN4core6Strand8popFixedEPhh>

080036ba <_ZN4core6Strand9pushFixedEhPhh>:

    inline void pushFixed(uint8_t index, uint8_t* data, uint8_t size) override
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	461a      	mov	r2, r3
 80036c6:	460b      	mov	r3, r1
 80036c8:	72fb      	strb	r3, [r7, #11]
 80036ca:	4613      	mov	r3, r2
 80036cc:	72bb      	strb	r3, [r7, #10]
    {
        /*TODO*/
    }
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <_ZThn4_N4core6Strand9pushFixedEhPhh>:
    inline void pushFixed(uint8_t index, uint8_t* data, uint8_t size) override
 80036da:	f1a0 0004 	sub.w	r0, r0, #4
 80036de:	e7ec      	b.n	80036ba <_ZN4core6Strand9pushFixedEhPhh>

080036e0 <_ZN4core6Strand10pushBufferEhPhh>:

    inline void pushBuffer(uint8_t index, uint8_t* data, uint8_t size)  override
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
 80036f0:	4613      	mov	r3, r2
 80036f2:	72bb      	strb	r3, [r7, #10]
    {
        /*TODO*/
    }
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_ZThn4_N4core6Strand10pushBufferEhPhh>:
    inline void pushBuffer(uint8_t index, uint8_t* data, uint8_t size)  override
 8003700:	f1a0 0004 	sub.w	r0, r0, #4
 8003704:	e7ec      	b.n	80036e0 <_ZN4core6Strand10pushBufferEhPhh>

08003706 <_ZN4core6Strand9popBufferEPhRh>:

    inline void popBuffer(uint8_t* data, uint8_t& size)  override
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
    {
        /*TODO*/
    }
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <_ZThn4_N4core6Strand9popBufferEPhRh>:
    inline void popBuffer(uint8_t* data, uint8_t& size)  override
 800371e:	f1a0 0004 	sub.w	r0, r0, #4
 8003722:	e7f0      	b.n	8003706 <_ZN4core6Strand9popBufferEPhRh>

08003724 <_ZN4core6Strand5next_Ev>:
    enum EventType
    {
        VOID=1, CALLBACK, DELAY
    };

    void next_()
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    {
        if (busy_ || queue_.empty()) return;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7b1b      	ldrb	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <_ZN4core6Strand5next_Ev+0x20>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fea8 	bl	800348e <_ZN4core5Queue5emptyEv>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <_ZN4core6Strand5next_Ev+0x24>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <_ZN4core6Strand5next_Ev+0x26>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <_ZN4core6Strand5next_Ev+0x3c>
        executeEvent_.post();
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3314      	adds	r3, #20
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fe8a 	bl	800246c <_ZN4core10EmptyEvent4postEv>
        busy_ = true;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	731a      	strb	r2, [r3, #12]
 800375e:	e000      	b.n	8003762 <_ZN4core6Strand5next_Ev+0x3e>
        if (busy_ || queue_.empty()) return;
 8003760:	bf00      	nop
    }
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_ZN4test7ConsoleD1Ev>:
#include <oscilloscope/dual.h>
#include <oscilloscope/triple.h>
#include <oscilloscope/quad.h>
#include <core/strand.h>

COMPONENT(test, Console)
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <_ZN4test7ConsoleD1Ev+0x68>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fb17 	bl	8003db0 <_ZN4core6StrandD1Ev>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd feff 	bl	800158c <_ZN4core10FixedEventIhED1Ev>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fae9 	bl	8003d6c <_ZN4core10FixedEventItED1Ev>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd ff15 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd ff0f 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3380      	adds	r3, #128	; 0x80
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fe1a 	bl	80033f0 <_ZN3osc4DualD1Ev>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fa0e 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	080094a0 	.word	0x080094a0

080037d4 <_ZN4test7ConsoleD0Ev>:
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ffc3 	bl	8003768 <_ZN4test7ConsoleD1Ev>
 80037e2:	f241 2168 	movw	r1, #4712	; 0x1268
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f003 fa20 	bl	8006c2c <_ZdlPvj>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_ZN4test7Console8dualPlotEtt>:
    U_INTEGER(100, interval)
    U_TEXT(103,name)
    U_ACTION(104,hello)
    M_TASK(oscilloscope)
//    O_SINGLE(single,2)
    O_DUAL(dual,2,3)
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	807b      	strh	r3, [r7, #2]
 8003802:	4613      	mov	r3, r2
 8003804:	803b      	strh	r3, [r7, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3380      	adds	r3, #128	; 0x80
 800380a:	883a      	ldrh	r2, [r7, #0]
 800380c:	8879      	ldrh	r1, [r7, #2]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fea7 	bl	8003562 <_ZN3osc4Dual4plotEtt>
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN7console6Driver11getMinAvailEv>:
    inline uint16_t getMinAvail(){return txMinAvail_;}
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <_ZN4test7Console4initEv>:

#include <math.h>
#define PI 3.14159265358979323846

void test::Console::init()
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    for (int i=0;i<400;i++)
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800384a:	da58      	bge.n	80038fe <_ZN4test7Console4initEv+0xc6>
    {
        double v = ((double)i/200) * PI;
 800384c:	69f8      	ldr	r0, [r7, #28]
 800384e:	f7fc fe91 	bl	8000574 <__aeabi_i2d>
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <_ZN4test7Console4initEv+0x108>)
 8003858:	f7fd f820 	bl	800089c <__aeabi_ddiv>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	a334      	add	r3, pc, #208	; (adr r3, 8003938 <_ZN4test7Console4initEv+0x100>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc feed 	bl	8000648 <__aeabi_dmul>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int16_t sine = (int16_t)(sin(v)*512.0);
 8003876:	ed97 0b04 	vldr	d0, [r7, #16]
 800387a:	f003 fa69 	bl	8006d50 <sin>
 800387e:	ec51 0b10 	vmov	r0, r1, d0
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800388a:	f7fc fedd 	bl	8000648 <__aeabi_dmul>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f971 	bl	8000b7c <__aeabi_d2iz>
 800389a:	4603      	mov	r3, r0
 800389c:	81fb      	strh	r3, [r7, #14]
        int16_t cosine = (int16_t)(cos(v)*512.0);
 800389e:	ed97 0b04 	vldr	d0, [r7, #16]
 80038a2:	f003 fa05 	bl	8006cb0 <cos>
 80038a6:	ec51 0b10 	vmov	r0, r1, d0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80038b2:	f7fc fec9 	bl	8000648 <__aeabi_dmul>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fd f95d 	bl	8000b7c <__aeabi_d2iz>
 80038c2:	4603      	mov	r3, r0
 80038c4:	81bb      	strh	r3, [r7, #12]
        sine_[i] = sine + 512;
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038cc:	b299      	uxth	r1, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	460a      	mov	r2, r1
 80038dc:	809a      	strh	r2, [r3, #4]
        cosine_[i] = cosine + 512;
 80038de:	89bb      	ldrh	r3, [r7, #12]
 80038e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038e4:	b299      	uxth	r1, r3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	460a      	mov	r2, r1
 80038f4:	809a      	strh	r2, [r3, #4]
    for (int i=0;i<400;i++)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e7a2      	b.n	8003844 <_ZN4test7Console4initEv+0xc>
    }

    plotTask_.start(10); //50Hz
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3308      	adds	r3, #8
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	210a      	movs	r1, #10
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fa15 	bl	8002d38 <_ZN4core4Task5startEml>
    oscilloscopeTask_.start(1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	f04f 32ff 	mov.w	r2, #4294967295
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fa0d 	bl	8002d38 <_ZN4core4Task5startEml>
    strandTask_.start(1000);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	f04f 32ff 	mov.w	r2, #4294967295
 8003926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fa04 	bl	8002d38 <_ZN4core4Task5startEml>
}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	54442d18 	.word	0x54442d18
 800393c:	400921fb 	.word	0x400921fb
 8003940:	40690000 	.word	0x40690000

08003944 <_ZN4test7Console18testStrandHandler_Ev>:

M_EVENT_HANDLER(test::Console, testStrand)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	static uint16_t count = 0;
	LOG_PRINT("Handle Strand Event");
 800394c:	f7fd fee4 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003950:	4603      	mov	r3, r0
 8003952:	490b      	ldr	r1, [pc, #44]	; (8003980 <_ZN4test7Console18testStrandHandler_Ev+0x3c>)
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fc80 	bl	800125a <_ZN7console10Controller5printEPKc>
	myStrandStrand.done(count++);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 622d 	add.w	r2, r3, #2768	; 0xad0
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <_ZN4test7Console18testStrandHandler_Ev+0x40>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	b288      	uxth	r0, r1
 8003968:	4906      	ldr	r1, [pc, #24]	; (8003984 <_ZN4test7Console18testStrandHandler_Ev+0x40>)
 800396a:	8008      	strh	r0, [r1, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7ff fe65 	bl	8003640 <_ZN4core6Strand4doneEh>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	080092e4 	.word	0x080092e4
 8003984:	200027b0 	.word	0x200027b0

08003988 <_ZN4test7Console14strandHandler_Ev>:

M_TASK_HANDLER(test::Console, strand)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	LOG_PRINT("ThanhNeymarStrandHelloKitty");
 8003990:	f7fd fec2 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003994:	4603      	mov	r3, r0
 8003996:	490a      	ldr	r1, [pc, #40]	; (80039c0 <_ZN4test7Console14strandHandler_Ev+0x38>)
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd fc5e 	bl	800125a <_ZN7console10Controller5printEPKc>
	myStrandStrand.post(&testStrandEvent, &finishedEvent);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f503 602d 	add.w	r0, r3, #2768	; 0xad0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f603 212c 	addw	r1, r3, #2604	; 0xa2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80039b0:	461a      	mov	r2, r3
 80039b2:	f7ff fe06 	bl	80035c2 <_ZN4core6Strand4postEPNS_10EmptyEventEPNS_10FixedEventIhEE>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	080092f8 	.word	0x080092f8

080039c4 <_ZN4test7Console16finishedHandler_ERKh>:

M_EVENT_HANDLER(test::Console, finished, uint8_t)
{
 80039c4:	b5b0      	push	{r4, r5, r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("Event Queue Min Avail: %d-%d", event, core::Engine::instance().events().getMinAvail());
 80039ce:	f7fd fea3 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80039d2:	4604      	mov	r4, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	461d      	mov	r5, r3
 80039da:	f7fe fd19 	bl	8002410 <_ZN4core6Engine8instanceEv>
 80039de:	4603      	mov	r3, r0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fd00 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fdad 	bl	8003548 <_ZN4core10EventQueue11getMinAvailEv>
 80039ee:	4603      	mov	r3, r0
 80039f0:	462a      	mov	r2, r5
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <_ZN4test7Console16finishedHandler_ERKh+0x40>)
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7fd fc97 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bdb0      	pop	{r4, r5, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08009314 	.word	0x08009314

08003a08 <_ZN4test7Console20startCommandHandler_Ev>:

U_ACTION_HANDLER(test::Console, start)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    plotTask_.start(interval_);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f103 0008 	add.w	r0, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3b20 	ldr.w	r3, [r3, #2848]	; 0xb20
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7ff f989 	bl	8002d38 <_ZN4core4Task5startEml>
    LOG_PRINTF("TX max:%d", console::Driver::instance().getMinAvail());
 8003a26:	f7fd fe77 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	f7fd fab4 	bl	8000f98 <_ZN7console6Driver8instanceEv>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fef2 	bl	800381c <_ZN7console6Driver11getMinAvailEv>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <_ZN4test7Console20startCommandHandler_Ev+0x7c>)
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7fd fc72 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
    for(int i = 0; i< 50; i++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b31      	cmp	r3, #49	; 0x31
 8003a4c:	dc16      	bgt.n	8003a7c <_ZN4test7Console20startCommandHandler_Ev+0x74>
    {
    	emptyEvent.post();
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fd09 	bl	800246c <_ZN4core10EmptyEvent4postEv>
    	fixedEvent.post(sine_[i]);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f000 f963 	bl	8003d3a <_ZN4core10FixedEventItE4postERKt>
    for(int i = 0; i< 50; i++)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e7e5      	b.n	8003a48 <_ZN4test7Console20startCommandHandler_Ev+0x40>
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}
 8003a84:	08009334 	.word	0x08009334

08003a88 <_ZN4test7Console13emptyHandler_Ev>:

M_EVENT_HANDLER(test::Console, empty)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_ZN4test7Console13fixedHandler_ERKt>:

M_EVENT_HANDLER(test::Console, fixed, uint16_t)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]

}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <_ZN4test7Console19stopCommandHandler_Ev>:

U_ACTION_HANDLER(test::Console, stop)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
    plotTask_.stop();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff f95f 	bl	8002d84 <_ZN4core4Task4stopEv>
	/* Test stick stuck with stick delay > timeout of WDT */
	//core::Engine::instance().delay(1500);
    console::Controller::instance().print("Blink Stopped");
 8003ac6:	f7fd fe27 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <_ZN4test7Console19stopCommandHandler_Ev+0x28>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fbc3 	bl	800125a <_ZN7console10Controller5printEPKc>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08009340 	.word	0x08009340

08003ae0 <_ZN4test7Console23intervalCommandHandler_El>:

U_INTEGER_HANDLER(test::Console, interval)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
    interval_ = value;
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
    LOG_PRINTF("Interval=%d", interval_);
 8003af2:	f7fd fe11 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3b20 	ldr.w	r3, [r3, #2848]	; 0xb20
 8003afc:	461a      	mov	r2, r3
 8003afe:	4903      	ldr	r1, [pc, #12]	; (8003b0c <_ZN4test7Console23intervalCommandHandler_El+0x2c>)
 8003b00:	f7fd fc12 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08009350 	.word	0x08009350

08003b10 <_ZN4test7Console19nameCommandHandler_EhPh>:

U_TEXT_HANDLER(test::Console, name)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	72fb      	strb	r3, [r7, #11]
    for (int i=0;i<length;i++) name_[i] = data[i];
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	da0e      	bge.n	8003b48 <_ZN4test7Console19nameCommandHandler_EhPh+0x38>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	7819      	ldrb	r1, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4413      	add	r3, r2
 8003b38:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3301      	adds	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e7ec      	b.n	8003b22 <_ZN4test7Console19nameCommandHandler_EhPh+0x12>
    name_[length] = 0;
 8003b48:	7afb      	ldrb	r3, [r7, #11]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2b24 	strb.w	r2, [r3, #2852]	; 0xb24
    LOG_PRINTF("Name=%s", name_);
 8003b54:	f7fd fde0 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <_ZN4test7Console19nameCommandHandler_EhPh+0x60>)
 8003b62:	f7fd fbe1 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	0800935c 	.word	0x0800935c

08003b74 <_ZN4test7Console20helloCommandHandler_Ev>:

U_ACTION_HANDLER(test::Console, hello)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    LOG_PRINTF("Hello %s", name_);
 8003b7c:	f7fd fdcc 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8003b86:	461a      	mov	r2, r3
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <_ZN4test7Console20helloCommandHandler_Ev+0x24>)
 8003b8a:	f7fd fbcd 	bl	8001328 <_ZN7console10Controller6printfEPKcz>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08009364 	.word	0x08009364

08003b9c <_ZN4test7Console19syncCommandHandler_Ev>:

U_ACTION_HANDLER(test::Console,sync)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
    console::Controller::instance().updateIntField(Interval, interval_);
 8003ba4:	f7fd fdb8 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3b20 	ldr.w	r3, [r3, #2848]	; 0xb20
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2164      	movs	r1, #100	; 0x64
 8003bb2:	f7fd fc07 	bl	80013c4 <_ZN7console10Controller14updateIntFieldEtl>
    console::Controller::instance().updateTextField(Name, name_);
 8003bb6:	f7fd fdaf 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2167      	movs	r1, #103	; 0x67
 8003bc4:	f7fd fc4c 	bl	8001460 <_ZN7console10Controller15updateTextFieldEtPc>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZN4test7Console12plotHandler_Ev>:

M_EVENT_HANDLER(test::Console, plot)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    static uint32_t angle=0;
    MC_PLOT(0, sine_[angle]);
 8003bd8:	f7fd fd9e 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003bdc:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	889b      	ldrh	r3, [r3, #4]
 8003bec:	461a      	mov	r2, r3
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f7fe fd4e 	bl	8002690 <_ZN7console10Controller4plotEhl>
    MC_PLOT(1, cosine_[angle]);
 8003bf4:	f7fd fd90 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	889b      	ldrh	r3, [r3, #4]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	f7fe fd40 	bl	8002690 <_ZN7console10Controller4plotEhl>
    if (++angle>=400) angle=0;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f240 128f 	movw	r2, #399	; 0x18f
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bf8c      	ite	hi
 8003c26:	2301      	movhi	r3, #1
 8003c28:	2300      	movls	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <_ZN4test7Console12plotHandler_Ev+0x66>
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <_ZN4test7Console12plotHandler_Ev+0x70>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200027b4 	.word	0x200027b4

08003c44 <_ZN4test7Console20oscilloscopeHandler_Ev>:

M_EVENT_HANDLER(test::Console, oscilloscope)
{
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    static uint32_t angle=0;
//    singlePlot(sine_[angle] + rand()%10);
    dualPlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10);
 8003c4c:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	889c      	ldrh	r4, [r3, #4]
 8003c5c:	f004 f9b6 	bl	8007fcc <rand>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <_ZN4test7Console20oscilloscopeHandler_Ev+0xa8>)
 8003c64:	fb83 1302 	smull	r1, r3, r3, r2
 8003c68:	1099      	asrs	r1, r3, #2
 8003c6a:	17d3      	asrs	r3, r2, #31
 8003c6c:	1ac9      	subs	r1, r1, r3
 8003c6e:	460b      	mov	r3, r1
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	1ad1      	subs	r1, r2, r3
 8003c78:	b28b      	uxth	r3, r1
 8003c7a:	4423      	add	r3, r4
 8003c7c:	b29d      	uxth	r5, r3
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	889c      	ldrh	r4, [r3, #4]
 8003c8e:	f004 f99d 	bl	8007fcc <rand>
 8003c92:	4602      	mov	r2, r0
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <_ZN4test7Console20oscilloscopeHandler_Ev+0xa8>)
 8003c96:	fb83 1302 	smull	r1, r3, r3, r2
 8003c9a:	1099      	asrs	r1, r3, #2
 8003c9c:	17d3      	asrs	r3, r2, #31
 8003c9e:	1ac9      	subs	r1, r1, r3
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	1ad1      	subs	r1, r2, r3
 8003caa:	b28b      	uxth	r3, r1
 8003cac:	4423      	add	r3, r4
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fd9e 	bl	80037f6 <_ZN4test7Console8dualPlotEtt>
    //triplePlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5);
//    quadPlot(sine_[angle] + rand()%20, cosine_[angle] + rand()%20, cosine_[angle]/2 + rand()%10, sine_[angle]/2 + rand()%10);
    if (++angle>=400) angle=0;
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f240 128f 	movw	r2, #399	; 0x18f
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bf8c      	ite	hi
 8003cd0:	2301      	movhi	r3, #1
 8003cd2:	2300      	movls	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <_ZN4test7Console20oscilloscopeHandler_Ev+0x9c>
 8003cda:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <_ZN4test7Console20oscilloscopeHandler_Ev+0xa4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce8:	200027b8 	.word	0x200027b8
 8003cec:	66666667 	.word	0x66666667

08003cf0 <_ZN4core10FixedEventIhE8execute_EPh>:

    inline void execute_(E* e){(component_->*handler_)(*e);}
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6912      	ldr	r2, [r2, #16]
 8003d02:	1052      	asrs	r2, r2, #1
 8003d04:	1898      	adds	r0, r3, r2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <_ZN4core10FixedEventIhE8execute_EPh+0x28>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	e00a      	b.n	8003d2e <_ZN4core10FixedEventIhE8execute_EPh+0x3e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6912      	ldr	r2, [r2, #16]
 8003d20:	1052      	asrs	r2, r2, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	4798      	blx	r3
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_ZN4core10FixedEventItE4postERKt>:
    void post(const E& e)
 8003d3a:	b590      	push	{r4, r7, lr}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
        uint8_t* ptr = (uint8_t*)&e;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	60fb      	str	r3, [r7, #12]
        core::Engine::instance().events().pushFixed(index_,ptr,sizeof (E));
 8003d48:	f7fe fb62 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fb49 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 8003d54:	6803      	ldr	r3, [r0, #0]
 8003d56:	681c      	ldr	r4, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7919      	ldrb	r1, [r3, #4]
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	47a0      	blx	r4
    }
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd90      	pop	{r4, r7, pc}
	...

08003d6c <_ZN4core10FixedEventItED1Ev>:
class FixedEvent: public Event
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <_ZN4core10FixedEventItED1Ev+0x20>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc ff4f 	bl	8000c20 <_ZN4core5EventD1Ev>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	080094b4 	.word	0x080094b4

08003d90 <_ZN4core10FixedEventItED0Ev>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ffe7 	bl	8003d6c <_ZN4core10FixedEventItED1Ev>
 8003d9e:	2114      	movs	r1, #20
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f002 ff43 	bl	8006c2c <_ZdlPvj>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN4core6StrandD1Ev>:
class Strand: public core::Component, public AbstractEventQueue
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <_ZN4core6StrandD1Ev+0x30>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <_ZN4core6StrandD1Ev+0x34>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd fc01 	bl	80015d0 <_ZN4core10EmptyEventD1Ev>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc ff05 	bl	8000be0 <_ZN4core9ComponentD1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	080094c8 	.word	0x080094c8
 8003de4:	080094ec 	.word	0x080094ec

08003de8 <_ZN4core6StrandD0Ev>:
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ffdd 	bl	8003db0 <_ZN4core6StrandD1Ev>
 8003df6:	2150      	movs	r1, #80	; 0x50
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f002 ff17 	bl	8006c2c <_ZdlPvj>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZN4core10FixedEventItE7executeEPNS_18AbstractEventQueueE>:
    void execute(core::AbstractEventQueue* queue) override
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
        uint8_t* ptr = (uint8_t*)&e;
 8003e12:	f107 030a 	add.w	r3, r7, #10
 8003e16:	60fb      	str	r3, [r7, #12]
        queue->popFixed(ptr, sizeof (E));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2202      	movs	r2, #2
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	4798      	blx	r3
        (component_->*handler_)(e);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6912      	ldr	r2, [r2, #16]
 8003e30:	1052      	asrs	r2, r2, #1
 8003e32:	1898      	adds	r0, r3, r2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <_ZN4core10FixedEventItE7executeEPNS_18AbstractEventQueueE+0x3e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	e00a      	b.n	8003e5c <_ZN4core10FixedEventItE7executeEPNS_18AbstractEventQueueE+0x54>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6912      	ldr	r2, [r2, #16]
 8003e4e:	1052      	asrs	r2, r2, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68d2      	ldr	r2, [r2, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f107 020a 	add.w	r2, r7, #10
 8003e60:	4611      	mov	r1, r2
 8003e62:	4798      	blx	r3
    }
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <_ZN4core5QueueC1EPht>:
    Queue(uint8_t* buf, uint16_t size)
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
        first_ = buf;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	605a      	str	r2, [r3, #4]
        size_ = size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	801a      	strh	r2, [r3, #0]
        last_ = first_ + size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	609a      	str	r2, [r3, #8]
        inPtr_ = first_;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	60da      	str	r2, [r3, #12]
        outPtr_ = first_;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	611a      	str	r2, [r3, #16]
    }
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_ZN4core6StrandC1ERNS_5QueueE>:
    Strand(core::Queue& queue): queue_(queue){}
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fef1 	bl	8000ca4 <_ZN4core9ComponentC1Ev>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fcec 	bl	80028a4 <_ZN4core18AbstractEventQueueC1Ev>
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <_ZN4core6StrandC1ERNS_5QueueE+0x8c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <_ZN4core6StrandC1ERNS_5QueueE+0x90>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	731a      	strb	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f103 0014 	add.w	r0, r3, #20
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <_ZN4core6StrandC1ERNS_5QueueE+0x94>)
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	cb0c      	ldmia	r3, {r2, r3}
 8003f00:	f7fc fee0 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8003f04:	f7fe fa84 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fa6b 	bl	80023e6 <_ZN4core6Engine6eventsEv>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <_ZN4core6StrandC1ERNS_5QueueE+0x98>)
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	cb0c      	ldmia	r3, {r2, r3}
 8003f2c:	f7fe fee0 	bl	8002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	080094c8 	.word	0x080094c8
 8003f40:	080094ec 	.word	0x080094ec
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f4d 	.word	0x08003f4d

08003f4c <_ZN4core6Strand8timeout_Ev>:

    void timeout_()
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    {
        busy_ = false;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	731a      	strb	r2, [r3, #12]
        next_();
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fbe2 	bl	8003724 <_ZN4core6Strand5next_Ev>
    }
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN4core6Strand8execute_Ev>:

    void execute_()
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    {
        uint8_t type = queue_.pop();
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fac1 	bl	80034fc <_ZN4core5Queue3popEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	77fb      	strb	r3, [r7, #31]
        if (type == DELAY)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d138      	bne.n	8003ff6 <_ZN4core6Strand8execute_Ev+0x8e>
        {
            uint32_t time = queue_.pop();
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fab7 	bl	80034fc <_ZN4core5Queue3popEv>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	60fb      	str	r3, [r7, #12]
            time <<= 8; time += queue_.pop();
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff faad 	bl	80034fc <_ZN4core5Queue3popEv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
            time <<= 8; time += queue_.pop();
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff faa0 	bl	80034fc <_ZN4core5Queue3popEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
            time <<= 8; time += queue_.pop();
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fa93 	bl	80034fc <_ZN4core5Queue3popEv>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
            timer_.start(time,1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3330      	adds	r3, #48	; 0x30
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fea5 	bl	8002d38 <_ZN4core4Task5startEml>
            finished_ = nullptr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
            {
                Event* e = events_.events_[index];
                e->execute(this);
            }
        }
    }
 8003ff4:	e062      	b.n	80040bc <_ZN4core6Strand8execute_Ev+0x154>
        else if (type == VOID)
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d122      	bne.n	8004042 <_ZN4core6Strand8execute_Ev+0xda>
            finished_ = nullptr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
            uint8_t index = queue_.pop();
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fa78 	bl	80034fc <_ZN4core5Queue3popEv>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
            if (index < events_.poolSize_)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 8004018:	7dfa      	ldrb	r2, [r7, #23]
 800401a:	429a      	cmp	r2, r3
 800401c:	d24e      	bcs.n	80040bc <_ZN4core6Strand8execute_Ev+0x154>
                Event* e = events_.events_[index];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	7dfa      	ldrb	r2, [r7, #23]
 8004024:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402c:	613b      	str	r3, [r7, #16]
                e->execute(this);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	3204      	adds	r2, #4
 800403a:	4611      	mov	r1, r2
 800403c:	6938      	ldr	r0, [r7, #16]
 800403e:	4798      	blx	r3
    }
 8004040:	e03c      	b.n	80040bc <_ZN4core6Strand8execute_Ev+0x154>
        else if (type == CALLBACK)
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d139      	bne.n	80040bc <_ZN4core6Strand8execute_Ev+0x154>
            uint8_t index = queue_.pop();
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fa55 	bl	80034fc <_ZN4core5Queue3popEv>
 8004052:	4603      	mov	r3, r0
 8004054:	77bb      	strb	r3, [r7, #30]
            if (index < events_.poolSize_) finished_ = (ByteEvent*)events_.events_[index];
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 800405e:	7fba      	ldrb	r2, [r7, #30]
 8004060:	429a      	cmp	r2, r3
 8004062:	d209      	bcs.n	8004078 <_ZN4core6Strand8execute_Ev+0x110>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	7fba      	ldrb	r2, [r7, #30]
 800406a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800406e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	e002      	b.n	800407e <_ZN4core6Strand8execute_Ev+0x116>
            else finished_ = nullptr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]
            index = queue_.pop();
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fa3a 	bl	80034fc <_ZN4core5Queue3popEv>
 8004088:	4603      	mov	r3, r0
 800408a:	77bb      	strb	r3, [r7, #30]
            if (index < events_.poolSize_)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f893 351a 	ldrb.w	r3, [r3, #1306]	; 0x51a
 8004094:	7fba      	ldrb	r2, [r7, #30]
 8004096:	429a      	cmp	r2, r3
 8004098:	d210      	bcs.n	80040bc <_ZN4core6Strand8execute_Ev+0x154>
                Event* e = events_.events_[index];
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	7fba      	ldrb	r2, [r7, #30]
 80040a0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a8:	61bb      	str	r3, [r7, #24]
                e->execute(this);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	3204      	adds	r2, #4
 80040b6:	4611      	mov	r1, r2
 80040b8:	69b8      	ldr	r0, [r7, #24]
 80040ba:	4798      	blx	r3
    }
 80040bc:	bf00      	nop
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <__tcf_3>:
#include <oscilloscope/dual.h>
#include <oscilloscope/triple.h>
#include <oscilloscope/quad.h>
#include <core/strand.h>

COMPONENT(test, Console)
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <__tcf_3+0xc>)
 80040ca:	f7ff fb4d 	bl	8003768 <_ZN4test7ConsoleD1Ev>
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200027c0 	.word	0x200027c0

080040d4 <_ZN4test7Console8instanceEv>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <_ZN4test7Console8instanceEv+0x50>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f3bf 8f5b 	dmb	ish
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <_ZN4test7Console8instanceEv+0x48>
 80040f4:	480b      	ldr	r0, [pc, #44]	; (8004124 <_ZN4test7Console8instanceEv+0x50>)
 80040f6:	f002 fd9b 	bl	8006c30 <__cxa_guard_acquire>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <_ZN4test7Console8instanceEv+0x48>
 800410a:	4807      	ldr	r0, [pc, #28]	; (8004128 <_ZN4test7Console8instanceEv+0x54>)
 800410c:	f000 f810 	bl	8004130 <_ZN4test7ConsoleC1Ev>
 8004110:	4804      	ldr	r0, [pc, #16]	; (8004124 <_ZN4test7Console8instanceEv+0x50>)
 8004112:	f002 fd99 	bl	8006c48 <__cxa_guard_release>
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <_ZN4test7Console8instanceEv+0x58>)
 8004118:	f003 fe57 	bl	8007dca <atexit>
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <_ZN4test7Console8instanceEv+0x54>)
 800411e:	4618      	mov	r0, r3
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20003a28 	.word	0x20003a28
 8004128:	200027c0 	.word	0x200027c0
 800412c:	080040c5 	.word	0x080040c5

08004130 <_ZN4test7ConsoleC1Ev>:
 8004130:	b580      	push	{r7, lr}
 8004132:	b090      	sub	sp, #64	; 0x40
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fdb2 	bl	8000ca4 <_ZN4core9ComponentC1Ev>
 8004140:	4a61      	ldr	r2, [pc, #388]	; (80042c8 <_ZN4test7ConsoleC1Ev+0x198>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 0008 	add.w	r0, r3, #8
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <_ZN4test7ConsoleC1Ev+0x19c>)
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	cb0c      	ldmia	r3, {r2, r3}
 800415c:	f7fe fdc8 	bl	8002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <_ZN4test7ConsoleC1Ev+0x1a0>)
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	cb0c      	ldmia	r3, {r2, r3}
 8004176:	f7fe fdbb 	bl	8002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 800417a:	f7fd facd 	bl	8001718 <_ZN7console10Controller8instanceEv>
 800417e:	4603      	mov	r3, r0
 8004180:	4a54      	ldr	r2, [pc, #336]	; (80042d4 <_ZN4test7ConsoleC1Ev+0x1a4>)
 8004182:	2105      	movs	r1, #5
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd f8f9 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	649a      	str	r2, [r3, #72]	; 0x48
 8004190:	f7fd fac2 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8004194:	4603      	mov	r3, r0
 8004196:	4a50      	ldr	r2, [pc, #320]	; (80042d8 <_ZN4test7ConsoleC1Ev+0x1a8>)
 8004198:	2165      	movs	r1, #101	; 0x65
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd f8ee 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80041a6:	f7fd fab7 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4a4b      	ldr	r2, [pc, #300]	; (80042dc <_ZN4test7ConsoleC1Ev+0x1ac>)
 80041ae:	2166      	movs	r1, #102	; 0x66
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd f8e3 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80041b6:	4602      	mov	r2, r0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
 80041bc:	f7fd faac 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4a47      	ldr	r2, [pc, #284]	; (80042e0 <_ZN4test7ConsoleC1Ev+0x1b0>)
 80041c4:	2164      	movs	r1, #100	; 0x64
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd f8d8 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
 80041d2:	f7fd faa1 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <_ZN4test7ConsoleC1Ev+0x1b4>)
 80041da:	2167      	movs	r1, #103	; 0x67
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd f8cd 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80041e2:	4602      	mov	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
 80041e8:	f7fd fa96 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4a3e      	ldr	r2, [pc, #248]	; (80042e8 <_ZN4test7ConsoleC1Ev+0x1b8>)
 80041f0:	2168      	movs	r1, #104	; 0x68
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd f8c2 	bl	800137c <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <_ZN4test7ConsoleC1Ev+0x1bc>)
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	cb0c      	ldmia	r3, {r2, r3}
 8004214:	f7fe fd6c 	bl	8002cf0 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3380      	adds	r3, #128	; 0x80
 800421c:	2203      	movs	r2, #3
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe ff2b 	bl	800307c <_ZN3osc4DualC1Eht>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f603 202c 	addw	r0, r3, #2604	; 0xa2c
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <_ZN4test7ConsoleC1Ev+0x1c0>)
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	cb0c      	ldmia	r3, {r2, r3}
 800423c:	f7fc fd42 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <_ZN4test7ConsoleC1Ev+0x1c4>)
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004254:	cb0c      	ldmia	r3, {r2, r3}
 8004256:	f7fc fd35 	bl	8000cc4 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <_ZN4test7ConsoleC1Ev+0x1c8>)
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800426e:	cb0c      	ldmia	r3, {r2, r3}
 8004270:	f000 f8ee 	bl	8004450 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f603 2068 	addw	r0, r3, #2664	; 0xa68
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <_ZN4test7ConsoleC1Ev+0x1cc>)
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004280:	2300      	movs	r3, #0
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004288:	cb0c      	ldmia	r3, {r2, r3}
 800428a:	f7fd f95f 	bl	800154c <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f603 20bc 	addw	r0, r3, #2748	; 0xabc
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f603 237c 	addw	r3, r3, #2684	; 0xa7c
 800429a:	2240      	movs	r2, #64	; 0x40
 800429c:	4619      	mov	r1, r3
 800429e:	f7ff fde5 	bl	8003e6c <_ZN4core5QueueC1EPht>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 622d 	add.w	r2, r3, #2768	; 0xad0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7ff fdfd 	bl	8003eb0 <_ZN4core6StrandC1ERNS_5QueueE>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	22c8      	movs	r2, #200	; 0xc8
 80042ba:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	3740      	adds	r7, #64	; 0x40
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	080094a0 	.word	0x080094a0
 80042cc:	08003bd1 	.word	0x08003bd1
 80042d0:	08003989 	.word	0x08003989
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004325 	.word	0x08004325
 80042dc:	08004349 	.word	0x08004349
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	080043c5 	.word	0x080043c5
 80042e8:	080043f9 	.word	0x080043f9
 80042ec:	08003c45 	.word	0x08003c45
 80042f0:	08003945 	.word	0x08003945
 80042f4:	08003a89 	.word	0x08003a89
 80042f8:	08003a9d 	.word	0x08003a9d
 80042fc:	080039c5 	.word	0x080039c5

08004300 <_ZN4test7Console11syncCommandEthPh>:
	M_TASK(plot)
	M_TASK(strand)

    U_ACTION(console::Controller::CommandType::SyncFields, sync)
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	603a      	str	r2, [r7, #0]
 800430a:	80fb      	strh	r3, [r7, #6]
 800430c:	460b      	mov	r3, r1
 800430e:	717b      	strb	r3, [r7, #5]
 8004310:	f7ff fee0 	bl	80040d4 <_ZN4test7Console8instanceEv>
 8004314:	4603      	mov	r3, r0
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fc40 	bl	8003b9c <_ZN4test7Console19syncCommandHandler_Ev>
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZN4test7Console12startCommandEthPh>:
    U_ACTION(101, start)
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	603a      	str	r2, [r7, #0]
 800432e:	80fb      	strh	r3, [r7, #6]
 8004330:	460b      	mov	r3, r1
 8004332:	717b      	strb	r3, [r7, #5]
 8004334:	f7ff fece 	bl	80040d4 <_ZN4test7Console8instanceEv>
 8004338:	4603      	mov	r3, r0
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fb64 	bl	8003a08 <_ZN4test7Console20startCommandHandler_Ev>
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZN4test7Console11stopCommandEthPh>:
    U_ACTION(102, stop)
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	603a      	str	r2, [r7, #0]
 8004352:	80fb      	strh	r3, [r7, #6]
 8004354:	460b      	mov	r3, r1
 8004356:	717b      	strb	r3, [r7, #5]
 8004358:	f7ff febc 	bl	80040d4 <_ZN4test7Console8instanceEv>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fba8 	bl	8003ab4 <_ZN4test7Console19stopCommandHandler_Ev>
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZN4test7Console15intervalCommandEthPh>:
    U_INTEGER(100, interval)
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	603a      	str	r2, [r7, #0]
 8004376:	80fb      	strh	r3, [r7, #6]
 8004378:	460b      	mov	r3, r1
 800437a:	717b      	strb	r3, [r7, #5]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	061a      	lsls	r2, r3, #24
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3302      	adds	r3, #2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	4313      	orrs	r3, r2
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	3203      	adds	r2, #3
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	f7ff fe98 	bl	80040d4 <_ZN4test7Console8instanceEv>
 80043a4:	4603      	mov	r3, r0
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fb99 	bl	8003ae0 <_ZN4test7Console23intervalCommandHandler_El>
 80043ae:	f7fd f9b3 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4619      	mov	r1, r3
 80043b8:	f7fd f804 	bl	80013c4 <_ZN7console10Controller14updateIntFieldEtl>
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_ZN4test7Console11nameCommandEthPh>:
    U_TEXT(103,name)
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	603a      	str	r2, [r7, #0]
 80043ce:	80fb      	strh	r3, [r7, #6]
 80043d0:	460b      	mov	r3, r1
 80043d2:	717b      	strb	r3, [r7, #5]
 80043d4:	f7ff fe7e 	bl	80040d4 <_ZN4test7Console8instanceEv>
 80043d8:	797b      	ldrb	r3, [r7, #5]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f7ff fb97 	bl	8003b10 <_ZN4test7Console19nameCommandHandler_EhPh>
 80043e2:	f7fd f999 	bl	8001718 <_ZN7console10Controller8instanceEv>
 80043e6:	797a      	ldrb	r2, [r7, #5]
 80043e8:	88f9      	ldrh	r1, [r7, #6]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f7fd f84e 	bl	800148c <_ZN7console10Controller15updateTextFieldEthPh>
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_ZN4test7Console12helloCommandEthPh>:
    U_ACTION(104,hello)
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	603a      	str	r2, [r7, #0]
 8004402:	80fb      	strh	r3, [r7, #6]
 8004404:	460b      	mov	r3, r1
 8004406:	717b      	strb	r3, [r7, #5]
 8004408:	f7ff fe64 	bl	80040d4 <_ZN4test7Console8instanceEv>
 800440c:	4603      	mov	r3, r0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fbb0 	bl	8003b74 <_ZN4test7Console20helloCommandHandler_Ev>
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <main>:
#include <console/controller.h>
#include "console.h"

int main()
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
    COMPONENT_REG(console, Controller);
 8004420:	f7fd f97a 	bl	8001718 <_ZN7console10Controller8instanceEv>
 8004424:	4603      	mov	r3, r0
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	4790      	blx	r2
    COMPONENT_REG(test, Console);
 800442e:	f7ff fe51 	bl	80040d4 <_ZN4test7Console8instanceEv>
 8004432:	4603      	mov	r3, r0
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	4790      	blx	r2
    core::Engine::instance().run();
 800443c:	f7fd ffe8 	bl	8002410 <_ZN4core6Engine8instanceEv>
 8004440:	4603      	mov	r3, r0
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fb18 	bl	8002a78 <_ZN4core6Engine3runEv>
    return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>:
    FixedEvent(Component* component, Handler handler): component_(component), handler_(handler){}
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4639      	mov	r1, r7
 800445c:	e881 000c 	stmia.w	r1, {r2, r3}
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe faae 	bl	80029c4 <_ZN4core5EventC1Ev>
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE+0x3c>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	330c      	adds	r3, #12
 8004478:	463a      	mov	r2, r7
 800447a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800447e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	080094b4 	.word	0x080094b4

08004490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	f003 0307 	and.w	r3, r3, #7
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0b      	blt.n	80044d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4907      	ldr	r1, [pc, #28]	; (80044e4 <__NVIC_EnableIRQ+0x38>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf28      	it	cs
 800455a:	2304      	movcs	r3, #4
 800455c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	2b06      	cmp	r3, #6
 8004564:	d902      	bls.n	800456c <NVIC_EncodePriority+0x30>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b03      	subs	r3, #3
 800456a:	e000      	b.n	800456e <NVIC_EncodePriority+0x32>
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	401a      	ands	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004584:	f04f 31ff 	mov.w	r1, #4294967295
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43d9      	mvns	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	4313      	orrs	r3, r2
         );
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80045ac:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b0:	4907      	ldr	r1, [pc, #28]	; (80045d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40021000 	.word	0x40021000

080045d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80045d8:	2004      	movs	r0, #4
 80045da:	f7ff ffe3 	bl	80045a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80045de:	2001      	movs	r0, #1
 80045e0:	f7ff ffe0 	bl	80045a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80045e4:	f7ff ff54 	bl	8004490 <__NVIC_GetPriorityGrouping>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2200      	movs	r2, #0
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ffa4 	bl	800453c <NVIC_EncodePriority>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4619      	mov	r1, r3
 80045f8:	200b      	movs	r0, #11
 80045fa:	f7ff ff75 	bl	80044e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80045fe:	200b      	movs	r0, #11
 8004600:	f7ff ff54 	bl	80044ac <__NVIC_EnableIRQ>

}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}

08004608 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004614:	4907      	ldr	r1, [pc, #28]	; (8004634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4313      	orrs	r3, r2
 800461a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800461e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4013      	ands	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40021000 	.word	0x40021000

08004638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800463c:	2020      	movs	r0, #32
 800463e:	f7ff ffe3 	bl	8004608 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004642:	2001      	movs	r0, #1
 8004644:	f7ff ffe0 	bl	8004608 <LL_AHB2_GRP1_EnableClock>

}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}

0800464c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0a4      	sub	sp, #144	; 0x90
 8004650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004652:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004656:	2238      	movs	r2, #56	; 0x38
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f003 fc04 	bl	8007e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004670:	463b      	mov	r3, r7
 8004672:	2244      	movs	r2, #68	; 0x44
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f003 fbf6 	bl	8007e68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800467c:	2000      	movs	r0, #0
 800467e:	f000 fdf3 	bl	8005268 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004682:	2302      	movs	r3, #2
 8004684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800468c:	2340      	movs	r3, #64	; 0x40
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004690:	2302      	movs	r3, #2
 8004692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004694:	2302      	movs	r3, #2
 8004696:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004698:	2304      	movs	r3, #4
 800469a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800469c:	2355      	movs	r3, #85	; 0x55
 800469e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046a8:	2302      	movs	r3, #2
 80046aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046ae:	2302      	movs	r3, #2
 80046b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fe89 	bl	80053d0 <HAL_RCC_OscConfig>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80046c4:	f000 f826 	bl	8004714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046c8:	230f      	movs	r3, #15
 80046ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046cc:	2303      	movs	r3, #3
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046d0:	2300      	movs	r3, #0
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046d4:	2300      	movs	r3, #0
 80046d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046d8:	2300      	movs	r3, #0
 80046da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046e0:	2104      	movs	r1, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 f98c 	bl	8005a00 <HAL_RCC_ClockConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80046ee:	f000 f811 	bl	8004714 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80046f2:	2302      	movs	r3, #2
 80046f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046fa:	463b      	mov	r3, r7
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fb63 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004708:	f000 f804 	bl	8004714 <Error_Handler>
  }
}
 800470c:	bf00      	nop
 800470e:	3790      	adds	r7, #144	; 0x90
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004718:	b672      	cpsid	i
}
 800471a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800471c:	e7fe      	b.n	800471c <Error_Handler+0x8>
	...

08004720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_MspInit+0x44>)
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_MspInit+0x44>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6613      	str	r3, [r2, #96]	; 0x60
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_MspInit+0x44>)
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <HAL_MspInit+0x44>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <HAL_MspInit+0x44>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6593      	str	r3, [r2, #88]	; 0x58
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_MspInit+0x44>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004756:	f000 fe2b 	bl	80053b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
	return 1;
 800476c:	2301      	movs	r3, #1
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_kill>:

int _kill(int pid, int sig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004782:	f003 fb29 	bl	8007dd8 <__errno>
 8004786:	4603      	mov	r3, r0
 8004788:	2216      	movs	r2, #22
 800478a:	601a      	str	r2, [r3, #0]
	return -1;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <_exit>:

void _exit (int status)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ffe7 	bl	8004778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047aa:	e7fe      	b.n	80047aa <_exit+0x12>

080047ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e00a      	b.n	80047d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047be:	f3af 8000 	nop.w
 80047c2:	4601      	mov	r1, r0
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	60ba      	str	r2, [r7, #8]
 80047ca:	b2ca      	uxtb	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dbf0      	blt.n	80047be <_read+0x12>
	}

return len;
 80047dc:	687b      	ldr	r3, [r7, #4]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e009      	b.n	800480c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	60ba      	str	r2, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	3301      	adds	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	dbf1      	blt.n	80047f8 <_write+0x12>
	}
	return len;
 8004814:	687b      	ldr	r3, [r7, #4]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <_close>:

int _close(int file)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	return -1;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004846:	605a      	str	r2, [r3, #4]
	return 0;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <_isatty>:

int _isatty(int file)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
	return 1;
 800485e:	2301      	movs	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
	return 0;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <_sbrk+0x5c>)
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <_sbrk+0x60>)
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800489c:	4b13      	ldr	r3, [pc, #76]	; (80048ec <_sbrk+0x64>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <_sbrk+0x64>)
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <_sbrk+0x68>)
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <_sbrk+0x64>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d207      	bcs.n	80048c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048b8:	f003 fa8e 	bl	8007dd8 <__errno>
 80048bc:	4603      	mov	r3, r0
 80048be:	220c      	movs	r2, #12
 80048c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	e009      	b.n	80048dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <_sbrk+0x64>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <_sbrk+0x64>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <_sbrk+0x64>)
 80048d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20008000 	.word	0x20008000
 80048e8:	00000400 	.word	0x00000400
 80048ec:	20003a2c 	.word	0x20003a2c
 80048f0:	20003ae0 	.word	0x20003ae0

080048f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <SystemInit+0x20>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	4a05      	ldr	r2, [pc, #20]	; (8004914 <SystemInit+0x20>)
 8004900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_SetPriority>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db0a      	blt.n	800499a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	490c      	ldr	r1, [pc, #48]	; (80049bc <__NVIC_SetPriority+0x4c>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	440b      	add	r3, r1
 8004994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004998:	e00a      	b.n	80049b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4908      	ldr	r1, [pc, #32]	; (80049c0 <__NVIC_SetPriority+0x50>)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3b04      	subs	r3, #4
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	761a      	strb	r2, [r3, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_EncodePriority>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	bf28      	it	cs
 80049e2:	2304      	movcs	r3, #4
 80049e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d902      	bls.n	80049f4 <NVIC_EncodePriority+0x30>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3b03      	subs	r3, #3
 80049f2:	e000      	b.n	80049f6 <NVIC_EncodePriority+0x32>
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	401a      	ands	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	4313      	orrs	r3, r2
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <LL_DMA_SetDataTransferDirection>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004a3c:	4a0e      	ldr	r2, [pc, #56]	; (8004a78 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4413      	add	r3, r2
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a50:	f023 0310 	bic.w	r3, r3, #16
 8004a54:	4908      	ldr	r1, [pc, #32]	; (8004a78 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	440a      	add	r2, r1
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	440a      	add	r2, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	08009514 	.word	0x08009514

08004a7c <LL_DMA_SetMode>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	; (8004ac4 <LL_DMA_SetMode+0x48>)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4413      	add	r3, r2
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 0220 	bic.w	r2, r3, #32
 8004aa0:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <LL_DMA_SetMode+0x48>)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	440b      	add	r3, r1
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	440b      	add	r3, r1
 8004aae:	4619      	mov	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	08009514 	.word	0x08009514

08004ac8 <LL_DMA_SetPeriphIncMode>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <LL_DMA_SetPeriphIncMode+0x48>)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004aec:	4908      	ldr	r1, [pc, #32]	; (8004b10 <LL_DMA_SetPeriphIncMode+0x48>)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	440b      	add	r3, r1
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	440b      	add	r3, r1
 8004afa:	4619      	mov	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	08009514 	.word	0x08009514

08004b14 <LL_DMA_SetMemoryIncMode>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <LL_DMA_SetMemoryIncMode+0x48>)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4413      	add	r3, r2
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b38:	4908      	ldr	r1, [pc, #32]	; (8004b5c <LL_DMA_SetMemoryIncMode+0x48>)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	440b      	add	r3, r1
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	440b      	add	r3, r1
 8004b46:	4619      	mov	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	08009514 	.word	0x08009514

08004b60 <LL_DMA_SetPeriphSize>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004b70:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <LL_DMA_SetPeriphSize+0x48>)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b84:	4908      	ldr	r1, [pc, #32]	; (8004ba8 <LL_DMA_SetPeriphSize+0x48>)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	440b      	add	r3, r1
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	440b      	add	r3, r1
 8004b92:	4619      	mov	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	08009514 	.word	0x08009514

08004bac <LL_DMA_SetMemorySize>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004bbc:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <LL_DMA_SetMemorySize+0x48>)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd0:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <LL_DMA_SetMemorySize+0x48>)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	440b      	add	r3, r1
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	08009514 	.word	0x08009514

08004bf8 <LL_DMA_SetChannelPriorityLevel>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004c08:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c1c:	4908      	ldr	r1, [pc, #32]	; (8004c40 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	440b      	add	r3, r1
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	440b      	add	r3, r1
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	08009514 	.word	0x08009514

08004c44 <LL_DMA_SetPeriphRequest>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004c58:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c6c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c82:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_USART_Enable>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_USART_DisableFIFO>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_USART_SetTXFIFOThreshold>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	075b      	lsls	r3, r3, #29
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_USART_SetRXFIFOThreshold>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	065b      	lsls	r3, r3, #25
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_USART_ConfigAsyncMode>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_USART_IsActiveFlag_TEACK>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d68:	d101      	bne.n	8004d6e <LL_USART_IsActiveFlag_TEACK+0x1a>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_USART_IsActiveFlag_REACK>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d101      	bne.n	8004d96 <LL_USART_IsActiveFlag_REACK+0x1a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <LL_USART_IsActiveFlag_REACK+0x1c>
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_AHB2_GRP1_EnableClock>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db0:	4907      	ldr	r1, [pc, #28]	; (8004dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004dde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de0:	4907      	ldr	r1, [pc, #28]	; (8004e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004dea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4013      	ands	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	40021000 	.word	0x40021000

08004e04 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004e0a:	f107 0318 	add.w	r3, r7, #24
 8004e0e:	2220      	movs	r2, #32
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f003 f828 	bl	8007e68 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e18:	463b      	mov	r3, r7
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	609a      	str	r2, [r3, #8]
 8004e22:	60da      	str	r2, [r3, #12]
 8004e24:	611a      	str	r2, [r3, #16]
 8004e26:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004e28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e2c:	f7ff ffd2 	bl	8004dd4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7ff ffb7 	bl	8004da4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004e36:	2304      	movs	r3, #4
 8004e38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004e4a:	2307      	movs	r3, #7
 8004e4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4e:	463b      	mov	r3, r7
 8004e50:	4619      	mov	r1, r3
 8004e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e56:	f001 faf2 	bl	800643e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004e6e:	2307      	movs	r3, #7
 8004e70:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e72:	463b      	mov	r3, r7
 8004e74:	4619      	mov	r1, r3
 8004e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e7a:	f001 fae0 	bl	800643e <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 8004e7e:	221b      	movs	r2, #27
 8004e80:	2100      	movs	r1, #0
 8004e82:	4838      	ldr	r0, [pc, #224]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004e84:	f7ff fede 	bl	8004c44 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004e88:	2210      	movs	r2, #16
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4835      	ldr	r0, [pc, #212]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004e8e:	f7ff fdcd 	bl	8004a2c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	4833      	ldr	r0, [pc, #204]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004e98:	f7ff feae 	bl	8004bf8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4830      	ldr	r0, [pc, #192]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004ea2:	f7ff fdeb 	bl	8004a7c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	482e      	ldr	r0, [pc, #184]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004eac:	f7ff fe0c 	bl	8004ac8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	482b      	ldr	r0, [pc, #172]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004eb6:	f7ff fe2d 	bl	8004b14 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4829      	ldr	r0, [pc, #164]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004ec0:	f7ff fe4e 	bl	8004b60 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4826      	ldr	r0, [pc, #152]	; (8004f64 <MX_USART2_UART_Init+0x160>)
 8004eca:	f7ff fe6f 	bl	8004bac <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004ece:	f7ff fd23 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fd73 	bl	80049c4 <NVIC_EncodePriority>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	2026      	movs	r0, #38	; 0x26
 8004ee4:	f7ff fd44 	bl	8004970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004ee8:	2026      	movs	r0, #38	; 0x26
 8004eea:	f7ff fd23 	bl	8004934 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8004ef2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004ef6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004f04:	230c      	movs	r3, #12
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004f10:	f107 0318 	add.w	r3, r7, #24
 8004f14:	4619      	mov	r1, r3
 8004f16:	4814      	ldr	r0, [pc, #80]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f18:	f001 fe0e 	bl	8006b38 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4812      	ldr	r0, [pc, #72]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f20:	f7ff feda 	bl	8004cd8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8004f24:	2100      	movs	r1, #0
 8004f26:	4810      	ldr	r0, [pc, #64]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f28:	f7ff feea 	bl	8004d00 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8004f2c:	480e      	ldr	r0, [pc, #56]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f2e:	f7ff fec3 	bl	8004cb8 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8004f32:	480d      	ldr	r0, [pc, #52]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f34:	f7ff fef8 	bl	8004d28 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f3a:	f7ff fead 	bl	8004c98 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8004f3e:	bf00      	nop
 8004f40:	4809      	ldr	r0, [pc, #36]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f42:	f7ff ff07 	bl	8004d54 <LL_USART_IsActiveFlag_TEACK>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f9      	beq.n	8004f40 <MX_USART2_UART_Init+0x13c>
 8004f4c:	4806      	ldr	r0, [pc, #24]	; (8004f68 <MX_USART2_UART_Init+0x164>)
 8004f4e:	f7ff ff15 	bl	8004d7c <LL_USART_IsActiveFlag_REACK>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f3      	beq.n	8004f40 <MX_USART2_UART_Init+0x13c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3738      	adds	r7, #56	; 0x38
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40020000 	.word	0x40020000
 8004f68:	40004400 	.word	0x40004400

08004f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f70:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f72:	490e      	ldr	r1, [pc, #56]	; (8004fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <LoopForever+0xe>)
  movs r3, #0
 8004f76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004f78:	e002      	b.n	8004f80 <LoopCopyDataInit>

08004f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f7e:	3304      	adds	r3, #4

08004f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f84:	d3f9      	bcc.n	8004f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f88:	4c0b      	ldr	r4, [pc, #44]	; (8004fb8 <LoopForever+0x16>)
  movs r3, #0
 8004f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f8c:	e001      	b.n	8004f92 <LoopFillZerobss>

08004f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f90:	3204      	adds	r2, #4

08004f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f94:	d3fb      	bcc.n	8004f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f96:	f7ff fcad 	bl	80048f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f9a:	f002 ff23 	bl	8007de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f9e:	f7ff fa3d 	bl	800441c <main>

08004fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8004fa2:	e7fe      	b.n	8004fa2 <LoopForever>
  ldr   r0, =_estack
 8004fa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004fb0:	08009880 	.word	0x08009880
  ldr r2, =_sbss
 8004fb4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004fb8:	20003ae0 	.word	0x20003ae0

08004fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC1_2_IRQHandler>

08004fbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc8:	2003      	movs	r0, #3
 8004fca:	f000 f91b 	bl	8005204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fce:	200f      	movs	r0, #15
 8004fd0:	f000 f80e 	bl	8004ff0 <HAL_InitTick>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	71fb      	strb	r3, [r7, #7]
 8004fde:	e001      	b.n	8004fe4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004fe0:	f7ff fb9e 	bl	8004720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]

}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <HAL_InitTick+0x68>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d022      	beq.n	800504a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_InitTick+0x6c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_InitTick+0x68>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005010:	fbb1 f3f3 	udiv	r3, r1, r3
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f918 	bl	800524e <HAL_SYSTICK_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d809      	bhi.n	800503e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800502a:	2200      	movs	r2, #0
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	f04f 30ff 	mov.w	r0, #4294967295
 8005032:	f000 f8f2 	bl	800521a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <HAL_InitTick+0x70>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e007      	b.n	800504e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e004      	b.n	800504e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e001      	b.n	800504e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000008 	.word	0x20000008
 800505c:	20000000 	.word	0x20000000
 8005060:	20000004 	.word	0x20000004

08005064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_IncTick+0x1c>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_IncTick+0x20>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4413      	add	r3, r2
 8005072:	4a03      	ldr	r2, [pc, #12]	; (8005080 <HAL_IncTick+0x1c>)
 8005074:	6013      	str	r3, [r2, #0]
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20003acc 	.word	0x20003acc
 8005084:	20000008 	.word	0x20000008

08005088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return uwTick;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_GetTick+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20003acc 	.word	0x20003acc

080050a0 <__NVIC_SetPriorityGrouping>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <__NVIC_SetPriorityGrouping+0x44>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050bc:	4013      	ands	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050d2:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <__NVIC_SetPriorityGrouping+0x44>)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	60d3      	str	r3, [r2, #12]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <__NVIC_GetPriorityGrouping>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__NVIC_GetPriorityGrouping+0x18>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	0a1b      	lsrs	r3, r3, #8
 80050f2:	f003 0307 	and.w	r3, r3, #7
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <__NVIC_SetPriority>:
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db0a      	blt.n	800512e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	490c      	ldr	r1, [pc, #48]	; (8005150 <__NVIC_SetPriority+0x4c>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	440b      	add	r3, r1
 8005128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800512c:	e00a      	b.n	8005144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4908      	ldr	r1, [pc, #32]	; (8005154 <__NVIC_SetPriority+0x50>)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	3b04      	subs	r3, #4
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	440b      	add	r3, r1
 8005142:	761a      	strb	r2, [r3, #24]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000e100 	.word	0xe000e100
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <NVIC_EncodePriority>:
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf28      	it	cs
 8005176:	2304      	movcs	r3, #4
 8005178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3304      	adds	r3, #4
 800517e:	2b06      	cmp	r3, #6
 8005180:	d902      	bls.n	8005188 <NVIC_EncodePriority+0x30>
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3b03      	subs	r3, #3
 8005186:	e000      	b.n	800518a <NVIC_EncodePriority+0x32>
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	401a      	ands	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	43d9      	mvns	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b0:	4313      	orrs	r3, r2
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d0:	d301      	bcc.n	80051d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00f      	b.n	80051f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <SysTick_Config+0x40>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051de:	210f      	movs	r1, #15
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	f7ff ff8e 	bl	8005104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <SysTick_Config+0x40>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <SysTick_Config+0x40>)
 80051f0:	2207      	movs	r2, #7
 80051f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	e000e010 	.word	0xe000e010

08005204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ff47 	bl	80050a0 <__NVIC_SetPriorityGrouping>
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	4603      	mov	r3, r0
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005228:	f7ff ff5e 	bl	80050e8 <__NVIC_GetPriorityGrouping>
 800522c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff ff90 	bl	8005158 <NVIC_EncodePriority>
 8005238:	4602      	mov	r2, r0
 800523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff5f 	bl	8005104 <__NVIC_SetPriority>
}
 8005246:	bf00      	nop
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffb2 	bl	80051c0 <SysTick_Config>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d141      	bne.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005276:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d131      	bne.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005284:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528a:	4a46      	ldr	r2, [pc, #280]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005294:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800529c:	4a41      	ldr	r2, [pc, #260]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052a4:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2232      	movs	r2, #50	; 0x32
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	4a3f      	ldr	r2, [pc, #252]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	0c9b      	lsrs	r3, r3, #18
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ba:	e002      	b.n	80052c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c2:	4b38      	ldr	r3, [pc, #224]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ce:	d102      	bne.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f2      	bne.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052d6:	4b33      	ldr	r3, [pc, #204]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d158      	bne.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e057      	b.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ee:	4a2d      	ldr	r2, [pc, #180]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052f8:	e04d      	b.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005300:	d141      	bne.n	8005386 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d131      	bne.n	8005374 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005316:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005320:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005328:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2232      	movs	r2, #50	; 0x32
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	0c9b      	lsrs	r3, r3, #18
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005346:	e002      	b.n	800534e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b01      	subs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d102      	bne.n	8005362 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f2      	bne.n	8005348 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	d112      	bne.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e011      	b.n	8005398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005384:	e007      	b.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005394:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40007000 	.word	0x40007000
 80053a8:	20000000 	.word	0x20000000
 80053ac:	431bde83 	.word	0x431bde83

080053b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053be:	6093      	str	r3, [r2, #8]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40007000 	.word	0x40007000

080053d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e308      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d075      	beq.n	80054da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ee:	4ba3      	ldr	r3, [pc, #652]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f8:	4ba0      	ldr	r3, [pc, #640]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	d102      	bne.n	800540e <HAL_RCC_OscConfig+0x3e>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d002      	beq.n	8005414 <HAL_RCC_OscConfig+0x44>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d10b      	bne.n	800542c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005414:	4b99      	ldr	r3, [pc, #612]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d05b      	beq.n	80054d8 <HAL_RCC_OscConfig+0x108>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d157      	bne.n	80054d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e2e3      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005434:	d106      	bne.n	8005444 <HAL_RCC_OscConfig+0x74>
 8005436:	4b91      	ldr	r3, [pc, #580]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a90      	ldr	r2, [pc, #576]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e01d      	b.n	8005480 <HAL_RCC_OscConfig+0xb0>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0x98>
 800544e:	4b8b      	ldr	r3, [pc, #556]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a8a      	ldr	r2, [pc, #552]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a87      	ldr	r2, [pc, #540]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e00b      	b.n	8005480 <HAL_RCC_OscConfig+0xb0>
 8005468:	4b84      	ldr	r3, [pc, #528]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a83      	ldr	r2, [pc, #524]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800546e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	4b81      	ldr	r3, [pc, #516]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a80      	ldr	r2, [pc, #512]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800547a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7ff fdfe 	bl	8005088 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005490:	f7ff fdfa 	bl	8005088 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	; 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e2a8      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0xc0>
 80054ae:	e014      	b.n	80054da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7ff fdea 	bl	8005088 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b8:	f7ff fde6 	bl	8005088 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e294      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ca:	4b6c      	ldr	r3, [pc, #432]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0xe8>
 80054d6:	e000      	b.n	80054da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d075      	beq.n	80055d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e6:	4b65      	ldr	r3, [pc, #404]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054f0:	4b62      	ldr	r3, [pc, #392]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d102      	bne.n	8005506 <HAL_RCC_OscConfig+0x136>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d002      	beq.n	800550c <HAL_RCC_OscConfig+0x13c>
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11f      	bne.n	800554c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800550c:	4b5b      	ldr	r3, [pc, #364]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_RCC_OscConfig+0x154>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e267      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005524:	4b55      	ldr	r3, [pc, #340]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	4952      	ldr	r1, [pc, #328]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	4313      	orrs	r3, r2
 8005536:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005538:	4b51      	ldr	r3, [pc, #324]	; (8005680 <HAL_RCC_OscConfig+0x2b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fd57 	bl	8004ff0 <HAL_InitTick>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d043      	beq.n	80055d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e253      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d023      	beq.n	800559c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005554:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a48      	ldr	r2, [pc, #288]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7ff fd92 	bl	8005088 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005568:	f7ff fd8e 	bl	8005088 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e23c      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800557a:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005586:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	4939      	ldr	r1, [pc, #228]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
 800559a:	e01a      	b.n	80055d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559c:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a36      	ldr	r2, [pc, #216]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80055a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7ff fd6e 	bl	8005088 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7ff fd6a 	bl	8005088 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e218      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1e0>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03c      	beq.n	8005658 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01c      	beq.n	8005620 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e6:	4b25      	ldr	r3, [pc, #148]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f6:	f7ff fd47 	bl	8005088 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fe:	f7ff fd43 	bl	8005088 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e1f1      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ef      	beq.n	80055fe <HAL_RCC_OscConfig+0x22e>
 800561e:	e01b      	b.n	8005658 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005620:	4b16      	ldr	r3, [pc, #88]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7ff fd2a 	bl	8005088 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005638:	f7ff fd26 	bl	8005088 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e1d4      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ef      	bne.n	8005638 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80ab 	beq.w	80057bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCC_OscConfig+0x2ac>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_RCC_OscConfig+0x2b4>
 8005676:	2301      	movs	r3, #1
 8005678:	e005      	b.n	8005686 <HAL_RCC_OscConfig+0x2b6>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	20000004 	.word	0x20000004
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	4baf      	ldr	r3, [pc, #700]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	4aae      	ldr	r2, [pc, #696]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
 8005696:	4bac      	ldr	r3, [pc, #688]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a6:	4ba9      	ldr	r3, [pc, #676]	; (800594c <HAL_RCC_OscConfig+0x57c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b2:	4ba6      	ldr	r3, [pc, #664]	; (800594c <HAL_RCC_OscConfig+0x57c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4aa5      	ldr	r2, [pc, #660]	; (800594c <HAL_RCC_OscConfig+0x57c>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7ff fce3 	bl	8005088 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7ff fcdf 	bl	8005088 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e18d      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d8:	4b9c      	ldr	r3, [pc, #624]	; (800594c <HAL_RCC_OscConfig+0x57c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d108      	bne.n	80056fe <HAL_RCC_OscConfig+0x32e>
 80056ec:	4b96      	ldr	r3, [pc, #600]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	4a95      	ldr	r2, [pc, #596]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056fc:	e024      	b.n	8005748 <HAL_RCC_OscConfig+0x378>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b05      	cmp	r3, #5
 8005704:	d110      	bne.n	8005728 <HAL_RCC_OscConfig+0x358>
 8005706:	4b90      	ldr	r3, [pc, #576]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a8e      	ldr	r2, [pc, #568]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005716:	4b8c      	ldr	r3, [pc, #560]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	4a8a      	ldr	r2, [pc, #552]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005726:	e00f      	b.n	8005748 <HAL_RCC_OscConfig+0x378>
 8005728:	4b87      	ldr	r3, [pc, #540]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	4a86      	ldr	r2, [pc, #536]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005738:	4b83      	ldr	r3, [pc, #524]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	4a82      	ldr	r2, [pc, #520]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d016      	beq.n	800577e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7ff fc9a 	bl	8005088 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005756:	e00a      	b.n	800576e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005758:	f7ff fc96 	bl	8005088 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e142      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ed      	beq.n	8005758 <HAL_RCC_OscConfig+0x388>
 800577c:	e015      	b.n	80057aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7ff fc83 	bl	8005088 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7ff fc7f 	bl	8005088 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e12b      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800579c:	4b6a      	ldr	r3, [pc, #424]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ed      	bne.n	8005786 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057aa:	7ffb      	ldrb	r3, [r7, #31]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b0:	4b65      	ldr	r3, [pc, #404]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	4a64      	ldr	r2, [pc, #400]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80057b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d03c      	beq.n	8005842 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01c      	beq.n	800580a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057d0:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80057d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d6:	4a5c      	ldr	r2, [pc, #368]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7ff fc52 	bl	8005088 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e8:	f7ff fc4e 	bl	8005088 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0fc      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057fa:	4b53      	ldr	r3, [pc, #332]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80057fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ef      	beq.n	80057e8 <HAL_RCC_OscConfig+0x418>
 8005808:	e01b      	b.n	8005842 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800580c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005810:	4a4d      	ldr	r2, [pc, #308]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7ff fc35 	bl	8005088 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005822:	f7ff fc31 	bl	8005088 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0df      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005834:	4b44      	ldr	r3, [pc, #272]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ef      	bne.n	8005822 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80d3 	beq.w	80059f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800584c:	4b3e      	ldr	r3, [pc, #248]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 030c 	and.w	r3, r3, #12
 8005854:	2b0c      	cmp	r3, #12
 8005856:	f000 808d 	beq.w	8005974 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d15a      	bne.n	8005918 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b39      	ldr	r3, [pc, #228]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a38      	ldr	r2, [pc, #224]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7ff fc0b 	bl	8005088 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005876:	f7ff fc07 	bl	8005088 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0b5      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005894:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCC_OscConfig+0x580>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6a11      	ldr	r1, [r2, #32]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058ae:	0212      	lsls	r2, r2, #8
 80058b0:	4311      	orrs	r1, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058b6:	0852      	lsrs	r2, r2, #1
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0552      	lsls	r2, r2, #21
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058c2:	0852      	lsrs	r2, r2, #1
 80058c4:	3a01      	subs	r2, #1
 80058c6:	0652      	lsls	r2, r2, #25
 80058c8:	4311      	orrs	r1, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058ce:	06d2      	lsls	r2, r2, #27
 80058d0:	430a      	orrs	r2, r1
 80058d2:	491d      	ldr	r1, [pc, #116]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a17      	ldr	r2, [pc, #92]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7ff fbca 	bl	8005088 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7ff fbc6 	bl	8005088 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e074      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x528>
 8005916:	e06c      	b.n	80059f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a07      	ldr	r2, [pc, #28]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a04      	ldr	r2, [pc, #16]	; (8005948 <HAL_RCC_OscConfig+0x578>)
 8005936:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7ff fba2 	bl	8005088 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005946:	e00e      	b.n	8005966 <HAL_RCC_OscConfig+0x596>
 8005948:	40021000 	.word	0x40021000
 800594c:	40007000 	.word	0x40007000
 8005950:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005954:	f7ff fb98 	bl	8005088 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e046      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005966:	4b25      	ldr	r3, [pc, #148]	; (80059fc <HAL_RCC_OscConfig+0x62c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x584>
 8005972:	e03e      	b.n	80059f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e039      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <HAL_RCC_OscConfig+0x62c>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	429a      	cmp	r2, r3
 8005992:	d12c      	bne.n	80059ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	3b01      	subs	r3, #1
 80059a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d123      	bne.n	80059ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d11b      	bne.n	80059ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d113      	bne.n	80059ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	3b01      	subs	r3, #1
 80059d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d109      	bne.n	80059ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	3b01      	subs	r3, #1
 80059e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000

08005a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e11e      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b91      	ldr	r3, [pc, #580]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d910      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b8e      	ldr	r3, [pc, #568]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 020f 	bic.w	r2, r3, #15
 8005a2e:	498c      	ldr	r1, [pc, #560]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b8a      	ldr	r3, [pc, #552]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e106      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d073      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d129      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5c:	4b81      	ldr	r3, [pc, #516]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0f4      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a6c:	f000 f966 	bl	8005d3c <RCC_GetSysClockFreqFromPLLSource>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4a7c      	ldr	r2, [pc, #496]	; (8005c68 <HAL_RCC_ClockConfig+0x268>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d93f      	bls.n	8005afa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a7a:	4b7a      	ldr	r3, [pc, #488]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d033      	beq.n	8005afa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d12f      	bne.n	8005afa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a9a:	4b72      	ldr	r3, [pc, #456]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa2:	4a70      	ldr	r2, [pc, #448]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e024      	b.n	8005afa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab8:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0c6      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac8:	4b66      	ldr	r3, [pc, #408]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0be      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ad8:	f000 f8ce 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4a61      	ldr	r2, [pc, #388]	; (8005c68 <HAL_RCC_ClockConfig+0x268>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d909      	bls.n	8005afa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ae6:	4b5f      	ldr	r3, [pc, #380]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aee:	4a5d      	ldr	r2, [pc, #372]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005afa:	4b5a      	ldr	r3, [pc, #360]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4957      	ldr	r1, [pc, #348]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0c:	f7ff fabc 	bl	8005088 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7ff fab8 	bl	8005088 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e095      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	4b4e      	ldr	r3, [pc, #312]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 020c 	and.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1eb      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d023      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b54:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a42      	ldr	r2, [pc, #264]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b6c:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b74:	4a3b      	ldr	r2, [pc, #236]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4936      	ldr	r1, [pc, #216]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b96:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4a32      	ldr	r2, [pc, #200]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d21d      	bcs.n	8005bec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 020f 	bic.w	r2, r3, #15
 8005bb8:	4929      	ldr	r1, [pc, #164]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bc0:	f7ff fa62 	bl	8005088 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7ff fa5e 	bl	8005088 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e03b      	b.n	8005c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCC_ClockConfig+0x260>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d1ed      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4917      	ldr	r1, [pc, #92]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	490f      	ldr	r1, [pc, #60]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c2a:	f000 f825 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <HAL_RCC_ClockConfig+0x264>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	490c      	ldr	r1, [pc, #48]	; (8005c6c <HAL_RCC_ClockConfig+0x26c>)
 8005c3c:	5ccb      	ldrb	r3, [r1, r3]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <HAL_RCC_ClockConfig+0x270>)
 8005c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_ClockConfig+0x274>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff f9ce 	bl	8004ff0 <HAL_InitTick>
 8005c54:	4603      	mov	r3, r0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40022000 	.word	0x40022000
 8005c64:	40021000 	.word	0x40021000
 8005c68:	04c4b400 	.word	0x04c4b400
 8005c6c:	080094fc 	.word	0x080094fc
 8005c70:	20000000 	.word	0x20000000
 8005c74:	20000004 	.word	0x20000004

08005c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c7e:	4b2c      	ldr	r3, [pc, #176]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d102      	bne.n	8005c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c8a:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c8c:	613b      	str	r3, [r7, #16]
 8005c8e:	e047      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c9c:	4b26      	ldr	r3, [pc, #152]	; (8005d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e03e      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d136      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d10c      	bne.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd6:	68d2      	ldr	r2, [r2, #12]
 8005cd8:	0a12      	lsrs	r2, r2, #8
 8005cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	617b      	str	r3, [r7, #20]
      break;
 8005ce4:	e00c      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cf0:	68d2      	ldr	r2, [r2, #12]
 8005cf2:	0a12      	lsrs	r2, r2, #8
 8005cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
      break;
 8005cfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	0e5b      	lsrs	r3, r3, #25
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e001      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d20:	693b      	ldr	r3, [r7, #16]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	016e3600 	.word	0x016e3600

08005d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d10c      	bne.n	8005d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d6a:	68d2      	ldr	r2, [r2, #12]
 8005d6c:	0a12      	lsrs	r2, r2, #8
 8005d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	617b      	str	r3, [r7, #20]
    break;
 8005d78:	e00c      	b.n	8005d94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d84:	68d2      	ldr	r2, [r2, #12]
 8005d86:	0a12      	lsrs	r2, r2, #8
 8005d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]
    break;
 8005d92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0e5b      	lsrs	r3, r3, #25
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005dae:	687b      	ldr	r3, [r7, #4]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	016e3600 	.word	0x016e3600
 8005dc4:	00f42400 	.word	0x00f42400

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8098 	beq.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005de6:	2300      	movs	r3, #0
 8005de8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dea:	4b43      	ldr	r3, [pc, #268]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10d      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	4a3f      	ldr	r2, [pc, #252]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6593      	str	r3, [r2, #88]	; 0x58
 8005e02:	4b3d      	ldr	r3, [pc, #244]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	60bb      	str	r3, [r7, #8]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e12:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e1e:	f7ff f933 	bl	8005088 <HAL_GetTick>
 8005e22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e24:	e009      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e26:	f7ff f92f 	bl	8005088 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d902      	bls.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	74fb      	strb	r3, [r7, #19]
        break;
 8005e38:	e005      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e3a:	4b30      	ldr	r3, [pc, #192]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0ef      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d159      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01e      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d019      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e68:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e74:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e84:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d016      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7ff f8ef 	bl	8005088 <HAL_GetTick>
 8005eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eac:	e00b      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7ff f8eb 	bl	8005088 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d902      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8005ec4:	e006      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0ec      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ed4:	7cfb      	ldrb	r3, [r7, #19]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	4903      	ldr	r1, [pc, #12]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ef0:	e008      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef2:	7cfb      	ldrb	r3, [r7, #19]
 8005ef4:	74bb      	strb	r3, [r7, #18]
 8005ef6:	e005      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f04:	7c7b      	ldrb	r3, [r7, #17]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0a:	4ba6      	ldr	r3, [pc, #664]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	4aa5      	ldr	r2, [pc, #660]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f22:	4ba0      	ldr	r3, [pc, #640]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f023 0203 	bic.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	499c      	ldr	r1, [pc, #624]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f44:	4b97      	ldr	r3, [pc, #604]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	f023 020c 	bic.w	r2, r3, #12
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4994      	ldr	r1, [pc, #592]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f66:	4b8f      	ldr	r3, [pc, #572]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	498b      	ldr	r1, [pc, #556]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f88:	4b86      	ldr	r3, [pc, #536]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	4983      	ldr	r1, [pc, #524]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005faa:	4b7e      	ldr	r3, [pc, #504]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	497a      	ldr	r1, [pc, #488]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fcc:	4b75      	ldr	r3, [pc, #468]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	4972      	ldr	r1, [pc, #456]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fee:	4b6d      	ldr	r3, [pc, #436]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4969      	ldr	r1, [pc, #420]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006010:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	4961      	ldr	r1, [pc, #388]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006032:	4b5c      	ldr	r3, [pc, #368]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	4958      	ldr	r1, [pc, #352]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006054:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	4950      	ldr	r1, [pc, #320]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006074:	4b4b      	ldr	r3, [pc, #300]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a4a      	ldr	r2, [pc, #296]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800608c:	4b45      	ldr	r3, [pc, #276]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	4942      	ldr	r1, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060c4:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4934      	ldr	r1, [pc, #208]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e4:	4b2f      	ldr	r3, [pc, #188]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a2e      	ldr	r2, [pc, #184]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d015      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060fc:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	4926      	ldr	r1, [pc, #152]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611a:	d105      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006126:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d015      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006134:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	4918      	ldr	r1, [pc, #96]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006152:	d105      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d015      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	490a      	ldr	r1, [pc, #40]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618a:	d105      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006198:	7cbb      	ldrb	r3, [r7, #18]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000

080061a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b08b      	sub	sp, #44	; 0x2c
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	fa93 f3a3 	rbit	r3, r3
 80061c2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80061ce:	2320      	movs	r3, #32
 80061d0:	e003      	b.n	80061da <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	fab3 f383 	clz	r3, r3
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2103      	movs	r1, #3
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	401a      	ands	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	61fb      	str	r3, [r7, #28]
  return result;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e003      	b.n	8006208 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	372c      	adds	r7, #44	; 0x2c
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	43db      	mvns	r3, r3
 8006236:	401a      	ands	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	431a      	orrs	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	605a      	str	r2, [r3, #4]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006252:	b480      	push	{r7}
 8006254:	b08b      	sub	sp, #44	; 0x2c
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	613b      	str	r3, [r7, #16]
  return result;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006278:	2320      	movs	r3, #32
 800627a:	e003      	b.n	8006284 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	2103      	movs	r1, #3
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	fa93 f3a3 	rbit	r3, r3
 800629a:	61fb      	str	r3, [r7, #28]
  return result;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80062a6:	2320      	movs	r3, #32
 80062a8:	e003      	b.n	80062b2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80062c0:	bf00      	nop
 80062c2:	372c      	adds	r7, #44	; 0x2c
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b08b      	sub	sp, #44	; 0x2c
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	fa93 f3a3 	rbit	r3, r3
 80062e6:	613b      	str	r3, [r7, #16]
  return result;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80062f2:	2320      	movs	r3, #32
 80062f4:	e003      	b.n	80062fe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	fab3 f383 	clz	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	2103      	movs	r1, #3
 8006302:	fa01 f303 	lsl.w	r3, r1, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	401a      	ands	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	61fb      	str	r3, [r7, #28]
  return result;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006320:	2320      	movs	r3, #32
 8006322:	e003      	b.n	800632c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	fab3 f383 	clz	r3, r3
 800632a:	b2db      	uxtb	r3, r3
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60da      	str	r2, [r3, #12]
}
 800633a:	bf00      	nop
 800633c:	372c      	adds	r7, #44	; 0x2c
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006346:	b480      	push	{r7}
 8006348:	b08b      	sub	sp, #44	; 0x2c
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	fa93 f3a3 	rbit	r3, r3
 8006360:	613b      	str	r3, [r7, #16]
  return result;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800636c:	2320      	movs	r3, #32
 800636e:	e003      	b.n	8006378 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	fab3 f383 	clz	r3, r3
 8006376:	b2db      	uxtb	r3, r3
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	210f      	movs	r1, #15
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	61fb      	str	r3, [r7, #28]
  return result;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800639a:	2320      	movs	r3, #32
 800639c:	e003      	b.n	80063a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	fab3 f383 	clz	r3, r3
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	fa01 f303 	lsl.w	r3, r1, r3
 80063ae:	431a      	orrs	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80063b4:	bf00      	nop
 80063b6:	372c      	adds	r7, #44	; 0x2c
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b08b      	sub	sp, #44	; 0x2c
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	fa93 f3a3 	rbit	r3, r3
 80063dc:	613b      	str	r3, [r7, #16]
  return result;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80063e8:	2320      	movs	r3, #32
 80063ea:	e003      	b.n	80063f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	210f      	movs	r1, #15
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	fa93 f3a3 	rbit	r3, r3
 800640c:	61fb      	str	r3, [r7, #28]
  return result;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006418:	2320      	movs	r3, #32
 800641a:	e003      	b.n	8006424 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	fab3 f383 	clz	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006432:	bf00      	nop
 8006434:	372c      	adds	r7, #44	; 0x2c
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b088      	sub	sp, #32
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	fa93 f3a3 	rbit	r3, r3
 8006454:	60fb      	str	r3, [r7, #12]
  return result;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <LL_GPIO_Init+0x26>
    return 32U;
 8006460:	2320      	movs	r3, #32
 8006462:	e003      	b.n	800646c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fab3 f383 	clz	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800646e:	e048      	b.n	8006502 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	2101      	movs	r1, #1
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	4013      	ands	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d03a      	beq.n	80064fc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d003      	beq.n	8006496 <LL_GPIO_Init+0x58>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d10e      	bne.n	80064b4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	461a      	mov	r2, r3
 800649c:	69b9      	ldr	r1, [r7, #24]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fed7 	bl	8006252 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff feb7 	bl	8006222 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	461a      	mov	r2, r3
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff05 	bl	80062cc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d111      	bne.n	80064ee <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2bff      	cmp	r3, #255	; 0xff
 80064ce:	d807      	bhi.n	80064e0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	461a      	mov	r2, r3
 80064d6:	69b9      	ldr	r1, [r7, #24]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff34 	bl	8006346 <LL_GPIO_SetAFPin_0_7>
 80064de:	e006      	b.n	80064ee <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	461a      	mov	r2, r3
 80064e6:	69b9      	ldr	r1, [r7, #24]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff69 	bl	80063c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	461a      	mov	r2, r3
 80064f4:	69b9      	ldr	r1, [r7, #24]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fe56 	bl	80061a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1af      	bne.n	8006470 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <LL_RCC_HSI_IsReady+0x24>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d101      	bne.n	8006532 <LL_RCC_HSI_IsReady+0x16>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <LL_RCC_HSI_IsReady+0x18>
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40021000 	.word	0x40021000

08006544 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <LL_RCC_LSE_IsReady+0x24>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d101      	bne.n	800655a <LL_RCC_LSE_IsReady+0x16>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <LL_RCC_LSE_IsReady+0x18>
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40021000 	.word	0x40021000

0800656c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <LL_RCC_GetSysClkSource+0x18>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
}
 8006578:	4618      	mov	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000

08006588 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000

080065a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000

080065c0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000

080065dc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <LL_RCC_GetUSARTClockSource+0x24>)
 80065e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	401a      	ands	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	4313      	orrs	r3, r2
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40021000 	.word	0x40021000

08006604 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <LL_RCC_GetUARTClockSource+0x24>)
 800660e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	401a      	ands	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	4313      	orrs	r3, r2
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40021000 	.word	0x40021000

0800662c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <LL_RCC_PLL_GetMainSource+0x18>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0303 	and.w	r3, r3, #3
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000

08006648 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <LL_RCC_PLL_GetN+0x18>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006656:	4618      	mov	r0, r3
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000

08006664 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <LL_RCC_PLL_GetR+0x18>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40021000 	.word	0x40021000

08006680 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <LL_RCC_PLL_GetDivider+0x18>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000

0800669c <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d132      	bne.n	8006714 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff ff94 	bl	80065dc <LL_RCC_GetUSARTClockSource>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80066ba:	d016      	beq.n	80066ea <LL_RCC_GetUSARTClockFreq+0x4e>
 80066bc:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80066c0:	d81c      	bhi.n	80066fc <LL_RCC_GetUSARTClockFreq+0x60>
 80066c2:	4a52      	ldr	r2, [pc, #328]	; (800680c <LL_RCC_GetUSARTClockFreq+0x170>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <LL_RCC_GetUSARTClockFreq+0x34>
 80066c8:	4a51      	ldr	r2, [pc, #324]	; (8006810 <LL_RCC_GetUSARTClockFreq+0x174>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <LL_RCC_GetUSARTClockFreq+0x3c>
 80066ce:	e015      	b.n	80066fc <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80066d0:	f000 f8f6 	bl	80068c0 <RCC_GetSystemClockFreq>
 80066d4:	60f8      	str	r0, [r7, #12]
        break;
 80066d6:	e094      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80066d8:	f7ff ff20 	bl	800651c <LL_RCC_HSI_IsReady>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8082 	beq.w	80067e8 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 80066e4:	4b4b      	ldr	r3, [pc, #300]	; (8006814 <LL_RCC_GetUSARTClockFreq+0x178>)
 80066e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80066e8:	e07e      	b.n	80067e8 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80066ea:	f7ff ff2b 	bl	8006544 <LL_RCC_LSE_IsReady>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d07b      	beq.n	80067ec <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 80066f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80066fa:	e077      	b.n	80067ec <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80066fc:	f000 f8e0 	bl	80068c0 <RCC_GetSystemClockFreq>
 8006700:	4603      	mov	r3, r0
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f902 	bl	800690c <RCC_GetHCLKClockFreq>
 8006708:	4603      	mov	r3, r0
 800670a:	4618      	mov	r0, r3
 800670c:	f000 f92c 	bl	8006968 <RCC_GetPCLK2ClockFreq>
 8006710:	60f8      	str	r0, [r7, #12]
        break;
 8006712:	e076      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b0c      	cmp	r3, #12
 8006718:	d131      	bne.n	800677e <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff ff5e 	bl	80065dc <LL_RCC_GetUSARTClockSource>
 8006720:	4603      	mov	r3, r0
 8006722:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8006726:	d015      	beq.n	8006754 <LL_RCC_GetUSARTClockFreq+0xb8>
 8006728:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800672c:	d81b      	bhi.n	8006766 <LL_RCC_GetUSARTClockFreq+0xca>
 800672e:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <LL_RCC_GetUSARTClockFreq+0xa0>
 8006734:	4a39      	ldr	r2, [pc, #228]	; (800681c <LL_RCC_GetUSARTClockFreq+0x180>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <LL_RCC_GetUSARTClockFreq+0xa8>
 800673a:	e014      	b.n	8006766 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800673c:	f000 f8c0 	bl	80068c0 <RCC_GetSystemClockFreq>
 8006740:	60f8      	str	r0, [r7, #12]
        break;
 8006742:	e05e      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006744:	f7ff feea 	bl	800651c <LL_RCC_HSI_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d050      	beq.n	80067f0 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <LL_RCC_GetUSARTClockFreq+0x178>)
 8006750:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006752:	e04d      	b.n	80067f0 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006754:	f7ff fef6 	bl	8006544 <LL_RCC_LSE_IsReady>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d04a      	beq.n	80067f4 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006764:	e046      	b.n	80067f4 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006766:	f000 f8ab 	bl	80068c0 <RCC_GetSystemClockFreq>
 800676a:	4603      	mov	r3, r0
 800676c:	4618      	mov	r0, r3
 800676e:	f000 f8cd 	bl	800690c <RCC_GetHCLKClockFreq>
 8006772:	4603      	mov	r3, r0
 8006774:	4618      	mov	r0, r3
 8006776:	f000 f8e1 	bl	800693c <RCC_GetPCLK1ClockFreq>
 800677a:	60f8      	str	r0, [r7, #12]
        break;
 800677c:	e041      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b30      	cmp	r3, #48	; 0x30
 8006782:	d139      	bne.n	80067f8 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff29 	bl	80065dc <LL_RCC_GetUSARTClockSource>
 800678a:	4603      	mov	r3, r0
 800678c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006790:	d015      	beq.n	80067be <LL_RCC_GetUSARTClockFreq+0x122>
 8006792:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006796:	d81b      	bhi.n	80067d0 <LL_RCC_GetUSARTClockFreq+0x134>
 8006798:	4a21      	ldr	r2, [pc, #132]	; (8006820 <LL_RCC_GetUSARTClockFreq+0x184>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <LL_RCC_GetUSARTClockFreq+0x10a>
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <LL_RCC_GetUSARTClockFreq+0x188>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <LL_RCC_GetUSARTClockFreq+0x112>
 80067a4:	e014      	b.n	80067d0 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80067a6:	f000 f88b 	bl	80068c0 <RCC_GetSystemClockFreq>
 80067aa:	60f8      	str	r0, [r7, #12]
          break;
 80067ac:	e029      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80067ae:	f7ff feb5 	bl	800651c <LL_RCC_HSI_IsReady>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d021      	beq.n	80067fc <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <LL_RCC_GetUSARTClockFreq+0x178>)
 80067ba:	60fb      	str	r3, [r7, #12]
          }
          break;
 80067bc:	e01e      	b.n	80067fc <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80067be:	f7ff fec1 	bl	8006544 <LL_RCC_LSE_IsReady>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 80067c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067cc:	60fb      	str	r3, [r7, #12]
          }
          break;
 80067ce:	e017      	b.n	8006800 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80067d0:	f000 f876 	bl	80068c0 <RCC_GetSystemClockFreq>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f898 	bl	800690c <RCC_GetHCLKClockFreq>
 80067dc:	4603      	mov	r3, r0
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f8ac 	bl	800693c <RCC_GetPCLK1ClockFreq>
 80067e4:	60f8      	str	r0, [r7, #12]
          break;
 80067e6:	e00c      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80067e8:	bf00      	nop
 80067ea:	e00a      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80067ec:	bf00      	nop
 80067ee:	e008      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80067f0:	bf00      	nop
 80067f2:	e006      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80067f4:	bf00      	nop
 80067f6:	e004      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 80067f8:	bf00      	nop
 80067fa:	e002      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 80067fc:	bf00      	nop
 80067fe:	e000      	b.n	8006802 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8006800:	bf00      	nop
  }
  return usart_frequency;
 8006802:	68fb      	ldr	r3, [r7, #12]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	00030001 	.word	0x00030001
 8006810:	00030002 	.word	0x00030002
 8006814:	00f42400 	.word	0x00f42400
 8006818:	000c0004 	.word	0x000c0004
 800681c:	000c0008 	.word	0x000c0008
 8006820:	00300010 	.word	0x00300010
 8006824:	00300020 	.word	0x00300020

08006828 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2bc0      	cmp	r3, #192	; 0xc0
 8006838:	d131      	bne.n	800689e <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fee2 	bl	8006604 <LL_RCC_GetUARTClockSource>
 8006840:	4603      	mov	r3, r0
 8006842:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006846:	d015      	beq.n	8006874 <LL_RCC_GetUARTClockFreq+0x4c>
 8006848:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800684c:	d81b      	bhi.n	8006886 <LL_RCC_GetUARTClockFreq+0x5e>
 800684e:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <LL_RCC_GetUARTClockFreq+0x8c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <LL_RCC_GetUARTClockFreq+0x34>
 8006854:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <LL_RCC_GetUARTClockFreq+0x90>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <LL_RCC_GetUARTClockFreq+0x3c>
 800685a:	e014      	b.n	8006886 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800685c:	f000 f830 	bl	80068c0 <RCC_GetSystemClockFreq>
 8006860:	60f8      	str	r0, [r7, #12]
        break;
 8006862:	e021      	b.n	80068a8 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006864:	f7ff fe5a 	bl	800651c <LL_RCC_HSI_IsReady>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d019      	beq.n	80068a2 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 800686e:	4b13      	ldr	r3, [pc, #76]	; (80068bc <LL_RCC_GetUARTClockFreq+0x94>)
 8006870:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006872:	e016      	b.n	80068a2 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006874:	f7ff fe66 	bl	8006544 <LL_RCC_LSE_IsReady>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006884:	e00f      	b.n	80068a6 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006886:	f000 f81b 	bl	80068c0 <RCC_GetSystemClockFreq>
 800688a:	4603      	mov	r3, r0
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f83d 	bl	800690c <RCC_GetHCLKClockFreq>
 8006892:	4603      	mov	r3, r0
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f851 	bl	800693c <RCC_GetPCLK1ClockFreq>
 800689a:	60f8      	str	r0, [r7, #12]
        break;
 800689c:	e004      	b.n	80068a8 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 800689e:	bf00      	nop
 80068a0:	e002      	b.n	80068a8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80068a6:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	00c00040 	.word	0x00c00040
 80068b8:	00c00080 	.word	0x00c00080
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80068c6:	f7ff fe51 	bl	800656c <LL_RCC_GetSysClkSource>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d00c      	beq.n	80068ea <RCC_GetSystemClockFreq+0x2a>
 80068d0:	2b0c      	cmp	r3, #12
 80068d2:	d80e      	bhi.n	80068f2 <RCC_GetSystemClockFreq+0x32>
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d002      	beq.n	80068de <RCC_GetSystemClockFreq+0x1e>
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d003      	beq.n	80068e4 <RCC_GetSystemClockFreq+0x24>
 80068dc:	e009      	b.n	80068f2 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80068de:	4b09      	ldr	r3, [pc, #36]	; (8006904 <RCC_GetSystemClockFreq+0x44>)
 80068e0:	607b      	str	r3, [r7, #4]
      break;
 80068e2:	e009      	b.n	80068f8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80068e4:	4b08      	ldr	r3, [pc, #32]	; (8006908 <RCC_GetSystemClockFreq+0x48>)
 80068e6:	607b      	str	r3, [r7, #4]
      break;
 80068e8:	e006      	b.n	80068f8 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80068ea:	f000 f853 	bl	8006994 <RCC_PLL_GetFreqDomain_SYS>
 80068ee:	6078      	str	r0, [r7, #4]
      break;
 80068f0:	e002      	b.n	80068f8 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <RCC_GetSystemClockFreq+0x44>)
 80068f4:	607b      	str	r3, [r7, #4]
      break;
 80068f6:	bf00      	nop
  }

  return frequency;
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	00f42400 	.word	0x00f42400
 8006908:	016e3600 	.word	0x016e3600

0800690c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006914:	f7ff fe38 	bl	8006588 <LL_RCC_GetAHBPrescaler>
 8006918:	4603      	mov	r3, r0
 800691a:	091b      	lsrs	r3, r3, #4
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	4a05      	ldr	r2, [pc, #20]	; (8006938 <RCC_GetHCLKClockFreq+0x2c>)
 8006922:	5cd3      	ldrb	r3, [r2, r3]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	080094fc 	.word	0x080094fc

0800693c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006944:	f7ff fe2e 	bl	80065a4 <LL_RCC_GetAPB1Prescaler>
 8006948:	4603      	mov	r3, r0
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <RCC_GetPCLK1ClockFreq+0x28>)
 800694e:	5cd3      	ldrb	r3, [r2, r3]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	0800950c 	.word	0x0800950c

08006968 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006970:	f7ff fe26 	bl	80065c0 <LL_RCC_GetAPB2Prescaler>
 8006974:	4603      	mov	r3, r0
 8006976:	0adb      	lsrs	r3, r3, #11
 8006978:	4a05      	ldr	r2, [pc, #20]	; (8006990 <RCC_GetPCLK2ClockFreq+0x28>)
 800697a:	5cd3      	ldrb	r3, [r2, r3]
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	0800950c 	.word	0x0800950c

08006994 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800699a:	f7ff fe47 	bl	800662c <LL_RCC_PLL_GetMainSource>
 800699e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d003      	beq.n	80069ae <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d003      	beq.n	80069b4 <RCC_PLL_GetFreqDomain_SYS+0x20>
 80069ac:	e005      	b.n	80069ba <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80069b0:	607b      	str	r3, [r7, #4]
      break;
 80069b2:	e005      	b.n	80069c0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80069b6:	607b      	str	r3, [r7, #4]
      break;
 80069b8:	e002      	b.n	80069c0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80069bc:	607b      	str	r3, [r7, #4]
      break;
 80069be:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80069c0:	f7ff fe42 	bl	8006648 <LL_RCC_PLL_GetN>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	fb03 f402 	mul.w	r4, r3, r2
 80069cc:	f7ff fe58 	bl	8006680 <LL_RCC_PLL_GetDivider>
 80069d0:	4603      	mov	r3, r0
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	3301      	adds	r3, #1
 80069d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80069da:	f7ff fe43 	bl	8006664 <LL_RCC_PLL_GetR>
 80069de:	4603      	mov	r3, r0
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	3301      	adds	r3, #1
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}
 80069f2:	bf00      	nop
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	016e3600 	.word	0x016e3600

080069fc <LL_USART_IsEnabled>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <LL_USART_IsEnabled+0x18>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <LL_USART_IsEnabled+0x1a>
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <LL_USART_SetPrescaler>:
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	f023 030f 	bic.w	r3, r3, #15
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	b292      	uxth	r2, r2
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <LL_USART_SetStopBitsLength>:
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	605a      	str	r2, [r3, #4]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <LL_USART_SetHWFlowCtrl>:
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	609a      	str	r2, [r3, #8]
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <LL_USART_SetBaudRate>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b0b      	cmp	r3, #11
 8006aaa:	d83c      	bhi.n	8006b26 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d039      	beq.n	8006b26 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab8:	d122      	bne.n	8006b00 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <LL_USART_SetBaudRate+0x9c>)
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006acc:	005a      	lsls	r2, r3, #1
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	441a      	add	r2, r3
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	60da      	str	r2, [r3, #12]
}
 8006afe:	e012      	b.n	8006b26 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <LL_USART_SetBaudRate+0x9c>)
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	441a      	add	r2, r3
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	60da      	str	r2, [r3, #12]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	0800951c 	.word	0x0800951c

08006b38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ff56 	bl	80069fc <LL_USART_IsEnabled>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d15b      	bne.n	8006c0e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <LL_USART_Init+0xe0>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	6891      	ldr	r1, [r2, #8]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	6912      	ldr	r2, [r2, #16]
 8006b66:	4311      	orrs	r1, r2
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	6952      	ldr	r2, [r2, #20]
 8006b6c:	4311      	orrs	r1, r2
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	69d2      	ldr	r2, [r2, #28]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff62 	bl	8006a4a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff6f 	bl	8006a70 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a21      	ldr	r2, [pc, #132]	; (8006c1c <LL_USART_Init+0xe4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d104      	bne.n	8006ba4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006b9a:	2003      	movs	r0, #3
 8006b9c:	f7ff fd7e 	bl	800669c <LL_RCC_GetUSARTClockFreq>
 8006ba0:	60b8      	str	r0, [r7, #8]
 8006ba2:	e019      	b.n	8006bd8 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <LL_USART_Init+0xe8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d104      	bne.n	8006bb6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006bac:	200c      	movs	r0, #12
 8006bae:	f7ff fd75 	bl	800669c <LL_RCC_GetUSARTClockFreq>
 8006bb2:	60b8      	str	r0, [r7, #8]
 8006bb4:	e010      	b.n	8006bd8 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART3)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <LL_USART_Init+0xec>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d104      	bne.n	8006bc8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006bbe:	2030      	movs	r0, #48	; 0x30
 8006bc0:	f7ff fd6c 	bl	800669c <LL_RCC_GetUSARTClockFreq>
 8006bc4:	60b8      	str	r0, [r7, #8]
 8006bc6:	e007      	b.n	8006bd8 <LL_USART_Init+0xa0>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <LL_USART_Init+0xf0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d103      	bne.n	8006bd8 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006bd0:	20c0      	movs	r0, #192	; 0xc0
 8006bd2:	f7ff fe29 	bl	8006828 <LL_RCC_GetUARTClockFreq>
 8006bd6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d011      	beq.n	8006c02 <LL_USART_Init+0xca>
        && (USART_InitStruct->BaudRate != 0U))
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <LL_USART_Init+0xca>
    {
      status = SUCCESS;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69d9      	ldr	r1, [r3, #28]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff4b 	bl	8006a98 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff0a 	bl	8006a22 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	efff69f3 	.word	0xefff69f3
 8006c1c:	40013800 	.word	0x40013800
 8006c20:	40004400 	.word	0x40004400
 8006c24:	40004800 	.word	0x40004800
 8006c28:	40004c00 	.word	0x40004c00

08006c2c <_ZdlPvj>:
 8006c2c:	f000 b823 	b.w	8006c76 <_ZdlPv>

08006c30 <__cxa_guard_acquire>:
 8006c30:	6803      	ldr	r3, [r0, #0]
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d406      	bmi.n	8006c44 <__cxa_guard_acquire+0x14>
 8006c36:	7843      	ldrb	r3, [r0, #1]
 8006c38:	b103      	cbz	r3, 8006c3c <__cxa_guard_acquire+0xc>
 8006c3a:	deff      	udf	#255	; 0xff
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	7043      	strb	r3, [r0, #1]
 8006c40:	4618      	mov	r0, r3
 8006c42:	4770      	bx	lr
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <__cxa_guard_release>:
 8006c48:	2301      	movs	r3, #1
 8006c4a:	6003      	str	r3, [r0, #0]
 8006c4c:	4770      	bx	lr

08006c4e <_Znwj>:
 8006c4e:	2801      	cmp	r0, #1
 8006c50:	bf38      	it	cc
 8006c52:	2001      	movcc	r0, #1
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f001 f8e7 	bl	8007e2c <malloc>
 8006c5e:	b930      	cbnz	r0, 8006c6e <_Znwj+0x20>
 8006c60:	f000 f81e 	bl	8006ca0 <_ZSt15get_new_handlerv>
 8006c64:	b908      	cbnz	r0, 8006c6a <_Znwj+0x1c>
 8006c66:	f001 f8a9 	bl	8007dbc <abort>
 8006c6a:	4780      	blx	r0
 8006c6c:	e7f4      	b.n	8006c58 <_Znwj+0xa>
 8006c6e:	bd10      	pop	{r4, pc}

08006c70 <__cxa_pure_virtual>:
 8006c70:	b508      	push	{r3, lr}
 8006c72:	f000 f80f 	bl	8006c94 <_ZSt9terminatev>

08006c76 <_ZdlPv>:
 8006c76:	f001 b8e1 	b.w	8007e3c <free>

08006c7a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c7a:	b508      	push	{r3, lr}
 8006c7c:	4780      	blx	r0
 8006c7e:	f001 f89d 	bl	8007dbc <abort>
	...

08006c84 <_ZSt13get_terminatev>:
 8006c84:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <_ZSt13get_terminatev+0xc>)
 8006c86:	6818      	ldr	r0, [r3, #0]
 8006c88:	f3bf 8f5b 	dmb	ish
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	2000000c 	.word	0x2000000c

08006c94 <_ZSt9terminatev>:
 8006c94:	b508      	push	{r3, lr}
 8006c96:	f7ff fff5 	bl	8006c84 <_ZSt13get_terminatev>
 8006c9a:	f7ff ffee 	bl	8006c7a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006ca0 <_ZSt15get_new_handlerv>:
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <_ZSt15get_new_handlerv+0xc>)
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	f3bf 8f5b 	dmb	ish
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20003a30 	.word	0x20003a30

08006cb0 <cos>:
 8006cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cb2:	ec53 2b10 	vmov	r2, r3, d0
 8006cb6:	4824      	ldr	r0, [pc, #144]	; (8006d48 <cos+0x98>)
 8006cb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cbc:	4281      	cmp	r1, r0
 8006cbe:	dc06      	bgt.n	8006cce <cos+0x1e>
 8006cc0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006d40 <cos+0x90>
 8006cc4:	f000 faa4 	bl	8007210 <__kernel_cos>
 8006cc8:	ec51 0b10 	vmov	r0, r1, d0
 8006ccc:	e007      	b.n	8006cde <cos+0x2e>
 8006cce:	481f      	ldr	r0, [pc, #124]	; (8006d4c <cos+0x9c>)
 8006cd0:	4281      	cmp	r1, r0
 8006cd2:	dd09      	ble.n	8006ce8 <cos+0x38>
 8006cd4:	ee10 0a10 	vmov	r0, s0
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f7f9 fafd 	bl	80002d8 <__aeabi_dsub>
 8006cde:	ec41 0b10 	vmov	d0, r0, r1
 8006ce2:	b005      	add	sp, #20
 8006ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ce8:	4668      	mov	r0, sp
 8006cea:	f000 f885 	bl	8006df8 <__ieee754_rem_pio2>
 8006cee:	f000 0003 	and.w	r0, r0, #3
 8006cf2:	2801      	cmp	r0, #1
 8006cf4:	d007      	beq.n	8006d06 <cos+0x56>
 8006cf6:	2802      	cmp	r0, #2
 8006cf8:	d012      	beq.n	8006d20 <cos+0x70>
 8006cfa:	b9c0      	cbnz	r0, 8006d2e <cos+0x7e>
 8006cfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d00:	ed9d 0b00 	vldr	d0, [sp]
 8006d04:	e7de      	b.n	8006cc4 <cos+0x14>
 8006d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d0a:	ed9d 0b00 	vldr	d0, [sp]
 8006d0e:	f000 fe87 	bl	8007a20 <__kernel_sin>
 8006d12:	ec53 2b10 	vmov	r2, r3, d0
 8006d16:	ee10 0a10 	vmov	r0, s0
 8006d1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d1e:	e7de      	b.n	8006cde <cos+0x2e>
 8006d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d24:	ed9d 0b00 	vldr	d0, [sp]
 8006d28:	f000 fa72 	bl	8007210 <__kernel_cos>
 8006d2c:	e7f1      	b.n	8006d12 <cos+0x62>
 8006d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d32:	ed9d 0b00 	vldr	d0, [sp]
 8006d36:	2001      	movs	r0, #1
 8006d38:	f000 fe72 	bl	8007a20 <__kernel_sin>
 8006d3c:	e7c4      	b.n	8006cc8 <cos+0x18>
 8006d3e:	bf00      	nop
	...
 8006d48:	3fe921fb 	.word	0x3fe921fb
 8006d4c:	7fefffff 	.word	0x7fefffff

08006d50 <sin>:
 8006d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d52:	ec53 2b10 	vmov	r2, r3, d0
 8006d56:	4826      	ldr	r0, [pc, #152]	; (8006df0 <sin+0xa0>)
 8006d58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d5c:	4281      	cmp	r1, r0
 8006d5e:	dc07      	bgt.n	8006d70 <sin+0x20>
 8006d60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006de8 <sin+0x98>
 8006d64:	2000      	movs	r0, #0
 8006d66:	f000 fe5b 	bl	8007a20 <__kernel_sin>
 8006d6a:	ec51 0b10 	vmov	r0, r1, d0
 8006d6e:	e007      	b.n	8006d80 <sin+0x30>
 8006d70:	4820      	ldr	r0, [pc, #128]	; (8006df4 <sin+0xa4>)
 8006d72:	4281      	cmp	r1, r0
 8006d74:	dd09      	ble.n	8006d8a <sin+0x3a>
 8006d76:	ee10 0a10 	vmov	r0, s0
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f7f9 faac 	bl	80002d8 <__aeabi_dsub>
 8006d80:	ec41 0b10 	vmov	d0, r0, r1
 8006d84:	b005      	add	sp, #20
 8006d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8a:	4668      	mov	r0, sp
 8006d8c:	f000 f834 	bl	8006df8 <__ieee754_rem_pio2>
 8006d90:	f000 0003 	and.w	r0, r0, #3
 8006d94:	2801      	cmp	r0, #1
 8006d96:	d008      	beq.n	8006daa <sin+0x5a>
 8006d98:	2802      	cmp	r0, #2
 8006d9a:	d00d      	beq.n	8006db8 <sin+0x68>
 8006d9c:	b9d0      	cbnz	r0, 8006dd4 <sin+0x84>
 8006d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006da2:	ed9d 0b00 	vldr	d0, [sp]
 8006da6:	2001      	movs	r0, #1
 8006da8:	e7dd      	b.n	8006d66 <sin+0x16>
 8006daa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dae:	ed9d 0b00 	vldr	d0, [sp]
 8006db2:	f000 fa2d 	bl	8007210 <__kernel_cos>
 8006db6:	e7d8      	b.n	8006d6a <sin+0x1a>
 8006db8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dbc:	ed9d 0b00 	vldr	d0, [sp]
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f000 fe2d 	bl	8007a20 <__kernel_sin>
 8006dc6:	ec53 2b10 	vmov	r2, r3, d0
 8006dca:	ee10 0a10 	vmov	r0, s0
 8006dce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006dd2:	e7d5      	b.n	8006d80 <sin+0x30>
 8006dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dd8:	ed9d 0b00 	vldr	d0, [sp]
 8006ddc:	f000 fa18 	bl	8007210 <__kernel_cos>
 8006de0:	e7f1      	b.n	8006dc6 <sin+0x76>
 8006de2:	bf00      	nop
 8006de4:	f3af 8000 	nop.w
	...
 8006df0:	3fe921fb 	.word	0x3fe921fb
 8006df4:	7fefffff 	.word	0x7fefffff

08006df8 <__ieee754_rem_pio2>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	ec55 4b10 	vmov	r4, r5, d0
 8006e04:	4bca      	ldr	r3, [pc, #808]	; (8007130 <__ieee754_rem_pio2+0x338>)
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006e0c:	4598      	cmp	r8, r3
 8006e0e:	4682      	mov	sl, r0
 8006e10:	9502      	str	r5, [sp, #8]
 8006e12:	dc08      	bgt.n	8006e26 <__ieee754_rem_pio2+0x2e>
 8006e14:	2200      	movs	r2, #0
 8006e16:	2300      	movs	r3, #0
 8006e18:	ed80 0b00 	vstr	d0, [r0]
 8006e1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006e20:	f04f 0b00 	mov.w	fp, #0
 8006e24:	e028      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8006e26:	4bc3      	ldr	r3, [pc, #780]	; (8007134 <__ieee754_rem_pio2+0x33c>)
 8006e28:	4598      	cmp	r8, r3
 8006e2a:	dc78      	bgt.n	8006f1e <__ieee754_rem_pio2+0x126>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	4ec2      	ldr	r6, [pc, #776]	; (8007138 <__ieee754_rem_pio2+0x340>)
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	ee10 0a10 	vmov	r0, s0
 8006e36:	a3b0      	add	r3, pc, #704	; (adr r3, 80070f8 <__ieee754_rem_pio2+0x300>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	dd39      	ble.n	8006eb4 <__ieee754_rem_pio2+0xbc>
 8006e40:	f7f9 fa4a 	bl	80002d8 <__aeabi_dsub>
 8006e44:	45b0      	cmp	r8, r6
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	d01b      	beq.n	8006e84 <__ieee754_rem_pio2+0x8c>
 8006e4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fa41 	bl	80002d8 <__aeabi_dsub>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	e9ca 2300 	strd	r2, r3, [sl]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fa39 	bl	80002d8 <__aeabi_dsub>
 8006e66:	a3a6      	add	r3, pc, #664	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f7f9 fa34 	bl	80002d8 <__aeabi_dsub>
 8006e70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e74:	f04f 0b01 	mov.w	fp, #1
 8006e78:	4658      	mov	r0, fp
 8006e7a:	b00b      	add	sp, #44	; 0x2c
 8006e7c:	ecbd 8b02 	vpop	{d8}
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	a3a0      	add	r3, pc, #640	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 fa25 	bl	80002d8 <__aeabi_dsub>
 8006e8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	f7f9 fa1e 	bl	80002d8 <__aeabi_dsub>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9ca 2300 	strd	r2, r3, [sl]
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 fa16 	bl	80002d8 <__aeabi_dsub>
 8006eac:	a398      	add	r3, pc, #608	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	e7db      	b.n	8006e6c <__ieee754_rem_pio2+0x74>
 8006eb4:	f7f9 fa12 	bl	80002dc <__adddf3>
 8006eb8:	45b0      	cmp	r8, r6
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	d016      	beq.n	8006eee <__ieee754_rem_pio2+0xf6>
 8006ec0:	a38f      	add	r3, pc, #572	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fa09 	bl	80002dc <__adddf3>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	e9ca 2300 	strd	r2, r3, [sl]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f7f9 f9ff 	bl	80002d8 <__aeabi_dsub>
 8006eda:	a389      	add	r3, pc, #548	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f7f9 f9fc 	bl	80002dc <__adddf3>
 8006ee4:	f04f 3bff 	mov.w	fp, #4294967295
 8006ee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006eec:	e7c4      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8006eee:	a386      	add	r3, pc, #536	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 f9f2 	bl	80002dc <__adddf3>
 8006ef8:	a385      	add	r3, pc, #532	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	f7f9 f9eb 	bl	80002dc <__adddf3>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 f9e1 	bl	80002d8 <__aeabi_dsub>
 8006f16:	a37e      	add	r3, pc, #504	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	e7e0      	b.n	8006ee0 <__ieee754_rem_pio2+0xe8>
 8006f1e:	4b87      	ldr	r3, [pc, #540]	; (800713c <__ieee754_rem_pio2+0x344>)
 8006f20:	4598      	cmp	r8, r3
 8006f22:	f300 80d9 	bgt.w	80070d8 <__ieee754_rem_pio2+0x2e0>
 8006f26:	f000 fe39 	bl	8007b9c <fabs>
 8006f2a:	ec55 4b10 	vmov	r4, r5, d0
 8006f2e:	ee10 0a10 	vmov	r0, s0
 8006f32:	a379      	add	r3, pc, #484	; (adr r3, 8007118 <__ieee754_rem_pio2+0x320>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 fb85 	bl	8000648 <__aeabi_dmul>
 8006f3e:	4b80      	ldr	r3, [pc, #512]	; (8007140 <__ieee754_rem_pio2+0x348>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 f9cb 	bl	80002dc <__adddf3>
 8006f46:	f7f9 fe19 	bl	8000b7c <__aeabi_d2iz>
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	f7f9 fb12 	bl	8000574 <__aeabi_i2d>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	ec43 2b18 	vmov	d8, r2, r3
 8006f58:	a367      	add	r3, pc, #412	; (adr r3, 80070f8 <__ieee754_rem_pio2+0x300>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fb73 	bl	8000648 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 f9b5 	bl	80002d8 <__aeabi_dsub>
 8006f6e:	a364      	add	r3, pc, #400	; (adr r3, 8007100 <__ieee754_rem_pio2+0x308>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	ec51 0b18 	vmov	r0, r1, d8
 8006f7c:	f7f9 fb64 	bl	8000648 <__aeabi_dmul>
 8006f80:	f1bb 0f1f 	cmp.w	fp, #31
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	dc0d      	bgt.n	8006fa6 <__ieee754_rem_pio2+0x1ae>
 8006f8a:	4b6e      	ldr	r3, [pc, #440]	; (8007144 <__ieee754_rem_pio2+0x34c>)
 8006f8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	4543      	cmp	r3, r8
 8006f96:	d006      	beq.n	8006fa6 <__ieee754_rem_pio2+0x1ae>
 8006f98:	4622      	mov	r2, r4
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 f99a 	bl	80002d8 <__aeabi_dsub>
 8006fa4:	e00f      	b.n	8006fc6 <__ieee754_rem_pio2+0x1ce>
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 f993 	bl	80002d8 <__aeabi_dsub>
 8006fb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006fc0:	f1b8 0f10 	cmp.w	r8, #16
 8006fc4:	dc02      	bgt.n	8006fcc <__ieee754_rem_pio2+0x1d4>
 8006fc6:	e9ca 0100 	strd	r0, r1, [sl]
 8006fca:	e039      	b.n	8007040 <__ieee754_rem_pio2+0x248>
 8006fcc:	a34e      	add	r3, pc, #312	; (adr r3, 8007108 <__ieee754_rem_pio2+0x310>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	ec51 0b18 	vmov	r0, r1, d8
 8006fd6:	f7f9 fb37 	bl	8000648 <__aeabi_dmul>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f977 	bl	80002d8 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 f96f 	bl	80002d8 <__aeabi_dsub>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 f96b 	bl	80002d8 <__aeabi_dsub>
 8007002:	a343      	add	r3, pc, #268	; (adr r3, 8007110 <__ieee754_rem_pio2+0x318>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	ec51 0b18 	vmov	r0, r1, d8
 8007010:	f7f9 fb1a 	bl	8000648 <__aeabi_dmul>
 8007014:	4622      	mov	r2, r4
 8007016:	462b      	mov	r3, r5
 8007018:	f7f9 f95e 	bl	80002d8 <__aeabi_dsub>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4604      	mov	r4, r0
 8007022:	460d      	mov	r5, r1
 8007024:	4640      	mov	r0, r8
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 f956 	bl	80002d8 <__aeabi_dsub>
 800702c:	9a03      	ldr	r2, [sp, #12]
 800702e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b31      	cmp	r3, #49	; 0x31
 8007036:	dc24      	bgt.n	8007082 <__ieee754_rem_pio2+0x28a>
 8007038:	e9ca 0100 	strd	r0, r1, [sl]
 800703c:	4646      	mov	r6, r8
 800703e:	464f      	mov	r7, r9
 8007040:	e9da 8900 	ldrd	r8, r9, [sl]
 8007044:	4630      	mov	r0, r6
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 f944 	bl	80002d8 <__aeabi_dsub>
 8007050:	462b      	mov	r3, r5
 8007052:	4622      	mov	r2, r4
 8007054:	f7f9 f940 	bl	80002d8 <__aeabi_dsub>
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007060:	f6bf af0a 	bge.w	8006e78 <__ieee754_rem_pio2+0x80>
 8007064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007068:	f8ca 3004 	str.w	r3, [sl, #4]
 800706c:	f8ca 8000 	str.w	r8, [sl]
 8007070:	f8ca 0008 	str.w	r0, [sl, #8]
 8007074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007078:	f8ca 300c 	str.w	r3, [sl, #12]
 800707c:	f1cb 0b00 	rsb	fp, fp, #0
 8007080:	e6fa      	b.n	8006e78 <__ieee754_rem_pio2+0x80>
 8007082:	a327      	add	r3, pc, #156	; (adr r3, 8007120 <__ieee754_rem_pio2+0x328>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	ec51 0b18 	vmov	r0, r1, d8
 800708c:	f7f9 fadc 	bl	8000648 <__aeabi_dmul>
 8007090:	4604      	mov	r4, r0
 8007092:	460d      	mov	r5, r1
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 f91c 	bl	80002d8 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 f914 	bl	80002d8 <__aeabi_dsub>
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f7f9 f910 	bl	80002d8 <__aeabi_dsub>
 80070b8:	a31b      	add	r3, pc, #108	; (adr r3, 8007128 <__ieee754_rem_pio2+0x330>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	4604      	mov	r4, r0
 80070c0:	460d      	mov	r5, r1
 80070c2:	ec51 0b18 	vmov	r0, r1, d8
 80070c6:	f7f9 fabf 	bl	8000648 <__aeabi_dmul>
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	f7f9 f903 	bl	80002d8 <__aeabi_dsub>
 80070d2:	4604      	mov	r4, r0
 80070d4:	460d      	mov	r5, r1
 80070d6:	e75f      	b.n	8006f98 <__ieee754_rem_pio2+0x1a0>
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <__ieee754_rem_pio2+0x350>)
 80070da:	4598      	cmp	r8, r3
 80070dc:	dd36      	ble.n	800714c <__ieee754_rem_pio2+0x354>
 80070de:	ee10 2a10 	vmov	r2, s0
 80070e2:	462b      	mov	r3, r5
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 f8f6 	bl	80002d8 <__aeabi_dsub>
 80070ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070f0:	e9ca 0100 	strd	r0, r1, [sl]
 80070f4:	e694      	b.n	8006e20 <__ieee754_rem_pio2+0x28>
 80070f6:	bf00      	nop
 80070f8:	54400000 	.word	0x54400000
 80070fc:	3ff921fb 	.word	0x3ff921fb
 8007100:	1a626331 	.word	0x1a626331
 8007104:	3dd0b461 	.word	0x3dd0b461
 8007108:	1a600000 	.word	0x1a600000
 800710c:	3dd0b461 	.word	0x3dd0b461
 8007110:	2e037073 	.word	0x2e037073
 8007114:	3ba3198a 	.word	0x3ba3198a
 8007118:	6dc9c883 	.word	0x6dc9c883
 800711c:	3fe45f30 	.word	0x3fe45f30
 8007120:	2e000000 	.word	0x2e000000
 8007124:	3ba3198a 	.word	0x3ba3198a
 8007128:	252049c1 	.word	0x252049c1
 800712c:	397b839a 	.word	0x397b839a
 8007130:	3fe921fb 	.word	0x3fe921fb
 8007134:	4002d97b 	.word	0x4002d97b
 8007138:	3ff921fb 	.word	0x3ff921fb
 800713c:	413921fb 	.word	0x413921fb
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	0800954c 	.word	0x0800954c
 8007148:	7fefffff 	.word	0x7fefffff
 800714c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007150:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007154:	ee10 0a10 	vmov	r0, s0
 8007158:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800715c:	ee10 6a10 	vmov	r6, s0
 8007160:	460f      	mov	r7, r1
 8007162:	f7f9 fd0b 	bl	8000b7c <__aeabi_d2iz>
 8007166:	f7f9 fa05 	bl	8000574 <__aeabi_i2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007176:	f7f9 f8af 	bl	80002d8 <__aeabi_dsub>
 800717a:	4b22      	ldr	r3, [pc, #136]	; (8007204 <__ieee754_rem_pio2+0x40c>)
 800717c:	2200      	movs	r2, #0
 800717e:	f7f9 fa63 	bl	8000648 <__aeabi_dmul>
 8007182:	460f      	mov	r7, r1
 8007184:	4606      	mov	r6, r0
 8007186:	f7f9 fcf9 	bl	8000b7c <__aeabi_d2iz>
 800718a:	f7f9 f9f3 	bl	8000574 <__aeabi_i2d>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800719a:	f7f9 f89d 	bl	80002d8 <__aeabi_dsub>
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <__ieee754_rem_pio2+0x40c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 fa51 	bl	8000648 <__aeabi_dmul>
 80071a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071aa:	ad04      	add	r5, sp, #16
 80071ac:	f04f 0803 	mov.w	r8, #3
 80071b0:	46a9      	mov	r9, r5
 80071b2:	2600      	movs	r6, #0
 80071b4:	2700      	movs	r7, #0
 80071b6:	4632      	mov	r2, r6
 80071b8:	463b      	mov	r3, r7
 80071ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80071be:	46c3      	mov	fp, r8
 80071c0:	3d08      	subs	r5, #8
 80071c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c6:	f7f9 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d1f3      	bne.n	80071b6 <__ieee754_rem_pio2+0x3be>
 80071ce:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <__ieee754_rem_pio2+0x410>)
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	2302      	movs	r3, #2
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	4622      	mov	r2, r4
 80071d8:	465b      	mov	r3, fp
 80071da:	4651      	mov	r1, sl
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 f8df 	bl	80073a0 <__kernel_rem_pio2>
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	4683      	mov	fp, r0
 80071e8:	f6bf ae46 	bge.w	8006e78 <__ieee754_rem_pio2+0x80>
 80071ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80071f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	f8ca 3004 	str.w	r3, [sl, #4]
 80071f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80071fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007200:	e73a      	b.n	8007078 <__ieee754_rem_pio2+0x280>
 8007202:	bf00      	nop
 8007204:	41700000 	.word	0x41700000
 8007208:	080095cc 	.word	0x080095cc
 800720c:	00000000 	.word	0x00000000

08007210 <__kernel_cos>:
 8007210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ec57 6b10 	vmov	r6, r7, d0
 8007218:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800721c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007220:	ed8d 1b00 	vstr	d1, [sp]
 8007224:	da07      	bge.n	8007236 <__kernel_cos+0x26>
 8007226:	ee10 0a10 	vmov	r0, s0
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fca6 	bl	8000b7c <__aeabi_d2iz>
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 8088 	beq.w	8007346 <__kernel_cos+0x136>
 8007236:	4632      	mov	r2, r6
 8007238:	463b      	mov	r3, r7
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f9 fa03 	bl	8000648 <__aeabi_dmul>
 8007242:	4b51      	ldr	r3, [pc, #324]	; (8007388 <__kernel_cos+0x178>)
 8007244:	2200      	movs	r2, #0
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	f7f9 f9fd 	bl	8000648 <__aeabi_dmul>
 800724e:	a340      	add	r3, pc, #256	; (adr r3, 8007350 <__kernel_cos+0x140>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	4682      	mov	sl, r0
 8007256:	468b      	mov	fp, r1
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f9f4 	bl	8000648 <__aeabi_dmul>
 8007260:	a33d      	add	r3, pc, #244	; (adr r3, 8007358 <__kernel_cos+0x148>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 f839 	bl	80002dc <__adddf3>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f9 f9eb 	bl	8000648 <__aeabi_dmul>
 8007272:	a33b      	add	r3, pc, #236	; (adr r3, 8007360 <__kernel_cos+0x150>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f82e 	bl	80002d8 <__aeabi_dsub>
 800727c:	4622      	mov	r2, r4
 800727e:	462b      	mov	r3, r5
 8007280:	f7f9 f9e2 	bl	8000648 <__aeabi_dmul>
 8007284:	a338      	add	r3, pc, #224	; (adr r3, 8007368 <__kernel_cos+0x158>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f827 	bl	80002dc <__adddf3>
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	f7f9 f9d9 	bl	8000648 <__aeabi_dmul>
 8007296:	a336      	add	r3, pc, #216	; (adr r3, 8007370 <__kernel_cos+0x160>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f9 f81c 	bl	80002d8 <__aeabi_dsub>
 80072a0:	4622      	mov	r2, r4
 80072a2:	462b      	mov	r3, r5
 80072a4:	f7f9 f9d0 	bl	8000648 <__aeabi_dmul>
 80072a8:	a333      	add	r3, pc, #204	; (adr r3, 8007378 <__kernel_cos+0x168>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f9 f815 	bl	80002dc <__adddf3>
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 f9c7 	bl	8000648 <__aeabi_dmul>
 80072ba:	4622      	mov	r2, r4
 80072bc:	462b      	mov	r3, r5
 80072be:	f7f9 f9c3 	bl	8000648 <__aeabi_dmul>
 80072c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 f9bb 	bl	8000648 <__aeabi_dmul>
 80072d2:	460b      	mov	r3, r1
 80072d4:	4602      	mov	r2, r0
 80072d6:	4629      	mov	r1, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f8 fffd 	bl	80002d8 <__aeabi_dsub>
 80072de:	4b2b      	ldr	r3, [pc, #172]	; (800738c <__kernel_cos+0x17c>)
 80072e0:	4598      	cmp	r8, r3
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	dc10      	bgt.n	800730a <__kernel_cos+0xfa>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4650      	mov	r0, sl
 80072ee:	4659      	mov	r1, fp
 80072f0:	f7f8 fff2 	bl	80002d8 <__aeabi_dsub>
 80072f4:	460b      	mov	r3, r1
 80072f6:	4926      	ldr	r1, [pc, #152]	; (8007390 <__kernel_cos+0x180>)
 80072f8:	4602      	mov	r2, r0
 80072fa:	2000      	movs	r0, #0
 80072fc:	f7f8 ffec 	bl	80002d8 <__aeabi_dsub>
 8007300:	ec41 0b10 	vmov	d0, r0, r1
 8007304:	b003      	add	sp, #12
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <__kernel_cos+0x184>)
 800730c:	4920      	ldr	r1, [pc, #128]	; (8007390 <__kernel_cos+0x180>)
 800730e:	4598      	cmp	r8, r3
 8007310:	bfcc      	ite	gt
 8007312:	4d21      	ldrgt	r5, [pc, #132]	; (8007398 <__kernel_cos+0x188>)
 8007314:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007318:	2400      	movs	r4, #0
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	2000      	movs	r0, #0
 8007320:	f7f8 ffda 	bl	80002d8 <__aeabi_dsub>
 8007324:	4622      	mov	r2, r4
 8007326:	4680      	mov	r8, r0
 8007328:	4689      	mov	r9, r1
 800732a:	462b      	mov	r3, r5
 800732c:	4650      	mov	r0, sl
 800732e:	4659      	mov	r1, fp
 8007330:	f7f8 ffd2 	bl	80002d8 <__aeabi_dsub>
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	f7f8 ffce 	bl	80002d8 <__aeabi_dsub>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	e7da      	b.n	80072fc <__kernel_cos+0xec>
 8007346:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007380 <__kernel_cos+0x170>
 800734a:	e7db      	b.n	8007304 <__kernel_cos+0xf4>
 800734c:	f3af 8000 	nop.w
 8007350:	be8838d4 	.word	0xbe8838d4
 8007354:	bda8fae9 	.word	0xbda8fae9
 8007358:	bdb4b1c4 	.word	0xbdb4b1c4
 800735c:	3e21ee9e 	.word	0x3e21ee9e
 8007360:	809c52ad 	.word	0x809c52ad
 8007364:	3e927e4f 	.word	0x3e927e4f
 8007368:	19cb1590 	.word	0x19cb1590
 800736c:	3efa01a0 	.word	0x3efa01a0
 8007370:	16c15177 	.word	0x16c15177
 8007374:	3f56c16c 	.word	0x3f56c16c
 8007378:	5555554c 	.word	0x5555554c
 800737c:	3fa55555 	.word	0x3fa55555
 8007380:	00000000 	.word	0x00000000
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	3fe00000 	.word	0x3fe00000
 800738c:	3fd33332 	.word	0x3fd33332
 8007390:	3ff00000 	.word	0x3ff00000
 8007394:	3fe90000 	.word	0x3fe90000
 8007398:	3fd20000 	.word	0x3fd20000
 800739c:	00000000 	.word	0x00000000

080073a0 <__kernel_rem_pio2>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	ed2d 8b02 	vpush	{d8}
 80073a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80073ac:	f112 0f14 	cmn.w	r2, #20
 80073b0:	9308      	str	r3, [sp, #32]
 80073b2:	9101      	str	r1, [sp, #4]
 80073b4:	4bc6      	ldr	r3, [pc, #792]	; (80076d0 <__kernel_rem_pio2+0x330>)
 80073b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80073b8:	9009      	str	r0, [sp, #36]	; 0x24
 80073ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073be:	9304      	str	r3, [sp, #16]
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073c6:	bfa8      	it	ge
 80073c8:	1ed4      	subge	r4, r2, #3
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	bfb2      	itee	lt
 80073ce:	2400      	movlt	r4, #0
 80073d0:	2318      	movge	r3, #24
 80073d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80073d6:	f06f 0317 	mvn.w	r3, #23
 80073da:	fb04 3303 	mla	r3, r4, r3, r3
 80073de:	eb03 0a02 	add.w	sl, r3, r2
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	9a06      	ldr	r2, [sp, #24]
 80073e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80076c0 <__kernel_rem_pio2+0x320>
 80073ea:	eb03 0802 	add.w	r8, r3, r2
 80073ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073f0:	1aa7      	subs	r7, r4, r2
 80073f2:	ae20      	add	r6, sp, #128	; 0x80
 80073f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80073f8:	2500      	movs	r5, #0
 80073fa:	4545      	cmp	r5, r8
 80073fc:	dd18      	ble.n	8007430 <__kernel_rem_pio2+0x90>
 80073fe:	9b08      	ldr	r3, [sp, #32]
 8007400:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007404:	aa20      	add	r2, sp, #128	; 0x80
 8007406:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80076c0 <__kernel_rem_pio2+0x320>
 800740a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800740e:	f1c3 0301 	rsb	r3, r3, #1
 8007412:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	9b07      	ldr	r3, [sp, #28]
 800741a:	9a04      	ldr	r2, [sp, #16]
 800741c:	4443      	add	r3, r8
 800741e:	429a      	cmp	r2, r3
 8007420:	db2f      	blt.n	8007482 <__kernel_rem_pio2+0xe2>
 8007422:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007426:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800742a:	462f      	mov	r7, r5
 800742c:	2600      	movs	r6, #0
 800742e:	e01b      	b.n	8007468 <__kernel_rem_pio2+0xc8>
 8007430:	42ef      	cmn	r7, r5
 8007432:	d407      	bmi.n	8007444 <__kernel_rem_pio2+0xa4>
 8007434:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007438:	f7f9 f89c 	bl	8000574 <__aeabi_i2d>
 800743c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007440:	3501      	adds	r5, #1
 8007442:	e7da      	b.n	80073fa <__kernel_rem_pio2+0x5a>
 8007444:	ec51 0b18 	vmov	r0, r1, d8
 8007448:	e7f8      	b.n	800743c <__kernel_rem_pio2+0x9c>
 800744a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007452:	f7f9 f8f9 	bl	8000648 <__aeabi_dmul>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745e:	f7f8 ff3d 	bl	80002dc <__adddf3>
 8007462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007466:	3601      	adds	r6, #1
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	429e      	cmp	r6, r3
 800746c:	f1a7 0708 	sub.w	r7, r7, #8
 8007470:	ddeb      	ble.n	800744a <__kernel_rem_pio2+0xaa>
 8007472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007476:	3508      	adds	r5, #8
 8007478:	ecab 7b02 	vstmia	fp!, {d7}
 800747c:	f108 0801 	add.w	r8, r8, #1
 8007480:	e7ca      	b.n	8007418 <__kernel_rem_pio2+0x78>
 8007482:	9b04      	ldr	r3, [sp, #16]
 8007484:	aa0c      	add	r2, sp, #48	; 0x30
 8007486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800748a:	930b      	str	r3, [sp, #44]	; 0x2c
 800748c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800748e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007492:	9c04      	ldr	r4, [sp, #16]
 8007494:	930a      	str	r3, [sp, #40]	; 0x28
 8007496:	ab98      	add	r3, sp, #608	; 0x260
 8007498:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800749c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80074a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80074a4:	f8cd b008 	str.w	fp, [sp, #8]
 80074a8:	4625      	mov	r5, r4
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	dc78      	bgt.n	80075a0 <__kernel_rem_pio2+0x200>
 80074ae:	ec47 6b10 	vmov	d0, r6, r7
 80074b2:	4650      	mov	r0, sl
 80074b4:	f000 fbfc 	bl	8007cb0 <scalbn>
 80074b8:	ec57 6b10 	vmov	r6, r7, d0
 80074bc:	2200      	movs	r2, #0
 80074be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80074c2:	ee10 0a10 	vmov	r0, s0
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f9 f8be 	bl	8000648 <__aeabi_dmul>
 80074cc:	ec41 0b10 	vmov	d0, r0, r1
 80074d0:	f000 fb6e 	bl	8007bb0 <floor>
 80074d4:	4b7f      	ldr	r3, [pc, #508]	; (80076d4 <__kernel_rem_pio2+0x334>)
 80074d6:	ec51 0b10 	vmov	r0, r1, d0
 80074da:	2200      	movs	r2, #0
 80074dc:	f7f9 f8b4 	bl	8000648 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f8 fef6 	bl	80002d8 <__aeabi_dsub>
 80074ec:	460f      	mov	r7, r1
 80074ee:	4606      	mov	r6, r0
 80074f0:	f7f9 fb44 	bl	8000b7c <__aeabi_d2iz>
 80074f4:	9007      	str	r0, [sp, #28]
 80074f6:	f7f9 f83d 	bl	8000574 <__aeabi_i2d>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f8 fee9 	bl	80002d8 <__aeabi_dsub>
 8007506:	f1ba 0f00 	cmp.w	sl, #0
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	dd70      	ble.n	80075f2 <__kernel_rem_pio2+0x252>
 8007510:	1e62      	subs	r2, r4, #1
 8007512:	ab0c      	add	r3, sp, #48	; 0x30
 8007514:	9d07      	ldr	r5, [sp, #28]
 8007516:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800751a:	f1ca 0118 	rsb	r1, sl, #24
 800751e:	fa40 f301 	asr.w	r3, r0, r1
 8007522:	441d      	add	r5, r3
 8007524:	408b      	lsls	r3, r1
 8007526:	1ac0      	subs	r0, r0, r3
 8007528:	ab0c      	add	r3, sp, #48	; 0x30
 800752a:	9507      	str	r5, [sp, #28]
 800752c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007530:	f1ca 0317 	rsb	r3, sl, #23
 8007534:	fa40 f303 	asr.w	r3, r0, r3
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd66      	ble.n	800760e <__kernel_rem_pio2+0x26e>
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	2200      	movs	r2, #0
 8007544:	3301      	adds	r3, #1
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	4615      	mov	r5, r2
 800754a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800754e:	4294      	cmp	r4, r2
 8007550:	f300 8099 	bgt.w	8007686 <__kernel_rem_pio2+0x2e6>
 8007554:	f1ba 0f00 	cmp.w	sl, #0
 8007558:	dd07      	ble.n	800756a <__kernel_rem_pio2+0x1ca>
 800755a:	f1ba 0f01 	cmp.w	sl, #1
 800755e:	f000 80a5 	beq.w	80076ac <__kernel_rem_pio2+0x30c>
 8007562:	f1ba 0f02 	cmp.w	sl, #2
 8007566:	f000 80c1 	beq.w	80076ec <__kernel_rem_pio2+0x34c>
 800756a:	9b02      	ldr	r3, [sp, #8]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d14e      	bne.n	800760e <__kernel_rem_pio2+0x26e>
 8007570:	4632      	mov	r2, r6
 8007572:	463b      	mov	r3, r7
 8007574:	4958      	ldr	r1, [pc, #352]	; (80076d8 <__kernel_rem_pio2+0x338>)
 8007576:	2000      	movs	r0, #0
 8007578:	f7f8 feae 	bl	80002d8 <__aeabi_dsub>
 800757c:	4606      	mov	r6, r0
 800757e:	460f      	mov	r7, r1
 8007580:	2d00      	cmp	r5, #0
 8007582:	d044      	beq.n	800760e <__kernel_rem_pio2+0x26e>
 8007584:	4650      	mov	r0, sl
 8007586:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80076c8 <__kernel_rem_pio2+0x328>
 800758a:	f000 fb91 	bl	8007cb0 <scalbn>
 800758e:	4630      	mov	r0, r6
 8007590:	4639      	mov	r1, r7
 8007592:	ec53 2b10 	vmov	r2, r3, d0
 8007596:	f7f8 fe9f 	bl	80002d8 <__aeabi_dsub>
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	e036      	b.n	800760e <__kernel_rem_pio2+0x26e>
 80075a0:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <__kernel_rem_pio2+0x33c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	4630      	mov	r0, r6
 80075a6:	4639      	mov	r1, r7
 80075a8:	f7f9 f84e 	bl	8000648 <__aeabi_dmul>
 80075ac:	f7f9 fae6 	bl	8000b7c <__aeabi_d2iz>
 80075b0:	f7f8 ffe0 	bl	8000574 <__aeabi_i2d>
 80075b4:	4b4a      	ldr	r3, [pc, #296]	; (80076e0 <__kernel_rem_pio2+0x340>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	4680      	mov	r8, r0
 80075ba:	4689      	mov	r9, r1
 80075bc:	f7f9 f844 	bl	8000648 <__aeabi_dmul>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f8 fe86 	bl	80002d8 <__aeabi_dsub>
 80075cc:	f7f9 fad6 	bl	8000b7c <__aeabi_d2iz>
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	f843 0b04 	str.w	r0, [r3], #4
 80075d6:	3d01      	subs	r5, #1
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	ab70      	add	r3, sp, #448	; 0x1c0
 80075dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f8 fe78 	bl	80002dc <__adddf3>
 80075ec:	4606      	mov	r6, r0
 80075ee:	460f      	mov	r7, r1
 80075f0:	e75b      	b.n	80074aa <__kernel_rem_pio2+0x10a>
 80075f2:	d105      	bne.n	8007600 <__kernel_rem_pio2+0x260>
 80075f4:	1e63      	subs	r3, r4, #1
 80075f6:	aa0c      	add	r2, sp, #48	; 0x30
 80075f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075fc:	15c3      	asrs	r3, r0, #23
 80075fe:	e79b      	b.n	8007538 <__kernel_rem_pio2+0x198>
 8007600:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <__kernel_rem_pio2+0x344>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f9 faa6 	bl	8000b54 <__aeabi_dcmpge>
 8007608:	2800      	cmp	r0, #0
 800760a:	d139      	bne.n	8007680 <__kernel_rem_pio2+0x2e0>
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800761a:	2800      	cmp	r0, #0
 800761c:	f000 80b4 	beq.w	8007788 <__kernel_rem_pio2+0x3e8>
 8007620:	f104 3bff 	add.w	fp, r4, #4294967295
 8007624:	465b      	mov	r3, fp
 8007626:	2200      	movs	r2, #0
 8007628:	9904      	ldr	r1, [sp, #16]
 800762a:	428b      	cmp	r3, r1
 800762c:	da65      	bge.n	80076fa <__kernel_rem_pio2+0x35a>
 800762e:	2a00      	cmp	r2, #0
 8007630:	d07b      	beq.n	800772a <__kernel_rem_pio2+0x38a>
 8007632:	ab0c      	add	r3, sp, #48	; 0x30
 8007634:	f1aa 0a18 	sub.w	sl, sl, #24
 8007638:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80a0 	beq.w	8007782 <__kernel_rem_pio2+0x3e2>
 8007642:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80076c8 <__kernel_rem_pio2+0x328>
 8007646:	4650      	mov	r0, sl
 8007648:	f000 fb32 	bl	8007cb0 <scalbn>
 800764c:	4f23      	ldr	r7, [pc, #140]	; (80076dc <__kernel_rem_pio2+0x33c>)
 800764e:	ec55 4b10 	vmov	r4, r5, d0
 8007652:	46d8      	mov	r8, fp
 8007654:	2600      	movs	r6, #0
 8007656:	f1b8 0f00 	cmp.w	r8, #0
 800765a:	f280 80cf 	bge.w	80077fc <__kernel_rem_pio2+0x45c>
 800765e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80076c0 <__kernel_rem_pio2+0x320>
 8007662:	465f      	mov	r7, fp
 8007664:	f04f 0800 	mov.w	r8, #0
 8007668:	2f00      	cmp	r7, #0
 800766a:	f2c0 80fd 	blt.w	8007868 <__kernel_rem_pio2+0x4c8>
 800766e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007670:	f8df a074 	ldr.w	sl, [pc, #116]	; 80076e8 <__kernel_rem_pio2+0x348>
 8007674:	ec55 4b18 	vmov	r4, r5, d8
 8007678:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800767c:	2600      	movs	r6, #0
 800767e:	e0e5      	b.n	800784c <__kernel_rem_pio2+0x4ac>
 8007680:	2302      	movs	r3, #2
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	e75c      	b.n	8007540 <__kernel_rem_pio2+0x1a0>
 8007686:	f8db 3000 	ldr.w	r3, [fp]
 800768a:	b955      	cbnz	r5, 80076a2 <__kernel_rem_pio2+0x302>
 800768c:	b123      	cbz	r3, 8007698 <__kernel_rem_pio2+0x2f8>
 800768e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007692:	f8cb 3000 	str.w	r3, [fp]
 8007696:	2301      	movs	r3, #1
 8007698:	3201      	adds	r2, #1
 800769a:	f10b 0b04 	add.w	fp, fp, #4
 800769e:	461d      	mov	r5, r3
 80076a0:	e755      	b.n	800754e <__kernel_rem_pio2+0x1ae>
 80076a2:	1acb      	subs	r3, r1, r3
 80076a4:	f8cb 3000 	str.w	r3, [fp]
 80076a8:	462b      	mov	r3, r5
 80076aa:	e7f5      	b.n	8007698 <__kernel_rem_pio2+0x2f8>
 80076ac:	1e62      	subs	r2, r4, #1
 80076ae:	ab0c      	add	r3, sp, #48	; 0x30
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80076b8:	a90c      	add	r1, sp, #48	; 0x30
 80076ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80076be:	e754      	b.n	800756a <__kernel_rem_pio2+0x1ca>
	...
 80076cc:	3ff00000 	.word	0x3ff00000
 80076d0:	08009718 	.word	0x08009718
 80076d4:	40200000 	.word	0x40200000
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	3e700000 	.word	0x3e700000
 80076e0:	41700000 	.word	0x41700000
 80076e4:	3fe00000 	.word	0x3fe00000
 80076e8:	080096d8 	.word	0x080096d8
 80076ec:	1e62      	subs	r2, r4, #1
 80076ee:	ab0c      	add	r3, sp, #48	; 0x30
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076f8:	e7de      	b.n	80076b8 <__kernel_rem_pio2+0x318>
 80076fa:	a90c      	add	r1, sp, #48	; 0x30
 80076fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007700:	3b01      	subs	r3, #1
 8007702:	430a      	orrs	r2, r1
 8007704:	e790      	b.n	8007628 <__kernel_rem_pio2+0x288>
 8007706:	3301      	adds	r3, #1
 8007708:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800770c:	2900      	cmp	r1, #0
 800770e:	d0fa      	beq.n	8007706 <__kernel_rem_pio2+0x366>
 8007710:	9a08      	ldr	r2, [sp, #32]
 8007712:	18e3      	adds	r3, r4, r3
 8007714:	18a6      	adds	r6, r4, r2
 8007716:	aa20      	add	r2, sp, #128	; 0x80
 8007718:	1c65      	adds	r5, r4, #1
 800771a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	42ab      	cmp	r3, r5
 8007724:	da04      	bge.n	8007730 <__kernel_rem_pio2+0x390>
 8007726:	461c      	mov	r4, r3
 8007728:	e6b5      	b.n	8007496 <__kernel_rem_pio2+0xf6>
 800772a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800772c:	2301      	movs	r3, #1
 800772e:	e7eb      	b.n	8007708 <__kernel_rem_pio2+0x368>
 8007730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007736:	f7f8 ff1d 	bl	8000574 <__aeabi_i2d>
 800773a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	46b3      	mov	fp, r6
 8007742:	461c      	mov	r4, r3
 8007744:	2700      	movs	r7, #0
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	f04f 0900 	mov.w	r9, #0
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	429f      	cmp	r7, r3
 8007752:	dd06      	ble.n	8007762 <__kernel_rem_pio2+0x3c2>
 8007754:	ab70      	add	r3, sp, #448	; 0x1c0
 8007756:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800775a:	e9c3 8900 	strd	r8, r9, [r3]
 800775e:	3501      	adds	r5, #1
 8007760:	e7de      	b.n	8007720 <__kernel_rem_pio2+0x380>
 8007762:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007766:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800776a:	f7f8 ff6d 	bl	8000648 <__aeabi_dmul>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	f7f8 fdb1 	bl	80002dc <__adddf3>
 800777a:	3701      	adds	r7, #1
 800777c:	4680      	mov	r8, r0
 800777e:	4689      	mov	r9, r1
 8007780:	e7e5      	b.n	800774e <__kernel_rem_pio2+0x3ae>
 8007782:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007786:	e754      	b.n	8007632 <__kernel_rem_pio2+0x292>
 8007788:	ec47 6b10 	vmov	d0, r6, r7
 800778c:	f1ca 0000 	rsb	r0, sl, #0
 8007790:	f000 fa8e 	bl	8007cb0 <scalbn>
 8007794:	ec57 6b10 	vmov	r6, r7, d0
 8007798:	4b9f      	ldr	r3, [pc, #636]	; (8007a18 <__kernel_rem_pio2+0x678>)
 800779a:	ee10 0a10 	vmov	r0, s0
 800779e:	2200      	movs	r2, #0
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f9 f9d7 	bl	8000b54 <__aeabi_dcmpge>
 80077a6:	b300      	cbz	r0, 80077ea <__kernel_rem_pio2+0x44a>
 80077a8:	4b9c      	ldr	r3, [pc, #624]	; (8007a1c <__kernel_rem_pio2+0x67c>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f8 ff4a 	bl	8000648 <__aeabi_dmul>
 80077b4:	f7f9 f9e2 	bl	8000b7c <__aeabi_d2iz>
 80077b8:	4605      	mov	r5, r0
 80077ba:	f7f8 fedb 	bl	8000574 <__aeabi_i2d>
 80077be:	4b96      	ldr	r3, [pc, #600]	; (8007a18 <__kernel_rem_pio2+0x678>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff41 	bl	8000648 <__aeabi_dmul>
 80077c6:	460b      	mov	r3, r1
 80077c8:	4602      	mov	r2, r0
 80077ca:	4639      	mov	r1, r7
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7f8 fd83 	bl	80002d8 <__aeabi_dsub>
 80077d2:	f7f9 f9d3 	bl	8000b7c <__aeabi_d2iz>
 80077d6:	f104 0b01 	add.w	fp, r4, #1
 80077da:	ab0c      	add	r3, sp, #48	; 0x30
 80077dc:	f10a 0a18 	add.w	sl, sl, #24
 80077e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80077e8:	e72b      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	f7f9 f9c5 	bl	8000b7c <__aeabi_d2iz>
 80077f2:	ab0c      	add	r3, sp, #48	; 0x30
 80077f4:	46a3      	mov	fp, r4
 80077f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077fa:	e722      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 80077fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80077fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007802:	ab0c      	add	r3, sp, #48	; 0x30
 8007804:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007808:	f7f8 feb4 	bl	8000574 <__aeabi_i2d>
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 ff1a 	bl	8000648 <__aeabi_dmul>
 8007814:	4632      	mov	r2, r6
 8007816:	e9c9 0100 	strd	r0, r1, [r9]
 800781a:	463b      	mov	r3, r7
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 ff12 	bl	8000648 <__aeabi_dmul>
 8007824:	f108 38ff 	add.w	r8, r8, #4294967295
 8007828:	4604      	mov	r4, r0
 800782a:	460d      	mov	r5, r1
 800782c:	e713      	b.n	8007656 <__kernel_rem_pio2+0x2b6>
 800782e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007832:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007836:	f7f8 ff07 	bl	8000648 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 fd4b 	bl	80002dc <__adddf3>
 8007846:	3601      	adds	r6, #1
 8007848:	4604      	mov	r4, r0
 800784a:	460d      	mov	r5, r1
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	429e      	cmp	r6, r3
 8007850:	dc01      	bgt.n	8007856 <__kernel_rem_pio2+0x4b6>
 8007852:	45b0      	cmp	r8, r6
 8007854:	daeb      	bge.n	800782e <__kernel_rem_pio2+0x48e>
 8007856:	ab48      	add	r3, sp, #288	; 0x120
 8007858:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800785c:	e9c3 4500 	strd	r4, r5, [r3]
 8007860:	3f01      	subs	r7, #1
 8007862:	f108 0801 	add.w	r8, r8, #1
 8007866:	e6ff      	b.n	8007668 <__kernel_rem_pio2+0x2c8>
 8007868:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800786a:	2b02      	cmp	r3, #2
 800786c:	dc0b      	bgt.n	8007886 <__kernel_rem_pio2+0x4e6>
 800786e:	2b00      	cmp	r3, #0
 8007870:	dc6e      	bgt.n	8007950 <__kernel_rem_pio2+0x5b0>
 8007872:	d045      	beq.n	8007900 <__kernel_rem_pio2+0x560>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	f003 0007 	and.w	r0, r3, #7
 800787a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800787e:	ecbd 8b02 	vpop	{d8}
 8007882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007886:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007888:	2b03      	cmp	r3, #3
 800788a:	d1f3      	bne.n	8007874 <__kernel_rem_pio2+0x4d4>
 800788c:	ab48      	add	r3, sp, #288	; 0x120
 800788e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007892:	46d0      	mov	r8, sl
 8007894:	46d9      	mov	r9, fp
 8007896:	f1b9 0f00 	cmp.w	r9, #0
 800789a:	f1a8 0808 	sub.w	r8, r8, #8
 800789e:	dc64      	bgt.n	800796a <__kernel_rem_pio2+0x5ca>
 80078a0:	465c      	mov	r4, fp
 80078a2:	2c01      	cmp	r4, #1
 80078a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80078a8:	dc7e      	bgt.n	80079a8 <__kernel_rem_pio2+0x608>
 80078aa:	2000      	movs	r0, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	f1bb 0f01 	cmp.w	fp, #1
 80078b2:	f300 8097 	bgt.w	80079e4 <__kernel_rem_pio2+0x644>
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80078bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 8099 	bne.w	80079f8 <__kernel_rem_pio2+0x658>
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	e9c3 5600 	strd	r5, r6, [r3]
 80078cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80078d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80078d4:	e7ce      	b.n	8007874 <__kernel_rem_pio2+0x4d4>
 80078d6:	ab48      	add	r3, sp, #288	; 0x120
 80078d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fcfc 	bl	80002dc <__adddf3>
 80078e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078e8:	f1bb 0f00 	cmp.w	fp, #0
 80078ec:	daf3      	bge.n	80078d6 <__kernel_rem_pio2+0x536>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	b113      	cbz	r3, 80078f8 <__kernel_rem_pio2+0x558>
 80078f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078f6:	4619      	mov	r1, r3
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	e9c3 0100 	strd	r0, r1, [r3]
 80078fe:	e7b9      	b.n	8007874 <__kernel_rem_pio2+0x4d4>
 8007900:	2000      	movs	r0, #0
 8007902:	2100      	movs	r1, #0
 8007904:	e7f0      	b.n	80078e8 <__kernel_rem_pio2+0x548>
 8007906:	ab48      	add	r3, sp, #288	; 0x120
 8007908:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fce4 	bl	80002dc <__adddf3>
 8007914:	3c01      	subs	r4, #1
 8007916:	2c00      	cmp	r4, #0
 8007918:	daf5      	bge.n	8007906 <__kernel_rem_pio2+0x566>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	b1e3      	cbz	r3, 8007958 <__kernel_rem_pio2+0x5b8>
 800791e:	4602      	mov	r2, r0
 8007920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007924:	9c01      	ldr	r4, [sp, #4]
 8007926:	e9c4 2300 	strd	r2, r3, [r4]
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007932:	f7f8 fcd1 	bl	80002d8 <__aeabi_dsub>
 8007936:	ad4a      	add	r5, sp, #296	; 0x128
 8007938:	2401      	movs	r4, #1
 800793a:	45a3      	cmp	fp, r4
 800793c:	da0f      	bge.n	800795e <__kernel_rem_pio2+0x5be>
 800793e:	9b02      	ldr	r3, [sp, #8]
 8007940:	b113      	cbz	r3, 8007948 <__kernel_rem_pio2+0x5a8>
 8007942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007946:	4619      	mov	r1, r3
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800794e:	e791      	b.n	8007874 <__kernel_rem_pio2+0x4d4>
 8007950:	465c      	mov	r4, fp
 8007952:	2000      	movs	r0, #0
 8007954:	2100      	movs	r1, #0
 8007956:	e7de      	b.n	8007916 <__kernel_rem_pio2+0x576>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e7e2      	b.n	8007924 <__kernel_rem_pio2+0x584>
 800795e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007962:	f7f8 fcbb 	bl	80002dc <__adddf3>
 8007966:	3401      	adds	r4, #1
 8007968:	e7e7      	b.n	800793a <__kernel_rem_pio2+0x59a>
 800796a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800796e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007972:	4620      	mov	r0, r4
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fcaf 	bl	80002dc <__adddf3>
 800797e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f8 fca5 	bl	80002d8 <__aeabi_dsub>
 800798e:	4632      	mov	r2, r6
 8007990:	463b      	mov	r3, r7
 8007992:	f7f8 fca3 	bl	80002dc <__adddf3>
 8007996:	ed9d 7b04 	vldr	d7, [sp, #16]
 800799a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800799e:	ed88 7b00 	vstr	d7, [r8]
 80079a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80079a6:	e776      	b.n	8007896 <__kernel_rem_pio2+0x4f6>
 80079a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80079ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80079b0:	4640      	mov	r0, r8
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f8 fc90 	bl	80002dc <__adddf3>
 80079bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f8 fc86 	bl	80002d8 <__aeabi_dsub>
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	f7f8 fc84 	bl	80002dc <__adddf3>
 80079d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80079d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079dc:	ed8a 7b00 	vstr	d7, [sl]
 80079e0:	3c01      	subs	r4, #1
 80079e2:	e75e      	b.n	80078a2 <__kernel_rem_pio2+0x502>
 80079e4:	ab48      	add	r3, sp, #288	; 0x120
 80079e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc75 	bl	80002dc <__adddf3>
 80079f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079f6:	e75a      	b.n	80078ae <__kernel_rem_pio2+0x50e>
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	9a01      	ldr	r2, [sp, #4]
 80079fc:	601d      	str	r5, [r3, #0]
 80079fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007a02:	605c      	str	r4, [r3, #4]
 8007a04:	609f      	str	r7, [r3, #8]
 8007a06:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007a0a:	60d3      	str	r3, [r2, #12]
 8007a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a10:	6110      	str	r0, [r2, #16]
 8007a12:	6153      	str	r3, [r2, #20]
 8007a14:	e72e      	b.n	8007874 <__kernel_rem_pio2+0x4d4>
 8007a16:	bf00      	nop
 8007a18:	41700000 	.word	0x41700000
 8007a1c:	3e700000 	.word	0x3e700000

08007a20 <__kernel_sin>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	ed2d 8b04 	vpush	{d8-d9}
 8007a28:	eeb0 8a41 	vmov.f32	s16, s2
 8007a2c:	eef0 8a61 	vmov.f32	s17, s3
 8007a30:	ec55 4b10 	vmov	r4, r5, d0
 8007a34:	b083      	sub	sp, #12
 8007a36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007a3e:	9001      	str	r0, [sp, #4]
 8007a40:	da06      	bge.n	8007a50 <__kernel_sin+0x30>
 8007a42:	ee10 0a10 	vmov	r0, s0
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f9 f898 	bl	8000b7c <__aeabi_d2iz>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d051      	beq.n	8007af4 <__kernel_sin+0xd4>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fdf6 	bl	8000648 <__aeabi_dmul>
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fdee 	bl	8000648 <__aeabi_dmul>
 8007a6c:	a341      	add	r3, pc, #260	; (adr r3, 8007b74 <__kernel_sin+0x154>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	4680      	mov	r8, r0
 8007a74:	4689      	mov	r9, r1
 8007a76:	4650      	mov	r0, sl
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f7f8 fde5 	bl	8000648 <__aeabi_dmul>
 8007a7e:	a33f      	add	r3, pc, #252	; (adr r3, 8007b7c <__kernel_sin+0x15c>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fc28 	bl	80002d8 <__aeabi_dsub>
 8007a88:	4652      	mov	r2, sl
 8007a8a:	465b      	mov	r3, fp
 8007a8c:	f7f8 fddc 	bl	8000648 <__aeabi_dmul>
 8007a90:	a33c      	add	r3, pc, #240	; (adr r3, 8007b84 <__kernel_sin+0x164>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fc21 	bl	80002dc <__adddf3>
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	f7f8 fdd3 	bl	8000648 <__aeabi_dmul>
 8007aa2:	a33a      	add	r3, pc, #232	; (adr r3, 8007b8c <__kernel_sin+0x16c>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fc16 	bl	80002d8 <__aeabi_dsub>
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	f7f8 fdca 	bl	8000648 <__aeabi_dmul>
 8007ab4:	a337      	add	r3, pc, #220	; (adr r3, 8007b94 <__kernel_sin+0x174>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fc0f 	bl	80002dc <__adddf3>
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	460f      	mov	r7, r1
 8007ac4:	b9eb      	cbnz	r3, 8007b02 <__kernel_sin+0xe2>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4650      	mov	r0, sl
 8007acc:	4659      	mov	r1, fp
 8007ace:	f7f8 fdbb 	bl	8000648 <__aeabi_dmul>
 8007ad2:	a325      	add	r3, pc, #148	; (adr r3, 8007b68 <__kernel_sin+0x148>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fbfe 	bl	80002d8 <__aeabi_dsub>
 8007adc:	4642      	mov	r2, r8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f7f8 fdb2 	bl	8000648 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fbf6 	bl	80002dc <__adddf3>
 8007af0:	4604      	mov	r4, r0
 8007af2:	460d      	mov	r5, r1
 8007af4:	ec45 4b10 	vmov	d0, r4, r5
 8007af8:	b003      	add	sp, #12
 8007afa:	ecbd 8b04 	vpop	{d8-d9}
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <__kernel_sin+0x150>)
 8007b04:	ec51 0b18 	vmov	r0, r1, d8
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd9d 	bl	8000648 <__aeabi_dmul>
 8007b0e:	4632      	mov	r2, r6
 8007b10:	ec41 0b19 	vmov	d9, r0, r1
 8007b14:	463b      	mov	r3, r7
 8007b16:	4640      	mov	r0, r8
 8007b18:	4649      	mov	r1, r9
 8007b1a:	f7f8 fd95 	bl	8000648 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	ec51 0b19 	vmov	r0, r1, d9
 8007b26:	f7f8 fbd7 	bl	80002d8 <__aeabi_dsub>
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	465b      	mov	r3, fp
 8007b2e:	f7f8 fd8b 	bl	8000648 <__aeabi_dmul>
 8007b32:	ec53 2b18 	vmov	r2, r3, d8
 8007b36:	f7f8 fbcf 	bl	80002d8 <__aeabi_dsub>
 8007b3a:	a30b      	add	r3, pc, #44	; (adr r3, 8007b68 <__kernel_sin+0x148>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	4606      	mov	r6, r0
 8007b42:	460f      	mov	r7, r1
 8007b44:	4640      	mov	r0, r8
 8007b46:	4649      	mov	r1, r9
 8007b48:	f7f8 fd7e 	bl	8000648 <__aeabi_dmul>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 fbc2 	bl	80002dc <__adddf3>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7f8 fbba 	bl	80002d8 <__aeabi_dsub>
 8007b64:	e7c4      	b.n	8007af0 <__kernel_sin+0xd0>
 8007b66:	bf00      	nop
 8007b68:	55555549 	.word	0x55555549
 8007b6c:	3fc55555 	.word	0x3fc55555
 8007b70:	3fe00000 	.word	0x3fe00000
 8007b74:	5acfd57c 	.word	0x5acfd57c
 8007b78:	3de5d93a 	.word	0x3de5d93a
 8007b7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007b80:	3e5ae5e6 	.word	0x3e5ae5e6
 8007b84:	57b1fe7d 	.word	0x57b1fe7d
 8007b88:	3ec71de3 	.word	0x3ec71de3
 8007b8c:	19c161d5 	.word	0x19c161d5
 8007b90:	3f2a01a0 	.word	0x3f2a01a0
 8007b94:	1110f8a6 	.word	0x1110f8a6
 8007b98:	3f811111 	.word	0x3f811111

08007b9c <fabs>:
 8007b9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ba0:	ee10 2a10 	vmov	r2, s0
 8007ba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ba8:	ec43 2b10 	vmov	d0, r2, r3
 8007bac:	4770      	bx	lr
	...

08007bb0 <floor>:
 8007bb0:	ec51 0b10 	vmov	r0, r1, d0
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007bbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007bc0:	2e13      	cmp	r6, #19
 8007bc2:	ee10 5a10 	vmov	r5, s0
 8007bc6:	ee10 8a10 	vmov	r8, s0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	dc32      	bgt.n	8007c34 <floor+0x84>
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	da14      	bge.n	8007bfc <floor+0x4c>
 8007bd2:	a333      	add	r3, pc, #204	; (adr r3, 8007ca0 <floor+0xf0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fb80 	bl	80002dc <__adddf3>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f7f8 ffc2 	bl	8000b68 <__aeabi_dcmpgt>
 8007be4:	b138      	cbz	r0, 8007bf6 <floor+0x46>
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	da57      	bge.n	8007c9a <floor+0xea>
 8007bea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007bee:	431d      	orrs	r5, r3
 8007bf0:	d001      	beq.n	8007bf6 <floor+0x46>
 8007bf2:	4c2d      	ldr	r4, [pc, #180]	; (8007ca8 <floor+0xf8>)
 8007bf4:	2500      	movs	r5, #0
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e025      	b.n	8007c48 <floor+0x98>
 8007bfc:	4f2b      	ldr	r7, [pc, #172]	; (8007cac <floor+0xfc>)
 8007bfe:	4137      	asrs	r7, r6
 8007c00:	ea01 0307 	and.w	r3, r1, r7
 8007c04:	4303      	orrs	r3, r0
 8007c06:	d01f      	beq.n	8007c48 <floor+0x98>
 8007c08:	a325      	add	r3, pc, #148	; (adr r3, 8007ca0 <floor+0xf0>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fb65 	bl	80002dc <__adddf3>
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	f7f8 ffa7 	bl	8000b68 <__aeabi_dcmpgt>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0eb      	beq.n	8007bf6 <floor+0x46>
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	bfbe      	ittt	lt
 8007c22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c26:	fa43 f606 	asrlt.w	r6, r3, r6
 8007c2a:	19a4      	addlt	r4, r4, r6
 8007c2c:	ea24 0407 	bic.w	r4, r4, r7
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7e0      	b.n	8007bf6 <floor+0x46>
 8007c34:	2e33      	cmp	r6, #51	; 0x33
 8007c36:	dd0b      	ble.n	8007c50 <floor+0xa0>
 8007c38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c3c:	d104      	bne.n	8007c48 <floor+0x98>
 8007c3e:	ee10 2a10 	vmov	r2, s0
 8007c42:	460b      	mov	r3, r1
 8007c44:	f7f8 fb4a 	bl	80002dc <__adddf3>
 8007c48:	ec41 0b10 	vmov	d0, r0, r1
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007c54:	f04f 33ff 	mov.w	r3, #4294967295
 8007c58:	fa23 f707 	lsr.w	r7, r3, r7
 8007c5c:	4207      	tst	r7, r0
 8007c5e:	d0f3      	beq.n	8007c48 <floor+0x98>
 8007c60:	a30f      	add	r3, pc, #60	; (adr r3, 8007ca0 <floor+0xf0>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fb39 	bl	80002dc <__adddf3>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f7f8 ff7b 	bl	8000b68 <__aeabi_dcmpgt>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0bf      	beq.n	8007bf6 <floor+0x46>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	da02      	bge.n	8007c80 <floor+0xd0>
 8007c7a:	2e14      	cmp	r6, #20
 8007c7c:	d103      	bne.n	8007c86 <floor+0xd6>
 8007c7e:	3401      	adds	r4, #1
 8007c80:	ea25 0507 	bic.w	r5, r5, r7
 8007c84:	e7b7      	b.n	8007bf6 <floor+0x46>
 8007c86:	2301      	movs	r3, #1
 8007c88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c8c:	fa03 f606 	lsl.w	r6, r3, r6
 8007c90:	4435      	add	r5, r6
 8007c92:	4545      	cmp	r5, r8
 8007c94:	bf38      	it	cc
 8007c96:	18e4      	addcc	r4, r4, r3
 8007c98:	e7f2      	b.n	8007c80 <floor+0xd0>
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	462c      	mov	r4, r5
 8007c9e:	e7aa      	b.n	8007bf6 <floor+0x46>
 8007ca0:	8800759c 	.word	0x8800759c
 8007ca4:	7e37e43c 	.word	0x7e37e43c
 8007ca8:	bff00000 	.word	0xbff00000
 8007cac:	000fffff 	.word	0x000fffff

08007cb0 <scalbn>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	ec55 4b10 	vmov	r4, r5, d0
 8007cb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007cba:	4606      	mov	r6, r0
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	b99a      	cbnz	r2, 8007ce8 <scalbn+0x38>
 8007cc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007cc4:	4323      	orrs	r3, r4
 8007cc6:	d036      	beq.n	8007d36 <scalbn+0x86>
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <scalbn+0x100>)
 8007cca:	4629      	mov	r1, r5
 8007ccc:	ee10 0a10 	vmov	r0, s0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f7f8 fcb9 	bl	8000648 <__aeabi_dmul>
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <scalbn+0x104>)
 8007cd8:	429e      	cmp	r6, r3
 8007cda:	4604      	mov	r4, r0
 8007cdc:	460d      	mov	r5, r1
 8007cde:	da10      	bge.n	8007d02 <scalbn+0x52>
 8007ce0:	a32b      	add	r3, pc, #172	; (adr r3, 8007d90 <scalbn+0xe0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	e03a      	b.n	8007d5e <scalbn+0xae>
 8007ce8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007cec:	428a      	cmp	r2, r1
 8007cee:	d10c      	bne.n	8007d0a <scalbn+0x5a>
 8007cf0:	ee10 2a10 	vmov	r2, s0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f7f8 faf0 	bl	80002dc <__adddf3>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	e019      	b.n	8007d36 <scalbn+0x86>
 8007d02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d06:	460b      	mov	r3, r1
 8007d08:	3a36      	subs	r2, #54	; 0x36
 8007d0a:	4432      	add	r2, r6
 8007d0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d10:	428a      	cmp	r2, r1
 8007d12:	dd08      	ble.n	8007d26 <scalbn+0x76>
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	a120      	add	r1, pc, #128	; (adr r1, 8007d98 <scalbn+0xe8>)
 8007d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d1c:	da1c      	bge.n	8007d58 <scalbn+0xa8>
 8007d1e:	a120      	add	r1, pc, #128	; (adr r1, 8007da0 <scalbn+0xf0>)
 8007d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d24:	e018      	b.n	8007d58 <scalbn+0xa8>
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	dd08      	ble.n	8007d3c <scalbn+0x8c>
 8007d2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d36:	ec45 4b10 	vmov	d0, r4, r5
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d40:	da19      	bge.n	8007d76 <scalbn+0xc6>
 8007d42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d46:	429e      	cmp	r6, r3
 8007d48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d4c:	dd0a      	ble.n	8007d64 <scalbn+0xb4>
 8007d4e:	a112      	add	r1, pc, #72	; (adr r1, 8007d98 <scalbn+0xe8>)
 8007d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e2      	bne.n	8007d1e <scalbn+0x6e>
 8007d58:	a30f      	add	r3, pc, #60	; (adr r3, 8007d98 <scalbn+0xe8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc73 	bl	8000648 <__aeabi_dmul>
 8007d62:	e7cb      	b.n	8007cfc <scalbn+0x4c>
 8007d64:	a10a      	add	r1, pc, #40	; (adr r1, 8007d90 <scalbn+0xe0>)
 8007d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0b8      	beq.n	8007ce0 <scalbn+0x30>
 8007d6e:	a10e      	add	r1, pc, #56	; (adr r1, 8007da8 <scalbn+0xf8>)
 8007d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d74:	e7b4      	b.n	8007ce0 <scalbn+0x30>
 8007d76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d7a:	3236      	adds	r2, #54	; 0x36
 8007d7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d84:	4620      	mov	r0, r4
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <scalbn+0x108>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	e7e8      	b.n	8007d5e <scalbn+0xae>
 8007d8c:	f3af 8000 	nop.w
 8007d90:	c2f8f359 	.word	0xc2f8f359
 8007d94:	01a56e1f 	.word	0x01a56e1f
 8007d98:	8800759c 	.word	0x8800759c
 8007d9c:	7e37e43c 	.word	0x7e37e43c
 8007da0:	8800759c 	.word	0x8800759c
 8007da4:	fe37e43c 	.word	0xfe37e43c
 8007da8:	c2f8f359 	.word	0xc2f8f359
 8007dac:	81a56e1f 	.word	0x81a56e1f
 8007db0:	43500000 	.word	0x43500000
 8007db4:	ffff3cb0 	.word	0xffff3cb0
 8007db8:	3c900000 	.word	0x3c900000

08007dbc <abort>:
 8007dbc:	b508      	push	{r3, lr}
 8007dbe:	2006      	movs	r0, #6
 8007dc0:	f000 f97c 	bl	80080bc <raise>
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f7fc fce7 	bl	8004798 <_exit>

08007dca <atexit>:
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4601      	mov	r1, r0
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 b9af 	b.w	8008134 <__register_exitproc>
	...

08007dd8 <__errno>:
 8007dd8:	4b01      	ldr	r3, [pc, #4]	; (8007de0 <__errno+0x8>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000010 	.word	0x20000010

08007de4 <__libc_init_array>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4d0d      	ldr	r5, [pc, #52]	; (8007e1c <__libc_init_array+0x38>)
 8007de8:	4c0d      	ldr	r4, [pc, #52]	; (8007e20 <__libc_init_array+0x3c>)
 8007dea:	1b64      	subs	r4, r4, r5
 8007dec:	10a4      	asrs	r4, r4, #2
 8007dee:	2600      	movs	r6, #0
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	d109      	bne.n	8007e08 <__libc_init_array+0x24>
 8007df4:	4d0b      	ldr	r5, [pc, #44]	; (8007e24 <__libc_init_array+0x40>)
 8007df6:	4c0c      	ldr	r4, [pc, #48]	; (8007e28 <__libc_init_array+0x44>)
 8007df8:	f001 fa58 	bl	80092ac <_init>
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	2600      	movs	r6, #0
 8007e02:	42a6      	cmp	r6, r4
 8007e04:	d105      	bne.n	8007e12 <__libc_init_array+0x2e>
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0c:	4798      	blx	r3
 8007e0e:	3601      	adds	r6, #1
 8007e10:	e7ee      	b.n	8007df0 <__libc_init_array+0xc>
 8007e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e16:	4798      	blx	r3
 8007e18:	3601      	adds	r6, #1
 8007e1a:	e7f2      	b.n	8007e02 <__libc_init_array+0x1e>
 8007e1c:	08009874 	.word	0x08009874
 8007e20:	08009874 	.word	0x08009874
 8007e24:	08009874 	.word	0x08009874
 8007e28:	0800987c 	.word	0x0800987c

08007e2c <malloc>:
 8007e2c:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <malloc+0xc>)
 8007e2e:	4601      	mov	r1, r0
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f000 b871 	b.w	8007f18 <_malloc_r>
 8007e36:	bf00      	nop
 8007e38:	20000010 	.word	0x20000010

08007e3c <free>:
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <free+0xc>)
 8007e3e:	4601      	mov	r1, r0
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	f000 b819 	b.w	8007e78 <_free_r>
 8007e46:	bf00      	nop
 8007e48:	20000010 	.word	0x20000010

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <memset>:
 8007e68:	4402      	add	r2, r0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d100      	bne.n	8007e72 <memset+0xa>
 8007e70:	4770      	bx	lr
 8007e72:	f803 1b01 	strb.w	r1, [r3], #1
 8007e76:	e7f9      	b.n	8007e6c <memset+0x4>

08007e78 <_free_r>:
 8007e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d048      	beq.n	8007f10 <_free_r+0x98>
 8007e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e82:	9001      	str	r0, [sp, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f1a1 0404 	sub.w	r4, r1, #4
 8007e8a:	bfb8      	it	lt
 8007e8c:	18e4      	addlt	r4, r4, r3
 8007e8e:	f000 f9e7 	bl	8008260 <__malloc_lock>
 8007e92:	4a20      	ldr	r2, [pc, #128]	; (8007f14 <_free_r+0x9c>)
 8007e94:	9801      	ldr	r0, [sp, #4]
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	4615      	mov	r5, r2
 8007e9a:	b933      	cbnz	r3, 8007eaa <_free_r+0x32>
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	6014      	str	r4, [r2, #0]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea6:	f000 b9e1 	b.w	800826c <__malloc_unlock>
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	d90b      	bls.n	8007ec6 <_free_r+0x4e>
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	1862      	adds	r2, r4, r1
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bf04      	itt	eq
 8007eb6:	681a      	ldreq	r2, [r3, #0]
 8007eb8:	685b      	ldreq	r3, [r3, #4]
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	bf04      	itt	eq
 8007ebe:	1852      	addeq	r2, r2, r1
 8007ec0:	6022      	streq	r2, [r4, #0]
 8007ec2:	602c      	str	r4, [r5, #0]
 8007ec4:	e7ec      	b.n	8007ea0 <_free_r+0x28>
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	b10b      	cbz	r3, 8007ed0 <_free_r+0x58>
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d9fa      	bls.n	8007ec6 <_free_r+0x4e>
 8007ed0:	6811      	ldr	r1, [r2, #0]
 8007ed2:	1855      	adds	r5, r2, r1
 8007ed4:	42a5      	cmp	r5, r4
 8007ed6:	d10b      	bne.n	8007ef0 <_free_r+0x78>
 8007ed8:	6824      	ldr	r4, [r4, #0]
 8007eda:	4421      	add	r1, r4
 8007edc:	1854      	adds	r4, r2, r1
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	d1dd      	bne.n	8007ea0 <_free_r+0x28>
 8007ee4:	681c      	ldr	r4, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	6053      	str	r3, [r2, #4]
 8007eea:	4421      	add	r1, r4
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	e7d7      	b.n	8007ea0 <_free_r+0x28>
 8007ef0:	d902      	bls.n	8007ef8 <_free_r+0x80>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	6003      	str	r3, [r0, #0]
 8007ef6:	e7d3      	b.n	8007ea0 <_free_r+0x28>
 8007ef8:	6825      	ldr	r5, [r4, #0]
 8007efa:	1961      	adds	r1, r4, r5
 8007efc:	428b      	cmp	r3, r1
 8007efe:	bf04      	itt	eq
 8007f00:	6819      	ldreq	r1, [r3, #0]
 8007f02:	685b      	ldreq	r3, [r3, #4]
 8007f04:	6063      	str	r3, [r4, #4]
 8007f06:	bf04      	itt	eq
 8007f08:	1949      	addeq	r1, r1, r5
 8007f0a:	6021      	streq	r1, [r4, #0]
 8007f0c:	6054      	str	r4, [r2, #4]
 8007f0e:	e7c7      	b.n	8007ea0 <_free_r+0x28>
 8007f10:	b003      	add	sp, #12
 8007f12:	bd30      	pop	{r4, r5, pc}
 8007f14:	20003a34 	.word	0x20003a34

08007f18 <_malloc_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	1ccd      	adds	r5, r1, #3
 8007f1c:	f025 0503 	bic.w	r5, r5, #3
 8007f20:	3508      	adds	r5, #8
 8007f22:	2d0c      	cmp	r5, #12
 8007f24:	bf38      	it	cc
 8007f26:	250c      	movcc	r5, #12
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	db01      	blt.n	8007f32 <_malloc_r+0x1a>
 8007f2e:	42a9      	cmp	r1, r5
 8007f30:	d903      	bls.n	8007f3a <_malloc_r+0x22>
 8007f32:	230c      	movs	r3, #12
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	2000      	movs	r0, #0
 8007f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3a:	f000 f991 	bl	8008260 <__malloc_lock>
 8007f3e:	4921      	ldr	r1, [pc, #132]	; (8007fc4 <_malloc_r+0xac>)
 8007f40:	680a      	ldr	r2, [r1, #0]
 8007f42:	4614      	mov	r4, r2
 8007f44:	b99c      	cbnz	r4, 8007f6e <_malloc_r+0x56>
 8007f46:	4f20      	ldr	r7, [pc, #128]	; (8007fc8 <_malloc_r+0xb0>)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	b923      	cbnz	r3, 8007f56 <_malloc_r+0x3e>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 f87c 	bl	800804c <_sbrk_r>
 8007f54:	6038      	str	r0, [r7, #0]
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f877 	bl	800804c <_sbrk_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d123      	bne.n	8007faa <_malloc_r+0x92>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f980 	bl	800826c <__malloc_unlock>
 8007f6c:	e7e3      	b.n	8007f36 <_malloc_r+0x1e>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	1b5b      	subs	r3, r3, r5
 8007f72:	d417      	bmi.n	8007fa4 <_malloc_r+0x8c>
 8007f74:	2b0b      	cmp	r3, #11
 8007f76:	d903      	bls.n	8007f80 <_malloc_r+0x68>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	441c      	add	r4, r3
 8007f7c:	6025      	str	r5, [r4, #0]
 8007f7e:	e004      	b.n	8007f8a <_malloc_r+0x72>
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	42a2      	cmp	r2, r4
 8007f84:	bf0c      	ite	eq
 8007f86:	600b      	streq	r3, [r1, #0]
 8007f88:	6053      	strne	r3, [r2, #4]
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 f96e 	bl	800826c <__malloc_unlock>
 8007f90:	f104 000b 	add.w	r0, r4, #11
 8007f94:	1d23      	adds	r3, r4, #4
 8007f96:	f020 0007 	bic.w	r0, r0, #7
 8007f9a:	1ac2      	subs	r2, r0, r3
 8007f9c:	d0cc      	beq.n	8007f38 <_malloc_r+0x20>
 8007f9e:	1a1b      	subs	r3, r3, r0
 8007fa0:	50a3      	str	r3, [r4, r2]
 8007fa2:	e7c9      	b.n	8007f38 <_malloc_r+0x20>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	6864      	ldr	r4, [r4, #4]
 8007fa8:	e7cc      	b.n	8007f44 <_malloc_r+0x2c>
 8007faa:	1cc4      	adds	r4, r0, #3
 8007fac:	f024 0403 	bic.w	r4, r4, #3
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d0e3      	beq.n	8007f7c <_malloc_r+0x64>
 8007fb4:	1a21      	subs	r1, r4, r0
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f848 	bl	800804c <_sbrk_r>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d1dd      	bne.n	8007f7c <_malloc_r+0x64>
 8007fc0:	e7cf      	b.n	8007f62 <_malloc_r+0x4a>
 8007fc2:	bf00      	nop
 8007fc4:	20003a34 	.word	0x20003a34
 8007fc8:	20003a38 	.word	0x20003a38

08007fcc <rand>:
 8007fcc:	4b17      	ldr	r3, [pc, #92]	; (800802c <rand+0x60>)
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	681c      	ldr	r4, [r3, #0]
 8007fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fd4:	b9b3      	cbnz	r3, 8008004 <rand+0x38>
 8007fd6:	2018      	movs	r0, #24
 8007fd8:	f7ff ff28 	bl	8007e2c <malloc>
 8007fdc:	63a0      	str	r0, [r4, #56]	; 0x38
 8007fde:	b928      	cbnz	r0, 8007fec <rand+0x20>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b13      	ldr	r3, [pc, #76]	; (8008030 <rand+0x64>)
 8007fe4:	4813      	ldr	r0, [pc, #76]	; (8008034 <rand+0x68>)
 8007fe6:	214e      	movs	r1, #78	; 0x4e
 8007fe8:	f000 f906 	bl	80081f8 <__assert_func>
 8007fec:	4a12      	ldr	r2, [pc, #72]	; (8008038 <rand+0x6c>)
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <rand+0x70>)
 8007ff0:	e9c0 2300 	strd	r2, r3, [r0]
 8007ff4:	4b12      	ldr	r3, [pc, #72]	; (8008040 <rand+0x74>)
 8007ff6:	6083      	str	r3, [r0, #8]
 8007ff8:	230b      	movs	r3, #11
 8007ffa:	8183      	strh	r3, [r0, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	2300      	movs	r3, #0
 8008000:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008004:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008006:	480f      	ldr	r0, [pc, #60]	; (8008044 <rand+0x78>)
 8008008:	690a      	ldr	r2, [r1, #16]
 800800a:	694b      	ldr	r3, [r1, #20]
 800800c:	4c0e      	ldr	r4, [pc, #56]	; (8008048 <rand+0x7c>)
 800800e:	4350      	muls	r0, r2
 8008010:	fb04 0003 	mla	r0, r4, r3, r0
 8008014:	fba2 3404 	umull	r3, r4, r2, r4
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	4404      	add	r4, r0
 800801c:	f144 0000 	adc.w	r0, r4, #0
 8008020:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008024:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	20000010 	.word	0x20000010
 8008030:	0800972c 	.word	0x0800972c
 8008034:	08009743 	.word	0x08009743
 8008038:	abcd330e 	.word	0xabcd330e
 800803c:	e66d1234 	.word	0xe66d1234
 8008040:	0005deec 	.word	0x0005deec
 8008044:	5851f42d 	.word	0x5851f42d
 8008048:	4c957f2d 	.word	0x4c957f2d

0800804c <_sbrk_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d06      	ldr	r5, [pc, #24]	; (8008068 <_sbrk_r+0x1c>)
 8008050:	2300      	movs	r3, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7fc fc16 	bl	8004888 <_sbrk>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_sbrk_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_sbrk_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20003adc 	.word	0x20003adc

0800806c <_raise_r>:
 800806c:	291f      	cmp	r1, #31
 800806e:	b538      	push	{r3, r4, r5, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	d904      	bls.n	8008080 <_raise_r+0x14>
 8008076:	2316      	movs	r3, #22
 8008078:	6003      	str	r3, [r0, #0]
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008082:	b112      	cbz	r2, 800808a <_raise_r+0x1e>
 8008084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008088:	b94b      	cbnz	r3, 800809e <_raise_r+0x32>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f830 	bl	80080f0 <_getpid_r>
 8008090:	462a      	mov	r2, r5
 8008092:	4601      	mov	r1, r0
 8008094:	4620      	mov	r0, r4
 8008096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800809a:	f000 b817 	b.w	80080cc <_kill_r>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d00a      	beq.n	80080b8 <_raise_r+0x4c>
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	d103      	bne.n	80080ae <_raise_r+0x42>
 80080a6:	2316      	movs	r3, #22
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7e7      	b.n	800807e <_raise_r+0x12>
 80080ae:	2400      	movs	r4, #0
 80080b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080b4:	4628      	mov	r0, r5
 80080b6:	4798      	blx	r3
 80080b8:	2000      	movs	r0, #0
 80080ba:	e7e0      	b.n	800807e <_raise_r+0x12>

080080bc <raise>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <raise+0xc>)
 80080be:	4601      	mov	r1, r0
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f7ff bfd3 	b.w	800806c <_raise_r>
 80080c6:	bf00      	nop
 80080c8:	20000010 	.word	0x20000010

080080cc <_kill_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_kill_r+0x20>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	f7fc fb4d 	bl	8004778 <_kill>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d102      	bne.n	80080e8 <_kill_r+0x1c>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	b103      	cbz	r3, 80080e8 <_kill_r+0x1c>
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	20003adc 	.word	0x20003adc

080080f0 <_getpid_r>:
 80080f0:	f7fc bb3a 	b.w	8004768 <_getpid>

080080f4 <_vsiprintf_r>:
 80080f4:	b500      	push	{lr}
 80080f6:	b09b      	sub	sp, #108	; 0x6c
 80080f8:	9100      	str	r1, [sp, #0]
 80080fa:	9104      	str	r1, [sp, #16]
 80080fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008100:	9105      	str	r1, [sp, #20]
 8008102:	9102      	str	r1, [sp, #8]
 8008104:	4905      	ldr	r1, [pc, #20]	; (800811c <_vsiprintf_r+0x28>)
 8008106:	9103      	str	r1, [sp, #12]
 8008108:	4669      	mov	r1, sp
 800810a:	f000 f911 	bl	8008330 <_svfiprintf_r>
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	b01b      	add	sp, #108	; 0x6c
 8008116:	f85d fb04 	ldr.w	pc, [sp], #4
 800811a:	bf00      	nop
 800811c:	ffff0208 	.word	0xffff0208

08008120 <vsiprintf>:
 8008120:	4613      	mov	r3, r2
 8008122:	460a      	mov	r2, r1
 8008124:	4601      	mov	r1, r0
 8008126:	4802      	ldr	r0, [pc, #8]	; (8008130 <vsiprintf+0x10>)
 8008128:	6800      	ldr	r0, [r0, #0]
 800812a:	f7ff bfe3 	b.w	80080f4 <_vsiprintf_r>
 800812e:	bf00      	nop
 8008130:	20000010 	.word	0x20000010

08008134 <__register_exitproc>:
 8008134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008138:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80081f4 <__register_exitproc+0xc0>
 800813c:	4606      	mov	r6, r0
 800813e:	f8d8 0000 	ldr.w	r0, [r8]
 8008142:	461f      	mov	r7, r3
 8008144:	460d      	mov	r5, r1
 8008146:	4691      	mov	r9, r2
 8008148:	f000 f887 	bl	800825a <__retarget_lock_acquire_recursive>
 800814c:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <__register_exitproc+0xb0>)
 800814e:	681c      	ldr	r4, [r3, #0]
 8008150:	b934      	cbnz	r4, 8008160 <__register_exitproc+0x2c>
 8008152:	4c25      	ldr	r4, [pc, #148]	; (80081e8 <__register_exitproc+0xb4>)
 8008154:	601c      	str	r4, [r3, #0]
 8008156:	4b25      	ldr	r3, [pc, #148]	; (80081ec <__register_exitproc+0xb8>)
 8008158:	b113      	cbz	r3, 8008160 <__register_exitproc+0x2c>
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	2b1f      	cmp	r3, #31
 8008164:	dd07      	ble.n	8008176 <__register_exitproc+0x42>
 8008166:	f8d8 0000 	ldr.w	r0, [r8]
 800816a:	f000 f878 	bl	800825e <__retarget_lock_release_recursive>
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	b34e      	cbz	r6, 80081cc <__register_exitproc+0x98>
 8008178:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800817c:	b988      	cbnz	r0, 80081a2 <__register_exitproc+0x6e>
 800817e:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <__register_exitproc+0xbc>)
 8008180:	b923      	cbnz	r3, 800818c <__register_exitproc+0x58>
 8008182:	f8d8 0000 	ldr.w	r0, [r8]
 8008186:	f000 f869 	bl	800825c <__retarget_lock_release>
 800818a:	e7f0      	b.n	800816e <__register_exitproc+0x3a>
 800818c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008190:	f7ff fe4c 	bl	8007e2c <malloc>
 8008194:	2800      	cmp	r0, #0
 8008196:	d0f4      	beq.n	8008182 <__register_exitproc+0x4e>
 8008198:	2300      	movs	r3, #0
 800819a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800819e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80081a8:	2201      	movs	r2, #1
 80081aa:	409a      	lsls	r2, r3
 80081ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80081b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80081b4:	4313      	orrs	r3, r2
 80081b6:	2e02      	cmp	r6, #2
 80081b8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80081bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80081c0:	bf02      	ittt	eq
 80081c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80081c6:	431a      	orreq	r2, r3
 80081c8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	f8d8 0000 	ldr.w	r0, [r8]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	3302      	adds	r3, #2
 80081d6:	6062      	str	r2, [r4, #4]
 80081d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80081dc:	f000 f83f 	bl	800825e <__retarget_lock_release_recursive>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e7c6      	b.n	8008172 <__register_exitproc+0x3e>
 80081e4:	20003ac8 	.word	0x20003ac8
 80081e8:	20003a3c 	.word	0x20003a3c
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08007e2d 	.word	0x08007e2d
 80081f4:	20000074 	.word	0x20000074

080081f8 <__assert_func>:
 80081f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081fa:	4614      	mov	r4, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <__assert_func+0x2c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4605      	mov	r5, r0
 8008204:	68d8      	ldr	r0, [r3, #12]
 8008206:	b14c      	cbz	r4, 800821c <__assert_func+0x24>
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <__assert_func+0x30>)
 800820a:	9100      	str	r1, [sp, #0]
 800820c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008210:	4906      	ldr	r1, [pc, #24]	; (800822c <__assert_func+0x34>)
 8008212:	462b      	mov	r3, r5
 8008214:	f000 f80e 	bl	8008234 <fiprintf>
 8008218:	f7ff fdd0 	bl	8007dbc <abort>
 800821c:	4b04      	ldr	r3, [pc, #16]	; (8008230 <__assert_func+0x38>)
 800821e:	461c      	mov	r4, r3
 8008220:	e7f3      	b.n	800820a <__assert_func+0x12>
 8008222:	bf00      	nop
 8008224:	20000010 	.word	0x20000010
 8008228:	080097a2 	.word	0x080097a2
 800822c:	080097af 	.word	0x080097af
 8008230:	080097dd 	.word	0x080097dd

08008234 <fiprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b503      	push	{r0, r1, lr}
 8008238:	4601      	mov	r1, r0
 800823a:	ab03      	add	r3, sp, #12
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <fiprintf+0x20>)
 800823e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008242:	6800      	ldr	r0, [r0, #0]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	f000 f99d 	bl	8008584 <_vfiprintf_r>
 800824a:	b002      	add	sp, #8
 800824c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008250:	b003      	add	sp, #12
 8008252:	4770      	bx	lr
 8008254:	20000010 	.word	0x20000010

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release>:
 800825c:	4770      	bx	lr

0800825e <__retarget_lock_release_recursive>:
 800825e:	4770      	bx	lr

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bffa 	b.w	800825a <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20003ad4 	.word	0x20003ad4

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bff6 	b.w	800825e <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20003ad4 	.word	0x20003ad4

08008278 <__ssputs_r>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	688e      	ldr	r6, [r1, #8]
 800827e:	429e      	cmp	r6, r3
 8008280:	4682      	mov	sl, r0
 8008282:	460c      	mov	r4, r1
 8008284:	4690      	mov	r8, r2
 8008286:	461f      	mov	r7, r3
 8008288:	d838      	bhi.n	80082fc <__ssputs_r+0x84>
 800828a:	898a      	ldrh	r2, [r1, #12]
 800828c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008290:	d032      	beq.n	80082f8 <__ssputs_r+0x80>
 8008292:	6825      	ldr	r5, [r4, #0]
 8008294:	6909      	ldr	r1, [r1, #16]
 8008296:	eba5 0901 	sub.w	r9, r5, r1
 800829a:	6965      	ldr	r5, [r4, #20]
 800829c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082a4:	3301      	adds	r3, #1
 80082a6:	444b      	add	r3, r9
 80082a8:	106d      	asrs	r5, r5, #1
 80082aa:	429d      	cmp	r5, r3
 80082ac:	bf38      	it	cc
 80082ae:	461d      	movcc	r5, r3
 80082b0:	0553      	lsls	r3, r2, #21
 80082b2:	d531      	bpl.n	8008318 <__ssputs_r+0xa0>
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7ff fe2f 	bl	8007f18 <_malloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	b950      	cbnz	r0, 80082d4 <__ssputs_r+0x5c>
 80082be:	230c      	movs	r3, #12
 80082c0:	f8ca 3000 	str.w	r3, [sl]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	6921      	ldr	r1, [r4, #16]
 80082d6:	464a      	mov	r2, r9
 80082d8:	f7ff fdb8 	bl	8007e4c <memcpy>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	6126      	str	r6, [r4, #16]
 80082ea:	6165      	str	r5, [r4, #20]
 80082ec:	444e      	add	r6, r9
 80082ee:	eba5 0509 	sub.w	r5, r5, r9
 80082f2:	6026      	str	r6, [r4, #0]
 80082f4:	60a5      	str	r5, [r4, #8]
 80082f6:	463e      	mov	r6, r7
 80082f8:	42be      	cmp	r6, r7
 80082fa:	d900      	bls.n	80082fe <__ssputs_r+0x86>
 80082fc:	463e      	mov	r6, r7
 80082fe:	4632      	mov	r2, r6
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	4641      	mov	r1, r8
 8008304:	f000 fede 	bl	80090c4 <memmove>
 8008308:	68a3      	ldr	r3, [r4, #8]
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	4432      	add	r2, r6
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e7db      	b.n	80082d0 <__ssputs_r+0x58>
 8008318:	462a      	mov	r2, r5
 800831a:	f000 feed 	bl	80090f8 <_realloc_r>
 800831e:	4606      	mov	r6, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d1e1      	bne.n	80082e8 <__ssputs_r+0x70>
 8008324:	6921      	ldr	r1, [r4, #16]
 8008326:	4650      	mov	r0, sl
 8008328:	f7ff fda6 	bl	8007e78 <_free_r>
 800832c:	e7c7      	b.n	80082be <__ssputs_r+0x46>
	...

08008330 <_svfiprintf_r>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4698      	mov	r8, r3
 8008336:	898b      	ldrh	r3, [r1, #12]
 8008338:	061b      	lsls	r3, r3, #24
 800833a:	b09d      	sub	sp, #116	; 0x74
 800833c:	4607      	mov	r7, r0
 800833e:	460d      	mov	r5, r1
 8008340:	4614      	mov	r4, r2
 8008342:	d50e      	bpl.n	8008362 <_svfiprintf_r+0x32>
 8008344:	690b      	ldr	r3, [r1, #16]
 8008346:	b963      	cbnz	r3, 8008362 <_svfiprintf_r+0x32>
 8008348:	2140      	movs	r1, #64	; 0x40
 800834a:	f7ff fde5 	bl	8007f18 <_malloc_r>
 800834e:	6028      	str	r0, [r5, #0]
 8008350:	6128      	str	r0, [r5, #16]
 8008352:	b920      	cbnz	r0, 800835e <_svfiprintf_r+0x2e>
 8008354:	230c      	movs	r3, #12
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e0d1      	b.n	8008502 <_svfiprintf_r+0x1d2>
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	616b      	str	r3, [r5, #20]
 8008362:	2300      	movs	r3, #0
 8008364:	9309      	str	r3, [sp, #36]	; 0x24
 8008366:	2320      	movs	r3, #32
 8008368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800836c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008370:	2330      	movs	r3, #48	; 0x30
 8008372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800851c <_svfiprintf_r+0x1ec>
 8008376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800837a:	f04f 0901 	mov.w	r9, #1
 800837e:	4623      	mov	r3, r4
 8008380:	469a      	mov	sl, r3
 8008382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008386:	b10a      	cbz	r2, 800838c <_svfiprintf_r+0x5c>
 8008388:	2a25      	cmp	r2, #37	; 0x25
 800838a:	d1f9      	bne.n	8008380 <_svfiprintf_r+0x50>
 800838c:	ebba 0b04 	subs.w	fp, sl, r4
 8008390:	d00b      	beq.n	80083aa <_svfiprintf_r+0x7a>
 8008392:	465b      	mov	r3, fp
 8008394:	4622      	mov	r2, r4
 8008396:	4629      	mov	r1, r5
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ff6d 	bl	8008278 <__ssputs_r>
 800839e:	3001      	adds	r0, #1
 80083a0:	f000 80aa 	beq.w	80084f8 <_svfiprintf_r+0x1c8>
 80083a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a6:	445a      	add	r2, fp
 80083a8:	9209      	str	r2, [sp, #36]	; 0x24
 80083aa:	f89a 3000 	ldrb.w	r3, [sl]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80a2 	beq.w	80084f8 <_svfiprintf_r+0x1c8>
 80083b4:	2300      	movs	r3, #0
 80083b6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083be:	f10a 0a01 	add.w	sl, sl, #1
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	9307      	str	r3, [sp, #28]
 80083c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ca:	931a      	str	r3, [sp, #104]	; 0x68
 80083cc:	4654      	mov	r4, sl
 80083ce:	2205      	movs	r2, #5
 80083d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d4:	4851      	ldr	r0, [pc, #324]	; (800851c <_svfiprintf_r+0x1ec>)
 80083d6:	f7f7 ff2b 	bl	8000230 <memchr>
 80083da:	9a04      	ldr	r2, [sp, #16]
 80083dc:	b9d8      	cbnz	r0, 8008416 <_svfiprintf_r+0xe6>
 80083de:	06d0      	lsls	r0, r2, #27
 80083e0:	bf44      	itt	mi
 80083e2:	2320      	movmi	r3, #32
 80083e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e8:	0711      	lsls	r1, r2, #28
 80083ea:	bf44      	itt	mi
 80083ec:	232b      	movmi	r3, #43	; 0x2b
 80083ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f2:	f89a 3000 	ldrb.w	r3, [sl]
 80083f6:	2b2a      	cmp	r3, #42	; 0x2a
 80083f8:	d015      	beq.n	8008426 <_svfiprintf_r+0xf6>
 80083fa:	9a07      	ldr	r2, [sp, #28]
 80083fc:	4654      	mov	r4, sl
 80083fe:	2000      	movs	r0, #0
 8008400:	f04f 0c0a 	mov.w	ip, #10
 8008404:	4621      	mov	r1, r4
 8008406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800840a:	3b30      	subs	r3, #48	; 0x30
 800840c:	2b09      	cmp	r3, #9
 800840e:	d94e      	bls.n	80084ae <_svfiprintf_r+0x17e>
 8008410:	b1b0      	cbz	r0, 8008440 <_svfiprintf_r+0x110>
 8008412:	9207      	str	r2, [sp, #28]
 8008414:	e014      	b.n	8008440 <_svfiprintf_r+0x110>
 8008416:	eba0 0308 	sub.w	r3, r0, r8
 800841a:	fa09 f303 	lsl.w	r3, r9, r3
 800841e:	4313      	orrs	r3, r2
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	46a2      	mov	sl, r4
 8008424:	e7d2      	b.n	80083cc <_svfiprintf_r+0x9c>
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	1d19      	adds	r1, r3, #4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	9103      	str	r1, [sp, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	bfbb      	ittet	lt
 8008432:	425b      	neglt	r3, r3
 8008434:	f042 0202 	orrlt.w	r2, r2, #2
 8008438:	9307      	strge	r3, [sp, #28]
 800843a:	9307      	strlt	r3, [sp, #28]
 800843c:	bfb8      	it	lt
 800843e:	9204      	strlt	r2, [sp, #16]
 8008440:	7823      	ldrb	r3, [r4, #0]
 8008442:	2b2e      	cmp	r3, #46	; 0x2e
 8008444:	d10c      	bne.n	8008460 <_svfiprintf_r+0x130>
 8008446:	7863      	ldrb	r3, [r4, #1]
 8008448:	2b2a      	cmp	r3, #42	; 0x2a
 800844a:	d135      	bne.n	80084b8 <_svfiprintf_r+0x188>
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	9203      	str	r2, [sp, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfb8      	it	lt
 8008458:	f04f 33ff 	movlt.w	r3, #4294967295
 800845c:	3402      	adds	r4, #2
 800845e:	9305      	str	r3, [sp, #20]
 8008460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800852c <_svfiprintf_r+0x1fc>
 8008464:	7821      	ldrb	r1, [r4, #0]
 8008466:	2203      	movs	r2, #3
 8008468:	4650      	mov	r0, sl
 800846a:	f7f7 fee1 	bl	8000230 <memchr>
 800846e:	b140      	cbz	r0, 8008482 <_svfiprintf_r+0x152>
 8008470:	2340      	movs	r3, #64	; 0x40
 8008472:	eba0 000a 	sub.w	r0, r0, sl
 8008476:	fa03 f000 	lsl.w	r0, r3, r0
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	4303      	orrs	r3, r0
 800847e:	3401      	adds	r4, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008486:	4826      	ldr	r0, [pc, #152]	; (8008520 <_svfiprintf_r+0x1f0>)
 8008488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800848c:	2206      	movs	r2, #6
 800848e:	f7f7 fecf 	bl	8000230 <memchr>
 8008492:	2800      	cmp	r0, #0
 8008494:	d038      	beq.n	8008508 <_svfiprintf_r+0x1d8>
 8008496:	4b23      	ldr	r3, [pc, #140]	; (8008524 <_svfiprintf_r+0x1f4>)
 8008498:	bb1b      	cbnz	r3, 80084e2 <_svfiprintf_r+0x1b2>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	3307      	adds	r3, #7
 800849e:	f023 0307 	bic.w	r3, r3, #7
 80084a2:	3308      	adds	r3, #8
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	4433      	add	r3, r6
 80084aa:	9309      	str	r3, [sp, #36]	; 0x24
 80084ac:	e767      	b.n	800837e <_svfiprintf_r+0x4e>
 80084ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b2:	460c      	mov	r4, r1
 80084b4:	2001      	movs	r0, #1
 80084b6:	e7a5      	b.n	8008404 <_svfiprintf_r+0xd4>
 80084b8:	2300      	movs	r3, #0
 80084ba:	3401      	adds	r4, #1
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	4619      	mov	r1, r3
 80084c0:	f04f 0c0a 	mov.w	ip, #10
 80084c4:	4620      	mov	r0, r4
 80084c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ca:	3a30      	subs	r2, #48	; 0x30
 80084cc:	2a09      	cmp	r2, #9
 80084ce:	d903      	bls.n	80084d8 <_svfiprintf_r+0x1a8>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0c5      	beq.n	8008460 <_svfiprintf_r+0x130>
 80084d4:	9105      	str	r1, [sp, #20]
 80084d6:	e7c3      	b.n	8008460 <_svfiprintf_r+0x130>
 80084d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084dc:	4604      	mov	r4, r0
 80084de:	2301      	movs	r3, #1
 80084e0:	e7f0      	b.n	80084c4 <_svfiprintf_r+0x194>
 80084e2:	ab03      	add	r3, sp, #12
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <_svfiprintf_r+0x1f8>)
 80084ea:	a904      	add	r1, sp, #16
 80084ec:	4638      	mov	r0, r7
 80084ee:	f3af 8000 	nop.w
 80084f2:	1c42      	adds	r2, r0, #1
 80084f4:	4606      	mov	r6, r0
 80084f6:	d1d6      	bne.n	80084a6 <_svfiprintf_r+0x176>
 80084f8:	89ab      	ldrh	r3, [r5, #12]
 80084fa:	065b      	lsls	r3, r3, #25
 80084fc:	f53f af2c 	bmi.w	8008358 <_svfiprintf_r+0x28>
 8008500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008502:	b01d      	add	sp, #116	; 0x74
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <_svfiprintf_r+0x1f8>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	4638      	mov	r0, r7
 8008514:	f000 f9d4 	bl	80088c0 <_printf_i>
 8008518:	e7eb      	b.n	80084f2 <_svfiprintf_r+0x1c2>
 800851a:	bf00      	nop
 800851c:	080097de 	.word	0x080097de
 8008520:	080097e8 	.word	0x080097e8
 8008524:	00000000 	.word	0x00000000
 8008528:	08008279 	.word	0x08008279
 800852c:	080097e4 	.word	0x080097e4

08008530 <__sfputc_r>:
 8008530:	6893      	ldr	r3, [r2, #8]
 8008532:	3b01      	subs	r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	b410      	push	{r4}
 8008538:	6093      	str	r3, [r2, #8]
 800853a:	da08      	bge.n	800854e <__sfputc_r+0x1e>
 800853c:	6994      	ldr	r4, [r2, #24]
 800853e:	42a3      	cmp	r3, r4
 8008540:	db01      	blt.n	8008546 <__sfputc_r+0x16>
 8008542:	290a      	cmp	r1, #10
 8008544:	d103      	bne.n	800854e <__sfputc_r+0x1e>
 8008546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800854a:	f000 badf 	b.w	8008b0c <__swbuf_r>
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	1c58      	adds	r0, r3, #1
 8008552:	6010      	str	r0, [r2, #0]
 8008554:	7019      	strb	r1, [r3, #0]
 8008556:	4608      	mov	r0, r1
 8008558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855c:	4770      	bx	lr

0800855e <__sfputs_r>:
 800855e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008560:	4606      	mov	r6, r0
 8008562:	460f      	mov	r7, r1
 8008564:	4614      	mov	r4, r2
 8008566:	18d5      	adds	r5, r2, r3
 8008568:	42ac      	cmp	r4, r5
 800856a:	d101      	bne.n	8008570 <__sfputs_r+0x12>
 800856c:	2000      	movs	r0, #0
 800856e:	e007      	b.n	8008580 <__sfputs_r+0x22>
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	463a      	mov	r2, r7
 8008576:	4630      	mov	r0, r6
 8008578:	f7ff ffda 	bl	8008530 <__sfputc_r>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d1f3      	bne.n	8008568 <__sfputs_r+0xa>
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008584 <_vfiprintf_r>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	460d      	mov	r5, r1
 800858a:	b09d      	sub	sp, #116	; 0x74
 800858c:	4614      	mov	r4, r2
 800858e:	4698      	mov	r8, r3
 8008590:	4606      	mov	r6, r0
 8008592:	b118      	cbz	r0, 800859c <_vfiprintf_r+0x18>
 8008594:	6983      	ldr	r3, [r0, #24]
 8008596:	b90b      	cbnz	r3, 800859c <_vfiprintf_r+0x18>
 8008598:	f000 fc92 	bl	8008ec0 <__sinit>
 800859c:	4b89      	ldr	r3, [pc, #548]	; (80087c4 <_vfiprintf_r+0x240>)
 800859e:	429d      	cmp	r5, r3
 80085a0:	d11b      	bne.n	80085da <_vfiprintf_r+0x56>
 80085a2:	6875      	ldr	r5, [r6, #4]
 80085a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085a6:	07d9      	lsls	r1, r3, #31
 80085a8:	d405      	bmi.n	80085b6 <_vfiprintf_r+0x32>
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	059a      	lsls	r2, r3, #22
 80085ae:	d402      	bmi.n	80085b6 <_vfiprintf_r+0x32>
 80085b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b2:	f7ff fe52 	bl	800825a <__retarget_lock_acquire_recursive>
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	071b      	lsls	r3, r3, #28
 80085ba:	d501      	bpl.n	80085c0 <_vfiprintf_r+0x3c>
 80085bc:	692b      	ldr	r3, [r5, #16]
 80085be:	b9eb      	cbnz	r3, 80085fc <_vfiprintf_r+0x78>
 80085c0:	4629      	mov	r1, r5
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 faf4 	bl	8008bb0 <__swsetup_r>
 80085c8:	b1c0      	cbz	r0, 80085fc <_vfiprintf_r+0x78>
 80085ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085cc:	07dc      	lsls	r4, r3, #31
 80085ce:	d50e      	bpl.n	80085ee <_vfiprintf_r+0x6a>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	b01d      	add	sp, #116	; 0x74
 80085d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085da:	4b7b      	ldr	r3, [pc, #492]	; (80087c8 <_vfiprintf_r+0x244>)
 80085dc:	429d      	cmp	r5, r3
 80085de:	d101      	bne.n	80085e4 <_vfiprintf_r+0x60>
 80085e0:	68b5      	ldr	r5, [r6, #8]
 80085e2:	e7df      	b.n	80085a4 <_vfiprintf_r+0x20>
 80085e4:	4b79      	ldr	r3, [pc, #484]	; (80087cc <_vfiprintf_r+0x248>)
 80085e6:	429d      	cmp	r5, r3
 80085e8:	bf08      	it	eq
 80085ea:	68f5      	ldreq	r5, [r6, #12]
 80085ec:	e7da      	b.n	80085a4 <_vfiprintf_r+0x20>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	0598      	lsls	r0, r3, #22
 80085f2:	d4ed      	bmi.n	80085d0 <_vfiprintf_r+0x4c>
 80085f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085f6:	f7ff fe32 	bl	800825e <__retarget_lock_release_recursive>
 80085fa:	e7e9      	b.n	80085d0 <_vfiprintf_r+0x4c>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	2320      	movs	r3, #32
 8008602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008606:	f8cd 800c 	str.w	r8, [sp, #12]
 800860a:	2330      	movs	r3, #48	; 0x30
 800860c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087d0 <_vfiprintf_r+0x24c>
 8008610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008614:	f04f 0901 	mov.w	r9, #1
 8008618:	4623      	mov	r3, r4
 800861a:	469a      	mov	sl, r3
 800861c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008620:	b10a      	cbz	r2, 8008626 <_vfiprintf_r+0xa2>
 8008622:	2a25      	cmp	r2, #37	; 0x25
 8008624:	d1f9      	bne.n	800861a <_vfiprintf_r+0x96>
 8008626:	ebba 0b04 	subs.w	fp, sl, r4
 800862a:	d00b      	beq.n	8008644 <_vfiprintf_r+0xc0>
 800862c:	465b      	mov	r3, fp
 800862e:	4622      	mov	r2, r4
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff ff93 	bl	800855e <__sfputs_r>
 8008638:	3001      	adds	r0, #1
 800863a:	f000 80aa 	beq.w	8008792 <_vfiprintf_r+0x20e>
 800863e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008640:	445a      	add	r2, fp
 8008642:	9209      	str	r2, [sp, #36]	; 0x24
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80a2 	beq.w	8008792 <_vfiprintf_r+0x20e>
 800864e:	2300      	movs	r3, #0
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008658:	f10a 0a01 	add.w	sl, sl, #1
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	9307      	str	r3, [sp, #28]
 8008660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008664:	931a      	str	r3, [sp, #104]	; 0x68
 8008666:	4654      	mov	r4, sl
 8008668:	2205      	movs	r2, #5
 800866a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866e:	4858      	ldr	r0, [pc, #352]	; (80087d0 <_vfiprintf_r+0x24c>)
 8008670:	f7f7 fdde 	bl	8000230 <memchr>
 8008674:	9a04      	ldr	r2, [sp, #16]
 8008676:	b9d8      	cbnz	r0, 80086b0 <_vfiprintf_r+0x12c>
 8008678:	06d1      	lsls	r1, r2, #27
 800867a:	bf44      	itt	mi
 800867c:	2320      	movmi	r3, #32
 800867e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008682:	0713      	lsls	r3, r2, #28
 8008684:	bf44      	itt	mi
 8008686:	232b      	movmi	r3, #43	; 0x2b
 8008688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800868c:	f89a 3000 	ldrb.w	r3, [sl]
 8008690:	2b2a      	cmp	r3, #42	; 0x2a
 8008692:	d015      	beq.n	80086c0 <_vfiprintf_r+0x13c>
 8008694:	9a07      	ldr	r2, [sp, #28]
 8008696:	4654      	mov	r4, sl
 8008698:	2000      	movs	r0, #0
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4621      	mov	r1, r4
 80086a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a4:	3b30      	subs	r3, #48	; 0x30
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d94e      	bls.n	8008748 <_vfiprintf_r+0x1c4>
 80086aa:	b1b0      	cbz	r0, 80086da <_vfiprintf_r+0x156>
 80086ac:	9207      	str	r2, [sp, #28]
 80086ae:	e014      	b.n	80086da <_vfiprintf_r+0x156>
 80086b0:	eba0 0308 	sub.w	r3, r0, r8
 80086b4:	fa09 f303 	lsl.w	r3, r9, r3
 80086b8:	4313      	orrs	r3, r2
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	46a2      	mov	sl, r4
 80086be:	e7d2      	b.n	8008666 <_vfiprintf_r+0xe2>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	1d19      	adds	r1, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9103      	str	r1, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfbb      	ittet	lt
 80086cc:	425b      	neglt	r3, r3
 80086ce:	f042 0202 	orrlt.w	r2, r2, #2
 80086d2:	9307      	strge	r3, [sp, #28]
 80086d4:	9307      	strlt	r3, [sp, #28]
 80086d6:	bfb8      	it	lt
 80086d8:	9204      	strlt	r2, [sp, #16]
 80086da:	7823      	ldrb	r3, [r4, #0]
 80086dc:	2b2e      	cmp	r3, #46	; 0x2e
 80086de:	d10c      	bne.n	80086fa <_vfiprintf_r+0x176>
 80086e0:	7863      	ldrb	r3, [r4, #1]
 80086e2:	2b2a      	cmp	r3, #42	; 0x2a
 80086e4:	d135      	bne.n	8008752 <_vfiprintf_r+0x1ce>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9203      	str	r2, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfb8      	it	lt
 80086f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80086f6:	3402      	adds	r4, #2
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087e0 <_vfiprintf_r+0x25c>
 80086fe:	7821      	ldrb	r1, [r4, #0]
 8008700:	2203      	movs	r2, #3
 8008702:	4650      	mov	r0, sl
 8008704:	f7f7 fd94 	bl	8000230 <memchr>
 8008708:	b140      	cbz	r0, 800871c <_vfiprintf_r+0x198>
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	eba0 000a 	sub.w	r0, r0, sl
 8008710:	fa03 f000 	lsl.w	r0, r3, r0
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	4303      	orrs	r3, r0
 8008718:	3401      	adds	r4, #1
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008720:	482c      	ldr	r0, [pc, #176]	; (80087d4 <_vfiprintf_r+0x250>)
 8008722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008726:	2206      	movs	r2, #6
 8008728:	f7f7 fd82 	bl	8000230 <memchr>
 800872c:	2800      	cmp	r0, #0
 800872e:	d03f      	beq.n	80087b0 <_vfiprintf_r+0x22c>
 8008730:	4b29      	ldr	r3, [pc, #164]	; (80087d8 <_vfiprintf_r+0x254>)
 8008732:	bb1b      	cbnz	r3, 800877c <_vfiprintf_r+0x1f8>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	3307      	adds	r3, #7
 8008738:	f023 0307 	bic.w	r3, r3, #7
 800873c:	3308      	adds	r3, #8
 800873e:	9303      	str	r3, [sp, #12]
 8008740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008742:	443b      	add	r3, r7
 8008744:	9309      	str	r3, [sp, #36]	; 0x24
 8008746:	e767      	b.n	8008618 <_vfiprintf_r+0x94>
 8008748:	fb0c 3202 	mla	r2, ip, r2, r3
 800874c:	460c      	mov	r4, r1
 800874e:	2001      	movs	r0, #1
 8008750:	e7a5      	b.n	800869e <_vfiprintf_r+0x11a>
 8008752:	2300      	movs	r3, #0
 8008754:	3401      	adds	r4, #1
 8008756:	9305      	str	r3, [sp, #20]
 8008758:	4619      	mov	r1, r3
 800875a:	f04f 0c0a 	mov.w	ip, #10
 800875e:	4620      	mov	r0, r4
 8008760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008764:	3a30      	subs	r2, #48	; 0x30
 8008766:	2a09      	cmp	r2, #9
 8008768:	d903      	bls.n	8008772 <_vfiprintf_r+0x1ee>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0c5      	beq.n	80086fa <_vfiprintf_r+0x176>
 800876e:	9105      	str	r1, [sp, #20]
 8008770:	e7c3      	b.n	80086fa <_vfiprintf_r+0x176>
 8008772:	fb0c 2101 	mla	r1, ip, r1, r2
 8008776:	4604      	mov	r4, r0
 8008778:	2301      	movs	r3, #1
 800877a:	e7f0      	b.n	800875e <_vfiprintf_r+0x1da>
 800877c:	ab03      	add	r3, sp, #12
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	462a      	mov	r2, r5
 8008782:	4b16      	ldr	r3, [pc, #88]	; (80087dc <_vfiprintf_r+0x258>)
 8008784:	a904      	add	r1, sp, #16
 8008786:	4630      	mov	r0, r6
 8008788:	f3af 8000 	nop.w
 800878c:	4607      	mov	r7, r0
 800878e:	1c78      	adds	r0, r7, #1
 8008790:	d1d6      	bne.n	8008740 <_vfiprintf_r+0x1bc>
 8008792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008794:	07d9      	lsls	r1, r3, #31
 8008796:	d405      	bmi.n	80087a4 <_vfiprintf_r+0x220>
 8008798:	89ab      	ldrh	r3, [r5, #12]
 800879a:	059a      	lsls	r2, r3, #22
 800879c:	d402      	bmi.n	80087a4 <_vfiprintf_r+0x220>
 800879e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a0:	f7ff fd5d 	bl	800825e <__retarget_lock_release_recursive>
 80087a4:	89ab      	ldrh	r3, [r5, #12]
 80087a6:	065b      	lsls	r3, r3, #25
 80087a8:	f53f af12 	bmi.w	80085d0 <_vfiprintf_r+0x4c>
 80087ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ae:	e711      	b.n	80085d4 <_vfiprintf_r+0x50>
 80087b0:	ab03      	add	r3, sp, #12
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	462a      	mov	r2, r5
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <_vfiprintf_r+0x258>)
 80087b8:	a904      	add	r1, sp, #16
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 f880 	bl	80088c0 <_printf_i>
 80087c0:	e7e4      	b.n	800878c <_vfiprintf_r+0x208>
 80087c2:	bf00      	nop
 80087c4:	08009834 	.word	0x08009834
 80087c8:	08009854 	.word	0x08009854
 80087cc:	08009814 	.word	0x08009814
 80087d0:	080097de 	.word	0x080097de
 80087d4:	080097e8 	.word	0x080097e8
 80087d8:	00000000 	.word	0x00000000
 80087dc:	0800855f 	.word	0x0800855f
 80087e0:	080097e4 	.word	0x080097e4

080087e4 <_printf_common>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	4616      	mov	r6, r2
 80087ea:	4699      	mov	r9, r3
 80087ec:	688a      	ldr	r2, [r1, #8]
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087f4:	4293      	cmp	r3, r2
 80087f6:	bfb8      	it	lt
 80087f8:	4613      	movlt	r3, r2
 80087fa:	6033      	str	r3, [r6, #0]
 80087fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008800:	4607      	mov	r7, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b10a      	cbz	r2, 800880a <_printf_common+0x26>
 8008806:	3301      	adds	r3, #1
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	0699      	lsls	r1, r3, #26
 800880e:	bf42      	ittt	mi
 8008810:	6833      	ldrmi	r3, [r6, #0]
 8008812:	3302      	addmi	r3, #2
 8008814:	6033      	strmi	r3, [r6, #0]
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	f015 0506 	ands.w	r5, r5, #6
 800881c:	d106      	bne.n	800882c <_printf_common+0x48>
 800881e:	f104 0a19 	add.w	sl, r4, #25
 8008822:	68e3      	ldr	r3, [r4, #12]
 8008824:	6832      	ldr	r2, [r6, #0]
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	42ab      	cmp	r3, r5
 800882a:	dc26      	bgt.n	800887a <_printf_common+0x96>
 800882c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008830:	1e13      	subs	r3, r2, #0
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	bf18      	it	ne
 8008836:	2301      	movne	r3, #1
 8008838:	0692      	lsls	r2, r2, #26
 800883a:	d42b      	bmi.n	8008894 <_printf_common+0xb0>
 800883c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008840:	4649      	mov	r1, r9
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d01e      	beq.n	8008888 <_printf_common+0xa4>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	68e5      	ldr	r5, [r4, #12]
 800884e:	6832      	ldr	r2, [r6, #0]
 8008850:	f003 0306 	and.w	r3, r3, #6
 8008854:	2b04      	cmp	r3, #4
 8008856:	bf08      	it	eq
 8008858:	1aad      	subeq	r5, r5, r2
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	bf0c      	ite	eq
 8008860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008864:	2500      	movne	r5, #0
 8008866:	4293      	cmp	r3, r2
 8008868:	bfc4      	itt	gt
 800886a:	1a9b      	subgt	r3, r3, r2
 800886c:	18ed      	addgt	r5, r5, r3
 800886e:	2600      	movs	r6, #0
 8008870:	341a      	adds	r4, #26
 8008872:	42b5      	cmp	r5, r6
 8008874:	d11a      	bne.n	80088ac <_printf_common+0xc8>
 8008876:	2000      	movs	r0, #0
 8008878:	e008      	b.n	800888c <_printf_common+0xa8>
 800887a:	2301      	movs	r3, #1
 800887c:	4652      	mov	r2, sl
 800887e:	4649      	mov	r1, r9
 8008880:	4638      	mov	r0, r7
 8008882:	47c0      	blx	r8
 8008884:	3001      	adds	r0, #1
 8008886:	d103      	bne.n	8008890 <_printf_common+0xac>
 8008888:	f04f 30ff 	mov.w	r0, #4294967295
 800888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008890:	3501      	adds	r5, #1
 8008892:	e7c6      	b.n	8008822 <_printf_common+0x3e>
 8008894:	18e1      	adds	r1, r4, r3
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	2030      	movs	r0, #48	; 0x30
 800889a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800889e:	4422      	add	r2, r4
 80088a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088a8:	3302      	adds	r3, #2
 80088aa:	e7c7      	b.n	800883c <_printf_common+0x58>
 80088ac:	2301      	movs	r3, #1
 80088ae:	4622      	mov	r2, r4
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d0e6      	beq.n	8008888 <_printf_common+0xa4>
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7d9      	b.n	8008872 <_printf_common+0x8e>
	...

080088c0 <_printf_i>:
 80088c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	4691      	mov	r9, r2
 80088c8:	7e27      	ldrb	r7, [r4, #24]
 80088ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088cc:	2f78      	cmp	r7, #120	; 0x78
 80088ce:	4680      	mov	r8, r0
 80088d0:	469a      	mov	sl, r3
 80088d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d6:	d807      	bhi.n	80088e8 <_printf_i+0x28>
 80088d8:	2f62      	cmp	r7, #98	; 0x62
 80088da:	d80a      	bhi.n	80088f2 <_printf_i+0x32>
 80088dc:	2f00      	cmp	r7, #0
 80088de:	f000 80d8 	beq.w	8008a92 <_printf_i+0x1d2>
 80088e2:	2f58      	cmp	r7, #88	; 0x58
 80088e4:	f000 80a3 	beq.w	8008a2e <_printf_i+0x16e>
 80088e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088f0:	e03a      	b.n	8008968 <_printf_i+0xa8>
 80088f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088f6:	2b15      	cmp	r3, #21
 80088f8:	d8f6      	bhi.n	80088e8 <_printf_i+0x28>
 80088fa:	a001      	add	r0, pc, #4	; (adr r0, 8008900 <_printf_i+0x40>)
 80088fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008900:	08008959 	.word	0x08008959
 8008904:	0800896d 	.word	0x0800896d
 8008908:	080088e9 	.word	0x080088e9
 800890c:	080088e9 	.word	0x080088e9
 8008910:	080088e9 	.word	0x080088e9
 8008914:	080088e9 	.word	0x080088e9
 8008918:	0800896d 	.word	0x0800896d
 800891c:	080088e9 	.word	0x080088e9
 8008920:	080088e9 	.word	0x080088e9
 8008924:	080088e9 	.word	0x080088e9
 8008928:	080088e9 	.word	0x080088e9
 800892c:	08008a79 	.word	0x08008a79
 8008930:	0800899d 	.word	0x0800899d
 8008934:	08008a5b 	.word	0x08008a5b
 8008938:	080088e9 	.word	0x080088e9
 800893c:	080088e9 	.word	0x080088e9
 8008940:	08008a9b 	.word	0x08008a9b
 8008944:	080088e9 	.word	0x080088e9
 8008948:	0800899d 	.word	0x0800899d
 800894c:	080088e9 	.word	0x080088e9
 8008950:	080088e9 	.word	0x080088e9
 8008954:	08008a63 	.word	0x08008a63
 8008958:	680b      	ldr	r3, [r1, #0]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	600a      	str	r2, [r1, #0]
 8008960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008968:	2301      	movs	r3, #1
 800896a:	e0a3      	b.n	8008ab4 <_printf_i+0x1f4>
 800896c:	6825      	ldr	r5, [r4, #0]
 800896e:	6808      	ldr	r0, [r1, #0]
 8008970:	062e      	lsls	r6, r5, #24
 8008972:	f100 0304 	add.w	r3, r0, #4
 8008976:	d50a      	bpl.n	800898e <_printf_i+0xce>
 8008978:	6805      	ldr	r5, [r0, #0]
 800897a:	600b      	str	r3, [r1, #0]
 800897c:	2d00      	cmp	r5, #0
 800897e:	da03      	bge.n	8008988 <_printf_i+0xc8>
 8008980:	232d      	movs	r3, #45	; 0x2d
 8008982:	426d      	negs	r5, r5
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	485e      	ldr	r0, [pc, #376]	; (8008b04 <_printf_i+0x244>)
 800898a:	230a      	movs	r3, #10
 800898c:	e019      	b.n	80089c2 <_printf_i+0x102>
 800898e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008992:	6805      	ldr	r5, [r0, #0]
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	bf18      	it	ne
 8008998:	b22d      	sxthne	r5, r5
 800899a:	e7ef      	b.n	800897c <_printf_i+0xbc>
 800899c:	680b      	ldr	r3, [r1, #0]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	1d18      	adds	r0, r3, #4
 80089a2:	6008      	str	r0, [r1, #0]
 80089a4:	0628      	lsls	r0, r5, #24
 80089a6:	d501      	bpl.n	80089ac <_printf_i+0xec>
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <_printf_i+0xf2>
 80089ac:	0669      	lsls	r1, r5, #25
 80089ae:	d5fb      	bpl.n	80089a8 <_printf_i+0xe8>
 80089b0:	881d      	ldrh	r5, [r3, #0]
 80089b2:	4854      	ldr	r0, [pc, #336]	; (8008b04 <_printf_i+0x244>)
 80089b4:	2f6f      	cmp	r7, #111	; 0x6f
 80089b6:	bf0c      	ite	eq
 80089b8:	2308      	moveq	r3, #8
 80089ba:	230a      	movne	r3, #10
 80089bc:	2100      	movs	r1, #0
 80089be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089c2:	6866      	ldr	r6, [r4, #4]
 80089c4:	60a6      	str	r6, [r4, #8]
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	bfa2      	ittt	ge
 80089ca:	6821      	ldrge	r1, [r4, #0]
 80089cc:	f021 0104 	bicge.w	r1, r1, #4
 80089d0:	6021      	strge	r1, [r4, #0]
 80089d2:	b90d      	cbnz	r5, 80089d8 <_printf_i+0x118>
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	d04d      	beq.n	8008a74 <_printf_i+0x1b4>
 80089d8:	4616      	mov	r6, r2
 80089da:	fbb5 f1f3 	udiv	r1, r5, r3
 80089de:	fb03 5711 	mls	r7, r3, r1, r5
 80089e2:	5dc7      	ldrb	r7, [r0, r7]
 80089e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089e8:	462f      	mov	r7, r5
 80089ea:	42bb      	cmp	r3, r7
 80089ec:	460d      	mov	r5, r1
 80089ee:	d9f4      	bls.n	80089da <_printf_i+0x11a>
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d10b      	bne.n	8008a0c <_printf_i+0x14c>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	07df      	lsls	r7, r3, #31
 80089f8:	d508      	bpl.n	8008a0c <_printf_i+0x14c>
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	6861      	ldr	r1, [r4, #4]
 80089fe:	4299      	cmp	r1, r3
 8008a00:	bfde      	ittt	le
 8008a02:	2330      	movle	r3, #48	; 0x30
 8008a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a0c:	1b92      	subs	r2, r2, r6
 8008a0e:	6122      	str	r2, [r4, #16]
 8008a10:	f8cd a000 	str.w	sl, [sp]
 8008a14:	464b      	mov	r3, r9
 8008a16:	aa03      	add	r2, sp, #12
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	f7ff fee2 	bl	80087e4 <_printf_common>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d14c      	bne.n	8008abe <_printf_i+0x1fe>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	b004      	add	sp, #16
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	4835      	ldr	r0, [pc, #212]	; (8008b04 <_printf_i+0x244>)
 8008a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	680e      	ldr	r6, [r1, #0]
 8008a38:	061f      	lsls	r7, r3, #24
 8008a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a3e:	600e      	str	r6, [r1, #0]
 8008a40:	d514      	bpl.n	8008a6c <_printf_i+0x1ac>
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	bf44      	itt	mi
 8008a46:	f043 0320 	orrmi.w	r3, r3, #32
 8008a4a:	6023      	strmi	r3, [r4, #0]
 8008a4c:	b91d      	cbnz	r5, 8008a56 <_printf_i+0x196>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f023 0320 	bic.w	r3, r3, #32
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	2310      	movs	r3, #16
 8008a58:	e7b0      	b.n	80089bc <_printf_i+0xfc>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	f043 0320 	orr.w	r3, r3, #32
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	2378      	movs	r3, #120	; 0x78
 8008a64:	4828      	ldr	r0, [pc, #160]	; (8008b08 <_printf_i+0x248>)
 8008a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a6a:	e7e3      	b.n	8008a34 <_printf_i+0x174>
 8008a6c:	065e      	lsls	r6, r3, #25
 8008a6e:	bf48      	it	mi
 8008a70:	b2ad      	uxthmi	r5, r5
 8008a72:	e7e6      	b.n	8008a42 <_printf_i+0x182>
 8008a74:	4616      	mov	r6, r2
 8008a76:	e7bb      	b.n	80089f0 <_printf_i+0x130>
 8008a78:	680b      	ldr	r3, [r1, #0]
 8008a7a:	6826      	ldr	r6, [r4, #0]
 8008a7c:	6960      	ldr	r0, [r4, #20]
 8008a7e:	1d1d      	adds	r5, r3, #4
 8008a80:	600d      	str	r5, [r1, #0]
 8008a82:	0635      	lsls	r5, r6, #24
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	d501      	bpl.n	8008a8c <_printf_i+0x1cc>
 8008a88:	6018      	str	r0, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <_printf_i+0x1d2>
 8008a8c:	0671      	lsls	r1, r6, #25
 8008a8e:	d5fb      	bpl.n	8008a88 <_printf_i+0x1c8>
 8008a90:	8018      	strh	r0, [r3, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	4616      	mov	r6, r2
 8008a98:	e7ba      	b.n	8008a10 <_printf_i+0x150>
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	1d1a      	adds	r2, r3, #4
 8008a9e:	600a      	str	r2, [r1, #0]
 8008aa0:	681e      	ldr	r6, [r3, #0]
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7f7 fbc2 	bl	8000230 <memchr>
 8008aac:	b108      	cbz	r0, 8008ab2 <_printf_i+0x1f2>
 8008aae:	1b80      	subs	r0, r0, r6
 8008ab0:	6060      	str	r0, [r4, #4]
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008abc:	e7a8      	b.n	8008a10 <_printf_i+0x150>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	47d0      	blx	sl
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d0ab      	beq.n	8008a24 <_printf_i+0x164>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	079b      	lsls	r3, r3, #30
 8008ad0:	d413      	bmi.n	8008afa <_printf_i+0x23a>
 8008ad2:	68e0      	ldr	r0, [r4, #12]
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	4298      	cmp	r0, r3
 8008ad8:	bfb8      	it	lt
 8008ada:	4618      	movlt	r0, r3
 8008adc:	e7a4      	b.n	8008a28 <_printf_i+0x168>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	47d0      	blx	sl
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d09b      	beq.n	8008a24 <_printf_i+0x164>
 8008aec:	3501      	adds	r5, #1
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	9903      	ldr	r1, [sp, #12]
 8008af2:	1a5b      	subs	r3, r3, r1
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dcf2      	bgt.n	8008ade <_printf_i+0x21e>
 8008af8:	e7eb      	b.n	8008ad2 <_printf_i+0x212>
 8008afa:	2500      	movs	r5, #0
 8008afc:	f104 0619 	add.w	r6, r4, #25
 8008b00:	e7f5      	b.n	8008aee <_printf_i+0x22e>
 8008b02:	bf00      	nop
 8008b04:	080097ef 	.word	0x080097ef
 8008b08:	08009800 	.word	0x08009800

08008b0c <__swbuf_r>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	460e      	mov	r6, r1
 8008b10:	4614      	mov	r4, r2
 8008b12:	4605      	mov	r5, r0
 8008b14:	b118      	cbz	r0, 8008b1e <__swbuf_r+0x12>
 8008b16:	6983      	ldr	r3, [r0, #24]
 8008b18:	b90b      	cbnz	r3, 8008b1e <__swbuf_r+0x12>
 8008b1a:	f000 f9d1 	bl	8008ec0 <__sinit>
 8008b1e:	4b21      	ldr	r3, [pc, #132]	; (8008ba4 <__swbuf_r+0x98>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d12b      	bne.n	8008b7c <__swbuf_r+0x70>
 8008b24:	686c      	ldr	r4, [r5, #4]
 8008b26:	69a3      	ldr	r3, [r4, #24]
 8008b28:	60a3      	str	r3, [r4, #8]
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	071a      	lsls	r2, r3, #28
 8008b2e:	d52f      	bpl.n	8008b90 <__swbuf_r+0x84>
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	b36b      	cbz	r3, 8008b90 <__swbuf_r+0x84>
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1ac0      	subs	r0, r0, r3
 8008b3a:	6963      	ldr	r3, [r4, #20]
 8008b3c:	b2f6      	uxtb	r6, r6
 8008b3e:	4283      	cmp	r3, r0
 8008b40:	4637      	mov	r7, r6
 8008b42:	dc04      	bgt.n	8008b4e <__swbuf_r+0x42>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 f926 	bl	8008d98 <_fflush_r>
 8008b4c:	bb30      	cbnz	r0, 8008b9c <__swbuf_r+0x90>
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	60a3      	str	r3, [r4, #8]
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	701e      	strb	r6, [r3, #0]
 8008b5c:	6963      	ldr	r3, [r4, #20]
 8008b5e:	3001      	adds	r0, #1
 8008b60:	4283      	cmp	r3, r0
 8008b62:	d004      	beq.n	8008b6e <__swbuf_r+0x62>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	07db      	lsls	r3, r3, #31
 8008b68:	d506      	bpl.n	8008b78 <__swbuf_r+0x6c>
 8008b6a:	2e0a      	cmp	r6, #10
 8008b6c:	d104      	bne.n	8008b78 <__swbuf_r+0x6c>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4628      	mov	r0, r5
 8008b72:	f000 f911 	bl	8008d98 <_fflush_r>
 8008b76:	b988      	cbnz	r0, 8008b9c <__swbuf_r+0x90>
 8008b78:	4638      	mov	r0, r7
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <__swbuf_r+0x9c>)
 8008b7e:	429c      	cmp	r4, r3
 8008b80:	d101      	bne.n	8008b86 <__swbuf_r+0x7a>
 8008b82:	68ac      	ldr	r4, [r5, #8]
 8008b84:	e7cf      	b.n	8008b26 <__swbuf_r+0x1a>
 8008b86:	4b09      	ldr	r3, [pc, #36]	; (8008bac <__swbuf_r+0xa0>)
 8008b88:	429c      	cmp	r4, r3
 8008b8a:	bf08      	it	eq
 8008b8c:	68ec      	ldreq	r4, [r5, #12]
 8008b8e:	e7ca      	b.n	8008b26 <__swbuf_r+0x1a>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4628      	mov	r0, r5
 8008b94:	f000 f80c 	bl	8008bb0 <__swsetup_r>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d0cb      	beq.n	8008b34 <__swbuf_r+0x28>
 8008b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008ba0:	e7ea      	b.n	8008b78 <__swbuf_r+0x6c>
 8008ba2:	bf00      	nop
 8008ba4:	08009834 	.word	0x08009834
 8008ba8:	08009854 	.word	0x08009854
 8008bac:	08009814 	.word	0x08009814

08008bb0 <__swsetup_r>:
 8008bb0:	4b32      	ldr	r3, [pc, #200]	; (8008c7c <__swsetup_r+0xcc>)
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	681d      	ldr	r5, [r3, #0]
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	b125      	cbz	r5, 8008bc6 <__swsetup_r+0x16>
 8008bbc:	69ab      	ldr	r3, [r5, #24]
 8008bbe:	b913      	cbnz	r3, 8008bc6 <__swsetup_r+0x16>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 f97d 	bl	8008ec0 <__sinit>
 8008bc6:	4b2e      	ldr	r3, [pc, #184]	; (8008c80 <__swsetup_r+0xd0>)
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	d10f      	bne.n	8008bec <__swsetup_r+0x3c>
 8008bcc:	686c      	ldr	r4, [r5, #4]
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bd4:	0719      	lsls	r1, r3, #28
 8008bd6:	d42c      	bmi.n	8008c32 <__swsetup_r+0x82>
 8008bd8:	06dd      	lsls	r5, r3, #27
 8008bda:	d411      	bmi.n	8008c00 <__swsetup_r+0x50>
 8008bdc:	2309      	movs	r3, #9
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	e03e      	b.n	8008c6a <__swsetup_r+0xba>
 8008bec:	4b25      	ldr	r3, [pc, #148]	; (8008c84 <__swsetup_r+0xd4>)
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	d101      	bne.n	8008bf6 <__swsetup_r+0x46>
 8008bf2:	68ac      	ldr	r4, [r5, #8]
 8008bf4:	e7eb      	b.n	8008bce <__swsetup_r+0x1e>
 8008bf6:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <__swsetup_r+0xd8>)
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	bf08      	it	eq
 8008bfc:	68ec      	ldreq	r4, [r5, #12]
 8008bfe:	e7e6      	b.n	8008bce <__swsetup_r+0x1e>
 8008c00:	0758      	lsls	r0, r3, #29
 8008c02:	d512      	bpl.n	8008c2a <__swsetup_r+0x7a>
 8008c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c06:	b141      	cbz	r1, 8008c1a <__swsetup_r+0x6a>
 8008c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	d002      	beq.n	8008c16 <__swsetup_r+0x66>
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff f931 	bl	8007e78 <_free_r>
 8008c16:	2300      	movs	r3, #0
 8008c18:	6363      	str	r3, [r4, #52]	; 0x34
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	2300      	movs	r3, #0
 8008c24:	6063      	str	r3, [r4, #4]
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f043 0308 	orr.w	r3, r3, #8
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	b94b      	cbnz	r3, 8008c4a <__swsetup_r+0x9a>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c40:	d003      	beq.n	8008c4a <__swsetup_r+0x9a>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f9fd 	bl	8009044 <__smakebuf_r>
 8008c4a:	89a0      	ldrh	r0, [r4, #12]
 8008c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c50:	f010 0301 	ands.w	r3, r0, #1
 8008c54:	d00a      	beq.n	8008c6c <__swsetup_r+0xbc>
 8008c56:	2300      	movs	r3, #0
 8008c58:	60a3      	str	r3, [r4, #8]
 8008c5a:	6963      	ldr	r3, [r4, #20]
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	61a3      	str	r3, [r4, #24]
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	b943      	cbnz	r3, 8008c76 <__swsetup_r+0xc6>
 8008c64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c68:	d1ba      	bne.n	8008be0 <__swsetup_r+0x30>
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	0781      	lsls	r1, r0, #30
 8008c6e:	bf58      	it	pl
 8008c70:	6963      	ldrpl	r3, [r4, #20]
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	e7f4      	b.n	8008c60 <__swsetup_r+0xb0>
 8008c76:	2000      	movs	r0, #0
 8008c78:	e7f7      	b.n	8008c6a <__swsetup_r+0xba>
 8008c7a:	bf00      	nop
 8008c7c:	20000010 	.word	0x20000010
 8008c80:	08009834 	.word	0x08009834
 8008c84:	08009854 	.word	0x08009854
 8008c88:	08009814 	.word	0x08009814

08008c8c <__sflush_r>:
 8008c8c:	898a      	ldrh	r2, [r1, #12]
 8008c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	4605      	mov	r5, r0
 8008c94:	0710      	lsls	r0, r2, #28
 8008c96:	460c      	mov	r4, r1
 8008c98:	d458      	bmi.n	8008d4c <__sflush_r+0xc0>
 8008c9a:	684b      	ldr	r3, [r1, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc05      	bgt.n	8008cac <__sflush_r+0x20>
 8008ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dc02      	bgt.n	8008cac <__sflush_r+0x20>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	d0f9      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cb8:	682f      	ldr	r7, [r5, #0]
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	d032      	beq.n	8008d24 <__sflush_r+0x98>
 8008cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	075a      	lsls	r2, r3, #29
 8008cc4:	d505      	bpl.n	8008cd2 <__sflush_r+0x46>
 8008cc6:	6863      	ldr	r3, [r4, #4]
 8008cc8:	1ac0      	subs	r0, r0, r3
 8008cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ccc:	b10b      	cbz	r3, 8008cd2 <__sflush_r+0x46>
 8008cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cd0:	1ac0      	subs	r0, r0, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cd8:	6a21      	ldr	r1, [r4, #32]
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b0      	blx	r6
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	d106      	bne.n	8008cf2 <__sflush_r+0x66>
 8008ce4:	6829      	ldr	r1, [r5, #0]
 8008ce6:	291d      	cmp	r1, #29
 8008ce8:	d82c      	bhi.n	8008d44 <__sflush_r+0xb8>
 8008cea:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <__sflush_r+0x108>)
 8008cec:	40ca      	lsrs	r2, r1
 8008cee:	07d6      	lsls	r6, r2, #31
 8008cf0:	d528      	bpl.n	8008d44 <__sflush_r+0xb8>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	6062      	str	r2, [r4, #4]
 8008cf6:	04d9      	lsls	r1, r3, #19
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	d504      	bpl.n	8008d08 <__sflush_r+0x7c>
 8008cfe:	1c42      	adds	r2, r0, #1
 8008d00:	d101      	bne.n	8008d06 <__sflush_r+0x7a>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b903      	cbnz	r3, 8008d08 <__sflush_r+0x7c>
 8008d06:	6560      	str	r0, [r4, #84]	; 0x54
 8008d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0a:	602f      	str	r7, [r5, #0]
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d0ca      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d14:	4299      	cmp	r1, r3
 8008d16:	d002      	beq.n	8008d1e <__sflush_r+0x92>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7ff f8ad 	bl	8007e78 <_free_r>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	6360      	str	r0, [r4, #52]	; 0x34
 8008d22:	e7c1      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d24:	6a21      	ldr	r1, [r4, #32]
 8008d26:	2301      	movs	r3, #1
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	1c41      	adds	r1, r0, #1
 8008d2e:	d1c7      	bne.n	8008cc0 <__sflush_r+0x34>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0c4      	beq.n	8008cc0 <__sflush_r+0x34>
 8008d36:	2b1d      	cmp	r3, #29
 8008d38:	d001      	beq.n	8008d3e <__sflush_r+0xb2>
 8008d3a:	2b16      	cmp	r3, #22
 8008d3c:	d101      	bne.n	8008d42 <__sflush_r+0xb6>
 8008d3e:	602f      	str	r7, [r5, #0]
 8008d40:	e7b1      	b.n	8008ca6 <__sflush_r+0x1a>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	e7ad      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d4c:	690f      	ldr	r7, [r1, #16]
 8008d4e:	2f00      	cmp	r7, #0
 8008d50:	d0a9      	beq.n	8008ca6 <__sflush_r+0x1a>
 8008d52:	0793      	lsls	r3, r2, #30
 8008d54:	680e      	ldr	r6, [r1, #0]
 8008d56:	bf08      	it	eq
 8008d58:	694b      	ldreq	r3, [r1, #20]
 8008d5a:	600f      	str	r7, [r1, #0]
 8008d5c:	bf18      	it	ne
 8008d5e:	2300      	movne	r3, #0
 8008d60:	eba6 0807 	sub.w	r8, r6, r7
 8008d64:	608b      	str	r3, [r1, #8]
 8008d66:	f1b8 0f00 	cmp.w	r8, #0
 8008d6a:	dd9c      	ble.n	8008ca6 <__sflush_r+0x1a>
 8008d6c:	6a21      	ldr	r1, [r4, #32]
 8008d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d70:	4643      	mov	r3, r8
 8008d72:	463a      	mov	r2, r7
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b0      	blx	r6
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	dc06      	bgt.n	8008d8a <__sflush_r+0xfe>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	e78e      	b.n	8008ca8 <__sflush_r+0x1c>
 8008d8a:	4407      	add	r7, r0
 8008d8c:	eba8 0800 	sub.w	r8, r8, r0
 8008d90:	e7e9      	b.n	8008d66 <__sflush_r+0xda>
 8008d92:	bf00      	nop
 8008d94:	20400001 	.word	0x20400001

08008d98 <_fflush_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	690b      	ldr	r3, [r1, #16]
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b913      	cbnz	r3, 8008da8 <_fflush_r+0x10>
 8008da2:	2500      	movs	r5, #0
 8008da4:	4628      	mov	r0, r5
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	b118      	cbz	r0, 8008db2 <_fflush_r+0x1a>
 8008daa:	6983      	ldr	r3, [r0, #24]
 8008dac:	b90b      	cbnz	r3, 8008db2 <_fflush_r+0x1a>
 8008dae:	f000 f887 	bl	8008ec0 <__sinit>
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <_fflush_r+0x6c>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	d11b      	bne.n	8008df0 <_fflush_r+0x58>
 8008db8:	686c      	ldr	r4, [r5, #4]
 8008dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ef      	beq.n	8008da2 <_fflush_r+0xa>
 8008dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dc4:	07d0      	lsls	r0, r2, #31
 8008dc6:	d404      	bmi.n	8008dd2 <_fflush_r+0x3a>
 8008dc8:	0599      	lsls	r1, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_fflush_r+0x3a>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f7ff fa44 	bl	800825a <__retarget_lock_acquire_recursive>
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7ff ff59 	bl	8008c8c <__sflush_r>
 8008dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ddc:	07da      	lsls	r2, r3, #31
 8008dde:	4605      	mov	r5, r0
 8008de0:	d4e0      	bmi.n	8008da4 <_fflush_r+0xc>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	059b      	lsls	r3, r3, #22
 8008de6:	d4dd      	bmi.n	8008da4 <_fflush_r+0xc>
 8008de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dea:	f7ff fa38 	bl	800825e <__retarget_lock_release_recursive>
 8008dee:	e7d9      	b.n	8008da4 <_fflush_r+0xc>
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <_fflush_r+0x70>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d101      	bne.n	8008dfa <_fflush_r+0x62>
 8008df6:	68ac      	ldr	r4, [r5, #8]
 8008df8:	e7df      	b.n	8008dba <_fflush_r+0x22>
 8008dfa:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <_fflush_r+0x74>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	bf08      	it	eq
 8008e00:	68ec      	ldreq	r4, [r5, #12]
 8008e02:	e7da      	b.n	8008dba <_fflush_r+0x22>
 8008e04:	08009834 	.word	0x08009834
 8008e08:	08009854 	.word	0x08009854
 8008e0c:	08009814 	.word	0x08009814

08008e10 <std>:
 8008e10:	2300      	movs	r3, #0
 8008e12:	b510      	push	{r4, lr}
 8008e14:	4604      	mov	r4, r0
 8008e16:	e9c0 3300 	strd	r3, r3, [r0]
 8008e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1e:	6083      	str	r3, [r0, #8]
 8008e20:	8181      	strh	r1, [r0, #12]
 8008e22:	6643      	str	r3, [r0, #100]	; 0x64
 8008e24:	81c2      	strh	r2, [r0, #14]
 8008e26:	6183      	str	r3, [r0, #24]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	305c      	adds	r0, #92	; 0x5c
 8008e2e:	f7ff f81b 	bl	8007e68 <memset>
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <std+0x38>)
 8008e34:	6263      	str	r3, [r4, #36]	; 0x24
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <std+0x3c>)
 8008e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <std+0x40>)
 8008e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <std+0x44>)
 8008e40:	6224      	str	r4, [r4, #32]
 8008e42:	6323      	str	r3, [r4, #48]	; 0x30
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	bf00      	nop
 8008e48:	08009145 	.word	0x08009145
 8008e4c:	08009167 	.word	0x08009167
 8008e50:	0800919f 	.word	0x0800919f
 8008e54:	080091c3 	.word	0x080091c3

08008e58 <_cleanup_r>:
 8008e58:	4901      	ldr	r1, [pc, #4]	; (8008e60 <_cleanup_r+0x8>)
 8008e5a:	f000 b8af 	b.w	8008fbc <_fwalk_reent>
 8008e5e:	bf00      	nop
 8008e60:	08008d99 	.word	0x08008d99

08008e64 <__sfmoreglue>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	1e4a      	subs	r2, r1, #1
 8008e68:	2568      	movs	r5, #104	; 0x68
 8008e6a:	4355      	muls	r5, r2
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e72:	f7ff f851 	bl	8007f18 <_malloc_r>
 8008e76:	4604      	mov	r4, r0
 8008e78:	b140      	cbz	r0, 8008e8c <__sfmoreglue+0x28>
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e80:	300c      	adds	r0, #12
 8008e82:	60a0      	str	r0, [r4, #8]
 8008e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e88:	f7fe ffee 	bl	8007e68 <memset>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}

08008e90 <__sfp_lock_acquire>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__sfp_lock_acquire+0x8>)
 8008e92:	f7ff b9e2 	b.w	800825a <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	20003ad8 	.word	0x20003ad8

08008e9c <__sfp_lock_release>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__sfp_lock_release+0x8>)
 8008e9e:	f7ff b9de 	b.w	800825e <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	20003ad8 	.word	0x20003ad8

08008ea8 <__sinit_lock_acquire>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__sinit_lock_acquire+0x8>)
 8008eaa:	f7ff b9d6 	b.w	800825a <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20003ad3 	.word	0x20003ad3

08008eb4 <__sinit_lock_release>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__sinit_lock_release+0x8>)
 8008eb6:	f7ff b9d2 	b.w	800825e <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20003ad3 	.word	0x20003ad3

08008ec0 <__sinit>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	f7ff fff0 	bl	8008ea8 <__sinit_lock_acquire>
 8008ec8:	69a3      	ldr	r3, [r4, #24]
 8008eca:	b11b      	cbz	r3, 8008ed4 <__sinit+0x14>
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed0:	f7ff bff0 	b.w	8008eb4 <__sinit_lock_release>
 8008ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <__sinit+0x68>)
 8008edc:	4a13      	ldr	r2, [pc, #76]	; (8008f2c <__sinit+0x6c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	bf04      	itt	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	61a3      	streq	r3, [r4, #24]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f820 	bl	8008f30 <__sfp>
 8008ef0:	6060      	str	r0, [r4, #4]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f81c 	bl	8008f30 <__sfp>
 8008ef8:	60a0      	str	r0, [r4, #8]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f818 	bl	8008f30 <__sfp>
 8008f00:	2200      	movs	r2, #0
 8008f02:	60e0      	str	r0, [r4, #12]
 8008f04:	2104      	movs	r1, #4
 8008f06:	6860      	ldr	r0, [r4, #4]
 8008f08:	f7ff ff82 	bl	8008e10 <std>
 8008f0c:	68a0      	ldr	r0, [r4, #8]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	2109      	movs	r1, #9
 8008f12:	f7ff ff7d 	bl	8008e10 <std>
 8008f16:	68e0      	ldr	r0, [r4, #12]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	2112      	movs	r1, #18
 8008f1c:	f7ff ff78 	bl	8008e10 <std>
 8008f20:	2301      	movs	r3, #1
 8008f22:	61a3      	str	r3, [r4, #24]
 8008f24:	e7d2      	b.n	8008ecc <__sinit+0xc>
 8008f26:	bf00      	nop
 8008f28:	08009728 	.word	0x08009728
 8008f2c:	08008e59 	.word	0x08008e59

08008f30 <__sfp>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	4607      	mov	r7, r0
 8008f34:	f7ff ffac 	bl	8008e90 <__sfp_lock_acquire>
 8008f38:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <__sfp+0x84>)
 8008f3a:	681e      	ldr	r6, [r3, #0]
 8008f3c:	69b3      	ldr	r3, [r6, #24]
 8008f3e:	b913      	cbnz	r3, 8008f46 <__sfp+0x16>
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7ff ffbd 	bl	8008ec0 <__sinit>
 8008f46:	3648      	adds	r6, #72	; 0x48
 8008f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	d503      	bpl.n	8008f58 <__sfp+0x28>
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	b30b      	cbz	r3, 8008f98 <__sfp+0x68>
 8008f54:	6836      	ldr	r6, [r6, #0]
 8008f56:	e7f7      	b.n	8008f48 <__sfp+0x18>
 8008f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f5c:	b9d5      	cbnz	r5, 8008f94 <__sfp+0x64>
 8008f5e:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <__sfp+0x88>)
 8008f60:	60e3      	str	r3, [r4, #12]
 8008f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f66:	6665      	str	r5, [r4, #100]	; 0x64
 8008f68:	f7ff f976 	bl	8008258 <__retarget_lock_init_recursive>
 8008f6c:	f7ff ff96 	bl	8008e9c <__sfp_lock_release>
 8008f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f78:	6025      	str	r5, [r4, #0]
 8008f7a:	61a5      	str	r5, [r4, #24]
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f84:	f7fe ff70 	bl	8007e68 <memset>
 8008f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f90:	4620      	mov	r0, r4
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	3468      	adds	r4, #104	; 0x68
 8008f96:	e7d9      	b.n	8008f4c <__sfp+0x1c>
 8008f98:	2104      	movs	r1, #4
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f7ff ff62 	bl	8008e64 <__sfmoreglue>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	6030      	str	r0, [r6, #0]
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d1d5      	bne.n	8008f54 <__sfp+0x24>
 8008fa8:	f7ff ff78 	bl	8008e9c <__sfp_lock_release>
 8008fac:	230c      	movs	r3, #12
 8008fae:	603b      	str	r3, [r7, #0]
 8008fb0:	e7ee      	b.n	8008f90 <__sfp+0x60>
 8008fb2:	bf00      	nop
 8008fb4:	08009728 	.word	0x08009728
 8008fb8:	ffff0001 	.word	0xffff0001

08008fbc <_fwalk_reent>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	4688      	mov	r8, r1
 8008fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fc8:	2700      	movs	r7, #0
 8008fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fce:	f1b9 0901 	subs.w	r9, r9, #1
 8008fd2:	d505      	bpl.n	8008fe0 <_fwalk_reent+0x24>
 8008fd4:	6824      	ldr	r4, [r4, #0]
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d1f7      	bne.n	8008fca <_fwalk_reent+0xe>
 8008fda:	4638      	mov	r0, r7
 8008fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe0:	89ab      	ldrh	r3, [r5, #12]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d907      	bls.n	8008ff6 <_fwalk_reent+0x3a>
 8008fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fea:	3301      	adds	r3, #1
 8008fec:	d003      	beq.n	8008ff6 <_fwalk_reent+0x3a>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	47c0      	blx	r8
 8008ff4:	4307      	orrs	r7, r0
 8008ff6:	3568      	adds	r5, #104	; 0x68
 8008ff8:	e7e9      	b.n	8008fce <_fwalk_reent+0x12>

08008ffa <__swhatbuf_r>:
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	460e      	mov	r6, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	2900      	cmp	r1, #0
 8009004:	b096      	sub	sp, #88	; 0x58
 8009006:	4614      	mov	r4, r2
 8009008:	461d      	mov	r5, r3
 800900a:	da07      	bge.n	800901c <__swhatbuf_r+0x22>
 800900c:	2300      	movs	r3, #0
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	89b3      	ldrh	r3, [r6, #12]
 8009012:	061a      	lsls	r2, r3, #24
 8009014:	d410      	bmi.n	8009038 <__swhatbuf_r+0x3e>
 8009016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901a:	e00e      	b.n	800903a <__swhatbuf_r+0x40>
 800901c:	466a      	mov	r2, sp
 800901e:	f000 f8f7 	bl	8009210 <_fstat_r>
 8009022:	2800      	cmp	r0, #0
 8009024:	dbf2      	blt.n	800900c <__swhatbuf_r+0x12>
 8009026:	9a01      	ldr	r2, [sp, #4]
 8009028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800902c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009030:	425a      	negs	r2, r3
 8009032:	415a      	adcs	r2, r3
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	e7ee      	b.n	8009016 <__swhatbuf_r+0x1c>
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	2000      	movs	r0, #0
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	b016      	add	sp, #88	; 0x58
 8009040:	bd70      	pop	{r4, r5, r6, pc}
	...

08009044 <__smakebuf_r>:
 8009044:	898b      	ldrh	r3, [r1, #12]
 8009046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009048:	079d      	lsls	r5, r3, #30
 800904a:	4606      	mov	r6, r0
 800904c:	460c      	mov	r4, r1
 800904e:	d507      	bpl.n	8009060 <__smakebuf_r+0x1c>
 8009050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	2301      	movs	r3, #1
 800905a:	6163      	str	r3, [r4, #20]
 800905c:	b002      	add	sp, #8
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	ab01      	add	r3, sp, #4
 8009062:	466a      	mov	r2, sp
 8009064:	f7ff ffc9 	bl	8008ffa <__swhatbuf_r>
 8009068:	9900      	ldr	r1, [sp, #0]
 800906a:	4605      	mov	r5, r0
 800906c:	4630      	mov	r0, r6
 800906e:	f7fe ff53 	bl	8007f18 <_malloc_r>
 8009072:	b948      	cbnz	r0, 8009088 <__smakebuf_r+0x44>
 8009074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d4ef      	bmi.n	800905c <__smakebuf_r+0x18>
 800907c:	f023 0303 	bic.w	r3, r3, #3
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	e7e3      	b.n	8009050 <__smakebuf_r+0xc>
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <__smakebuf_r+0x7c>)
 800908a:	62b3      	str	r3, [r6, #40]	; 0x28
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	9b00      	ldr	r3, [sp, #0]
 8009098:	6163      	str	r3, [r4, #20]
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	6120      	str	r0, [r4, #16]
 800909e:	b15b      	cbz	r3, 80090b8 <__smakebuf_r+0x74>
 80090a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f8c5 	bl	8009234 <_isatty_r>
 80090aa:	b128      	cbz	r0, 80090b8 <__smakebuf_r+0x74>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	89a0      	ldrh	r0, [r4, #12]
 80090ba:	4305      	orrs	r5, r0
 80090bc:	81a5      	strh	r5, [r4, #12]
 80090be:	e7cd      	b.n	800905c <__smakebuf_r+0x18>
 80090c0:	08008e59 	.word	0x08008e59

080090c4 <memmove>:
 80090c4:	4288      	cmp	r0, r1
 80090c6:	b510      	push	{r4, lr}
 80090c8:	eb01 0402 	add.w	r4, r1, r2
 80090cc:	d902      	bls.n	80090d4 <memmove+0x10>
 80090ce:	4284      	cmp	r4, r0
 80090d0:	4623      	mov	r3, r4
 80090d2:	d807      	bhi.n	80090e4 <memmove+0x20>
 80090d4:	1e43      	subs	r3, r0, #1
 80090d6:	42a1      	cmp	r1, r4
 80090d8:	d008      	beq.n	80090ec <memmove+0x28>
 80090da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e2:	e7f8      	b.n	80090d6 <memmove+0x12>
 80090e4:	4402      	add	r2, r0
 80090e6:	4601      	mov	r1, r0
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d100      	bne.n	80090ee <memmove+0x2a>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f6:	e7f7      	b.n	80090e8 <memmove+0x24>

080090f8 <_realloc_r>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	4607      	mov	r7, r0
 80090fc:	4614      	mov	r4, r2
 80090fe:	460e      	mov	r6, r1
 8009100:	b921      	cbnz	r1, 800910c <_realloc_r+0x14>
 8009102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009106:	4611      	mov	r1, r2
 8009108:	f7fe bf06 	b.w	8007f18 <_malloc_r>
 800910c:	b922      	cbnz	r2, 8009118 <_realloc_r+0x20>
 800910e:	f7fe feb3 	bl	8007e78 <_free_r>
 8009112:	4625      	mov	r5, r4
 8009114:	4628      	mov	r0, r5
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009118:	f000 f8ae 	bl	8009278 <_malloc_usable_size_r>
 800911c:	42a0      	cmp	r0, r4
 800911e:	d20f      	bcs.n	8009140 <_realloc_r+0x48>
 8009120:	4621      	mov	r1, r4
 8009122:	4638      	mov	r0, r7
 8009124:	f7fe fef8 	bl	8007f18 <_malloc_r>
 8009128:	4605      	mov	r5, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d0f2      	beq.n	8009114 <_realloc_r+0x1c>
 800912e:	4631      	mov	r1, r6
 8009130:	4622      	mov	r2, r4
 8009132:	f7fe fe8b 	bl	8007e4c <memcpy>
 8009136:	4631      	mov	r1, r6
 8009138:	4638      	mov	r0, r7
 800913a:	f7fe fe9d 	bl	8007e78 <_free_r>
 800913e:	e7e9      	b.n	8009114 <_realloc_r+0x1c>
 8009140:	4635      	mov	r5, r6
 8009142:	e7e7      	b.n	8009114 <_realloc_r+0x1c>

08009144 <__sread>:
 8009144:	b510      	push	{r4, lr}
 8009146:	460c      	mov	r4, r1
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	f000 f89c 	bl	8009288 <_read_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	bfab      	itete	ge
 8009154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009156:	89a3      	ldrhlt	r3, [r4, #12]
 8009158:	181b      	addge	r3, r3, r0
 800915a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800915e:	bfac      	ite	ge
 8009160:	6563      	strge	r3, [r4, #84]	; 0x54
 8009162:	81a3      	strhlt	r3, [r4, #12]
 8009164:	bd10      	pop	{r4, pc}

08009166 <__swrite>:
 8009166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	461f      	mov	r7, r3
 800916c:	898b      	ldrh	r3, [r1, #12]
 800916e:	05db      	lsls	r3, r3, #23
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4616      	mov	r6, r2
 8009176:	d505      	bpl.n	8009184 <__swrite+0x1e>
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2302      	movs	r3, #2
 800917e:	2200      	movs	r2, #0
 8009180:	f000 f868 	bl	8009254 <_lseek_r>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	f000 b817 	b.w	80091cc <_write_r>

0800919e <__sseek>:
 800919e:	b510      	push	{r4, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f000 f855 	bl	8009254 <_lseek_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	bf15      	itete	ne
 80091b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ba:	81a3      	strheq	r3, [r4, #12]
 80091bc:	bf18      	it	ne
 80091be:	81a3      	strhne	r3, [r4, #12]
 80091c0:	bd10      	pop	{r4, pc}

080091c2 <__sclose>:
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 b813 	b.w	80091f0 <_close_r>
	...

080091cc <_write_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	; (80091ec <_write_r+0x20>)
 80091d0:	4604      	mov	r4, r0
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	602a      	str	r2, [r5, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7fb fb03 	bl	80047e6 <_write>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_write_r+0x1e>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_write_r+0x1e>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20003adc 	.word	0x20003adc

080091f0 <_close_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	; (800920c <_close_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7fb fb0f 	bl	800481e <_close>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_close_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_close_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20003adc 	.word	0x20003adc

08009210 <_fstat_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	; (8009230 <_fstat_r+0x20>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	4611      	mov	r1, r2
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	f7fb fb0a 	bl	8004836 <_fstat>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d102      	bne.n	800922c <_fstat_r+0x1c>
 8009226:	682b      	ldr	r3, [r5, #0]
 8009228:	b103      	cbz	r3, 800922c <_fstat_r+0x1c>
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	bd38      	pop	{r3, r4, r5, pc}
 800922e:	bf00      	nop
 8009230:	20003adc 	.word	0x20003adc

08009234 <_isatty_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_isatty_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7fb fb09 	bl	8004856 <_isatty>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_isatty_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_isatty_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20003adc 	.word	0x20003adc

08009254 <_lseek_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	; (8009274 <_lseek_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7fb fb02 	bl	800486c <_lseek>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_lseek_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_lseek_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20003adc 	.word	0x20003adc

08009278 <_malloc_usable_size_r>:
 8009278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927c:	1f18      	subs	r0, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfbc      	itt	lt
 8009282:	580b      	ldrlt	r3, [r1, r0]
 8009284:	18c0      	addlt	r0, r0, r3
 8009286:	4770      	bx	lr

08009288 <_read_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	; (80092a8 <_read_r+0x20>)
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7fb fa88 	bl	80047ac <_read>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_read_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_read_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20003adc 	.word	0x20003adc

080092ac <_init>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr

080092b8 <_fini>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr
