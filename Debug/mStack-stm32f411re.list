
mStack-stm32f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008860  08008860  00018860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d34  08008d34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d3c  08008d3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb8  20000078  08008db8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c30  08008db8  00022c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025185  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066a2  00000000  00000000  00045229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0004b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  0004cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1b7  00000000  00000000  0004e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b3f  00000000  00000000  0006c6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097979  00000000  00000000  00081206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db0  00000000  00000000  00118bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008844 	.word	0x08008844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008844 	.word	0x08008844

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <_ZN4core5QueueC1EPht>:
{

class Queue
{
public:
    Queue(uint8_t* buf, uint16_t size)
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
    {
        first_ = buf;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
        size_ = size;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	801a      	strh	r2, [r3, #0]
        last_ = first_ + size;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	441a      	add	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	609a      	str	r2, [r3, #8]
        inPtr_ = first_;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	60da      	str	r2, [r3, #12]
        outPtr_ = first_;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
    }
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN4core5Queue9availableEv>:
    uint16_t available()
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    {
    	uint16_t ret = size_+outPtr_-inPtr_;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	81fb      	strh	r3, [r7, #14]
    	if (ret > size_) ret -= (size_ - 1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	89fa      	ldrh	r2, [r7, #14]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d906      	bls.n	8000eea <_ZN4core5Queue9availableEv+0x32>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	81fb      	strh	r3, [r7, #14]
    	return ret;
 8000eea:	89fb      	ldrh	r3, [r7, #14]
    }
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN4core9Component4initEv>:
{

class Component
{
public:
    virtual void init(){/*empty*/}
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZN4core9ComponentD1Ev>:
    virtual ~Component(){}
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <_ZN4core9ComponentD1Ev+0x1c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	08008934 	.word	0x08008934

08000f2c <_ZN4core9ComponentD0Ev>:
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffe9 	bl	8000f0c <_ZN4core9ComponentD1Ev>
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f005 f955 	bl	80061ec <_ZdlPvj>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN4core5EventD1Ev>:

class Event
{
public:
    Event();
    virtual ~Event(){};
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <_ZN4core5EventD1Ev+0x1c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	08008920 	.word	0x08008920

08000f6c <_ZN4core5EventD0Ev>:
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffe9 	bl	8000f4c <_ZN4core5EventD1Ev>
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f005 f935 	bl	80061ec <_ZdlPvj>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN4core5Event7executeEv>:

protected:
    virtual void execute(){};
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZN7console10ControllerD1Ev>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_ZN7console10ControllerD1Ev+0x20>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffab 	bl	8000f0c <_ZN4core9ComponentD1Ev>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	0800890c 	.word	0x0800890c

08000fc4 <_ZN7console10ControllerD0Ev>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffe7 	bl	8000fa0 <_ZN7console10ControllerD1Ev>
 8000fd2:	2158      	movs	r1, #88	; 0x58
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f005 f909 	bl	80061ec <_ZdlPvj>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN4core9ComponentC1Ev>:
class Component
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <_ZN4core9ComponentC1Ev+0x1c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	08008934 	.word	0x08008934

08001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>:

class EmptyEvent: public Event
{
public:
    typedef void (Component::*Handler) ();
    EmptyEvent(Component* component, Handler handler):component_(component), handler_(handler){}
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	4639      	mov	r1, r7
 8001010:	e881 000c 	stmia.w	r1, {r2, r3}
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fbdc 	bl	80027d4 <_ZN4core5EventC1Ev>
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE+0x3c>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3310      	adds	r3, #16
 800102c:	463a      	mov	r2, r7
 800102e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001032:	e883 0003 	stmia.w	r3, {r0, r1}
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080088f8 	.word	0x080088f8

08001044 <_ZN4core10EmptyEvent7executeEv>:
    EventStatus post()
    {
    	return core::Engine::instance().events().post(container_);
    }
private:
    void execute() override
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    {
        (component_->*handler_)();
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6952      	ldr	r2, [r2, #20]
 8001054:	1052      	asrs	r2, r2, #1
 8001056:	1899      	adds	r1, r3, r2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_ZN4core10EmptyEvent7executeEv+0x26>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	e00a      	b.n	8001080 <_ZN4core10EmptyEvent7executeEv+0x3c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6952      	ldr	r2, [r2, #20]
 8001072:	1052      	asrs	r2, r2, #1
 8001074:	4413      	add	r3, r2
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6912      	ldr	r2, [r2, #16]
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4608      	mov	r0, r1
 8001082:	4798      	blx	r3
    }
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN4core7Machine9NullStateEv>:
class Machine: public core::Component
{
public:
    typedef void (Machine::*State)();
protected:
    void NullState(){}
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN4core7Machine6check_EhMS0_FvvE>:
    State nextState_ = nullptr;
    State currentState_ = &Machine::NullState;
    virtual bool check_(uint8_t event, State next){return false;}
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	4608      	mov	r0, r1
 80010aa:	4639      	mov	r1, r7
 80010ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80010b0:	4603      	mov	r3, r0
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	2300      	movs	r3, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_ZN4core7Machine6start_EMS0_FvvE>:
    virtual void start_(State state){currentState_ = state;}
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	e883 0006 	stmia.w	r3, {r1, r2}
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	330c      	adds	r3, #12
 80010d4:	1d3a      	adds	r2, r7, #4
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <__tcf_3>:
#define TX_BUF_SIZE   		2048
#define HEADER_INDICATOR	0xFE
#define FOOTER_INDICATOR	0xFD
#define MAX_PACKET_LENGTH	250

MACHINE(console, Driver, uint8_t)
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <__tcf_3+0xc>)
 80010f2:	f000 f87b 	bl	80011ec <_ZN7console6DriverD1Ev>
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000094 	.word	0x20000094

080010fc <_ZN7console6Driver8instanceEv>:
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <_ZN7console6Driver8instanceEv+0x50>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f3bf 8f5b 	dmb	ish
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <_ZN7console6Driver8instanceEv+0x48>
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <_ZN7console6Driver8instanceEv+0x50>)
 800111e:	f005 f867 	bl	80061f0 <__cxa_guard_acquire>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <_ZN7console6Driver8instanceEv+0x48>
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <_ZN7console6Driver8instanceEv+0x54>)
 8001134:	f000 f8c8 	bl	80012c8 <_ZN7console6DriverC1Ev>
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <_ZN7console6Driver8instanceEv+0x50>)
 800113a:	f005 f865 	bl	8006208 <__cxa_guard_release>
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <_ZN7console6Driver8instanceEv+0x58>)
 8001140:	f006 f90f 	bl	8007362 <atexit>
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <_ZN7console6Driver8instanceEv+0x54>)
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200009f4 	.word	0x200009f4
 8001150:	20000094 	.word	0x20000094
 8001154:	080010ed 	.word	0x080010ed

08001158 <_ZN4core7MachineD1Ev>:
class Machine: public core::Component
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_ZN4core7MachineD1Ev+0x20>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fecf 	bl	8000f0c <_ZN4core9ComponentD1Ev>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	080088dc 	.word	0x080088dc

0800117c <_ZN4core7MachineD0Ev>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffe7 	bl	8001158 <_ZN4core7MachineD1Ev>
 800118a:	2114      	movs	r1, #20
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 f82d 	bl	80061ec <_ZdlPvj>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN4core11ByteMachineIhED1Ev>:
        (this->*currentState_)();
    }
};

template <typename T>
class ByteMachine: public core::Machine
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <_ZN4core11ByteMachineIhED1Ev+0x2c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3318      	adds	r3, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fafc 	bl	80017ac <_ZN4core10FixedEventIhED1Ev>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ffce 	bl	8001158 <_ZN4core7MachineD1Ev>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	080088ac 	.word	0x080088ac

080011cc <_ZN4core11ByteMachineIhED0Ev>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffe1 	bl	800119c <_ZN4core11ByteMachineIhED1Ev>
 80011da:	2134      	movs	r1, #52	; 0x34
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f005 f805 	bl	80061ec <_ZdlPvj>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN7console6DriverD1Ev>:
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <_ZN7console6DriverD1Ev+0x2c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3334      	adds	r3, #52	; 0x34
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 faf6 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffc8 	bl	800119c <_ZN4core11ByteMachineIhED1Ev>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	08008948 	.word	0x08008948

0800121c <_ZN7console6DriverD0Ev>:
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe1 	bl	80011ec <_ZN7console6DriverD1Ev>
 800122a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 ffdc 	bl	80061ec <_ZdlPvj>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN4core7MachineC1Ev>:
class Machine: public core::Component
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff feca 	bl	8000fe4 <_ZN4core9ComponentC1Ev>
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <_ZN4core7MachineC1Ev+0x38>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <_ZN4core7MachineC1Ev+0x3c>)
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080088dc 	.word	0x080088dc
 800127c:	0800108d 	.word	0x0800108d

08001280 <_ZN4core11ByteMachineIhEC1Ev>:
class ByteMachine: public core::Machine
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffd8 	bl	8001240 <_ZN4core7MachineC1Ev>
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <_ZN4core11ByteMachineIhEC1Ev+0x40>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0018 	add.w	r0, r3, #24
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <_ZN4core11ByteMachineIhEC1Ev+0x44>)
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	2305      	movs	r3, #5
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	cb0c      	ldmia	r3, {r2, r3}
 80012b0:	f000 f9ca 	bl	8001648 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhEh>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080088ac 	.word	0x080088ac
 80012c4:	080016a9 	.word	0x080016a9

080012c8 <_ZN7console6DriverC1Ev>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffd4 	bl	8001280 <_ZN4core11ByteMachineIhEC1Ev>
 80012d8:	4a11      	ldr	r2, [pc, #68]	; (8001320 <_ZN7console6DriverC1Ev+0x58>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <_ZN7console6DriverC1Ev+0x5c>)
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	cb0c      	ldmia	r3, {r2, r3}
 80012f4:	f7ff fe86 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	334c      	adds	r3, #76	; 0x4c
 8001302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fdb4 	bl	8000e74 <_ZN4core5QueueC1EPht>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	08008948 	.word	0x08008948
 8001324:	0800202b 	.word	0x0800202b

08001328 <_ZN7console6Driver15checkBeforeSendEh>:
    M_EVENT(send);
public:
	void init();
	bool sendPacket(uint16_t type, uint8_t length, const uint8_t* data);
    bool checkBeforeSend(uint8_t lenth){return (txQueue_.available()>lenth);}
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fdbc 	bl	8000eb8 <_ZN4core5Queue9availableEv>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	b29b      	uxth	r3, r3
 8001348:	429a      	cmp	r2, r3
 800134a:	bf8c      	ite	hi
 800134c:	2301      	movhi	r3, #1
 800134e:	2300      	movls	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_ZN7console10Controller4initEv>:
#include <stdio.h>
#include <stdarg.h>
#include <console/driver.h>

void console::Controller::init()
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
    console::Driver::instance().init();
 8001362:	f7ff fecb 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8001366:	4603      	mov	r3, r0
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	4790      	blx	r2
    plotTask_.start(20);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3308      	adds	r3, #8
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	2114      	movs	r1, #20
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fbe4 	bl	8002b48 <_ZN4core4Task5startEml>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN7console10Controller7sendOSCEhhtPKh>:
    int l = strlen(text) + 1;
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)text);
}

bool console::Controller::sendOSC(uint8_t channel, uint8_t length, uint16_t index, const uint8_t* data)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0c5      	sub	sp, #276	; 0x114
 800138c:	af00      	add	r7, sp, #0
 800138e:	1d3c      	adds	r4, r7, #4
 8001390:	6020      	str	r0, [r4, #0]
 8001392:	460c      	mov	r4, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	1cfb      	adds	r3, r7, #3
 800139a:	4622      	mov	r2, r4
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	1cbb      	adds	r3, r7, #2
 80013a0:	4602      	mov	r2, r0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	463b      	mov	r3, r7
 80013a6:	460a      	mov	r2, r1
 80013a8:	801a      	strh	r2, [r3, #0]
    if (!console::Driver::instance().checkBeforeSend(length + 100)) return false;
 80013aa:	f7ff fea7 	bl	80010fc <_ZN7console6Driver8instanceEv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	1cbb      	adds	r3, r7, #2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3364      	adds	r3, #100	; 0x64
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff ffb4 	bl	8001328 <_ZN7console6Driver15checkBeforeSendEh>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <_ZN7console10Controller7sendOSCEhhtPKh+0x48>
 80013cc:	2300      	movs	r3, #0
 80013ce:	e039      	b.n	8001444 <_ZN7console10Controller7sendOSCEhhtPKh+0xbc>
    uint8_t buf[256];
    buf[0] = channel;
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	1cfa      	adds	r2, r7, #3
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
    buf[1] = (index >> 8) & 0xFF;
 80013da:	463b      	mov	r3, r7
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	705a      	strb	r2, [r3, #1]
    buf[2] = index & 0xFF;
 80013ea:	463b      	mov	r3, r7
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	709a      	strb	r2, [r3, #2]

    for (int i =0;i < length;i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013fc:	1cbb      	adds	r3, r7, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001404:	429a      	cmp	r2, r3
 8001406:	da11      	bge.n	800142c <_ZN7console10Controller7sendOSCEhhtPKh+0xa4>
    {
        buf[i+3] = data[i];
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001410:	441a      	add	r2, r3
 8001412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001416:	3303      	adds	r3, #3
 8001418:	7811      	ldrb	r1, [r2, #0]
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	54d1      	strb	r1, [r2, r3]
    for (int i =0;i < length;i++)
 8001420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001424:	3301      	adds	r3, #1
 8001426:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800142a:	e7e7      	b.n	80013fc <_ZN7console10Controller7sendOSCEhhtPKh+0x74>
    }
    console::Driver::instance().sendPacket(console::Controller::Oscilloscope, length+3, buf);
 800142c:	f7ff fe66 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8001430:	1cbb      	adds	r3, r7, #2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3303      	adds	r3, #3
 8001436:	b2da      	uxtb	r2, r3
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2106      	movs	r1, #6
 800143e:	f000 fd61 	bl	8001f04 <_ZN7console6Driver10sendPacketEthPKh>

    return true;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}

0800144e <_ZN7console10Controller6printfEPKcz>:

void console::Controller::printf(const char* format, ...)
{
 800144e:	b40e      	push	{r1, r2, r3}
 8001450:	b580      	push	{r7, lr}
 8001452:	b0c5      	sub	sp, #276	; 0x114
 8001454:	af00      	add	r7, sp, #0
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	6018      	str	r0, [r3, #0]
    char buf[256];
    va_list args;
    va_start (args, format);
 800145a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	601a      	str	r2, [r3, #0]
    int l = vsprintf(buf, format ,args) + 1;
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	f107 000c 	add.w	r0, r7, #12
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001472:	f006 f913 	bl	800769c <vsiprintf>
 8001476:	4603      	mov	r3, r0
 8001478:	3301      	adds	r3, #1
 800147a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    va_end(args);
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
 800147e:	f7ff fe3d 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8001482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001486:	b2da      	uxtb	r2, r3
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2101      	movs	r1, #1
 800148e:	f000 fd39 	bl	8001f04 <_ZN7console6Driver10sendPacketEthPKh>
}
 8001492:	bf00      	nop
 8001494:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800149e:	b003      	add	sp, #12
 80014a0:	4770      	bx	lr

080014a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>:

console::Command* console::Controller::registerCommand(uint16_t type, Handler handler)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	460b      	mov	r3, r1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	817b      	strh	r3, [r7, #10]
    Command* cmd = new Command();
 80014b0:	200c      	movs	r0, #12
 80014b2:	f004 feac 	bl	800620e <_Znwj>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	617b      	str	r3, [r7, #20]
    cmd->type = type;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	897a      	ldrh	r2, [r7, #10]
 80014ca:	801a      	strh	r2, [r3, #0]
    cmd->handler = handler;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
    cmd->next = commands_;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	609a      	str	r2, [r3, #8]
    commands_ = cmd;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
    return cmd;
 80014e0:	697b      	ldr	r3, [r7, #20]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_ZN7console10Controller14updateIntFieldEtl>:

void console::Controller::updateIntField(uint16_t command, int32_t value)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	460b      	mov	r3, r1
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	817b      	strh	r3, [r7, #10]
    uint8_t buf[6];
    ENCODE_16(command,buf,0);
 80014f8:	897b      	ldrh	r3, [r7, #10]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	743b      	strb	r3, [r7, #16]
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	747b      	strb	r3, [r7, #17]
    ENCODE_32(value,buf,2);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	0e1b      	lsrs	r3, r3, #24
 800150c:	b2db      	uxtb	r3, r3
 800150e:	74bb      	strb	r3, [r7, #18]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	141b      	asrs	r3, r3, #16
 8001514:	b2db      	uxtb	r3, r3
 8001516:	74fb      	strb	r3, [r7, #19]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	121b      	asrs	r3, r3, #8
 800151c:	b2db      	uxtb	r3, r3
 800151e:	753b      	strb	r3, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	757b      	strb	r3, [r7, #21]
    console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
 8001526:	f7ff fde9 	bl	80010fc <_ZN7console6Driver8instanceEv>
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2206      	movs	r2, #6
 8001530:	2102      	movs	r1, #2
 8001532:	f000 fce7 	bl	8001f04 <_ZN7console6Driver10sendPacketEthPKh>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_ZN7console10Controller14processCommandEthPh>:

void console::Controller::processCommand(uint16_t type, uint8_t length, uint8_t* data)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	817b      	strh	r3, [r7, #10]
 800154c:	4613      	mov	r3, r2
 800154e:	727b      	strb	r3, [r7, #9]
	Command* it = commands_;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d010      	beq.n	800157e <_ZN7console10Controller14processCommandEthPh+0x40>
	{
		if (it->type==type)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	897a      	ldrh	r2, [r7, #10]
 8001562:	429a      	cmp	r2, r3
 8001564:	d107      	bne.n	8001576 <_ZN7console10Controller14processCommandEthPh+0x38>
		{
			(*it->handler)(type, length,data);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	7a79      	ldrb	r1, [r7, #9]
 800156c:	8978      	ldrh	r0, [r7, #10]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4798      	blx	r3
			break;
 8001572:	bf00      	nop
		}
		it=it->next;
	}
}
 8001574:	e003      	b.n	800157e <_ZN7console10Controller14processCommandEthPh+0x40>
		it=it->next;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 800157c:	e7eb      	b.n	8001556 <_ZN7console10Controller14processCommandEthPh+0x18>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN7console10Controller15updateTextFieldEthPh>:
    int8_t length = strlen(data);
    updateTextField(command, length, (uint8_t*)data);
}

void console::Controller::updateTextField(uint16_t command, uint8_t length, uint8_t* data)
{
 8001586:	b5b0      	push	{r4, r5, r7, lr}
 8001588:	b088      	sub	sp, #32
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	817b      	strh	r3, [r7, #10]
 8001594:	4613      	mov	r3, r2
 8001596:	727b      	strb	r3, [r7, #9]
    if (length > MAX_PACKET_LENGTH-6) return;
    uint8_t buf[length+2];
    ENCODE_16(command,buf,0);
    for (int i=0;i<length;i++) buf[i+2] = data[i];
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 8001598:	466b      	mov	r3, sp
 800159a:	461d      	mov	r5, r3
    if (length > MAX_PACKET_LENGTH-6) return;
 800159c:	7a7b      	ldrb	r3, [r7, #9]
 800159e:	2bf4      	cmp	r3, #244	; 0xf4
 80015a0:	d901      	bls.n	80015a6 <_ZN7console10Controller15updateTextFieldEthPh+0x20>
 80015a2:	46ad      	mov	sp, r5
 80015a4:	e04c      	b.n	8001640 <_ZN7console10Controller15updateTextFieldEthPh+0xba>
    uint8_t buf[length+2];
 80015a6:	7a7b      	ldrb	r3, [r7, #9]
 80015a8:	1c5c      	adds	r4, r3, #1
 80015aa:	61bc      	str	r4, [r7, #24]
 80015ac:	4623      	mov	r3, r4
 80015ae:	3301      	adds	r3, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	00cb      	lsls	r3, r1, #3
 80015c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015c4:	00c2      	lsls	r2, r0, #3
 80015c6:	4623      	mov	r3, r4
 80015c8:	3301      	adds	r3, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	00cb      	lsls	r3, r1, #3
 80015da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015de:	00c2      	lsls	r2, r0, #3
 80015e0:	4623      	mov	r3, r4
 80015e2:	3301      	adds	r3, #1
 80015e4:	3307      	adds	r3, #7
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	ebad 0d03 	sub.w	sp, sp, r3
 80015ee:	466b      	mov	r3, sp
 80015f0:	3300      	adds	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
    ENCODE_16(command,buf,0);
 80015f4:	897b      	ldrh	r3, [r7, #10]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	705a      	strb	r2, [r3, #1]
    for (int i=0;i<length;i++) buf[i+2] = data[i];
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	7a7b      	ldrb	r3, [r7, #9]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	da0b      	bge.n	800162c <_ZN7console10Controller15updateTextFieldEthPh+0xa6>
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	441a      	add	r2, r3
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3302      	adds	r3, #2
 800161e:	7811      	ldrb	r1, [r2, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	54d1      	strb	r1, [r2, r3]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3301      	adds	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e7ef      	b.n	800160c <_ZN7console10Controller15updateTextFieldEthPh+0x86>
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 800162c:	f7ff fd66 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8001630:	7a7b      	ldrb	r3, [r7, #9]
 8001632:	3302      	adds	r3, #2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2103      	movs	r1, #3
 800163a:	f000 fc63 	bl	8001f04 <_ZN7console6Driver10sendPacketEthPKh>
 800163e:	46ad      	mov	sp, r5
}
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001648 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhEh>:
template <typename E>
class FixedEvent: public Event
{
public:
    typedef void (Component::*Handler) (const E&);
    FixedEvent(Component* component, Handler handler, uint8_t numOfMem = 3)	// 3 is just default value
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4639      	mov	r1, r7
 8001654:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f8ba 	bl	80027d4 <_ZN4core5EventC1Ev>
 8001660:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhEh+0x5c>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    	component_ = component;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3310      	adds	r3, #16
 8001676:	463a      	mov	r2, r7
 8001678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167c:	e883 0003 	stmia.w	r3, {r0, r1}
    	//Declare MemPool with correspond type here
    	pool_ = new MemPool<E>(numOfMem);
 8001680:	200c      	movs	r0, #12
 8001682:	f004 fdc4 	bl	800620e <_Znwj>
 8001686:	4603      	mov	r3, r0
 8001688:	461c      	mov	r4, r3
 800168a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800168e:	4619      	mov	r1, r3
 8001690:	4620      	mov	r0, r4
 8001692:	f000 f84d 	bl	8001730 <_ZN7MemPoolIhEC1Em>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	619c      	str	r4, [r3, #24]
    }
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	080088c8 	.word	0x080088c8

080016a8 <_ZN4core11ByteMachineIhE8execute_ERKh>:
protected:
    T data_;
    typedef void (Component::*Handler) (const T&);
    core::FixedEvent<T> postEvent_ = core::FixedEvent<T>(this, (Handler)&ByteMachine<T>::execute_, 5);

    void execute_(const T& c)
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
    {
        data_ = c;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	751a      	strb	r2, [r3, #20]
        nextState_ = nullptr;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
        (this->*currentState_)();
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6912      	ldr	r2, [r2, #16]
 80016cc:	1052      	asrs	r2, r2, #1
 80016ce:	1899      	adds	r1, r3, r2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_ZN4core11ByteMachineIhE8execute_ERKh+0x3a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	e009      	b.n	80016f6 <_ZN4core11ByteMachineIhE8execute_ERKh+0x4e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6912      	ldr	r2, [r2, #16]
 80016e8:	1052      	asrs	r2, r2, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4608      	mov	r0, r1
 80016f8:	4798      	blx	r3
        if (nextState_ != nullptr) currentState_ = nextState_;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6c>
 8001712:	2300      	movs	r3, #0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d007      	beq.n	8001728 <_ZN4core11ByteMachineIhE8execute_ERKh+0x80>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	330c      	adds	r3, #12
 800171e:	3204      	adds	r2, #4
 8001720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001724:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN7MemPoolIhEC1Em>:
    struct _Unit*    m_pAllocatedMemBlock; //Head pointer to Allocated linkedlist.
    struct _Unit*    m_pFreeMemBlock;      //Head pointer to Free linkedlist.

public:

    MemPool(unsigned long ulUnitNum):
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
            m_pMemBlock(nullptr),
            m_pAllocatedMemBlock(nullptr),
            m_pFreeMemBlock(nullptr)//,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
    {
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fe35 	bl	80073c4 <malloc>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d018      	beq.n	800179c <_ZN7MemPoolIhEC1Em+0x6c>
        {
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d214      	bcs.n	80017a0 <_ZN7MemPoolIhEC1Em+0x70>
            {
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	440b      	add	r3, r1
 8001784:	60bb      	str	r3, [r7, #8]

                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	601a      	str	r2, [r3, #0]

                m_pFreeMemBlock = pCurUnit;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e7e8      	b.n	800176e <_ZN7MemPoolIhEC1Em+0x3e>
            }
        }
        else
        {
        	Error_Handler();
 800179c:	f003 f840 	bl	8004820 <Error_Handler>
        }
    }
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <_ZN4core10FixedEventIhED1Ev>:
class FixedEvent: public Event
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_ZN4core10FixedEventIhED1Ev+0x20>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fbc5 	bl	8000f4c <_ZN4core5EventD1Ev>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	080088c8 	.word	0x080088c8

080017d0 <_ZN4core10FixedEventIhED0Ev>:
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_ZN4core10FixedEventIhED1Ev>
 80017de:	211c      	movs	r1, #28
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f004 fd03 	bl	80061ec <_ZdlPvj>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_ZN4core10EmptyEventD1Ev>:
class EmptyEvent: public Event
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_ZN4core10EmptyEventD1Ev+0x20>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fba3 	bl	8000f4c <_ZN4core5EventD1Ev>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	080088f8 	.word	0x080088f8

08001814 <_ZN4core10EmptyEventD0Ev>:
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 8001822:	2118      	movs	r1, #24
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f004 fce1 	bl	80061ec <_ZdlPvj>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_ZN4core11ByteMachineIhE6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        currentState_ = s;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	330c      	adds	r3, #12
 8001846:	1d3a      	adds	r2, r7, #4
 8001848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN4core10FixedEventIhE7executeEv>:
    	memcpy(container_.payload_, &e, sizeof(E));

    	return core::Engine::instance().events().post(container_);
    }
protected:
    void execute() override
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    {
        (component_->*handler_)(*((E*)container_.payload_));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6952      	ldr	r2, [r2, #20]
 800186c:	1052      	asrs	r2, r2, #1
 800186e:	1898      	adds	r0, r3, r2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_ZN4core10FixedEventIhE7executeEv+0x26>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	e00a      	b.n	8001898 <_ZN4core10FixedEventIhE7executeEv+0x3c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6952      	ldr	r2, [r2, #20]
 800188a:	1052      	asrs	r2, r2, #1
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6912      	ldr	r2, [r2, #16]
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6892      	ldr	r2, [r2, #8]
 800189c:	4611      	mov	r1, r2
 800189e:	4798      	blx	r3
        pool_->Free(container_.payload_);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f000 f804 	bl	80018b8 <_ZN7MemPoolIhE4FreeEPv>
    }
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZN7MemPoolIhE4FreeEPv>:
        m_pAllocatedMemBlock = pCurUnit;

        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
    }

    void Free(void* p)
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    {
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3b04      	subs	r3, #4
 80018c6:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01e      	beq.n	8001916 <_ZN7MemPoolIhE4FreeEPv+0x5e>
		{
			if(it == pCurUnit)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d114      	bne.n	800190a <_ZN7MemPoolIhE4FreeEPv+0x52>
			{
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <_ZN7MemPoolIhE4FreeEPv+0x38>
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e003      	b.n	80018f8 <_ZN7MemPoolIhE4FreeEPv+0x40>
				else prev->pNext = it->pNext;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	609a      	str	r2, [r3, #8]
				break;
 8001906:	bf00      	nop
			}
			prev = it;
		}
    }
 8001908:	e005      	b.n	8001916 <_ZN7MemPoolIhE4FreeEPv+0x5e>
			prev = it;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e7dd      	b.n	80018d2 <_ZN7MemPoolIhE4FreeEPv+0x1a>
    }
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_ZN4core5Queue5emptyEv>:
    bool notEmpty(){return (inPtr_ != outPtr_);}
    bool empty(){return (inPtr_ == outPtr_);}
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	429a      	cmp	r2, r3
 8001934:	bf0c      	ite	eq
 8001936:	2301      	moveq	r3, #1
 8001938:	2300      	movne	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZN4core5Queue4pushEh>:
    {
        inPtr_ = first_;
        outPtr_ = first_;
    }

    void push(uint8_t val)
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
    {
    	uint8_t* next = inPtr_ + 1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
    	if (next == last_) next = first_;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	429a      	cmp	r2, r3
 8001964:	d102      	bne.n	800196c <_ZN4core5Queue4pushEh+0x24>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]
		if (next!=outPtr_) //queue not full
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	429a      	cmp	r2, r3
 8001974:	d006      	beq.n	8001984 <_ZN4core5Queue4pushEh+0x3c>
		{
			*inPtr_ = val;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	701a      	strb	r2, [r3, #0]
			inPtr_ = next;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	60da      	str	r2, [r3, #12]
		}
    }
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_ZN4core5Queue3popEv>:

    uint8_t pop()
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    {
    	if (outPtr_ != inPtr_)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d014      	beq.n	80019ce <_ZN4core5Queue3popEv+0x3e>
		{
			uint8_t ret = *outPtr_;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	73fb      	strb	r3, [r7, #15]
			outPtr_++;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
			if (outPtr_ == last_) outPtr_ = first_;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d103      	bne.n	80019ca <_ZN4core5Queue3popEv+0x3a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
			return ret;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	e000      	b.n	80019d0 <_ZN4core5Queue3popEv+0x40>
		}
        return 0;
 80019ce:	2300      	movs	r3, #0
    }
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN4core10EventQueueD1Ev>:
{

class EventQueue
{
public:
	virtual ~EventQueue(){}
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN4core10EventQueueD1Ev+0x1c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	08008964 	.word	0x08008964

080019fc <_ZN4core10EventQueueD0Ev>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe9 	bl	80019dc <_ZN4core10EventQueueD1Ev>
 8001a0a:	f240 611c 	movw	r1, #1564	; 0x61c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f004 fbec 	bl	80061ec <_ZdlPvj>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZN4core10EventQueue4postENS_9ContainerE>:
        	Error_Handler();
        }
		return true;
	}

    inline EventStatus post(container_t container)
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        uint16_t avail = size_ + outPtr_ - inPtr_; // maximum avail = size_ - 1;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	441a      	add	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	10db      	asrs	r3, r3, #3
 8001a46:	82fb      	strh	r3, [r7, #22]
        if (avail > size_) avail -= (size_);	// here we have to subtract 1 but we don't do that
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d905      	bls.n	8001a60 <_ZN4core10EventQueue4postENS_9ContainerE+0x42>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a5a:	8afa      	ldrh	r2, [r7, #22]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	82fb      	strh	r3, [r7, #22]
        if (avail < 2)							// and here we compare with 2 instead of 1.
 8001a60:	8afb      	ldrh	r3, [r7, #22]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d801      	bhi.n	8001a6a <_ZN4core10EventQueue4postENS_9ContainerE+0x4c>
        {
        	return EventStatus::POST_FAILED;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e00a      	b.n	8001a80 <_ZN4core10EventQueue4postENS_9ContainerE+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6a:	b672      	cpsid	i
}
 8001a6c:	bf00      	nop
        }

        DISABLE_INTERRUPT;
        push_(container);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f807 	bl	8001a88 <_ZN4core10EventQueue5push_ENS_9ContainerE>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a7a:	b662      	cpsie	i
}
 8001a7c:	bf00      	nop
        ENABLE_INTERRUPT;
        return EventStatus::POST_SUCCESS;
 8001a7e:	2301      	movs	r3, #1
    }
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZN4core10EventQueue5push_ENS_9ContainerE>:

private:
    inline void push_(container_t val)
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        *(inPtr_) = val;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aa4:	e882 0003 	stmia.w	r2, {r0, r1}
        inPtr_++;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001aae:	f103 0208 	add.w	r2, r3, #8
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (inPtr_ == last_) inPtr_ = first_;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d105      	bne.n	8001ad4 <_ZN4core10EventQueue5push_ENS_9ContainerE+0x4c>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    }
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_ZN4core6EngineD1Ev>:
class Task;

class Engine: public Event
{
public:
    ~Engine(){}
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <_ZN4core6EngineD1Ev+0x2c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	330c      	adds	r3, #12
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff72 	bl	80019dc <_ZN4core10EventQueueD1Ev>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa26 	bl	8000f4c <_ZN4core5EventD1Ev>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08008974 	.word	0x08008974

08001b10 <_ZN4core6EngineD0Ev>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe1 	bl	8001ae0 <_ZN4core6EngineD1Ev>
 8001b1e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f004 fb62 	bl	80061ec <_ZdlPvj>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_ZN4core6Engine6eventsEv>:
    void run();
    inline void tick(); /*must be called in timer interrupt or SysTick interrupt, 1ms usually*/
    inline uint64_t tickCount(){return tickCount_;}
    void delay(uint32_t t); //t in ms, WARNING: this function is blocking, use in some limited context only
    EventQueue& events(){return events_;}
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <__tcf_0>:
    static Engine& instance()
    {
        static Engine engine;
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4801      	ldr	r0, [pc, #4]	; (8001b58 <__tcf_0+0xc>)
 8001b52:	f7ff ffc5 	bl	8001ae0 <_ZN4core6EngineD1Ev>
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200009f8 	.word	0x200009f8

08001b5c <_ZN4core6Engine8instanceEv>:
    static Engine& instance()
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
        static Engine engine;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <_ZN4core6Engine8instanceEv+0x50>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	f3bf 8f5b 	dmb	ish
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf0c      	ite	eq
 8001b72:	2301      	moveq	r3, #1
 8001b74:	2300      	movne	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <_ZN4core6Engine8instanceEv+0x48>
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <_ZN4core6Engine8instanceEv+0x50>)
 8001b7e:	f004 fb37 	bl	80061f0 <__cxa_guard_acquire>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <_ZN4core6Engine8instanceEv+0x48>
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <_ZN4core6Engine8instanceEv+0x54>)
 8001b94:	f000 fe3e 	bl	8002814 <_ZN4core6EngineC1Ev>
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <_ZN4core6Engine8instanceEv+0x50>)
 8001b9a:	f004 fb35 	bl	8006208 <__cxa_guard_release>
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <_ZN4core6Engine8instanceEv+0x58>)
 8001ba0:	f005 fbdf 	bl	8007362 <atexit>
        return engine;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <_ZN4core6Engine8instanceEv+0x54>)
    }
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001038 	.word	0x20001038
 8001bb0:	200009f8 	.word	0x200009f8
 8001bb4:	08001b4d 	.word	0x08001b4d

08001bb8 <__tcf_1>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__tcf_1+0xc>)
 8001bbe:	f7ff f9ef 	bl	8000fa0 <_ZN7console10ControllerD1Ev>
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20001040 	.word	0x20001040

08001bc8 <_ZN7console10Controller8instanceEv>:
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_ZN7console10Controller8instanceEv+0x50>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f3bf 8f5b 	dmb	ish
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf0c      	ite	eq
 8001bde:	2301      	moveq	r3, #1
 8001be0:	2300      	movne	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <_ZN7console10Controller8instanceEv+0x48>
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <_ZN7console10Controller8instanceEv+0x50>)
 8001bea:	f004 fb01 	bl	80061f0 <__cxa_guard_acquire>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <_ZN7console10Controller8instanceEv+0x48>
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <_ZN7console10Controller8instanceEv+0x54>)
 8001c00:	f000 f810 	bl	8001c24 <_ZN7console10ControllerC1Ev>
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <_ZN7console10Controller8instanceEv+0x50>)
 8001c06:	f004 faff 	bl	8006208 <__cxa_guard_release>
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <_ZN7console10Controller8instanceEv+0x58>)
 8001c0c:	f005 fba9 	bl	8007362 <atexit>
 8001c10:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <_ZN7console10Controller8instanceEv+0x54>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20001098 	.word	0x20001098
 8001c1c:	20001040 	.word	0x20001040
 8001c20:	08001bb9 	.word	0x08001bb9

08001c24 <_ZN7console10ControllerC1Ev>:
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9d8 	bl	8000fe4 <_ZN4core9ComponentC1Ev>
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <_ZN7console10ControllerC1Ev+0x50>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f103 0008 	add.w	r0, r3, #8
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <_ZN7console10ControllerC1Ev+0x54>)
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	cb0c      	ldmia	r3, {r2, r3}
 8001c50:	f000 ff56 	bl	8002b00 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800890c 	.word	0x0800890c
 8001c78:	080024b1 	.word	0x080024b1

08001c7c <_ZN4core10EmptyEvent4postEv>:
    EventStatus post()
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    	return core::Engine::instance().events().post(container_);
 8001c84:	f7ff ff6a 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff51 	bl	8001b32 <_ZN4core6Engine6eventsEv>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c98:	f7ff fec1 	bl	8001a1e <_ZN4core10EventQueue4postENS_9ContainerE>
 8001c9c:	4603      	mov	r3, r0
    }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <_ZN7console6Driver4initEv>:
#include <console/controller.h>
#include <console/driver.h>
#include <console/hal.h>

void console::Driver::init()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    console::HAL::init();
 8001cb0:	f000 fafa 	bl	80022a8 <_ZN7console3HAL4initEv>
    SM_START(ReceiveHeader);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3310      	adds	r3, #16
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <_ZN7console6Driver4initEv+0x30>)
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60fa      	str	r2, [r7, #12]
 8001cc6:	f107 0208 	add.w	r2, r7, #8
 8001cca:	ca06      	ldmia	r2, {r1, r2}
 8001ccc:	4798      	blx	r3
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08001cdd 	.word	0x08001cdd

08001cdc <_ZN7console6Driver13ReceiveHeaderEv>:

STATE_BODY(console::Driver::ReceiveHeader)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    if (data_ == HEADER_INDICATOR) SM_SWITCH(Driver::ReceiveLength);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7d1b      	ldrb	r3, [r3, #20]
 8001ce8:	2bfe      	cmp	r3, #254	; 0xfe
 8001cea:	d105      	bne.n	8001cf8 <_ZN7console6Driver13ReceiveHeaderEv+0x1c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_ZN7console6Driver13ReceiveHeaderEv+0x28>)
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	08001d09 	.word	0x08001d09

08001d08 <_ZN7console6Driver13ReceiveLengthEv>:

STATE_BODY(console::Driver::ReceiveLength)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    rxLength_ = data_;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7d1a      	ldrb	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f883 295b 	strb.w	r2, [r3, #2395]	; 0x95b
    if (rxLength_ < MAX_PACKET_LENGTH)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d20:	2bf9      	cmp	r3, #249	; 0xf9
 8001d22:	d816      	bhi.n	8001d52 <_ZN7console6Driver13ReceiveLengthEv+0x4a>
    {
        rxIndex_ = 2;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
        rxType_ = 0;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
        checksum_ = HEADER_INDICATOR + rxLength_;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
        SM_SWITCH(ReceiveType);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <_ZN7console6Driver13ReceiveLengthEv+0x64>)
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    }
    else SM_SWITCH(ReceiveHeader);
}
 8001d50:	e005      	b.n	8001d5e <_ZN7console6Driver13ReceiveLengthEv+0x56>
    else SM_SWITCH(ReceiveHeader);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <_ZN7console6Driver13ReceiveLengthEv+0x68>)
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	08001d75 	.word	0x08001d75
 8001d70:	08001cdd 	.word	0x08001cdd

08001d74 <_ZN7console6Driver11ReceiveTypeEv>:

STATE_BODY(console::Driver::ReceiveType)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7d1b      	ldrb	r3, [r3, #20]
 8001d86:	4413      	add	r3, r2
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxType_ <<= 8;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8b3 395e 	ldrh.w	r3, [r3, #2398]	; 0x95e
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    rxType_+= data_;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8b3 295e 	ldrh.w	r2, [r3, #2398]	; 0x95e
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7d1b      	ldrb	r3, [r3, #20]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    if (--rxIndex_ == 0)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d011      	beq.n	8001dfe <_ZN7console6Driver11ReceiveTypeEv+0x8a>
    {
        if (rxLength_ > 0) SM_SWITCH(ReceiveData);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <_ZN7console6Driver11ReceiveTypeEv+0x7e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <_ZN7console6Driver11ReceiveTypeEv+0x98>)
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
        else SM_SWITCH(ReceiveChecksum);
    }
}
 8001df0:	e005      	b.n	8001dfe <_ZN7console6Driver11ReceiveTypeEv+0x8a>
        else SM_SWITCH(ReceiveChecksum);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <_ZN7console6Driver11ReceiveTypeEv+0x9c>)
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001e7d 	.word	0x08001e7d

08001e14 <_ZN7console6Driver11ReceiveDataEv>:

STATE_BODY(console::Driver::ReceiveData)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7d1b      	ldrb	r3, [r3, #20]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxBuffer_[rxIndex_++] = data_;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	b2d1      	uxtb	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	f882 195d 	strb.w	r1, [r2, #2397]	; 0x95d
 8001e40:	4619      	mov	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7d1a      	ldrb	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	440b      	add	r3, r1
 8001e4a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
    if (rxIndex_==rxLength_) SM_SWITCH(ReceiveChecksum);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 295d 	ldrb.w	r2, [r3, #2397]	; 0x95d
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d105      	bne.n	8001e6a <_ZN7console6Driver11ReceiveDataEv+0x56>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_ZN7console6Driver11ReceiveDataEv+0x64>)
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	08001e7d 	.word	0x08001e7d

08001e7c <_ZN7console6Driver15ReceiveChecksumEv>:
STATE_BODY(console::Driver::ReceiveChecksum)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    if (data_ == checksum_) SM_SWITCH(ReceiveFooter);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7d1a      	ldrb	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 395c 	ldrb.w	r3, [r3, #2396]	; 0x95c
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d106      	bne.n	8001ea0 <_ZN7console6Driver15ReceiveChecksumEv+0x24>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <_ZN7console6Driver15ReceiveChecksumEv+0x3c>)
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
    else SM_SWITCH(ReceiveHeader);
}
 8001e9e:	e005      	b.n	8001eac <_ZN7console6Driver15ReceiveChecksumEv+0x30>
    else SM_SWITCH(ReceiveHeader);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <_ZN7console6Driver15ReceiveChecksumEv+0x40>)
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	08001ec1 	.word	0x08001ec1
 8001ebc:	08001cdd 	.word	0x08001cdd

08001ec0 <_ZN7console6Driver13ReceiveFooterEv>:

STATE_BODY(console::Driver::ReceiveFooter)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    if (data_ == FOOTER_INDICATOR)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7d1b      	ldrb	r3, [r3, #20]
 8001ecc:	2bfd      	cmp	r3, #253	; 0xfd
 8001ece:	d10c      	bne.n	8001eea <_ZN7console6Driver13ReceiveFooterEv+0x2a>
    {
        Controller::instance().processCommand(rxType_, rxLength_, rxBuffer_);
 8001ed0:	f7ff fe7a 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8b3 195e 	ldrh.w	r1, [r3, #2398]	; 0x95e
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 295b 	ldrb.w	r2, [r3, #2395]	; 0x95b
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f603 0361 	addw	r3, r3, #2145	; 0x861
 8001ee6:	f7ff fb2a 	bl	800153e <_ZN7console10Controller14processCommandEthPh>
    }
    SM_SWITCH(ReceiveHeader);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <_ZN7console6Driver13ReceiveFooterEv+0x40>)
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08001cdd 	.word	0x08001cdd

08001f04 <_ZN7console6Driver10sendPacketEthPKh>:

bool console::Driver::sendPacket(uint16_t type, uint8_t length, const uint8_t* data)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	4613      	mov	r3, r2
 8001f14:	727b      	strb	r3, [r7, #9]
    uint8_t checksum = 0u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    if (txQueue_.available() < length + 5)
 8001f1a:	7a7b      	ldrb	r3, [r7, #9]
 8001f1c:	1d1c      	adds	r4, r3, #4
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ffc7 	bl	8000eb8 <_ZN4core5Queue9availableEv>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	bfac      	ite	ge
 8001f30:	2301      	movge	r3, #1
 8001f32:	2300      	movlt	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZN7console6Driver10sendPacketEthPKh+0x3a>
    {
    	//TODO: Warning here
    	return false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e071      	b.n	8002022 <_ZN7console6Driver10sendPacketEthPKh+0x11e>
    }
    txQueue_.push(HEADER_INDICATOR);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f44:	21fe      	movs	r1, #254	; 0xfe
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fcfe 	bl	8001948 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) HEADER_INDICATOR;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	3b02      	subs	r3, #2
 8001f50:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(length);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f58:	7a7a      	ldrb	r2, [r7, #9]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fcf3 	bl	8001948 <_ZN4core5Queue4pushEh>
    checksum += length;
 8001f62:	7dfa      	ldrb	r2, [r7, #23]
 8001f64:	7a7b      	ldrb	r3, [r7, #9]
 8001f66:	4413      	add	r3, r2
 8001f68:	75fb      	strb	r3, [r7, #23]
    txQueue_.push((type >> 8) & 0xFF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f603 024c 	addw	r2, r3, #2124	; 0x84c
 8001f70:	897b      	ldrh	r3, [r7, #10]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7ff fce4 	bl	8001948 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) ((type >> 8) & 0xFF);
 8001f80:	897b      	ldrh	r3, [r7, #10]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(type & 0xFF);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f94:	897a      	ldrh	r2, [r7, #10]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fcd4 	bl	8001948 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) (type & 0xFF);
 8001fa0:	897b      	ldrh	r3, [r7, #10]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	75fb      	strb	r3, [r7, #23]

    for (int i =0;i < length;i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	7a7b      	ldrb	r3, [r7, #9]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	da14      	bge.n	8001fe0 <_ZN7console6Driver10sendPacketEthPKh+0xdc>
    {
        txQueue_.push(data[i]);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7ff fcbf 	bl	8001948 <_ZN4core5Queue4pushEh>
        checksum += data[i];
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	75fb      	strb	r3, [r7, #23]
    for (int i =0;i < length;i++)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e7e6      	b.n	8001fae <_ZN7console6Driver10sendPacketEthPKh+0xaa>
    }
    txQueue_.push(checksum);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001fe6:	7dfa      	ldrb	r2, [r7, #23]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fcac 	bl	8001948 <_ZN4core5Queue4pushEh>
    txQueue_.push(FOOTER_INDICATOR);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001ff6:	21fd      	movs	r1, #253	; 0xfd
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fca5 	bl	8001948 <_ZN4core5Queue4pushEh>

    if (!sending_)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <_ZN7console6Driver10sendPacketEthPKh+0x11c>
    {
        sendEvent.post();
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3334      	adds	r3, #52	; 0x34
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe32 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
        sending_ = true;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
    return true;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <_ZN7console6Driver12sendHandler_Ev>:

M_EVENT_HANDLER(console::Driver,send)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
    if (txQueue_.empty())
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fc72 	bl	8001922 <_ZN4core5Queue5emptyEv>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <_ZN7console6Driver12sendHandler_Ev+0x24>
    {
    	sending_ = false;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    	return;
 800204c:	e013      	b.n	8002076 <_ZN7console6Driver12sendHandler_Ev+0x4c>
    }
    if (console::HAL::txReady()) console::HAL::write(txQueue_.pop());
 800204e:	f000 f93f 	bl	80022d0 <_ZN7console3HAL7txReadyEv>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <_ZN7console6Driver12sendHandler_Ev+0x42>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc96 	bl	8001990 <_ZN4core5Queue3popEv>
 8002064:	4603      	mov	r3, r0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f942 	bl	80022f0 <_ZN7console3HAL5writeEh>
    sendEvent.post();
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3334      	adds	r3, #52	; 0x34
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe03 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
}
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800210a:	b480      	push	{r7}
 800210c:	b089      	sub	sp, #36	; 0x24
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	330c      	adds	r3, #12
 8002116:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	e853 3f00 	ldrex	r3, [r3]
 800211e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	330c      	adds	r3, #12
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	61ba      	str	r2, [r7, #24]
 8002130:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	613b      	str	r3, [r7, #16]
   return(result);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d000      	beq.n	800214e <LL_USART_EnableIT_RXNE+0x44>
 800214c:	e7e1      	b.n	8002112 <LL_USART_EnableIT_RXNE+0x8>
}
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800215a:	b480      	push	{r7}
 800215c:	b089      	sub	sp, #36	; 0x24
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3314      	adds	r3, #20
 8002166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	e853 3f00 	ldrex	r3, [r3]
 800216e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3314      	adds	r3, #20
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	613b      	str	r3, [r7, #16]
   return(result);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d000      	beq.n	800219e <LL_USART_EnableIT_ERROR+0x44>
 800219c:	e7e1      	b.n	8002162 <LL_USART_EnableIT_ERROR+0x8>
}
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b089      	sub	sp, #36	; 0x24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	330c      	adds	r3, #12
 80021b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	e853 3f00 	ldrex	r3, [r3]
 80021be:	60bb      	str	r3, [r7, #8]
   return(result);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330c      	adds	r3, #12
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	61ba      	str	r2, [r7, #24]
 80021d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	613b      	str	r3, [r7, #16]
   return(result);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d000      	beq.n	80021ee <LL_USART_DisableIT_TC+0x44>
 80021ec:	e7e1      	b.n	80021b2 <LL_USART_DisableIT_TC+0x8>
}
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b089      	sub	sp, #36	; 0x24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	330c      	adds	r3, #12
 8002206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	e853 3f00 	ldrex	r3, [r3]
 800220e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	330c      	adds	r3, #12
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	61ba      	str	r2, [r7, #24]
 8002220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002222:	6979      	ldr	r1, [r7, #20]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	e841 2300 	strex	r3, r2, [r1]
 800222a:	613b      	str	r3, [r7, #16]
   return(result);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d000      	beq.n	800223e <LL_USART_DisableIT_TXE+0x44>
 800223c:	e7e1      	b.n	8002202 <LL_USART_DisableIT_TXE+0x8>
}
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b20      	cmp	r3, #32
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	b2db      	uxtb	r3, r3
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	605a      	str	r2, [r3, #4]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZN7console3HAL4initEv>:

#define UART_PORT			USART2
#define UART_ISR_HANDLER()	extern "C" void USART2_IRQHandler(void)

void console::HAL::init()
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 80022ac:	f002 fc9e 	bl	8004bec <MX_USART2_UART_Init>
	LL_USART_EnableIT_RXNE(UART_PORT);
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <_ZN7console3HAL4initEv+0x24>)
 80022b2:	f7ff ff2a 	bl	800210a <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(UART_PORT);
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <_ZN7console3HAL4initEv+0x24>)
 80022b8:	f7ff ff4f 	bl	800215a <LL_USART_EnableIT_ERROR>
	LL_USART_DisableIT_TC(UART_PORT);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <_ZN7console3HAL4initEv+0x24>)
 80022be:	f7ff ff74 	bl	80021aa <LL_USART_DisableIT_TC>
	LL_USART_DisableIT_TXE(UART_PORT);
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <_ZN7console3HAL4initEv+0x24>)
 80022c4:	f7ff ff99 	bl	80021fa <LL_USART_DisableIT_TXE>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40004400 	.word	0x40004400

080022d0 <_ZN7console3HAL7txReadyEv>:

bool console::HAL::txReady()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	return (LL_USART_IsActiveFlag_TXE(UART_PORT));
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <_ZN7console3HAL7txReadyEv+0x1c>)
 80022d6:	f7ff fef7 	bl	80020c8 <LL_USART_IsActiveFlag_TXE>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40004400 	.word	0x40004400

080022f0 <_ZN7console3HAL5writeEh>:

void console::HAL::write(uint8_t c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(UART_PORT, c);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <_ZN7console3HAL5writeEh+0x1c>)
 8002300:	f7ff ffc3 	bl	800228a <LL_USART_TransmitData8>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40004400 	.word	0x40004400

08002310 <USART2_IRQHandler>:

UART_ISR_HANDLER()
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(UART_PORT) && LL_USART_IsEnabledIT_RXNE(UART_PORT))
 8002316:	4822      	ldr	r0, [pc, #136]	; (80023a0 <USART2_IRQHandler+0x90>)
 8002318:	f7ff feb0 	bl	800207c <LL_USART_IsActiveFlag_RXNE>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <USART2_IRQHandler+0x22>
 8002322:	481f      	ldr	r0, [pc, #124]	; (80023a0 <USART2_IRQHandler+0x90>)
 8002324:	f7ff ff91 	bl	800224a <LL_USART_IsEnabledIT_RXNE>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <USART2_IRQHandler+0x22>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <USART2_IRQHandler+0x24>
 8002332:	2300      	movs	r3, #0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <USART2_IRQHandler+0x46>
	{
		uint8_t c = LL_USART_ReceiveData8(UART_PORT);
 8002338:	4819      	ldr	r0, [pc, #100]	; (80023a0 <USART2_IRQHandler+0x90>)
 800233a:	f7ff ff99 	bl	8002270 <LL_USART_ReceiveData8>
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
		console::Driver::instance().post(c);
 8002342:	f7fe fedb 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 f852 	bl	80023f8 <_ZN4core11ByteMachineIhE4postEh>
	}
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
	{
		LL_USART_DisableIT_TXE(UART_PORT);
	}
}
 8002354:	e01f      	b.n	8002396 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TC(UART_PORT))
 8002356:	4812      	ldr	r0, [pc, #72]	; (80023a0 <USART2_IRQHandler+0x90>)
 8002358:	f7ff fea3 	bl	80020a2 <LL_USART_IsActiveFlag_TC>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <USART2_IRQHandler+0x6a>
		LL_USART_ClearFlag_TC(UART_PORT);
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <USART2_IRQHandler+0x90>)
 800236e:	f7ff febe 	bl	80020ee <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART_PORT);
 8002372:	480b      	ldr	r0, [pc, #44]	; (80023a0 <USART2_IRQHandler+0x90>)
 8002374:	f7ff ff19 	bl	80021aa <LL_USART_DisableIT_TC>
}
 8002378:	e00d      	b.n	8002396 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <USART2_IRQHandler+0x90>)
 800237c:	f7ff fea4 	bl	80020c8 <LL_USART_IsActiveFlag_TXE>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <USART2_IRQHandler+0x86>
		LL_USART_DisableIT_TXE(UART_PORT);
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <USART2_IRQHandler+0x90>)
 8002392:	f7ff ff32 	bl	80021fa <LL_USART_DisableIT_TXE>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40004400 	.word	0x40004400

080023a4 <_ZN4core10FixedEventIhE4postERKh>:
    EventStatus post(const E& e)
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f832 	bl	800241c <_ZN7MemPoolIhE5AllocEv>
 80023b8:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)	// Cannot Allocate, Pool Over
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <_ZN4core10FixedEventIhE4postERKh+0x20>
    		return EventStatus::ALLOCATION_FAILED;
 80023c0:	2302      	movs	r3, #2
 80023c2:	e015      	b.n	80023f0 <_ZN4core10FixedEventIhE4postERKh+0x4c>
    	container_.payload_ = p;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
    	return core::Engine::instance().events().post(container_);
 80023d4:	f7ff fbc2 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fba9 	bl	8001b32 <_ZN4core6Engine6eventsEv>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023e8:	f7ff fb19 	bl	8001a1e <_ZN4core10EventQueue4postENS_9ContainerE>
 80023ec:	4603      	mov	r3, r0
 80023ee:	bf00      	nop
    }
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN4core11ByteMachineIhE4postEh>:
    EventStatus post(T c)
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
        return postEvent_.post(c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3318      	adds	r3, #24
 8002408:	1cfa      	adds	r2, r7, #3
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ffc9 	bl	80023a4 <_ZN4core10FixedEventIhE4postERKh>
 8002412:	4603      	mov	r3, r0
    }
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZN7MemPoolIhE5AllocEv>:
    void* Alloc()
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <_ZN7MemPoolIhE5AllocEv+0x18>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <_ZN7MemPoolIhE5AllocEv+0x1c>
			return nullptr;
 8002434:	2300      	movs	r3, #0
 8002436:	e00f      	b.n	8002458 <_ZN7MemPoolIhE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3304      	adds	r3, #4
    }
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZN7console10Controller4plotEhl>:

#define MAX_ONE (1<<7)
#define MAX_TWO (1<<15)

void console::Controller::plot(uint8_t channel, int32_t value)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	460b      	mov	r3, r1
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	72fb      	strb	r3, [r7, #11]
    if (channel>7) return;
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	2b07      	cmp	r3, #7
 8002476:	d815      	bhi.n	80024a4 <_ZN7console10Controller4plotEhl+0x40>
    plotReg_ |= (1<<channel);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800247e:	b25a      	sxtb	r2, r3
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	b25b      	sxtb	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b25b      	sxtb	r3, r3
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    plotValues_[channel] = value;
 8002496:	7afa      	ldrb	r2, [r7, #11]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	320c      	adds	r2, #12
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024a2:	e000      	b.n	80024a6 <_ZN7console10Controller4plotEhl+0x42>
    if (channel>7) return;
 80024a4:	bf00      	nop
}
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_ZN7console10Controller12plotHandler_Ev>:

M_TASK_HANDLER(console::Controller,plot)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	; 0x38
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    if (plotReg_ == 0) return;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80bf 	beq.w	8002642 <_ZN7console10Controller12plotHandler_Ev+0x192>
    uint16_t plotMask = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t buf[34];
    uint8_t index = 2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    for (int i=0;i<8;i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	2b07      	cmp	r3, #7
 80024d6:	f300 80a2 	bgt.w	800261e <_ZN7console10Controller12plotHandler_Ev+0x16e>
    {
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024e0:	461a      	mov	r2, r3
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	fa42 f303 	asr.w	r3, r2, r3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8091 	beq.w	8002614 <_ZN7console10Controller12plotHandler_Ev+0x164>
        int32_t value = plotValues_[i];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	320c      	adds	r2, #12
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (value < MAX_ONE && value > -MAX_ONE)
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	2b7f      	cmp	r3, #127	; 0x7f
 8002502:	dc1b      	bgt.n	800253c <_ZN7console10Controller12plotHandler_Ev+0x8c>
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800250a:	db17      	blt.n	800253c <_ZN7console10Controller12plotHandler_Ev+0x8c>
        {
        	plotMask |= (1 << (i*2));
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2201      	movs	r2, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	b21a      	sxth	r2, r3
 8002518:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	86fb      	strh	r3, [r7, #54]	; 0x36
        	buf[index++] = (value & 0xFF);
 8002522:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 800252c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002534:	440b      	add	r3, r1
 8002536:	f803 2c30 	strb.w	r2, [r3, #-48]
 800253a:	e06c      	b.n	8002616 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else if (value < MAX_TWO && value > -MAX_TWO)
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002542:	da28      	bge.n	8002596 <_ZN7console10Controller12plotHandler_Ev+0xe6>
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800254a:	dd24      	ble.n	8002596 <_ZN7console10Controller12plotHandler_Ev+0xe6>
        {
        	plotMask |= (2 << (i*2));
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2202      	movs	r2, #2
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	b21a      	sxth	r2, r3
 8002558:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800255c:	4313      	orrs	r3, r2
 800255e:	b21b      	sxth	r3, r3
 8002560:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value >>8) & 0xFF);
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	121a      	asrs	r2, r3, #8
 8002566:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256a:	1c59      	adds	r1, r3, #1
 800256c:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002576:	440b      	add	r3, r1
 8002578:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 800257c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800258e:	440b      	add	r3, r1
 8002590:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002594:	e03f      	b.n	8002616 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else
        {
        	plotMask |= (3 << (i*2));
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value>>24) & 0xFF);
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	0e1a      	lsrs	r2, r3, #24
 80025b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025b4:	1c59      	adds	r1, r3, #1
 80025b6:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c0:	440b      	add	r3, r1
 80025c2:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>16) & 0xFF);
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	141a      	asrs	r2, r3, #16
 80025ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ce:	1c59      	adds	r1, r3, #1
 80025d0:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025da:	440b      	add	r3, r1
 80025dc:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>8) & 0xFF);
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	121a      	asrs	r2, r3, #8
 80025e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025e8:	1c59      	adds	r1, r3, #1
 80025ea:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025f4:	440b      	add	r3, r1
 80025f6:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 80025fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800260c:	440b      	add	r3, r1
 800260e:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002612:	e000      	b.n	8002616 <_ZN7console10Controller12plotHandler_Ev+0x166>
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 8002614:	bf00      	nop
    for (int i=0;i<8;i++)
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	3301      	adds	r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
 800261c:	e759      	b.n	80024d2 <_ZN7console10Controller12plotHandler_Ev+0x22>
        }
    }

    buf[0] = ((plotMask>>8) & 0xFF);
 800261e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29b      	uxth	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	723b      	strb	r3, [r7, #8]
    buf[1] = (plotMask& 0xFF);
 8002628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262a:	b2db      	uxtb	r3, r3
 800262c:	727b      	strb	r3, [r7, #9]

    console::Driver::instance().sendPacket(PlotReceived,index,buf);
 800262e:	f7fe fd65 	bl	80010fc <_ZN7console6Driver8instanceEv>
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800263a:	2104      	movs	r1, #4
 800263c:	f7ff fc62 	bl	8001f04 <_ZN7console6Driver10sendPacketEthPKh>
 8002640:	e000      	b.n	8002644 <_ZN7console10Controller12plotHandler_Ev+0x194>
    if (plotReg_ == 0) return;
 8002642:	bf00      	nop
}
 8002644:	3738      	adds	r7, #56	; 0x38
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <_ZN4core5EventC1Eh>:
    Event(uint8_t index)
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
    {
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <_ZN4core5EventC1Eh+0x2c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
    	container_.index_ = index;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	711a      	strb	r2, [r3, #4]
    	container_.payload_ = nullptr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
    }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	08008920 	.word	0x08008920

0800267c <_ZN4core10EventQueueC1Ev>:
    EventQueue(){}
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <_ZN4core10EventQueueC1Ev+0x58>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	1d1a      	adds	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	1d1a      	adds	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1d1a      	adds	r2, r3, #4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	08008964 	.word	0x08008964

080026d8 <_ZN4core10EventQueue4nextEv>:
	inline bool next()
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
		if (inPtr_ == outPtr_) return false;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d101      	bne.n	80026f4 <_ZN4core10EventQueue4nextEv+0x1c>
 80026f0:	2300      	movs	r3, #0
 80026f2:	e01d      	b.n	8002730 <_ZN4core10EventQueue4nextEv+0x58>
        container_t container_ = pop_();
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f81c 	bl	8002738 <_ZN4core10EventQueue4pop_Ev>
        if (container_.index_ < poolSize_)
 8002700:	7b3a      	ldrb	r2, [r7, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8002708:	429a      	cmp	r2, r3
 800270a:	d20e      	bcs.n	800272a <_ZN4core10EventQueue4nextEv+0x52>
            Event* e = events_[container_.index_];
 800270c:	7b3b      	ldrb	r3, [r7, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271a:	617b      	str	r3, [r7, #20]
            e->execute();
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3308      	adds	r3, #8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6978      	ldr	r0, [r7, #20]
 8002726:	4798      	blx	r3
 8002728:	e001      	b.n	800272e <_ZN4core10EventQueue4nextEv+0x56>
        	Error_Handler();
 800272a:	f002 f879 	bl	8004820 <Error_Handler>
		return true;
 800272e:	2301      	movs	r3, #1
	}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_ZN4core10EventQueue4pop_Ev>:

    inline container_t pop_()
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    {
    	container_t ret = *(outPtr_);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800274e:	e883 0003 	stmia.w	r3, {r0, r1}
		outPtr_++;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002758:	f103 0208 	add.w	r2, r3, #8
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		if (outPtr_ == last_) outPtr_ = first_;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800276e:	429a      	cmp	r2, r3
 8002770:	d105      	bne.n	800277e <_ZN4core10EventQueue4pop_Ev+0x46>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		return ret;
 800277e:	bf00      	nop
    }
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>:
    container_t* outPtr_ = buffer_;
private:
    Event* events_[EVENT_POOL_SIZE];
    uint8_t poolSize_ = 0;

    uint8_t registerEvent_(Event* event)
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
    {
        events_[poolSize_] = event;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (poolSize_>= EVENT_POOL_SIZE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da01      	bge.n	80027ba <_ZN4core10EventQueue14registerEvent_EPNS_5EventE+0x2e>
        {
            /*TODO: warning here. Over Event Pool*/
        	Error_Handler();
 80027b6:	f002 f833 	bl	8004820 <Error_Handler>
        }
        return poolSize_++;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	b2d1      	uxtb	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	f882 1618 	strb.w	r1, [r2, #1560]	; 0x618
    }
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <_ZN4core5EventC1Ev>:
#include "engine.h"
#include <core/system.h>
#include <core/event.h>
#include <console/log.h>

core::Event::Event()
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <_ZN4core5EventC1Ev+0x3c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
{
    container_.index_ = core::Engine::instance().events().registerEvent_(this);
 80027e2:	f7ff f9bb 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff f9a2 	bl	8001b32 <_ZN4core6Engine6eventsEv>
 80027ee:	4603      	mov	r3, r0
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ffca 	bl	800278c <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	711a      	strb	r2, [r3, #4]
    container_.payload_ = nullptr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	08008920 	.word	0x08008920

08002814 <_ZN4core6EngineC1Ev>:

core::Engine::Engine(): Event(0)
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff13 	bl	800264c <_ZN4core5EventC1Eh>
 8002826:	4a18      	ldr	r2, [pc, #96]	; (8002888 <_ZN4core6EngineC1Ev+0x74>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	330c      	adds	r3, #12
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff23 	bl	800267c <_ZN4core10EventQueueC1Ev>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 61c6 	add.w	r1, r3, #1584	; 0x630
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9c1 2300 	strd	r2, r3, [r1]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f503 61c7 	add.w	r1, r3, #1592	; 0x638
 800285e:	f04f 32ff 	mov.w	r2, #4294967295
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	e9c1 2300 	strd	r2, r3, [r1]
{
    events_.registerEvent_(this);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	330c      	adds	r3, #12
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff8a 	bl	800278c <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
    systemInit();
 8002878:	f000 f936 	bl	8002ae8 <_Z10systemInitv>
}
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	08008974 	.word	0x08008974

0800288c <_ZN4core6Engine3runEv>:

void core::Engine::run()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    while (true)
    {
        if (events_.next()) continue;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	330c      	adds	r3, #12
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff1d 	bl	80026d8 <_ZN4core10EventQueue4nextEv>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <_ZN4core6Engine3runEv+0x1c>
        WAIT_FOR_INTERUPT;
 80028a4:	bf30      	wfi
 80028a6:	e7f5      	b.n	8002894 <_ZN4core6Engine3runEv+0x8>
        if (events_.next()) continue;
 80028a8:	bf00      	nop
 80028aa:	e7f3      	b.n	8002894 <_ZN4core6Engine3runEv+0x8>

080028ac <_ZN4core6Engine13registerTask_EPNS_4TaskE>:
    }
}

void core::Engine::registerTask_(Task* task)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    task->next_ = tasks_;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 2628 	ldr.w	r2, [r3, #1576]	; 0x628
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	601a      	str	r2, [r3, #0]
    tasks_ = task;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_ZN4core6Engine10startTask_EPNS_4TaskE>:

void core::Engine::startTask_(Task* task)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
    {
        if (it == task)
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d116      	bne.n	8002926 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x52>
        {
            if (prev == nullptr) tasks_ = it->next_;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <_ZN4core6Engine10startTask_EPNS_4TaskE+0x36>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 8002908:	e003      	b.n	8002912 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
            task->next_ = activeTasks_;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]
            activeTasks_ = task;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
            break;
 8002924:	e005      	b.n	8002932 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
        }
        prev = it;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	e7db      	b.n	80028ea <_ZN4core6Engine10startTask_EPNS_4TaskE+0x16>
    }
    if (nextTick_ > task->nextTick_) nextTick_ = task->nextTick_;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002942:	4299      	cmp	r1, r3
 8002944:	bf08      	it	eq
 8002946:	4290      	cmpeq	r0, r2
 8002948:	d207      	bcs.n	800295a <_ZN4core6Engine10startTask_EPNS_4TaskE+0x86>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 8002956:	e9c1 2300 	strd	r2, r3, [r1]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_ZN4core6Engine9stopTask_EPNS_4TaskE>:

void core::Engine::stopTask_(Task* task)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d021      	beq.n	80029c6 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
    {
        if (it == task)
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d117      	bne.n	80029ba <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x54>
        {
            if (prev == nullptr) activeTasks_ = it->next_;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x36>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
 800299a:	e003      	b.n	80029a4 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]
            task->next_ = tasks_;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 2628 	ldr.w	r2, [r3, #1576]	; 0x628
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
            tasks_ = task;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            break;
 80029b6:	bf00      	nop
        }
        prev = it;
    }
}
 80029b8:	e005      	b.n	80029c6 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
        prev = it;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	e7da      	b.n	800297c <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x16>
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_ZN4core6Engine7executeEv>:
    auto timeout = tickCount_ + t;
    while (tickCount_ < timeout){NO_OPERATION;}
}

void core::Engine::execute()
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
    uint64_t min = LAST_TICK;
 80029da:	f04f 32ff 	mov.w	r2, #4294967295
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    Task* it = activeTasks_;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 80029ec:	60fb      	str	r3, [r7, #12]
    Task* next;
    while (it!=nullptr)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d027      	beq.n	8002a44 <_ZN4core6Engine7executeEv+0x72>
    {
        next = it->next_;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60bb      	str	r3, [r7, #8]
        if (tickCount_ >= it->nextTick_) it->run_();
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8002a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a0a:	4299      	cmp	r1, r3
 8002a0c:	bf08      	it	eq
 8002a0e:	4290      	cmpeq	r0, r2
 8002a10:	bf2c      	ite	cs
 8002a12:	2301      	movcs	r3, #1
 8002a14:	2300      	movcc	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <_ZN4core6Engine7executeEv+0x50>
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f8b9 	bl	8002b94 <_ZN4core4Task4run_Ev>
        if (min > it->nextTick_) min = it->nextTick_;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	bf08      	it	eq
 8002a30:	4290      	cmpeq	r0, r2
 8002a32:	d204      	bcs.n	8002a3e <_ZN4core6Engine7executeEv+0x6c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        it = next;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	60fb      	str	r3, [r7, #12]
    while (it!=nullptr)
 8002a42:	e7d4      	b.n	80029ee <_ZN4core6Engine7executeEv+0x1c>
    }
    nextTick_ = min;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f503 61c7 	add.w	r1, r3, #1592	; 0x638
 8002a4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <LL_SYSTICK_EnableIT+0x1c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <LL_SYSTICK_EnableIT+0x1c>)
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <_ZN4core6Engine4tickEv>:
private:
    friend class Task;
};

inline void core::Engine::tick()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    if (++tickCount_ >= nextTick_) events_.post(container_);
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8002a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a8e:	1c42      	adds	r2, r0, #1
 8002a90:	f141 0300 	adc.w	r3, r1, #0
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8002a9a:	e9c1 2300 	strd	r2, r3, [r1]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 8002aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	bf08      	it	eq
 8002aac:	4282      	cmpeq	r2, r0
 8002aae:	bf2c      	ite	cs
 8002ab0:	2301      	movcs	r3, #1
 8002ab2:	2300      	movcc	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <_ZN4core6Engine4tickEv+0x50>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f103 000c 	add.w	r0, r3, #12
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ac8:	f7fe ffa9 	bl	8001a1e <_ZN4core10EventQueue4postENS_9ContainerE>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <SysTick_Handler>:
#include "gpio.h"

extern "C" void SystemClock_Config(void);

extern "C" void SysTick_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	core::Engine::instance().tick();
 8002ad8:	f7ff f840 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffcc 	bl	8002a7c <_ZN4core6Engine4tickEv>
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_Z10systemInitv>:

void systemInit()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	HAL_Init();
 8002aec:	f002 f91a 	bl	8004d24 <HAL_Init>
	SystemClock_Config();
 8002af0:	f001 fe2e 	bl	8004750 <SystemClock_Config>
	MX_GPIO_Init();
 8002af4:	f001 fe02 	bl	80046fc <MX_GPIO_Init>
	LL_SYSTICK_EnableIT();
 8002af8:	f7ff ffb0 	bl	8002a5c <LL_SYSTICK_EnableIT>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>:
#include <core/task.h>
#include <core/engine.h>

core::Task::Task(Component* component, Handler handler): component_(component), handler_(handler)
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	4639      	mov	r1, r7
 8002b0c:	e881 000c 	stmia.w	r1, {r2, r3}
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3318      	adds	r3, #24
 8002b26:	463a      	mov	r2, r7
 8002b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b2c:	e883 0003 	stmia.w	r3, {r0, r1}
{
    core::Engine::instance().registerTask_(this);
 8002b30:	f7ff f814 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8002b34:	4603      	mov	r3, r0
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff feb7 	bl	80028ac <_ZN4core6Engine13registerTask_EPNS_4TaskE>
}
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZN4core4Task5startEml>:

void core::Task::start(uint32_t interval, int32_t loop)
{
 8002b48:	b5b0      	push	{r4, r5, r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
    core::Engine& engine = core::Engine::instance();
 8002b54:	f7ff f802 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8002b58:	6178      	str	r0, [r7, #20]
    this->interval_ = interval;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	605a      	str	r2, [r3, #4]
    this->nextTick_ = engine.tickCount_ + interval;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8002b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	1884      	adds	r4, r0, r2
 8002b74:	eb41 0503 	adc.w	r5, r1, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	e9c3 4502 	strd	r4, r5, [r3, #8]
    this->loop_ = loop;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	611a      	str	r2, [r3, #16]
    engine.startTask_(this);
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff fea4 	bl	80028d4 <_ZN4core6Engine10startTask_EPNS_4TaskE>
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdb0      	pop	{r4, r5, r7, pc}

08002b94 <_ZN4core4Task4run_Ev>:
    core::Engine::instance().stopTask_(this);
    this->nextTick_ = LAST_TICK - 1;
}

void core::Task::run_()
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    if (--loop_ == 0)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <_ZN4core4Task4run_Ev+0x42>
    {
        core::Engine::instance().stopTask_(this);
 8002bb8:	f7fe ffd0 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fed0 	bl	8002966 <_ZN4core6Engine9stopTask_EPNS_4TaskE>
        this->nextTick_ = LAST_TICK - 1;
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f06f 0201 	mvn.w	r2, #1
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bd4:	e015      	b.n	8002c02 <_ZN4core4Task4run_Ev+0x6e>
    }
    else
    {
        nextTick_ += interval_;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	1884      	adds	r4, r0, r2
 8002be8:	eb41 0503 	adc.w	r5, r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	e9c3 4502 	strd	r4, r5, [r3, #8]
        if (loop_ < 0) loop_ = -1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	da03      	bge.n	8002c02 <_ZN4core4Task4run_Ev+0x6e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	611a      	str	r2, [r3, #16]
    }

    (component_->*handler_)();
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	69d2      	ldr	r2, [r2, #28]
 8002c0a:	1052      	asrs	r2, r2, #1
 8002c0c:	1899      	adds	r1, r3, r2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <_ZN4core4Task4run_Ev+0x8c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	e00a      	b.n	8002c36 <_ZN4core4Task4run_Ev+0xa2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69d2      	ldr	r2, [r2, #28]
 8002c28:	1052      	asrs	r2, r2, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6992      	ldr	r2, [r2, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4608      	mov	r0, r1
 8002c38:	4798      	blx	r3
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}

08002c42 <_ZN3osc4Data5resetEt>:
    uint16_t lastVal;
    uint8_t buffer[1200];
    uint16_t index;
    uint16_t countIndex;

    void reset(uint16_t v)
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	807b      	strh	r3, [r7, #2]
    {
        countIndex = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
        buffer[0] = 1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	711a      	strb	r2, [r3, #4]
        buffer[1] = ((v>>8) & 0xFF);
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	715a      	strb	r2, [r3, #5]
        buffer[2] = (v & 0xFF);
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	719a      	strb	r2, [r3, #6]
        index = 3;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
    }
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN3osc4Data3addEt>:

    void add(uint16_t v)
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
    {
        int16_t d = v - lastVal;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	885b      	ldrh	r3, [r3, #2]
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	81fb      	strh	r3, [r7, #14]
        if ((d > 127) || (d < -127) || (buffer[countIndex] > 80))
 8002c9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca2:	dc0d      	bgt.n	8002cc0 <_ZN3osc4Data3addEt+0x3c>
 8002ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8002cac:	db08      	blt.n	8002cc0 <_ZN3osc4Data3addEt+0x3c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d931      	bls.n	8002d24 <_ZN3osc4Data3addEt+0xa0>
        {
            countIndex = index;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            buffer[index++] = 1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	b291      	uxth	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	711a      	strb	r2, [r3, #4]
            buffer[index++] = ((v >> 8)& 0xFF);
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	b298      	uxth	r0, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	b291      	uxth	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	b2c2      	uxtb	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	440b      	add	r3, r1
 8002d04:	711a      	strb	r2, [r3, #4]
            buffer[index++] = (v & 0xFF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	b291      	uxth	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002d16:	4619      	mov	r1, r3
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	440b      	add	r3, r1
 8002d20:	711a      	strb	r2, [r3, #4]
 8002d22:	e01a      	b.n	8002d5a <_ZN3osc4Data3addEt+0xd6>
        }
        else
        {
            buffer[countIndex]++;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	441a      	add	r2, r3
 8002d2e:	7912      	ldrb	r2, [r2, #4]
 8002d30:	3201      	adds	r2, #1
 8002d32:	b2d1      	uxtb	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	460a      	mov	r2, r1
 8002d3a:	711a      	strb	r2, [r3, #4]
            buffer[index++] = d;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	b291      	uxth	r1, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	440b      	add	r3, r1
 8002d56:	711a      	strb	r2, [r3, #4]
        }
    }
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_ZN3osc4Data5flushEv>:

    bool flush()
 8002d66:	b5b0      	push	{r4, r5, r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	6078      	str	r0, [r7, #4]
    {
        uint8_t count = buffer[index];
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	73fb      	strb	r3, [r7, #15]
        if (console::Controller::instance().sendOSC(channel, count+1, countIndex, buffer+index+1))
 8002d7e:	f7fe ff23 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8002d82:	4605      	mov	r5, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7819      	ldrb	r1, [r3, #0]
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2d8      	uxtb	r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 44b6 	ldrh.w	r4, [r3, #1206]	; 0x4b6
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4623      	mov	r3, r4
 8002da6:	4602      	mov	r2, r0
 8002da8:	4628      	mov	r0, r5
 8002daa:	f7fe faed 	bl	8001388 <_ZN7console10Controller7sendOSCEhhtPKh>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02c      	beq.n	8002e0e <_ZN3osc4Data5flushEv+0xa8>
        {
            countIndex += count;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            index += count+2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
            if ((countIndex > 999) || (index > 1198))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dea:	d206      	bcs.n	8002dfa <_ZN3osc4Data5flushEv+0x94>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002df2:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d909      	bls.n	8002e0e <_ZN3osc4Data5flushEv+0xa8>
            {
                index = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
                countIndex = 0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
                return true;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <_ZN3osc4Data5flushEv+0xaa>
            }
        }
        return false;
 8002e0e:	2300      	movs	r3, #0
    }
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}

08002e18 <_ZN3osc4Data12prepareFlushEv>:
    void prepareFlush()
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    {
        index = 0;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
        countIndex = 0;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
    }
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_ZN3osc4Quad5idle_Etttt>:
        c2_.lastVal = v2;
        c3_.lastVal = v3;
        c4_.lastVal = v4;
    }
private:
    void idle_(uint16_t, uint16_t, uint16_t v3, uint16_t v4){}
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <_ZN3osc4QuadC1Ehttt>:
#include "quad.h"
#include <console/controller.h>

osc::Quad::Quad(uint8_t c1, uint16_t c2, uint16_t c3, uint16_t c4)
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	72fb      	strb	r3, [r7, #11]
 8002e76:	460b      	mov	r3, r1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f8af 	bl	8000fe4 <_ZN4core9ComponentC1Ev>
 8002e86:	4a34      	ldr	r2, [pc, #208]	; (8002f58 <_ZN3osc4QuadC1Ehttt+0xf4>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <_ZN3osc4QuadC1Ehttt+0xf8>)
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9e:	819a      	strh	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	81da      	strh	r2, [r3, #14]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eac:	821a      	strh	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002eb4:	3312      	adds	r3, #18
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 5097 	add.w	r0, r3, #4832	; 0x12e0
 8002ec0:	3014      	adds	r0, #20
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <_ZN3osc4QuadC1Ehttt+0xfc>)
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	cb0c      	ldmia	r3, {r2, r3}
 8002ed2:	f7fe f897 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f503 5098 	add.w	r0, r3, #4864	; 0x1300
 8002edc:	300c      	adds	r0, #12
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <_ZN3osc4QuadC1Ehttt+0x100>)
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	cb0c      	ldmia	r3, {r2, r3}
 8002eee:	f7fe f889 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 5099 	add.w	r0, r3, #4896	; 0x1320
 8002ef8:	3004      	adds	r0, #4
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <_ZN3osc4QuadC1Ehttt+0x104>)
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	f107 0320 	add.w	r3, r7, #32
 8002f08:	cb0c      	ldmia	r3, {r2, r3}
 8002f0a:	f7fe f87b 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f503 5099 	add.w	r0, r3, #4896	; 0x1320
 8002f14:	301c      	adds	r0, #28
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <_ZN3osc4QuadC1Ehttt+0x108>)
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f24:	cb0c      	ldmia	r3, {r2, r3}
 8002f26:	f7fe f86d 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
{
    c1_.channel = c1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	7afa      	ldrb	r2, [r7, #11]
 8002f2e:	749a      	strb	r2, [r3, #18]
    c2_.channel = c2;
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
    c3_.channel = c3;
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
    c4_.channel = c4;
 8002f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f883 2e3a 	strb.w	r2, [r3, #3642]	; 0xe3a
}
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	3730      	adds	r7, #48	; 0x30
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	08008988 	.word	0x08008988
 8002f5c:	08002f71 	.word	0x08002f71
 8002f60:	0800328d 	.word	0x0800328d
 8002f64:	080032cb 	.word	0x080032cb
 8002f68:	0800330b 	.word	0x0800330b
 8002f6c:	0800334d 	.word	0x0800334d

08002f70 <_ZN3osc4Quad13thresholding_Etttt>:

void osc::Quad::thresholding_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	817b      	strh	r3, [r7, #10]
 8002f82:	460b      	mov	r3, r1
 8002f84:	813b      	strh	r3, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
    if (threshold_ > 0)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	dd0c      	ble.n	8002fae <_ZN3osc4Quad13thresholding_Etttt+0x3e>
    {
        total_ = 0;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002f9a:	3312      	adds	r3, #18
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
        state_ = &osc::Quad::probing_;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	; (800304c <_ZN3osc4Quad13thresholding_Etttt+0xdc>)
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
        return;
 8002fac:	e04b      	b.n	8003046 <_ZN3osc4Quad13thresholding_Etttt+0xd6>
    }

    if (v1 < min_) min_ = v1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	899b      	ldrh	r3, [r3, #12]
 8002fb2:	897a      	ldrh	r2, [r7, #10]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d202      	bcs.n	8002fbe <_ZN3osc4Quad13thresholding_Etttt+0x4e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	897a      	ldrh	r2, [r7, #10]
 8002fbc:	819a      	strh	r2, [r3, #12]
    if (v1 > max_) max_ = v1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	89db      	ldrh	r3, [r3, #14]
 8002fc2:	897a      	ldrh	r2, [r7, #10]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d902      	bls.n	8002fce <_ZN3osc4Quad13thresholding_Etttt+0x5e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	897a      	ldrh	r2, [r7, #10]
 8002fcc:	81da      	strh	r2, [r3, #14]
    if (total_++ > 1000)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fd4:	3312      	adds	r3, #18
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	1c53      	adds	r3, r2, #1
 8002fda:	b299      	uxth	r1, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fe2:	3312      	adds	r3, #18
 8002fe4:	8019      	strh	r1, [r3, #0]
 8002fe6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002fea:	bf8c      	ite	hi
 8002fec:	2301      	movhi	r3, #1
 8002fee:	2300      	movls	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d027      	beq.n	8003046 <_ZN3osc4Quad13thresholding_Etttt+0xd6>
    {
        threshold_ = (min_+max_)/2;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	899b      	ldrh	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	89db      	ldrh	r3, [r3, #14]
 8003000:	4413      	add	r3, r2
 8003002:	0fda      	lsrs	r2, r3, #31
 8003004:	4413      	add	r3, r2
 8003006:	105b      	asrs	r3, r3, #1
 8003008:	b21a      	sxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	821a      	strh	r2, [r3, #16]
        min_ = 65535;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003014:	819a      	strh	r2, [r3, #12]
        max_ = 0;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	81da      	strh	r2, [r3, #14]
        total_ = 0;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003022:	3312      	adds	r3, #18
 8003024:	2200      	movs	r2, #0
 8003026:	801a      	strh	r2, [r3, #0]
        console::Controller::instance().printf("Auto detect threshold:%d", threshold_);
 8003028:	f7fe fdce 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003032:	461a      	mov	r2, r3
 8003034:	4906      	ldr	r1, [pc, #24]	; (8003050 <_ZN3osc4Quad13thresholding_Etttt+0xe0>)
 8003036:	f7fe fa0a 	bl	800144e <_ZN7console10Controller6printfEPKcz>
        state_ = &osc::Quad::probing_;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <_ZN3osc4Quad13thresholding_Etttt+0xdc>)
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
    }
}
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08003055 	.word	0x08003055
 8003050:	08008860 	.word	0x08008860

08003054 <_ZN3osc4Quad8probing_Etttt>:

void osc::Quad::probing_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	460b      	mov	r3, r1
 8003068:	813b      	strh	r3, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
    if (++total_ > 1000)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003074:	3312      	adds	r3, #18
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003082:	3312      	adds	r3, #18
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800308c:	3312      	adds	r3, #18
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003094:	bf8c      	ite	hi
 8003096:	2301      	movhi	r3, #1
 8003098:	2300      	movls	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <_ZN3osc4Quad8probing_Etttt+0x6c>
    {
        total_ = 0;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80030a6:	3312      	adds	r3, #18
 80030a8:	2200      	movs	r2, #0
 80030aa:	801a      	strh	r2, [r3, #0]
        threshold_ = -1;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b2:	821a      	strh	r2, [r3, #16]
        state_ = &osc::Quad::thresholding_;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <_ZN3osc4Quad8probing_Etttt+0xa0>)
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    }

    if ((c1_.lastVal < threshold_) && (v1 >= threshold_))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8a9b      	ldrh	r3, [r3, #20]
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	da0b      	bge.n	80030e8 <_ZN3osc4Quad8probing_Etttt+0x94>
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80030d8:	4293      	cmp	r3, r2
 80030da:	db05      	blt.n	80030e8 <_ZN3osc4Quad8probing_Etttt+0x94>
    {
        state_ = &osc::Quad::first_;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <_ZN3osc4Quad8probing_Etttt+0xa4>)
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
    }
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	08002f71 	.word	0x08002f71
 80030f8:	080030fd 	.word	0x080030fd

080030fc <_ZN3osc4Quad6first_Etttt>:

void osc::Quad::first_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	460b      	mov	r3, r1
 8003110:	813b      	strh	r3, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
    c1_.reset(v1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3312      	adds	r3, #18
 800311a:	897a      	ldrh	r2, [r7, #10]
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fd8f 	bl	8002c42 <_ZN3osc4Data5resetEt>
    c2_.reset(v2);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 800312a:	893a      	ldrh	r2, [r7, #8]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fd87 	bl	8002c42 <_ZN3osc4Data5resetEt>
    c3_.reset(v3);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f603 1382 	addw	r3, r3, #2434	; 0x982
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fd7f 	bl	8002c42 <_ZN3osc4Data5resetEt>
    c4_.reset(v4);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 800314a:	8b3a      	ldrh	r2, [r7, #24]
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fd77 	bl	8002c42 <_ZN3osc4Data5resetEt>
    total_ = 1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800315a:	3312      	adds	r3, #18
 800315c:	2201      	movs	r2, #1
 800315e:	801a      	strh	r2, [r3, #0]
    state_ = &osc::Quad::adding_;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <_ZN3osc4Quad6first_Etttt+0x78>)
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08003179 	.word	0x08003179

08003178 <_ZN3osc4Quad7adding_Etttt>:

void osc::Quad::adding_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	4603      	mov	r3, r0
 8003188:	817b      	strh	r3, [r7, #10]
 800318a:	460b      	mov	r3, r1
 800318c:	813b      	strh	r3, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
    c1_.add(v1);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3312      	adds	r3, #18
 8003196:	897a      	ldrh	r2, [r7, #10]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fd72 	bl	8002c84 <_ZN3osc4Data3addEt>
    c2_.add(v2);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80031a6:	893a      	ldrh	r2, [r7, #8]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fd6a 	bl	8002c84 <_ZN3osc4Data3addEt>
    c3_.add(v3);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f603 1382 	addw	r3, r3, #2434	; 0x982
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fd62 	bl	8002c84 <_ZN3osc4Data3addEt>
    c4_.add(v4);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 80031c6:	8b3a      	ldrh	r2, [r7, #24]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fd5a 	bl	8002c84 <_ZN3osc4Data3addEt>

    total_++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031d6:	3312      	adds	r3, #18
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031e4:	3312      	adds	r3, #18
 80031e6:	801a      	strh	r2, [r3, #0]
    if ((total_ > 1000) || (c1_.index > 1199) || (c2_.index > 1199)|| (c3_.index > 1199)|| (c4_.index > 1199))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031ee:	3312      	adds	r3, #18
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f6:	d819      	bhi.n	800322c <_ZN3osc4Quad7adding_Etttt+0xb4>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 80031fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003202:	d213      	bcs.n	800322c <_ZN3osc4Quad7adding_Etttt+0xb4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 397e 	ldrh.w	r3, [r3, #2430]	; 0x97e
 800320a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800320e:	d20d      	bcs.n	800322c <_ZN3osc4Quad7adding_Etttt+0xb4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f8b3 3e36 	ldrh.w	r3, [r3, #3638]	; 0xe36
 8003216:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800321a:	d207      	bcs.n	800322c <_ZN3osc4Quad7adding_Etttt+0xb4>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003222:	330e      	adds	r3, #14
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800322a:	d329      	bcc.n	8003280 <_ZN3osc4Quad7adding_Etttt+0x108>
    {
        state_ = &osc::Quad::idle_;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <_ZN3osc4Quad7adding_Etttt+0x110>)
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
        total_ = 0;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800323e:	3312      	adds	r3, #18
 8003240:	2200      	movs	r2, #0
 8003242:	801a      	strh	r2, [r3, #0]
        c1_.prepareFlush();
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3312      	adds	r3, #18
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fde5 	bl	8002e18 <_ZN3osc4Data12prepareFlushEv>
        c2_.prepareFlush();
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fddf 	bl	8002e18 <_ZN3osc4Data12prepareFlushEv>
        c3_.prepareFlush();
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f603 1382 	addw	r3, r3, #2434	; 0x982
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fdd9 	bl	8002e18 <_ZN3osc4Data12prepareFlushEv>
        c4_.prepareFlush();
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fdd3 	bl	8002e18 <_ZN3osc4Data12prepareFlushEv>
        c1FlushEvent_.post();
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003278:	3314      	adds	r3, #20
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fcfe 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
    }
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	08002e3d 	.word	0x08002e3d

0800328c <_ZN3osc4Quad8c1Flush_Ev>:

void osc::Quad::c1Flush_()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    if (c1_.flush())
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3312      	adds	r3, #18
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fd64 	bl	8002d66 <_ZN3osc4Data5flushEv>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <_ZN3osc4Quad8c1Flush_Ev+0x28>
    {
        c2FlushEvent_.post();
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80032aa:	330c      	adds	r3, #12
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fce5 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c1FlushEvent_.post();
    }
}
 80032b2:	e006      	b.n	80032c2 <_ZN3osc4Quad8c1Flush_Ev+0x36>
        c1FlushEvent_.post();
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80032ba:	3314      	adds	r3, #20
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fcdd 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZN3osc4Quad8c2Flush_Ev>:

void osc::Quad::c2Flush_()
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
    if (c2_.flush())
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fd44 	bl	8002d66 <_ZN3osc4Data5flushEv>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <_ZN3osc4Quad8c2Flush_Ev+0x2a>
    {
        c3FlushEvent_.post();
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80032ea:	3304      	adds	r3, #4
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fcc5 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c2FlushEvent_.post();
    }
}
 80032f2:	e006      	b.n	8003302 <_ZN3osc4Quad8c2Flush_Ev+0x38>
        c2FlushEvent_.post();
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80032fa:	330c      	adds	r3, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fcbd 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_ZN3osc4Quad8c3Flush_Ev>:

void osc::Quad::c3Flush_()
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
    if (c3_.flush())
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f603 1382 	addw	r3, r3, #2434	; 0x982
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fd24 	bl	8002d66 <_ZN3osc4Data5flushEv>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <_ZN3osc4Quad8c3Flush_Ev+0x2a>
    {
        c4FlushEvent_.post();
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800332a:	331c      	adds	r3, #28
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fca5 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c3FlushEvent_.post();
    }
}
 8003332:	e006      	b.n	8003342 <_ZN3osc4Quad8c3Flush_Ev+0x38>
        c3FlushEvent_.post();
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800333a:	3304      	adds	r3, #4
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fc9d 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <_ZN3osc4Quad8c4Flush_Ev>:

void osc::Quad::c4Flush_()
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    if (c4_.flush())
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fd03 	bl	8002d66 <_ZN3osc4Data5flushEv>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <_ZN3osc4Quad8c4Flush_Ev+0x28>
    {
        state_ = &osc::Quad::probing_;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <_ZN3osc4Quad8c4Flush_Ev+0x40>)
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
    }
    else
    {
        c4FlushEvent_.post();
    }
}
 8003372:	e006      	b.n	8003382 <_ZN3osc4Quad8c4Flush_Ev+0x36>
        c4FlushEvent_.post();
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800337a:	331c      	adds	r3, #28
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fc7d 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	08003055 	.word	0x08003055

08003390 <_ZN3osc4QuadD1Ev>:
class Quad: public core::Component
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <_ZN3osc4QuadD1Ev+0x58>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80033a4:	331c      	adds	r3, #28
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fa22 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fa1b 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80033c0:	330c      	adds	r3, #12
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fa14 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80033ce:	3314      	adds	r3, #20
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fa0d 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fd97 	bl	8000f0c <_ZN4core9ComponentD1Ev>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08008988 	.word	0x08008988

080033ec <_ZN3osc4QuadD0Ev>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffcb 	bl	8003390 <_ZN3osc4QuadD1Ev>
 80033fa:	f241 3154 	movw	r1, #4948	; 0x1354
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f002 fef4 	bl	80061ec <_ZdlPvj>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <_ZN2ex4Test7StartUpEv>:
#include <console/log.h>
#include <test/example/example.h>

STATE_BODY(ex::Test::StartUp)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("START UP");
	}
	TRANSITION_(Event::TIMEOUT, Running){}
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	681c      	ldr	r4, [r3, #0]
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <_ZN2ex4Test7StartUpEv+0x2c>)
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	cb0c      	ldmia	r3, {r2, r3}
 8003430:	2100      	movs	r1, #0
 8003432:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT START UP");
//	}
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	08003441 	.word	0x08003441

08003440 <_ZN2ex4Test7RunningEv>:

STATE_BODY(ex::Test::Running)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("RUNNING");
	}
	TRANSITION_(Event::TIMEOUT, Pause){}
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	681c      	ldr	r4, [r3, #0]
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <_ZN2ex4Test7RunningEv+0x2c>)
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	cb0c      	ldmia	r3, {r2, r3}
 8003460:	2100      	movs	r1, #0
 8003462:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT RUNNING");
//	}
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	08003471 	.word	0x08003471

08003470 <_ZN2ex4Test5PauseEv>:

STATE_BODY(ex::Test::Pause)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("PAUSE");
	}
	TRANSITION_(Event::TIMEOUT, StartUp){}
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <_ZN2ex4Test5PauseEv+0x2c>)
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	f107 0308 	add.w	r3, r7, #8
 800348e:	cb0c      	ldmia	r3, {r2, r3}
 8003490:	2100      	movs	r1, #0
 8003492:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT PAUSE");
//	}
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	08003411 	.word	0x08003411

080034a0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4013      	ands	r3, r2
 80034b6:	041a      	lsls	r2, r3, #16
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	400b      	ands	r3, r1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_ZN4core13SimpleMachine9postEventEh>:
    void postEvent(uint8_t event)
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]
        postEvent_.post(event);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3318      	adds	r3, #24
 80034e2:	1cfa      	adds	r2, r7, #3
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe ff5c 	bl	80023a4 <_ZN4core10FixedEventIhE4postERKh>
    }
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE>:
    bool check_(uint8_t input, State state) override
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	4608      	mov	r0, r1
 80034fe:	4639      	mov	r1, r7
 8003500:	e881 000c 	stmia.w	r1, {r2, r3}
 8003504:	4603      	mov	r3, r0
 8003506:	72fb      	strb	r3, [r7, #11]
        if (nextEvent_ != input) return false;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	7d1b      	ldrb	r3, [r3, #20]
 800350c:	7afa      	ldrb	r2, [r7, #11]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x22>
 8003512:	2300      	movs	r3, #0
 8003514:	e007      	b.n	8003526 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x32>
        nextState_ = state;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3304      	adds	r3, #4
 800351a:	463a      	mov	r2, r7
 800351c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003520:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
 8003524:	2301      	movs	r3, #1
    }
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	e883 0006 	stmia.w	r3, {r1, r2}
        currentState_ = s;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	330c      	adds	r3, #12
 8003544:	1d3a      	adds	r2, r7, #4
 8003546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800354a:	e883 0003 	stmia.w	r3, {r0, r1}
        nextEvent_ = ENTER;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22fe      	movs	r2, #254	; 0xfe
 8003552:	751a      	strb	r2, [r3, #20]
        (this->*currentState_)();
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	6912      	ldr	r2, [r2, #16]
 800355a:	1052      	asrs	r2, r2, #1
 800355c:	1899      	adds	r1, r3, r2
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x3e>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	e009      	b.n	8003584 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x52>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6912      	ldr	r2, [r2, #16]
 8003576:	1052      	asrs	r2, r2, #1
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	4413      	add	r3, r2
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4608      	mov	r0, r1
 8003586:	4798      	blx	r3
    }
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>:
{

class EmptySignalOne
{
public:
    void connect(EmptyEvent* event){this->event_ = event;}
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_ZN4core14EmptySignalOne4emitEv>:
    void disconnect(){event_ = nullptr;}
    inline EventStatus emit()
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    {
    	if (event_ != nullptr) return event_->post();
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <_ZN4core14EmptySignalOne4emitEv+0x1e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fb5b 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	e000      	b.n	80035cc <_ZN4core14EmptySignalOne4emitEv+0x20>
    	return EventStatus::POST_FAILED;
 80035ca:	2300      	movs	r3, #0
    }
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZN3osc4Quad4plotEtttt>:
{
public:
    Quad(uint8_t c1, uint16_t c2, uint16_t c3, uint16_t c4);
    typedef void (osc::Quad::*State) (uint16_t, uint16_t, uint16_t, uint16_t);

    inline void plot(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
 80035d4:	b5b0      	push	{r4, r5, r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
    {
        (this->*state_)(v1, v2, v3, v4);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	105b      	asrs	r3, r3, #1
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1898      	adds	r0, r3, r2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <_ZN3osc4Quad4plotEtttt+0x4a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	105b      	asrs	r3, r3, #1
 800360c:	461a      	mov	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	4413      	add	r3, r2
 800361a:	681c      	ldr	r4, [r3, #0]
 800361c:	e001      	b.n	8003622 <_ZN3osc4Quad4plotEtttt+0x4e>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685c      	ldr	r4, [r3, #4]
 8003622:	88fd      	ldrh	r5, [r7, #6]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	8c3b      	ldrh	r3, [r7, #32]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	462b      	mov	r3, r5
 800362e:	47a0      	blx	r4
        c1_.lastVal = v1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	897a      	ldrh	r2, [r7, #10]
 8003634:	829a      	strh	r2, [r3, #20]
        c2_.lastVal = v2;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	893a      	ldrh	r2, [r7, #8]
 800363a:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
        c3_.lastVal = v3;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	f8a3 2984 	strh.w	r2, [r3, #2436]	; 0x984
        c4_.lastVal = v4;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8c3a      	ldrh	r2, [r7, #32]
 800364a:	f8a3 2e3c 	strh.w	r2, [r3, #3644]	; 0xe3c
    }
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003658 <_ZN4core13SimpleMachineD1Ev>:
class SimpleMachine: public core::Machine
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4a08      	ldr	r2, [pc, #32]	; (8003684 <_ZN4core13SimpleMachineD1Ev+0x2c>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3318      	adds	r3, #24
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe f89e 	bl	80017ac <_ZN4core10FixedEventIhED1Ev>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fd70 	bl	8001158 <_ZN4core7MachineD1Ev>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	080089e0 	.word	0x080089e0

08003688 <_ZN4core13SimpleMachineD0Ev>:
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ffe1 	bl	8003658 <_ZN4core13SimpleMachineD1Ev>
 8003696:	2134      	movs	r1, #52	; 0x34
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f002 fda7 	bl	80061ec <_ZdlPvj>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZN2ex4TestD1Ev>:
#include <core/machine.h>
#include <core/signal.h>
#include <console/controller.h>
#include <oscilloscope/quad.h>

MACHINE(ex, Test)
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <_ZN2ex4TestD1Ev+0x58>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fb9b 	bl	8003df8 <_ZN4core10FixedEventItED1Ev>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80036c8:	3308      	adds	r3, #8
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe f890 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	33cc      	adds	r3, #204	; 0xcc
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe5b 	bl	8003390 <_ZN3osc4QuadD1Ev>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	33b0      	adds	r3, #176	; 0xb0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fbac 	bl	8003e3c <_ZN4core10FixedEventImED1Ev>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3398      	adds	r3, #152	; 0x98
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe f881 	bl	80017f0 <_ZN4core10EmptyEventD1Ev>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ffb1 	bl	8003658 <_ZN4core13SimpleMachineD1Ev>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	0800899c 	.word	0x0800899c

08003704 <_ZN2ex4TestD0Ev>:
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ffcb 	bl	80036a8 <_ZN2ex4TestD1Ev>
 8003712:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f002 fd68 	bl	80061ec <_ZdlPvj>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_ZN2ex4Test8quadPlotEtttt>:
	M_TASK(plot)
	M_TASK(oscilloscope)
	M_EVENT(emptyEvent)
	M_EVENT(fixedEvent, uint32_t, 1)

	O_QUAD(quad, 2,3,4,5)
 8003726:	b590      	push	{r4, r7, lr}
 8003728:	b087      	sub	sp, #28
 800372a:	af02      	add	r7, sp, #8
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	4608      	mov	r0, r1
 8003730:	4611      	mov	r1, r2
 8003732:	461a      	mov	r2, r3
 8003734:	4603      	mov	r3, r0
 8003736:	817b      	strh	r3, [r7, #10]
 8003738:	460b      	mov	r3, r1
 800373a:	813b      	strh	r3, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8003746:	88fc      	ldrh	r4, [r7, #6]
 8003748:	893a      	ldrh	r2, [r7, #8]
 800374a:	8979      	ldrh	r1, [r7, #10]
 800374c:	8c3b      	ldrh	r3, [r7, #32]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4623      	mov	r3, r4
 8003752:	f7ff ff3f 	bl	80035d4 <_ZN3osc4Quad4plotEtttt>
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
	...

08003760 <_ZN2ex4Test4initEv>:
#include <math.h>
#include "example.h"
#define PI 3.14159265358979323846

void ex::Test::init()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    for (int i=0;i<400;i++)
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003772:	da58      	bge.n	8003826 <_ZN2ex4Test4initEv+0xc6>
    {
        double v = ((double)i/200) * PI;
 8003774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003776:	f7fc fed5 	bl	8000524 <__aeabi_i2d>
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <_ZN2ex4Test4initEv+0x150>)
 8003780:	f7fd f864 	bl	800084c <__aeabi_ddiv>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	a346      	add	r3, pc, #280	; (adr r3, 80038a8 <_ZN2ex4Test4initEv+0x148>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fc ff31 	bl	80005f8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        int16_t sine = (int16_t)(sin(v)*512.0);
 800379e:	ed97 0b06 	vldr	d0, [r7, #24]
 80037a2:	f002 fda1 	bl	80062e8 <sin>
 80037a6:	ec51 0b10 	vmov	r0, r1, d0
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80037b2:	f7fc ff21 	bl	80005f8 <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd f9b5 	bl	8000b2c <__aeabi_d2iz>
 80037c2:	4603      	mov	r3, r0
 80037c4:	82fb      	strh	r3, [r7, #22]
        int16_t cosine = (int16_t)(cos(v)*512.0);
 80037c6:	ed97 0b06 	vldr	d0, [r7, #24]
 80037ca:	f002 fd3d 	bl	8006248 <cos>
 80037ce:	ec51 0b10 	vmov	r0, r1, d0
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80037da:	f7fc ff0d 	bl	80005f8 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f7fd f9a1 	bl	8000b2c <__aeabi_d2iz>
 80037ea:	4603      	mov	r3, r0
 80037ec:	82bb      	strh	r3, [r7, #20]
        sine_[i] = sine + 512;
 80037ee:	8afb      	ldrh	r3, [r7, #22]
 80037f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037f4:	b299      	uxth	r1, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	460a      	mov	r2, r1
 8003804:	809a      	strh	r2, [r3, #4]
        cosine_[i] = cosine + 512;
 8003806:	8abb      	ldrh	r3, [r7, #20]
 8003808:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800380c:	b299      	uxth	r1, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	460a      	mov	r2, r1
 800381c:	809a      	strh	r2, [r3, #4]
    for (int i=0;i<400;i++)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	3301      	adds	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	e7a2      	b.n	800376c <_ZN2ex4Test4initEv+0xc>
    }

    plotTask_.start(1); //100Hz
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3358      	adds	r3, #88	; 0x58
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f989 	bl	8002b48 <_ZN4core4Task5startEml>
    oscilloscopeTask_.start(1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3378      	adds	r3, #120	; 0x78
 800383a:	f04f 32ff 	mov.w	r2, #4294967295
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f981 	bl	8002b48 <_ZN4core4Task5startEml>

    emptySignal.connect(&emptySignalReceivedEvent);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f503 52a1 	add.w	r2, r3, #5152	; 0x1420
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003852:	3308      	adds	r3, #8
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f7ff fe9a 	bl	8003590 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>
    fixedSignal.connect(&fixedSignalReceivedEvent);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003862:	3304      	adds	r3, #4
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	f502 52a2 	add.w	r2, r2, #5184	; 0x1440
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fa01 	bl	8003c74 <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>

	timeoutTask_.start(100);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3338      	adds	r3, #56	; 0x38
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f963 	bl	8002b48 <_ZN4core4Task5startEml>
	SM_START(StartUp);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3310      	adds	r3, #16
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <_ZN2ex4Test4initEv+0x154>)
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	613a      	str	r2, [r7, #16]
 8003894:	f107 020c 	add.w	r2, r7, #12
 8003898:	ca06      	ldmia	r2, {r1, r2}
 800389a:	4798      	blx	r3
}
 800389c:	bf00      	nop
 800389e:	3728      	adds	r7, #40	; 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	f3af 8000 	nop.w
 80038a8:	54442d18 	.word	0x54442d18
 80038ac:	400921fb 	.word	0x400921fb
 80038b0:	40690000 	.word	0x40690000
 80038b4:	08003411 	.word	0x08003411

080038b8 <_ZN2ex4Test12plotHandler_Ev>:

M_TASK_HANDLER(ex::Test, plot)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	EventStatus a;
	a = emptySignal.emit();
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fe70 	bl	80035ac <_ZN4core14EmptySignalOne4emitEv>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
	if(a != EventStatus::POST_SUCCESS)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d006      	beq.n	80038e4 <_ZN2ex4Test12plotHandler_Ev+0x2c>
	{
		LOG_PRINTF("WRONG");
 80038d6:	f7fe f977 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 80038da:	4603      	mov	r3, r0
 80038dc:	4922      	ldr	r1, [pc, #136]	; (8003968 <_ZN2ex4Test12plotHandler_Ev+0xb0>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fdb5 	bl	800144e <_ZN7console10Controller6printfEPKcz>
	}

	a = fixedSignal.emit(cosine_[angle_]);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 52a1 	add.w	r2, r3, #5152	; 0x1420
 80038ea:	3204      	adds	r2, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80038f2:	3310      	adds	r3, #16
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	440b      	add	r3, r1
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f000 f9c3 	bl	8003c90 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt>
 800390a:	4603      	mov	r3, r0
 800390c:	73fb      	strb	r3, [r7, #15]
	if(a != EventStatus::POST_SUCCESS)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d006      	beq.n	8003922 <_ZN2ex4Test12plotHandler_Ev+0x6a>
	{
		LOG_PRINTF("WRONG");
 8003914:	f7fe f958 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003918:	4603      	mov	r3, r0
 800391a:	4913      	ldr	r1, [pc, #76]	; (8003968 <_ZN2ex4Test12plotHandler_Ev+0xb0>)
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fd96 	bl	800144e <_ZN7console10Controller6printfEPKcz>
	}

	if (++angle_>=400) angle_=0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003928:	3310      	adds	r3, #16
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003934:	3310      	adds	r3, #16
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 800393e:	3310      	adds	r3, #16
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f240 128f 	movw	r2, #399	; 0x18f
 8003946:	4293      	cmp	r3, r2
 8003948:	bf8c      	ite	hi
 800394a:	2301      	movhi	r3, #1
 800394c:	2300      	movls	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <_ZN2ex4Test12plotHandler_Ev+0xa8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 800395a:	3310      	adds	r3, #16
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0800887c 	.word	0x0800887c

0800396c <_ZN2ex4Test20oscilloscopeHandler_Ev>:

M_TASK_HANDLER(ex::Test, oscilloscope)
{
 800396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af02      	add	r7, sp, #8
 8003974:	6078      	str	r0, [r7, #4]
	static uint16_t angle;
    //singlePlot(sine_[angle] + rand()%10);
//    dualPlot(sine_[angle_] + rand()%10, cosine_[angle_] + rand()%10);
    //triplePlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5);
    quadPlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5, sine_[angle]/2 + rand()%5);
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	889c      	ldrh	r4, [r3, #4]
 8003986:	f003 fddf 	bl	8007548 <rand>
 800398a:	4602      	mov	r2, r0
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 800398e:	fb83 1302 	smull	r1, r3, r3, r2
 8003992:	1099      	asrs	r1, r3, #2
 8003994:	17d3      	asrs	r3, r2, #31
 8003996:	1ac9      	subs	r1, r1, r3
 8003998:	460b      	mov	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	1ad1      	subs	r1, r2, r3
 80039a2:	b28b      	uxth	r3, r1
 80039a4:	4423      	add	r3, r4
 80039a6:	b29d      	uxth	r5, r3
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	889c      	ldrh	r4, [r3, #4]
 80039b8:	f003 fdc6 	bl	8007548 <rand>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 80039c0:	fb83 1302 	smull	r1, r3, r3, r2
 80039c4:	1099      	asrs	r1, r3, #2
 80039c6:	17d3      	asrs	r3, r2, #31
 80039c8:	1ac9      	subs	r1, r1, r3
 80039ca:	460b      	mov	r3, r1
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	1ad1      	subs	r1, r2, r3
 80039d4:	b28b      	uxth	r3, r1
 80039d6:	4423      	add	r3, r4
 80039d8:	b29e      	uxth	r6, r3
 80039da:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b29c      	uxth	r4, r3
 80039ee:	f003 fdab 	bl	8007548 <rand>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 80039f6:	fb83 1302 	smull	r1, r3, r3, r2
 80039fa:	1059      	asrs	r1, r3, #1
 80039fc:	17d3      	asrs	r3, r2, #31
 80039fe:	1ac9      	subs	r1, r1, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	1ad1      	subs	r1, r2, r3
 8003a08:	b28b      	uxth	r3, r1
 8003a0a:	4423      	add	r3, r4
 8003a0c:	fa1f f883 	uxth.w	r8, r3
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	889b      	ldrh	r3, [r3, #4]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	b29c      	uxth	r4, r3
 8003a24:	f003 fd90 	bl	8007548 <rand>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 8003a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8003a30:	1059      	asrs	r1, r3, #1
 8003a32:	17d3      	asrs	r3, r2, #31
 8003a34:	1ac9      	subs	r1, r1, r3
 8003a36:	460b      	mov	r3, r1
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	1ad1      	subs	r1, r2, r3
 8003a3e:	b28b      	uxth	r3, r1
 8003a40:	4423      	add	r3, r4
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	4643      	mov	r3, r8
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe6a 	bl	8003726 <_ZN2ex4Test8quadPlotEtttt>
    if (++angle>=400) angle=0;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	f240 128f 	movw	r2, #399	; 0x18f
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bf8c      	ite	hi
 8003a6a:	2301      	movhi	r3, #1
 8003a6c:	2300      	movls	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <_ZN2ex4Test20oscilloscopeHandler_Ev+0x10e>
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a84:	2000109c 	.word	0x2000109c
 8003a88:	66666667 	.word	0x66666667

08003a8c <_ZN2ex4Test15timeoutHandler_Ev>:

M_TASK_HANDLER(ex::Test, timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	EventStatus a;
	a = emptyEventEvent.post();
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3398      	adds	r3, #152	; 0x98
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe f8ef 	bl	8001c7c <_ZN4core10EmptyEvent4postEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]
	if(a != EventStatus::POST_SUCCESS)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d006      	beq.n	8003ab6 <_ZN2ex4Test15timeoutHandler_Ev+0x2a>
	{
		LOG_PRINTF("WRONG");
 8003aa8:	f7fe f88e 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4916      	ldr	r1, [pc, #88]	; (8003b08 <_ZN2ex4Test15timeoutHandler_Ev+0x7c>)
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd fccc 	bl	800144e <_ZN7console10Controller6printfEPKcz>
	}
	a = fixedEventEvent.post(count_++);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	1c51      	adds	r1, r2, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003ace:	330c      	adds	r3, #12
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	60ba      	str	r2, [r7, #8]
 8003ad4:	f107 0308 	add.w	r3, r7, #8
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f000 f8ef 	bl	8003cbc <_ZN4core10FixedEventImE4postERKm>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73fb      	strb	r3, [r7, #15]
	if(a != EventStatus::POST_SUCCESS)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d006      	beq.n	8003af6 <_ZN2ex4Test15timeoutHandler_Ev+0x6a>
	{
		LOG_PRINTF("WRONG");
 8003ae8:	f7fe f86e 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4906      	ldr	r1, [pc, #24]	; (8003b08 <_ZN2ex4Test15timeoutHandler_Ev+0x7c>)
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd fcac 	bl	800144e <_ZN7console10Controller6printfEPKcz>
	}

	SM_POST(Event::TIMEOUT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fce9 	bl	80034d2 <_ZN4core13SimpleMachine9postEventEh>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	0800887c 	.word	0x0800887c

08003b0c <_ZN2ex4Test18emptyEventHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptyEvent)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
//	LOG_PRINTF("EmptyEvent");
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_ZN2ex4Test18fixedEventHandler_ERKm>:

M_EVENT_HANDLER(ex::Test, fixedEvent, uint32_t)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
//	LOG_PRINTF("FixedEvent %d", event);
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <_ZN2ex4Test27emptySignalReceivedHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptySignalReceived)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
    console::Controller::instance().plot(0, sine_[angle_]);
 8003b3e:	f7fe f843 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003b48:	3310      	adds	r3, #16
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f7fe fc82 	bl	8002464 <_ZN7console10Controller4plotEhl>
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZN2ex4Test27fixedSignalReceivedHandler_ERKt>:

M_EVENT_HANDLER(ex::Test, fixedSignalReceived, uint16_t)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
	console::Controller::instance().plot(1, event);
 8003b72:	f7fe f829 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	f7fe fc71 	bl	8002464 <_ZN7console10Controller4plotEhl>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <_ZN2ex4Test20startCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, start)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("START");
 8003b94:	f7fe f818 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4906      	ldr	r1, [pc, #24]	; (8003bb4 <_ZN2ex4Test20startCommandHandler_Ev+0x28>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fd fc56 	bl	800144e <_ZN7console10Controller6printfEPKcz>
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <_ZN2ex4Test20startCommandHandler_Ev+0x2c>)
 8003ba6:	f7ff fc7b 	bl	80034a0 <LL_GPIO_TogglePin>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08008884 	.word	0x08008884
 8003bb8:	40020000 	.word	0x40020000

08003bbc <_ZN2ex4Test19stopCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, stop)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("STOP");
 8003bc4:	f7fe f800 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4904      	ldr	r1, [pc, #16]	; (8003bdc <_ZN2ex4Test19stopCommandHandler_Ev+0x20>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fc3e 	bl	800144e <_ZN7console10Controller6printfEPKcz>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	0800888c 	.word	0x0800888c

08003be0 <_ZN2ex4Test22integerCommandHandler_El>:

U_INTEGER_HANDLER(ex::Test, integer)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("Integer: %d", value);
 8003bea:	f7fd ffed 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <_ZN2ex4Test22integerCommandHandler_El+0x24>)
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fc2a 	bl	800144e <_ZN7console10Controller6printfEPKcz>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08008894 	.word	0x08008894

08003c08 <_ZN2ex4Test19nameCommandHandler_EhPh>:

U_TEXT_HANDLER(ex::Test, name)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	460b      	mov	r3, r1
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
	for(; i < length; i++)
 8003c1a:	7afb      	ldrb	r3, [r7, #11]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	da0f      	bge.n	8003c42 <_ZN2ex4Test19nameCommandHandler_EhPh+0x3a>
	{
		name_[i] = data[i];
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	7819      	ldrb	r1, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003c34:	3314      	adds	r3, #20
 8003c36:	460a      	mov	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
	for(; i < length; i++)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e7eb      	b.n	8003c1a <_ZN2ex4Test19nameCommandHandler_EhPh+0x12>
	}
	name_[i] = 0;
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
	LOG_PRINTF("%s", name_);
 8003c52:	f7fd ffb9 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <_ZN2ex4Test19nameCommandHandler_EhPh+0x68>)
 8003c62:	f7fd fbf4 	bl	800144e <_ZN7console10Controller6printfEPKcz>
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	080088a0 	.word	0x080088a0

08003c74 <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>:

template <typename EV, typename E>
class SignalOne
{
public:
    void connect(EV* event){this->event_ = event;}
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt>:
    void disconnect(){event_ = nullptr;}
    inline EventStatus emit(E& e)
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
    {
    	if (event_ != nullptr) return event_->post(e);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt+0x22>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f831 	bl	8003d10 <_ZN4core10FixedEventItE4postERKt>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	e000      	b.n	8003cb4 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt+0x24>
    	return EventStatus::POST_FAILED;
 8003cb2:	2300      	movs	r3, #0
    }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZN4core10FixedEventImE4postERKm>:
    EventStatus post(const E& e)
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f84b 	bl	8003d66 <_ZN7MemPoolImE5AllocEv>
 8003cd0:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)	// Cannot Allocate, Pool Over
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <_ZN4core10FixedEventImE4postERKm+0x20>
    		return EventStatus::ALLOCATION_FAILED;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e015      	b.n	8003d08 <_ZN4core10FixedEventImE4postERKm+0x4c>
    	container_.payload_ = p;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	601a      	str	r2, [r3, #0]
    	return core::Engine::instance().events().post(container_);
 8003cec:	f7fd ff36 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd ff1d 	bl	8001b32 <_ZN4core6Engine6eventsEv>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d00:	f7fd fe8d 	bl	8001a1e <_ZN4core10EventQueue4postENS_9ContainerE>
 8003d04:	4603      	mov	r3, r0
 8003d06:	bf00      	nop
    }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN4core10FixedEventItE4postERKt>:
    EventStatus post(const E& e)
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f845 	bl	8003dae <_ZN7MemPoolItE5AllocEv>
 8003d24:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)	// Cannot Allocate, Pool Over
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <_ZN4core10FixedEventItE4postERKt+0x20>
    		return EventStatus::ALLOCATION_FAILED;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e016      	b.n	8003d5e <_ZN4core10FixedEventItE4postERKt+0x4e>
    	container_.payload_ = p;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
    	return core::Engine::instance().events().post(container_);
 8003d42:	f7fd ff0b 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fef2 	bl	8001b32 <_ZN4core6Engine6eventsEv>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d56:	f7fd fe62 	bl	8001a1e <_ZN4core10EventQueue4postENS_9ContainerE>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	bf00      	nop
    }
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN7MemPoolImE5AllocEv>:
    void* Alloc()
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <_ZN7MemPoolImE5AllocEv+0x18>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <_ZN7MemPoolImE5AllocEv+0x1c>
			return nullptr;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e00f      	b.n	8003da2 <_ZN7MemPoolImE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3304      	adds	r3, #4
    }
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN7MemPoolItE5AllocEv>:
    void* Alloc()
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <_ZN7MemPoolItE5AllocEv+0x18>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <_ZN7MemPoolItE5AllocEv+0x1c>
			return nullptr;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e00f      	b.n	8003dea <_ZN7MemPoolItE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
    }
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <_ZN4core10FixedEventItED1Ev>:
class FixedEvent: public Event
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <_ZN4core10FixedEventItED1Ev+0x20>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fd f89f 	bl	8000f4c <_ZN4core5EventD1Ev>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	080089b8 	.word	0x080089b8

08003e1c <_ZN4core10FixedEventItED0Ev>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ffe7 	bl	8003df8 <_ZN4core10FixedEventItED1Ev>
 8003e2a:	211c      	movs	r1, #28
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f002 f9dd 	bl	80061ec <_ZdlPvj>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN4core10FixedEventImED1Ev>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <_ZN4core10FixedEventImED1Ev+0x20>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd f87d 	bl	8000f4c <_ZN4core5EventD1Ev>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	080089cc 	.word	0x080089cc

08003e60 <_ZN4core10FixedEventImED0Ev>:
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe7 	bl	8003e3c <_ZN4core10FixedEventImED1Ev>
 8003e6e:	211c      	movs	r1, #28
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f002 f9bb 	bl	80061ec <_ZdlPvj>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZN4core10FixedEventItE7executeEv>:
    void execute() override
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
        (component_->*handler_)(*((E*)container_.payload_));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6952      	ldr	r2, [r2, #20]
 8003e90:	1052      	asrs	r2, r2, #1
 8003e92:	1898      	adds	r0, r3, r2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <_ZN4core10FixedEventItE7executeEv+0x26>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	e00a      	b.n	8003ebc <_ZN4core10FixedEventItE7executeEv+0x3c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6952      	ldr	r2, [r2, #20]
 8003eae:	1052      	asrs	r2, r2, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6912      	ldr	r2, [r2, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4798      	blx	r3
        pool_->Free(container_.payload_);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 f832 	bl	8003f38 <_ZN7MemPoolItE4FreeEPv>
    }
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_ZN4core10FixedEventImE7executeEv>:
    void execute() override
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
        (component_->*handler_)(*((E*)container_.payload_));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6952      	ldr	r2, [r2, #20]
 8003eec:	1052      	asrs	r2, r2, #1
 8003eee:	1898      	adds	r0, r3, r2
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <_ZN4core10FixedEventImE7executeEv+0x26>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	e00a      	b.n	8003f18 <_ZN4core10FixedEventImE7executeEv+0x3c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6952      	ldr	r2, [r2, #20]
 8003f0a:	1052      	asrs	r2, r2, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6912      	ldr	r2, [r2, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4798      	blx	r3
        pool_->Free(container_.payload_);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f839 	bl	8003fa2 <_ZN7MemPoolImE4FreeEPv>
    }
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_ZN7MemPoolItE4FreeEPv>:
    void Free(void* p)
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01e      	beq.n	8003f96 <_ZN7MemPoolItE4FreeEPv+0x5e>
			if(it == pCurUnit)
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d114      	bne.n	8003f8a <_ZN7MemPoolItE4FreeEPv+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <_ZN7MemPoolItE4FreeEPv+0x38>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	e003      	b.n	8003f78 <_ZN7MemPoolItE4FreeEPv+0x40>
				else prev->pNext = it->pNext;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
				break;
 8003f86:	bf00      	nop
    }
 8003f88:	e005      	b.n	8003f96 <_ZN7MemPoolItE4FreeEPv+0x5e>
			prev = it;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e7dd      	b.n	8003f52 <_ZN7MemPoolItE4FreeEPv+0x1a>
    }
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN7MemPoolImE4FreeEPv>:
    void Free(void* p)
 8003fa2:	b480      	push	{r7}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01e      	beq.n	8004000 <_ZN7MemPoolImE4FreeEPv+0x5e>
			if(it == pCurUnit)
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d114      	bne.n	8003ff4 <_ZN7MemPoolImE4FreeEPv+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <_ZN7MemPoolImE4FreeEPv+0x38>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	e003      	b.n	8003fe2 <_ZN7MemPoolImE4FreeEPv+0x40>
				else prev->pNext = it->pNext;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]
				break;
 8003ff0:	bf00      	nop
    }
 8003ff2:	e005      	b.n	8004000 <_ZN7MemPoolImE4FreeEPv+0x5e>
			prev = it;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e7dd      	b.n	8003fbc <_ZN7MemPoolImE4FreeEPv+0x1a>
    }
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_ZN4core13SimpleMachine7executeERh>:
    void execute(uint8_t& event)
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
        nextState_ = nullptr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
        nextEvent_ = event; (this->*currentState_)();
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	751a      	strb	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	1052      	asrs	r2, r2, #1
 8004032:	1899      	adds	r1, r3, r2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <_ZN4core13SimpleMachine7executeERh+0x3a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	e009      	b.n	800405a <_ZN4core13SimpleMachine7executeERh+0x4e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6912      	ldr	r2, [r2, #16]
 800404c:	1052      	asrs	r2, r2, #1
 800404e:	4413      	add	r3, r2
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	4413      	add	r3, r2
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4608      	mov	r0, r1
 800405c:	4798      	blx	r3
        if (nextState_ != nullptr && nextState_ != currentState_)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <_ZN4core13SimpleMachine7executeERh+0x6c>
 8004076:	2300      	movs	r3, #0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d062      	beq.n	8004142 <_ZN4core13SimpleMachine7executeERh+0x136>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d117      	bne.n	80040b8 <_ZN4core13SimpleMachine7executeERh+0xac>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d00f      	beq.n	80040b4 <_ZN4core13SimpleMachine7executeERh+0xa8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <_ZN4core13SimpleMachine7executeERh+0xac>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <_ZN4core13SimpleMachine7executeERh+0xac>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <_ZN4core13SimpleMachine7executeERh+0xac>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <_ZN4core13SimpleMachine7executeERh+0xae>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d141      	bne.n	8004142 <_ZN4core13SimpleMachine7executeERh+0x136>
            nextEvent_ = EXIT; (this->*currentState_)();
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	751a      	strb	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6912      	ldr	r2, [r2, #16]
 80040ca:	1052      	asrs	r2, r2, #1
 80040cc:	1899      	adds	r1, r3, r2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <_ZN4core13SimpleMachine7executeERh+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	e009      	b.n	80040f4 <_ZN4core13SimpleMachine7executeERh+0xe8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6912      	ldr	r2, [r2, #16]
 80040e6:	1052      	asrs	r2, r2, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68d2      	ldr	r2, [r2, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4798      	blx	r3
            currentState_ = nextState_;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	330c      	adds	r3, #12
 80040fe:	3204      	adds	r2, #4
 8004100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004104:	e883 0003 	stmia.w	r3, {r0, r1}
            nextEvent_ = ENTER; (this->*currentState_)();
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	22fe      	movs	r2, #254	; 0xfe
 800410c:	751a      	strb	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6912      	ldr	r2, [r2, #16]
 8004114:	1052      	asrs	r2, r2, #1
 8004116:	1899      	adds	r1, r3, r2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <_ZN4core13SimpleMachine7executeERh+0x11e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	e009      	b.n	800413e <_ZN4core13SimpleMachine7executeERh+0x132>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6912      	ldr	r2, [r2, #16]
 8004130:	1052      	asrs	r2, r2, #1
 8004132:	4413      	add	r3, r2
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	4413      	add	r3, r2
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4608      	mov	r0, r1
 8004140:	4798      	blx	r3
    }
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <__tcf_3>:
#include <core/machine.h>
#include <core/signal.h>
#include <console/controller.h>
#include <oscilloscope/quad.h>

MACHINE(ex, Test)
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
 8004150:	4801      	ldr	r0, [pc, #4]	; (8004158 <__tcf_3+0xc>)
 8004152:	f7ff faa9 	bl	80036a8 <_ZN2ex4TestD1Ev>
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200010a0 	.word	0x200010a0

0800415c <_ZN2ex4Test8instanceEv>:
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <_ZN2ex4Test8instanceEv+0x50>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f3bf 8f5b 	dmb	ish
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <_ZN2ex4Test8instanceEv+0x48>
 800417c:	480b      	ldr	r0, [pc, #44]	; (80041ac <_ZN2ex4Test8instanceEv+0x50>)
 800417e:	f002 f837 	bl	80061f0 <__cxa_guard_acquire>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <_ZN2ex4Test8instanceEv+0x48>
 8004192:	4807      	ldr	r0, [pc, #28]	; (80041b0 <_ZN2ex4Test8instanceEv+0x54>)
 8004194:	f000 f852 	bl	800423c <_ZN2ex4TestC1Ev>
 8004198:	4804      	ldr	r0, [pc, #16]	; (80041ac <_ZN2ex4Test8instanceEv+0x50>)
 800419a:	f002 f835 	bl	8006208 <__cxa_guard_release>
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <_ZN2ex4Test8instanceEv+0x58>)
 80041a0:	f003 f8df 	bl	8007362 <atexit>
 80041a4:	4b02      	ldr	r3, [pc, #8]	; (80041b0 <_ZN2ex4Test8instanceEv+0x54>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20002b78 	.word	0x20002b78
 80041b0:	200010a0 	.word	0x200010a0
 80041b4:	0800414d 	.word	0x0800414d

080041b8 <_ZN4core13SimpleMachineC1Ev>:
class SimpleMachine: public core::Machine
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd f83c 	bl	8001240 <_ZN4core7MachineC1Ev>
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <_ZN4core13SimpleMachineC1Ev+0x44>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	751a      	strb	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 0018 	add.w	r0, r3, #24
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <_ZN4core13SimpleMachineC1Ev+0x48>)
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	2303      	movs	r3, #3
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	cb0c      	ldmia	r3, {r2, r3}
 80041ee:	f7fd fa2b 	bl	8001648 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhEh>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	080089e0 	.word	0x080089e0
 8004200:	0800400d 	.word	0x0800400d

08004204 <_ZN4core14EmptySignalOneC1Ev>:
class EmptySignalOne
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>:
class SignalOne
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_ZN2ex4TestC1Ev>:
 800423c:	b580      	push	{r7, lr}
 800423e:	b092      	sub	sp, #72	; 0x48
 8004240:	af02      	add	r7, sp, #8
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ffb6 	bl	80041b8 <_ZN4core13SimpleMachineC1Ev>
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <_ZN2ex4TestC1Ev+0x188>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4b5b      	ldr	r3, [pc, #364]	; (80043c8 <_ZN2ex4TestC1Ev+0x18c>)
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	cb0c      	ldmia	r3, {r2, r3}
 8004268:	f7fe fc4a 	bl	8002b00 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4b55      	ldr	r3, [pc, #340]	; (80043cc <_ZN2ex4TestC1Ev+0x190>)
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	cb0c      	ldmia	r3, {r2, r3}
 8004282:	f7fe fc3d 	bl	8002b00 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <_ZN2ex4TestC1Ev+0x194>)
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	f107 0318 	add.w	r3, r7, #24
 800429a:	cb0c      	ldmia	r3, {r2, r3}
 800429c:	f7fe fc30 	bl	8002b00 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <_ZN2ex4TestC1Ev+0x198>)
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	f107 0320 	add.w	r3, r7, #32
 80042b4:	cb0c      	ldmia	r3, {r2, r3}
 80042b6:	f7fc fea5 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <_ZN2ex4TestC1Ev+0x19c>)
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	2300      	movs	r3, #0
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ca:	2301      	movs	r3, #1
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042d2:	cb0c      	ldmia	r3, {r2, r3}
 80042d4:	f000 f912 	bl	80044fc <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmEh>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 80042de:	2305      	movs	r3, #5
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2304      	movs	r3, #4
 80042e4:	2203      	movs	r2, #3
 80042e6:	2102      	movs	r1, #2
 80042e8:	f7fe fdbc 	bl	8002e64 <_ZN3osc4QuadC1Ehttt>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff86 	bl	8004204 <_ZN4core14EmptySignalOneC1Ev>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff8d 	bl	8004220 <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f503 50a1 	add.w	r0, r3, #5152	; 0x1420
 800430c:	3008      	adds	r0, #8
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4b32      	ldr	r3, [pc, #200]	; (80043dc <_ZN2ex4TestC1Ev+0x1a0>)
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
 8004314:	2300      	movs	r3, #0
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800431c:	cb0c      	ldmia	r3, {r2, r3}
 800431e:	f7fc fe71 	bl	8001004 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 50a2 	add.w	r0, r3, #5184	; 0x1440
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <_ZN2ex4TestC1Ev+0x1a4>)
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
 800432e:	2300      	movs	r3, #0
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004332:	2303      	movs	r3, #3
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800433a:	cb0c      	ldmia	r3, {r2, r3}
 800433c:	f000 f90e 	bl	800455c <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtEh>
 8004340:	f7fd fc42 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8004344:	4603      	mov	r3, r0
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <_ZN2ex4TestC1Ev+0x1a8>)
 8004348:	2165      	movs	r1, #101	; 0x65
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd f8a9 	bl	80014a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 8004350:	4602      	mov	r2, r0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004358:	331c      	adds	r3, #28
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f7fd fc34 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8004360:	4603      	mov	r3, r0
 8004362:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <_ZN2ex4TestC1Ev+0x1ac>)
 8004364:	2166      	movs	r1, #102	; 0x66
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f89b 	bl	80014a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f7fd fc27 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 800437a:	4603      	mov	r3, r0
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <_ZN2ex4TestC1Ev+0x1b0>)
 800437e:	2164      	movs	r1, #100	; 0x64
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd f88e 	bl	80014a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 8004386:	4602      	mov	r2, r0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 800438e:	3304      	adds	r3, #4
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f7fd fc19 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8004396:	4603      	mov	r3, r0
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <_ZN2ex4TestC1Ev+0x1b4>)
 800439a:	2167      	movs	r1, #103	; 0x67
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd f880 	bl	80014a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80043a2:	4602      	mov	r2, r0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80043aa:	3308      	adds	r3, #8
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80043b4:	3310      	adds	r3, #16
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	0800899c 	.word	0x0800899c
 80043c8:	08003a8d 	.word	0x08003a8d
 80043cc:	080038b9 	.word	0x080038b9
 80043d0:	0800396d 	.word	0x0800396d
 80043d4:	08003b0d 	.word	0x08003b0d
 80043d8:	08003b21 	.word	0x08003b21
 80043dc:	08003b37 	.word	0x08003b37
 80043e0:	08003b69 	.word	0x08003b69
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004419 	.word	0x08004419
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	08004495 	.word	0x08004495

080043f4 <_ZN2ex4Test12startCommandEthPh>:
	M_SIGNAL(fixed, uint16_t)

	M_EVENT(emptySignalReceived)
	M_EVENT(fixedSignalReceived, uint16_t)

	U_ACTION(101, start)
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	603a      	str	r2, [r7, #0]
 80043fe:	80fb      	strh	r3, [r7, #6]
 8004400:	460b      	mov	r3, r1
 8004402:	717b      	strb	r3, [r7, #5]
 8004404:	f7ff feaa 	bl	800415c <_ZN2ex4Test8instanceEv>
 8004408:	4603      	mov	r3, r0
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fbbe 	bl	8003b8c <_ZN2ex4Test20startCommandHandler_Ev>
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZN2ex4Test11stopCommandEthPh>:
	U_ACTION(102, stop)
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	603a      	str	r2, [r7, #0]
 8004422:	80fb      	strh	r3, [r7, #6]
 8004424:	460b      	mov	r3, r1
 8004426:	717b      	strb	r3, [r7, #5]
 8004428:	f7ff fe98 	bl	800415c <_ZN2ex4Test8instanceEv>
 800442c:	4603      	mov	r3, r0
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fbc4 	bl	8003bbc <_ZN2ex4Test19stopCommandHandler_Ev>
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_ZN2ex4Test14integerCommandEthPh>:
	U_INTEGER(100, integer)
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	603a      	str	r2, [r7, #0]
 8004446:	80fb      	strh	r3, [r7, #6]
 8004448:	460b      	mov	r3, r1
 800444a:	717b      	strb	r3, [r7, #5]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	061a      	lsls	r2, r3, #24
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	431a      	orrs	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	3302      	adds	r3, #2
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	4313      	orrs	r3, r2
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	3203      	adds	r2, #3
 800446a:	7812      	ldrb	r2, [r2, #0]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	f7ff fe74 	bl	800415c <_ZN2ex4Test8instanceEv>
 8004474:	4603      	mov	r3, r0
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fbb1 	bl	8003be0 <_ZN2ex4Test22integerCommandHandler_El>
 800447e:	f7fd fba3 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4619      	mov	r1, r3
 8004488:	f7fd f82f 	bl	80014ea <_ZN7console10Controller14updateIntFieldEtl>
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZN2ex4Test11nameCommandEthPh>:
	U_TEXT(103, name)
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	603a      	str	r2, [r7, #0]
 800449e:	80fb      	strh	r3, [r7, #6]
 80044a0:	460b      	mov	r3, r1
 80044a2:	717b      	strb	r3, [r7, #5]
 80044a4:	f7ff fe5a 	bl	800415c <_ZN2ex4Test8instanceEv>
 80044a8:	797b      	ldrb	r3, [r7, #5]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	f7ff fbab 	bl	8003c08 <_ZN2ex4Test19nameCommandHandler_EhPh>
 80044b2:	f7fd fb89 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 80044b6:	797a      	ldrb	r2, [r7, #5]
 80044b8:	88f9      	ldrh	r1, [r7, #6]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f7fd f863 	bl	8001586 <_ZN7console10Controller15updateTextFieldEthPh>
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <main>:
#include <console/controller.h>
#include <test/example/example.h>

int main()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	COMPONENT_REG(ex, Test);
 80044cc:	f7ff fe46 	bl	800415c <_ZN2ex4Test8instanceEv>
 80044d0:	4603      	mov	r3, r0
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	4790      	blx	r2
	COMPONENT_REG(console, Controller);
 80044da:	f7fd fb75 	bl	8001bc8 <_ZN7console10Controller8instanceEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	4790      	blx	r2

	core::Engine::instance().run();
 80044e8:	f7fd fb38 	bl	8001b5c <_ZN4core6Engine8instanceEv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe f9cc 	bl	800288c <_ZN4core6Engine3runEv>
	return 0;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmEh>:
    FixedEvent(Component* component, Handler handler, uint8_t numOfMem = 3)	// 3 is just default value
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4639      	mov	r1, r7
 8004508:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe f960 	bl	80027d4 <_ZN4core5EventC1Ev>
 8004514:	4a10      	ldr	r2, [pc, #64]	; (8004558 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmEh+0x5c>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3310      	adds	r3, #16
 800452a:	463a      	mov	r2, r7
 800452c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004530:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(numOfMem);
 8004534:	200c      	movs	r0, #12
 8004536:	f001 fe6a 	bl	800620e <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	461c      	mov	r4, r3
 800453e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004542:	4619      	mov	r1, r3
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f839 	bl	80045bc <_ZN7MemPoolImEC1Em>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	619c      	str	r4, [r3, #24]
    }
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	080089cc 	.word	0x080089cc

0800455c <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtEh>:
    FixedEvent(Component* component, Handler handler, uint8_t numOfMem = 3)	// 3 is just default value
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4639      	mov	r1, r7
 8004568:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f930 	bl	80027d4 <_ZN4core5EventC1Ev>
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtEh+0x5c>)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3310      	adds	r3, #16
 800458a:	463a      	mov	r2, r7
 800458c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004590:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(numOfMem);
 8004594:	200c      	movs	r0, #12
 8004596:	f001 fe3a 	bl	800620e <_Znwj>
 800459a:	4603      	mov	r3, r0
 800459c:	461c      	mov	r4, r3
 800459e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4620      	mov	r0, r4
 80045a6:	f000 f842 	bl	800462e <_ZN7MemPoolItEC1Em>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	619c      	str	r4, [r3, #24]
    }
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	080089b8 	.word	0x080089b8

080045bc <_ZN7MemPoolImEC1Em>:
    MemPool(unsigned long ulUnitNum):
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4618      	mov	r0, r3
 80045de:	f002 fef1 	bl	80073c4 <malloc>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <_ZN7MemPoolImEC1Em+0x64>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d212      	bcs.n	8004624 <_ZN7MemPoolImEC1Em+0x68>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e7ea      	b.n	80045f6 <_ZN7MemPoolImEC1Em+0x3a>
        	Error_Handler();
 8004620:	f000 f8fe 	bl	8004820 <Error_Handler>
    }
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZN7MemPoolItEC1Em>:
    MemPool(unsigned long ulUnitNum):
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f002 feb5 	bl	80073c4 <malloc>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <_ZN7MemPoolItEC1Em+0x70>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d215      	bcs.n	80046a2 <_ZN7MemPoolItEC1Em+0x74>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e7e7      	b.n	800466e <_ZN7MemPoolItEC1Em+0x40>
        	Error_Handler();
 800469e:	f000 f8bf 	bl	8004820 <Error_Handler>
    }
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <LL_GPIO_ResetOutputPin>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	041a      	lsls	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	619a      	str	r2, [r3, #24]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4313      	orrs	r3, r2
 80046de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40023800 	.word	0x40023800

080046fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004702:	463b      	mov	r3, r7
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]
 8004710:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004712:	2080      	movs	r0, #128	; 0x80
 8004714:	f7ff ffda 	bl	80046cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004718:	2001      	movs	r0, #1
 800471a:	f7ff ffd7 	bl	80046cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800471e:	2120      	movs	r1, #32
 8004720:	480a      	ldr	r0, [pc, #40]	; (800474c <MX_GPIO_Init+0x50>)
 8004722:	f7ff ffc3 	bl	80046ac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004726:	2320      	movs	r3, #32
 8004728:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800472a:	2301      	movs	r3, #1
 800472c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	463b      	mov	r3, r7
 800473c:	4619      	mov	r1, r3
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <MX_GPIO_Init+0x50>)
 8004740:	f001 f979 	bl	8005a36 <LL_GPIO_Init>

}
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40020000 	.word	0x40020000

08004750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b094      	sub	sp, #80	; 0x50
 8004754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004756:	f107 0320 	add.w	r3, r7, #32
 800475a:	2230      	movs	r2, #48	; 0x30
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fe40 	bl	80073e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <SystemClock_Config+0xc8>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <SystemClock_Config+0xc8>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	; 0x40
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <SystemClock_Config+0xc8>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004790:	2300      	movs	r3, #0
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <SystemClock_Config+0xcc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <SystemClock_Config+0xcc>)
 800479a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <SystemClock_Config+0xcc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047ac:	2302      	movs	r3, #2
 80047ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047b0:	2301      	movs	r3, #1
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047b4:	2310      	movs	r3, #16
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047b8:	2302      	movs	r3, #2
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047bc:	2300      	movs	r3, #0
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047c0:	2308      	movs	r3, #8
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80047c4:	2364      	movs	r3, #100	; 0x64
 80047c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047c8:	2302      	movs	r3, #2
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80047cc:	2304      	movs	r3, #4
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047d0:	f107 0320 	add.w	r3, r7, #32
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fbe9 	bl	8004fac <HAL_RCC_OscConfig>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80047e0:	f000 f81e 	bl	8004820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047e4:	230f      	movs	r3, #15
 80047e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047e8:	2302      	movs	r3, #2
 80047ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80047f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80047fa:	f107 030c 	add.w	r3, r7, #12
 80047fe:	2103      	movs	r1, #3
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fe4b 	bl	800549c <HAL_RCC_ClockConfig>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800480c:	f000 f808 	bl	8004820 <Error_Handler>
  }
}
 8004810:	bf00      	nop
 8004812:	3750      	adds	r7, #80	; 0x50
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000

08004820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004824:	b672      	cpsid	i
}
 8004826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004828:	e7fe      	b.n	8004828 <Error_Handler+0x8>
	...

0800482c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_MspInit+0x4c>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <HAL_MspInit+0x4c>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_MspInit+0x4c>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_MspInit+0x4c>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <HAL_MspInit+0x4c>)
 8004858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <HAL_MspInit+0x4c>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800

0800487c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
	return 1;
 8004880:	2301      	movs	r3, #1
}
 8004882:	4618      	mov	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <_kill>:

int _kill(int pid, int sig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004896:	f002 fd6b 	bl	8007370 <__errno>
 800489a:	4603      	mov	r3, r0
 800489c:	2216      	movs	r2, #22
 800489e:	601a      	str	r2, [r3, #0]
	return -1;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <_exit>:

void _exit (int status)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe7 	bl	800488c <_kill>
	while (1) {}		/* Make sure we hang here */
 80048be:	e7fe      	b.n	80048be <_exit+0x12>

080048c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e00a      	b.n	80048e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048d2:	f3af 8000 	nop.w
 80048d6:	4601      	mov	r1, r0
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	60ba      	str	r2, [r7, #8]
 80048de:	b2ca      	uxtb	r2, r1
 80048e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	dbf0      	blt.n	80048d2 <_read+0x12>
	}

return len;
 80048f0:	687b      	ldr	r3, [r7, #4]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e009      	b.n	8004920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	60ba      	str	r2, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	dbf1      	blt.n	800490c <_write+0x12>
	}
	return len;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_close>:

int _close(int file)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
	return -1;
 800493a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800495a:	605a      	str	r2, [r3, #4]
	return 0;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_isatty>:

int _isatty(int file)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
	return 1;
 8004972:	2301      	movs	r3, #1
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
	return 0;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049a4:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <_sbrk+0x5c>)
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <_sbrk+0x60>)
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <_sbrk+0x64>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <_sbrk+0x64>)
 80049ba:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <_sbrk+0x68>)
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <_sbrk+0x64>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d207      	bcs.n	80049dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049cc:	f002 fcd0 	bl	8007370 <__errno>
 80049d0:	4603      	mov	r3, r0
 80049d2:	220c      	movs	r2, #12
 80049d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
 80049da:	e009      	b.n	80049f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <_sbrk+0x64>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <_sbrk+0x64>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <_sbrk+0x64>)
 80049ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20020000 	.word	0x20020000
 80049fc:	00000400 	.word	0x00000400
 8004a00:	20002b7c 	.word	0x20002b7c
 8004a04:	20002c30 	.word	0x20002c30

08004a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SystemInit+0x20>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <SystemInit+0x20>)
 8004a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <__NVIC_GetPriorityGrouping+0x18>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0307 	and.w	r3, r3, #7
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db0b      	blt.n	8004a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4907      	ldr	r1, [pc, #28]	; (8004a80 <__NVIC_EnableIRQ+0x38>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e100 	.word	0xe000e100

08004a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db0a      	blt.n	8004aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <__NVIC_SetPriority+0x4c>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aac:	e00a      	b.n	8004ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4908      	ldr	r1, [pc, #32]	; (8004ad4 <__NVIC_SetPriority+0x50>)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3b04      	subs	r3, #4
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	761a      	strb	r2, [r3, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf28      	it	cs
 8004af6:	2304      	movcs	r3, #4
 8004af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d902      	bls.n	8004b08 <NVIC_EncodePriority+0x30>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3b03      	subs	r3, #3
 8004b06:	e000      	b.n	8004b0a <NVIC_EncodePriority+0x32>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	4313      	orrs	r3, r2
         );
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_USART_Enable>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_USART_ConfigAsyncMode>:
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <LL_AHB1_GRP1_EnableClock>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b98:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40023800 	.word	0x40023800

08004bbc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc8:	4907      	ldr	r1, [pc, #28]	; (8004be8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40023800 	.word	0x40023800

08004bec <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08e      	sub	sp, #56	; 0x38
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004bf2:	f107 031c 	add.w	r3, r7, #28
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	60da      	str	r2, [r3, #12]
 8004c00:	611a      	str	r2, [r3, #16]
 8004c02:	615a      	str	r2, [r3, #20]
 8004c04:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
 8004c14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004c16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004c1a:	f7ff ffcf 	bl	8004bbc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f7ff ffb4 	bl	8004b8c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004c24:	2304      	movs	r3, #4
 8004c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004c38:	2307      	movs	r3, #7
 8004c3a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4821      	ldr	r0, [pc, #132]	; (8004cc8 <MX_USART2_UART_Init+0xdc>)
 8004c42:	f000 fef8 	bl	8005a36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004c46:	2308      	movs	r3, #8
 8004c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004c56:	2301      	movs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4819      	ldr	r0, [pc, #100]	; (8004cc8 <MX_USART2_UART_Init+0xdc>)
 8004c64:	f000 fee7 	bl	8005a36 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c68:	f7ff fee0 	bl	8004a2c <__NVIC_GetPriorityGrouping>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff30 	bl	8004ad8 <NVIC_EncodePriority>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	2026      	movs	r0, #38	; 0x26
 8004c7e:	f7ff ff01 	bl	8004a84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004c82:	2026      	movs	r0, #38	; 0x26
 8004c84:	f7ff fee0 	bl	8004a48 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	4619      	mov	r1, r3
 8004cac:	4807      	ldr	r0, [pc, #28]	; (8004ccc <MX_USART2_UART_Init+0xe0>)
 8004cae:	f001 fa39 	bl	8006124 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004cb2:	4806      	ldr	r0, [pc, #24]	; (8004ccc <MX_USART2_UART_Init+0xe0>)
 8004cb4:	f7ff ff53 	bl	8004b5e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004cb8:	4804      	ldr	r0, [pc, #16]	; (8004ccc <MX_USART2_UART_Init+0xe0>)
 8004cba:	f7ff ff40 	bl	8004b3e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004cbe:	bf00      	nop
 8004cc0:	3738      	adds	r7, #56	; 0x38
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40004400 	.word	0x40004400

08004cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cd4:	480d      	ldr	r0, [pc, #52]	; (8004d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cd6:	490e      	ldr	r1, [pc, #56]	; (8004d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cd8:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cdc:	e002      	b.n	8004ce4 <LoopCopyDataInit>

08004cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ce2:	3304      	adds	r3, #4

08004ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ce8:	d3f9      	bcc.n	8004cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cea:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004cec:	4c0b      	ldr	r4, [pc, #44]	; (8004d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf0:	e001      	b.n	8004cf6 <LoopFillZerobss>

08004cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cf4:	3204      	adds	r2, #4

08004cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cf8:	d3fb      	bcc.n	8004cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004cfa:	f7ff fe85 	bl	8004a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cfe:	f002 fb3d 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d02:	f7ff fbe1 	bl	80044c8 <main>
  bx  lr    
 8004d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004d14:	08008d44 	.word	0x08008d44
  ldr r2, =_sbss
 8004d18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004d1c:	20002c30 	.word	0x20002c30

08004d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d20:	e7fe      	b.n	8004d20 <ADC_IRQHandler>
	...

08004d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <HAL_Init+0x40>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <HAL_Init+0x40>)
 8004d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_Init+0x40>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <HAL_Init+0x40>)
 8004d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_Init+0x40>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_Init+0x40>)
 8004d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d4c:	2003      	movs	r0, #3
 8004d4e:	f000 f8f9 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d52:	200f      	movs	r0, #15
 8004d54:	f000 f808 	bl	8004d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d58:	f7ff fd68 	bl	800482c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023c00 	.word	0x40023c00

08004d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_InitTick+0x54>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_InitTick+0x58>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f903 	bl	8004f92 <HAL_SYSTICK_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e00e      	b.n	8004db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b0f      	cmp	r3, #15
 8004d9a:	d80a      	bhi.n	8004db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	f000 f8d9 	bl	8004f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004da8:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <HAL_InitTick+0x5c>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000000 	.word	0x20000000
 8004dc0:	20000008 	.word	0x20000008
 8004dc4:	20000004 	.word	0x20000004

08004dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return uwTick;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <HAL_GetTick+0x14>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20002c1c 	.word	0x20002c1c

08004de0 <__NVIC_SetPriorityGrouping>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e12:	4a04      	ldr	r2, [pc, #16]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	60d3      	str	r3, [r2, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_GetPriorityGrouping>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <__NVIC_GetPriorityGrouping+0x18>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0307 	and.w	r3, r3, #7
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <__NVIC_SetPriority>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f10:	d301      	bcc.n	8004f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <SysTick_Config+0x40>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1e:	210f      	movs	r1, #15
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f7ff ff8e 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <SysTick_Config+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <SysTick_Config+0x40>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff47 	bl	8004de0 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f6c:	f7ff ff5c 	bl	8004e28 <__NVIC_GetPriorityGrouping>
 8004f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff8e 	bl	8004e98 <NVIC_EncodePriority>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff5d 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffb0 	bl	8004f00 <SysTick_Config>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e264      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	4ba3      	ldr	r3, [pc, #652]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4ba0      	ldr	r3, [pc, #640]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b99      	ldr	r3, [pc, #612]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e23f      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b91      	ldr	r3, [pc, #580]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a90      	ldr	r2, [pc, #576]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8a      	ldr	r2, [pc, #552]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a87      	ldr	r2, [pc, #540]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b84      	ldr	r3, [pc, #528]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7ff feb0 	bl	8004dc8 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7ff feac 	bl	8004dc8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	; 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e204      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7ff fe9c 	bl	8004dc8 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005094:	f7ff fe98 	bl	8004dc8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1f0      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1c4      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4952      	ldr	r1, [pc, #328]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b4f      	ldr	r3, [pc, #316]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7ff fe51 	bl	8004dc8 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512a:	f7ff fe4d 	bl	8004dc8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1a5      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4940      	ldr	r1, [pc, #256]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7ff fe30 	bl	8004dc8 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516c:	f7ff fe2c 	bl	8004dc8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e184      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d030      	beq.n	80051f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7ff fe10 	bl	8004dc8 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ac:	f7ff fe0c 	bl	8004dc8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e164      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
 80051ca:	e015      	b.n	80051f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7ff fdf9 	bl	8004dc8 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051da:	f7ff fdf5 	bl	8004dc8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e14d      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a0 	beq.w	8005346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d121      	bne.n	8005286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7ff fdbb 	bl	8004dc8 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e011      	b.n	800527a <HAL_RCC_OscConfig+0x2ce>
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
 8005264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7ff fdae 	bl	8004dc8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e106      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527a:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_OscConfig+0x4e4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d106      	bne.n	800529c <HAL_RCC_OscConfig+0x2f0>
 800528e:	4b81      	ldr	r3, [pc, #516]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a80      	ldr	r2, [pc, #512]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	e01c      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_OscConfig+0x312>
 80052a4:	4b7b      	ldr	r3, [pc, #492]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a7a      	ldr	r2, [pc, #488]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	4b78      	ldr	r3, [pc, #480]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a77      	ldr	r2, [pc, #476]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
 80052bc:	e00b      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 80052be:	4b75      	ldr	r3, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a74      	ldr	r2, [pc, #464]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	4b72      	ldr	r3, [pc, #456]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a71      	ldr	r2, [pc, #452]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7ff fd73 	bl	8004dc8 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7ff fd6f 	bl	8004dc8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0c5      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ee      	beq.n	80052e6 <HAL_RCC_OscConfig+0x33a>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7ff fd5d 	bl	8004dc8 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7ff fd59 	bl	8004dc8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0af      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	4b5a      	ldr	r3, [pc, #360]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b56      	ldr	r3, [pc, #344]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a55      	ldr	r2, [pc, #340]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 809b 	beq.w	8005486 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d05c      	beq.n	8005416 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d141      	bne.n	80053e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7ff fd2d 	bl	8004dc8 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7ff fd29 	bl	8004dc8 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e081      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005384:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7ff fd02 	bl	8004dc8 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c8:	f7ff fcfe 	bl	8004dc8 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e056      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x41c>
 80053e6:	e04e      	b.n	8005486 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7ff fceb 	bl	8004dc8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7ff fce7 	bl	8004dc8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e03f      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x44a>
 8005414:	e037      	b.n	8005486 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e032      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d028      	beq.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d121      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d11a      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005458:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545a:	4293      	cmp	r3, r2
 800545c:	d111      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d107      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40007000 	.word	0x40007000
 8005494:	40023800 	.word	0x40023800
 8005498:	42470060 	.word	0x42470060

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0cc      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90c      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b65      	ldr	r3, [pc, #404]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d044      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005556:	2b03      	cmp	r3, #3
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e067      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b37      	ldr	r3, [pc, #220]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4934      	ldr	r1, [pc, #208]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7ff fc1c 	bl	8004dc8 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7ff fc18 	bl	8004dc8 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20c      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b22      	ldr	r3, [pc, #136]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fb90 	bl	8004d68 <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	080089f4 	.word	0x080089f4
 8005660:	20000000 	.word	0x20000000
 8005664:	20000004 	.word	0x20000004

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	2300      	movs	r3, #0
 800567a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005680:	4b67      	ldr	r3, [pc, #412]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b08      	cmp	r3, #8
 800568a:	d00d      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x40>
 800568c:	2b08      	cmp	r3, #8
 800568e:	f200 80bd 	bhi.w	800580c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x34>
 8005696:	2b04      	cmp	r3, #4
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800569a:	e0b7      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b61      	ldr	r3, [pc, #388]	; (8005824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800569e:	60bb      	str	r3, [r7, #8]
       break;
 80056a0:	e0b7      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a2:	4b61      	ldr	r3, [pc, #388]	; (8005828 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80056a4:	60bb      	str	r3, [r7, #8]
      break;
 80056a6:	e0b4      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a8:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b2:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d04d      	beq.n	800575a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056be:	4b58      	ldr	r3, [pc, #352]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	099b      	lsrs	r3, r3, #6
 80056c4:	461a      	mov	r2, r3
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	ea02 0800 	and.w	r8, r2, r0
 80056d6:	ea03 0901 	and.w	r9, r3, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	014b      	lsls	r3, r1, #5
 80056e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056ec:	0142      	lsls	r2, r0, #5
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	ebb0 0008 	subs.w	r0, r0, r8
 80056f6:	eb61 0109 	sbc.w	r1, r1, r9
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	018b      	lsls	r3, r1, #6
 8005704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005708:	0182      	lsls	r2, r0, #6
 800570a:	1a12      	subs	r2, r2, r0
 800570c:	eb63 0301 	sbc.w	r3, r3, r1
 8005710:	f04f 0000 	mov.w	r0, #0
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	00d9      	lsls	r1, r3, #3
 800571a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800571e:	00d0      	lsls	r0, r2, #3
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	eb12 0208 	adds.w	r2, r2, r8
 8005728:	eb43 0309 	adc.w	r3, r3, r9
 800572c:	f04f 0000 	mov.w	r0, #0
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	0259      	lsls	r1, r3, #9
 8005736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800573a:	0250      	lsls	r0, r2, #9
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	f7fb fa16 	bl	8000b7c <__aeabi_uldivmod>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4613      	mov	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e04a      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800575a:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	099b      	lsrs	r3, r3, #6
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	ea02 0400 	and.w	r4, r2, r0
 8005772:	ea03 0501 	and.w	r5, r3, r1
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	014b      	lsls	r3, r1, #5
 8005784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005788:	0142      	lsls	r2, r0, #5
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	1b00      	subs	r0, r0, r4
 8005790:	eb61 0105 	sbc.w	r1, r1, r5
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	018b      	lsls	r3, r1, #6
 800579e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057a2:	0182      	lsls	r2, r0, #6
 80057a4:	1a12      	subs	r2, r2, r0
 80057a6:	eb63 0301 	sbc.w	r3, r3, r1
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	00d9      	lsls	r1, r3, #3
 80057b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057b8:	00d0      	lsls	r0, r2, #3
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	1912      	adds	r2, r2, r4
 80057c0:	eb45 0303 	adc.w	r3, r5, r3
 80057c4:	f04f 0000 	mov.w	r0, #0
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	0299      	lsls	r1, r3, #10
 80057ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057d2:	0290      	lsls	r0, r2, #10
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	461a      	mov	r2, r3
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	f7fb f9ca 	bl	8000b7c <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4613      	mov	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	3301      	adds	r3, #1
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	60bb      	str	r3, [r7, #8]
      break;
 800580a:	e002      	b.n	8005812 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800580e:	60bb      	str	r3, [r7, #8]
      break;
 8005810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005812:	68bb      	ldr	r3, [r7, #8]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	00f42400 	.word	0x00f42400
 8005828:	007a1200 	.word	0x007a1200

0800582c <LL_GPIO_SetPinMode>:
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	613b      	str	r3, [r7, #16]
  return result;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	2103      	movs	r1, #3
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	401a      	ands	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	fa93 f3a3 	rbit	r3, r3
 8005866:	61bb      	str	r3, [r7, #24]
  return result;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	3724      	adds	r7, #36	; 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <LL_GPIO_SetPinOutputType>:
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	43db      	mvns	r3, r3
 800589e:	401a      	ands	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_GPIO_SetPinSpeed>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b089      	sub	sp, #36	; 0x24
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	613b      	str	r3, [r7, #16]
  return result;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	2103      	movs	r1, #3
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	401a      	ands	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa93 f3a3 	rbit	r3, r3
 80058f4:	61bb      	str	r3, [r7, #24]
  return result;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	fab3 f383 	clz	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	431a      	orrs	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	3724      	adds	r7, #36	; 0x24
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_GPIO_SetPinPull>:
{
 8005918:	b480      	push	{r7}
 800591a:	b089      	sub	sp, #36	; 0x24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	613b      	str	r3, [r7, #16]
  return result;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	2103      	movs	r1, #3
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	fa93 f3a3 	rbit	r3, r3
 8005952:	61bb      	str	r3, [r7, #24]
  return result;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	fab3 f383 	clz	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	60da      	str	r2, [r3, #12]
}
 800596a:	bf00      	nop
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_GPIO_SetAFPin_0_7>:
{
 8005976:	b480      	push	{r7}
 8005978:	b089      	sub	sp, #36	; 0x24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1a      	ldr	r2, [r3, #32]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	613b      	str	r3, [r7, #16]
  return result;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	fab3 f383 	clz	r3, r3
 8005998:	b2db      	uxtb	r3, r3
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	210f      	movs	r1, #15
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	401a      	ands	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	fa93 f3a3 	rbit	r3, r3
 80059b0:	61bb      	str	r3, [r7, #24]
  return result;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]
}
 80059c8:	bf00      	nop
 80059ca:	3724      	adds	r7, #36	; 0x24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <LL_GPIO_SetAFPin_8_15>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	613b      	str	r3, [r7, #16]
  return result;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	fab3 f383 	clz	r3, r3
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	210f      	movs	r1, #15
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	401a      	ands	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	fa93 f3a3 	rbit	r3, r3
 8005a12:	61bb      	str	r3, [r7, #24]
  return result;
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	fab3 f383 	clz	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a2a:	bf00      	nop
 8005a2c:	3724      	adds	r7, #36	; 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	fa93 f3a3 	rbit	r3, r3
 8005a54:	613b      	str	r3, [r7, #16]
  return result;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	fab3 f383 	clz	r3, r3
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a60:	e050      	b.n	8005b04 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d042      	beq.n	8005afe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d003      	beq.n	8005a88 <LL_GPIO_Init+0x52>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d10d      	bne.n	8005aa4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ff12 	bl	80058ba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fef3 	bl	800588a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	69b9      	ldr	r1, [r7, #24]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff33 	bl	8005918 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d11a      	bne.n	8005af0 <LL_GPIO_Init+0xba>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	fa93 f3a3 	rbit	r3, r3
 8005ac4:	60bb      	str	r3, [r7, #8]
  return result;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b07      	cmp	r3, #7
 8005ad0:	d807      	bhi.n	8005ae2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	69b9      	ldr	r1, [r7, #24]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff4b 	bl	8005976 <LL_GPIO_SetAFPin_0_7>
 8005ae0:	e006      	b.n	8005af0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ff72 	bl	80059d4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fe97 	bl	800582c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3301      	adds	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1a7      	bne.n	8005a62 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <LL_RCC_GetSysClkSource+0x18>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 030c 	and.w	r3, r3, #12
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800

08005b38 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <LL_RCC_GetAHBPrescaler+0x18>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800

08005b54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <LL_RCC_GetAPB1Prescaler+0x18>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800

08005b70 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <LL_RCC_PLL_GetMainSource+0x18>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <LL_RCC_PLL_GetN+0x18>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40023800 	.word	0x40023800

08005bc4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <LL_RCC_PLL_GetP+0x18>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800

08005be0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <LL_RCC_PLL_GetDivider+0x18>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800

08005bfc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005c04:	f000 f820 	bl	8005c48 <RCC_GetSystemClockFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f840 	bl	8005c98 <RCC_GetHCLKClockFreq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f84e 	bl	8005cc4 <RCC_GetPCLK1ClockFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f85a 	bl	8005cec <RCC_GetPCLK2ClockFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005c52:	f7ff ff63 	bl	8005b1c <LL_RCC_GetSysClkSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d00c      	beq.n	8005c76 <RCC_GetSystemClockFreq+0x2e>
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d80f      	bhi.n	8005c80 <RCC_GetSystemClockFreq+0x38>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <RCC_GetSystemClockFreq+0x22>
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d003      	beq.n	8005c70 <RCC_GetSystemClockFreq+0x28>
 8005c68:	e00a      	b.n	8005c80 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <RCC_GetSystemClockFreq+0x48>)
 8005c6c:	607b      	str	r3, [r7, #4]
      break;
 8005c6e:	e00a      	b.n	8005c86 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <RCC_GetSystemClockFreq+0x4c>)
 8005c72:	607b      	str	r3, [r7, #4]
      break;
 8005c74:	e007      	b.n	8005c86 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005c76:	2008      	movs	r0, #8
 8005c78:	f000 f84c 	bl	8005d14 <RCC_PLL_GetFreqDomain_SYS>
 8005c7c:	6078      	str	r0, [r7, #4]
      break;
 8005c7e:	e002      	b.n	8005c86 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <RCC_GetSystemClockFreq+0x48>)
 8005c82:	607b      	str	r3, [r7, #4]
      break;
 8005c84:	bf00      	nop
  }

  return frequency;
 8005c86:	687b      	ldr	r3, [r7, #4]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	007a1200 	.word	0x007a1200

08005c98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005ca0:	f7ff ff4a 	bl	8005b38 <LL_RCC_GetAHBPrescaler>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <RCC_GetHCLKClockFreq+0x28>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	40d3      	lsrs	r3, r2
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	080089f4 	.word	0x080089f4

08005cc4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005ccc:	f7ff ff42 	bl	8005b54 <LL_RCC_GetAPB1Prescaler>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <RCC_GetPCLK1ClockFreq+0x24>)
 8005cd6:	5cd3      	ldrb	r3, [r2, r3]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	40d3      	lsrs	r3, r2
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	08008a04 	.word	0x08008a04

08005cec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005cf4:	f7ff ff3c 	bl	8005b70 <LL_RCC_GetAPB2Prescaler>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <RCC_GetPCLK2ClockFreq+0x24>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	461a      	mov	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	40d3      	lsrs	r3, r2
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	08008a04 	.word	0x08008a04

08005d14 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005d14:	b590      	push	{r4, r7, lr}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005d28:	f7ff ff30 	bl	8005b8c <LL_RCC_PLL_GetMainSource>
 8005d2c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3a:	d003      	beq.n	8005d44 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005d3c:	e005      	b.n	8005d4a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005d40:	617b      	str	r3, [r7, #20]
      break;
 8005d42:	e005      	b.n	8005d50 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005d46:	617b      	str	r3, [r7, #20]
      break;
 8005d48:	e002      	b.n	8005d50 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005d4c:	617b      	str	r3, [r7, #20]
      break;
 8005d4e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d113      	bne.n	8005d7e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d56:	f7ff ff43 	bl	8005be0 <LL_RCC_PLL_GetDivider>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	fbb3 f4f2 	udiv	r4, r3, r2
 8005d62:	f7ff ff21 	bl	8005ba8 <LL_RCC_PLL_GetN>
 8005d66:	4603      	mov	r3, r0
 8005d68:	fb03 f404 	mul.w	r4, r3, r4
 8005d6c:	f7ff ff2a 	bl	8005bc4 <LL_RCC_PLL_GetP>
 8005d70:	4603      	mov	r3, r0
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	3301      	adds	r3, #1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d7c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005d7e:	693b      	ldr	r3, [r7, #16]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	007a1200 	.word	0x007a1200

08005d90 <LL_USART_IsEnabled>:
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da4:	bf0c      	ite	eq
 8005da6:	2301      	moveq	r3, #1
 8005da8:	2300      	movne	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <LL_USART_SetStopBitsLength>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LL_USART_SetHWFlowCtrl>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	615a      	str	r2, [r3, #20]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_USART_SetBaudRate>:
{
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	b09f      	sub	sp, #124	; 0x7c
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6778      	str	r0, [r7, #116]	; 0x74
 8005e0e:	6739      	str	r1, [r7, #112]	; 0x70
 8005e10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e12:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1a:	f040 80bc 	bne.w	8005f96 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e20:	461c      	mov	r4, r3
 8005e22:	f04f 0500 	mov.w	r5, #0
 8005e26:	4622      	mov	r2, r4
 8005e28:	462b      	mov	r3, r5
 8005e2a:	eb12 0a02 	adds.w	sl, r2, r2
 8005e2e:	eb43 0b03 	adc.w	fp, r3, r3
 8005e32:	4652      	mov	r2, sl
 8005e34:	465b      	mov	r3, fp
 8005e36:	1912      	adds	r2, r2, r4
 8005e38:	eb45 0303 	adc.w	r3, r5, r3
 8005e3c:	f04f 0000 	mov.w	r0, #0
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	00d9      	lsls	r1, r3, #3
 8005e46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e4a:	00d0      	lsls	r0, r2, #3
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	1911      	adds	r1, r2, r4
 8005e52:	6639      	str	r1, [r7, #96]	; 0x60
 8005e54:	416b      	adcs	r3, r5
 8005e56:	667b      	str	r3, [r7, #100]	; 0x64
 8005e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	6339      	str	r1, [r7, #48]	; 0x30
 8005e64:	415b      	adcs	r3, r3
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
 8005e68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e70:	f7fa fe84 	bl	8000b7c <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4ba9      	ldr	r3, [pc, #676]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	b29e      	uxth	r6, r3
 8005e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e88:	461c      	mov	r4, r3
 8005e8a:	f04f 0500 	mov.w	r5, #0
 8005e8e:	4622      	mov	r2, r4
 8005e90:	462b      	mov	r3, r5
 8005e92:	1891      	adds	r1, r2, r2
 8005e94:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e96:	415b      	adcs	r3, r3
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e9e:	1912      	adds	r2, r2, r4
 8005ea0:	eb45 0303 	adc.w	r3, r5, r3
 8005ea4:	f04f 0000 	mov.w	r0, #0
 8005ea8:	f04f 0100 	mov.w	r1, #0
 8005eac:	00d9      	lsls	r1, r3, #3
 8005eae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eb2:	00d0      	lsls	r0, r2, #3
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	1911      	adds	r1, r2, r4
 8005eba:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ebc:	416b      	adcs	r3, r5
 8005ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	6239      	str	r1, [r7, #32]
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ed4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ed8:	f7fa fe50 	bl	8000b7c <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4b8f      	ldr	r3, [pc, #572]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2164      	movs	r1, #100	; 0x64
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	3332      	adds	r3, #50	; 0x32
 8005ef4:	4a8a      	ldr	r2, [pc, #552]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4433      	add	r3, r6
 8005f0a:	b29e      	uxth	r6, r3
 8005f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f04f 0100 	mov.w	r1, #0
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	1894      	adds	r4, r2, r2
 8005f1a:	61bc      	str	r4, [r7, #24]
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f24:	1812      	adds	r2, r2, r0
 8005f26:	eb41 0303 	adc.w	r3, r1, r3
 8005f2a:	f04f 0400 	mov.w	r4, #0
 8005f2e:	f04f 0500 	mov.w	r5, #0
 8005f32:	00dd      	lsls	r5, r3, #3
 8005f34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f38:	00d4      	lsls	r4, r2, #3
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	1814      	adds	r4, r2, r0
 8005f40:	653c      	str	r4, [r7, #80]	; 0x50
 8005f42:	414b      	adcs	r3, r1
 8005f44:	657b      	str	r3, [r7, #84]	; 0x54
 8005f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	6139      	str	r1, [r7, #16]
 8005f52:	415b      	adcs	r3, r3
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f5e:	f7fa fe0d 	bl	8000b7c <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b6e      	ldr	r3, [pc, #440]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a69      	ldr	r2, [pc, #420]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	4433      	add	r3, r6
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	e0be      	b.n	8006114 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f98:	461c      	mov	r4, r3
 8005f9a:	f04f 0500 	mov.w	r5, #0
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	eb12 0802 	adds.w	r8, r2, r2
 8005fa6:	eb43 0903 	adc.w	r9, r3, r3
 8005faa:	4642      	mov	r2, r8
 8005fac:	464b      	mov	r3, r9
 8005fae:	1912      	adds	r2, r2, r4
 8005fb0:	eb45 0303 	adc.w	r3, r5, r3
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	00d9      	lsls	r1, r3, #3
 8005fbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc2:	00d0      	lsls	r0, r2, #3
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	1911      	adds	r1, r2, r4
 8005fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fcc:	416b      	adcs	r3, r5
 8005fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	008b      	lsls	r3, r1, #2
 8005fe2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe6:	0082      	lsls	r2, r0, #2
 8005fe8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fec:	f7fa fdc6 	bl	8000b7c <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4b4a      	ldr	r3, [pc, #296]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8005ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	b29e      	uxth	r6, r3
 8006002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006004:	4618      	mov	r0, r3
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	1894      	adds	r4, r2, r2
 8006010:	60bc      	str	r4, [r7, #8]
 8006012:	415b      	adcs	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	1812      	adds	r2, r2, r0
 800601c:	eb41 0303 	adc.w	r3, r1, r3
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	f04f 0500 	mov.w	r5, #0
 8006028:	00dd      	lsls	r5, r3, #3
 800602a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800602e:	00d4      	lsls	r4, r2, #3
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	1814      	adds	r4, r2, r0
 8006036:	643c      	str	r4, [r7, #64]	; 0x40
 8006038:	414b      	adcs	r3, r1
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800603e:	4618      	mov	r0, r3
 8006040:	f04f 0100 	mov.w	r1, #0
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	008b      	lsls	r3, r1, #2
 800604e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006052:	0082      	lsls	r2, r0, #2
 8006054:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006058:	f7fa fd90 	bl	8000b7c <__aeabi_uldivmod>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8006062:	fba3 1302 	umull	r1, r3, r3, r2
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	2164      	movs	r1, #100	; 0x64
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	3332      	adds	r3, #50	; 0x32
 8006074:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006082:	b29b      	uxth	r3, r3
 8006084:	4433      	add	r3, r6
 8006086:	b29e      	uxth	r6, r3
 8006088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608a:	4618      	mov	r0, r3
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	1894      	adds	r4, r2, r2
 8006096:	603c      	str	r4, [r7, #0]
 8006098:	415b      	adcs	r3, r3
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	1812      	adds	r2, r2, r0
 80060a2:	eb41 0303 	adc.w	r3, r1, r3
 80060a6:	f04f 0400 	mov.w	r4, #0
 80060aa:	f04f 0500 	mov.w	r5, #0
 80060ae:	00dd      	lsls	r5, r3, #3
 80060b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b4:	00d4      	lsls	r4, r2, #3
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	1814      	adds	r4, r2, r0
 80060bc:	63bc      	str	r4, [r7, #56]	; 0x38
 80060be:	414b      	adcs	r3, r1
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c4:	4618      	mov	r0, r3
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	008b      	lsls	r3, r1, #2
 80060d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d8:	0082      	lsls	r2, r0, #2
 80060da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80060de:	f7fa fd4d 	bl	8000b7c <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <LL_USART_SetBaudRate+0x31c>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	b29b      	uxth	r3, r3
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	b29b      	uxth	r3, r3
 800610a:	4433      	add	r3, r6
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	377c      	adds	r7, #124	; 0x7c
 8006118:	46bd      	mov	sp, r7
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	51eb851f 	.word	0x51eb851f

08006124 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff fe2a 	bl	8005d90 <LL_USART_IsEnabled>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d149      	bne.n	80061d6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800614a:	f023 030c 	bic.w	r3, r3, #12
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6851      	ldr	r1, [r2, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	68d2      	ldr	r2, [r2, #12]
 8006156:	4311      	orrs	r1, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	6912      	ldr	r2, [r2, #16]
 800615c:	4311      	orrs	r1, r2
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6992      	ldr	r2, [r2, #24]
 8006162:	430a      	orrs	r2, r1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fe21 	bl	8005db8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fe2e 	bl	8005dde <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fd38 	bl	8005bfc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <LL_USART_Init+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d102      	bne.n	800619a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e00c      	b.n	80061b4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <LL_USART_Init+0xc0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d102      	bne.n	80061a8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e005      	b.n	80061b4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <LL_USART_Init+0xc4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80061c2:	2300      	movs	r3, #0
 80061c4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69b9      	ldr	r1, [r7, #24]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fe17 	bl	8005e04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40011000 	.word	0x40011000
 80061e4:	40004400 	.word	0x40004400
 80061e8:	40011400 	.word	0x40011400

080061ec <_ZdlPvj>:
 80061ec:	f000 b820 	b.w	8006230 <_ZdlPv>

080061f0 <__cxa_guard_acquire>:
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	07db      	lsls	r3, r3, #31
 80061f4:	d406      	bmi.n	8006204 <__cxa_guard_acquire+0x14>
 80061f6:	7843      	ldrb	r3, [r0, #1]
 80061f8:	b103      	cbz	r3, 80061fc <__cxa_guard_acquire+0xc>
 80061fa:	deff      	udf	#255	; 0xff
 80061fc:	2301      	movs	r3, #1
 80061fe:	7043      	strb	r3, [r0, #1]
 8006200:	4618      	mov	r0, r3
 8006202:	4770      	bx	lr
 8006204:	2000      	movs	r0, #0
 8006206:	4770      	bx	lr

08006208 <__cxa_guard_release>:
 8006208:	2301      	movs	r3, #1
 800620a:	6003      	str	r3, [r0, #0]
 800620c:	4770      	bx	lr

0800620e <_Znwj>:
 800620e:	2801      	cmp	r0, #1
 8006210:	bf38      	it	cc
 8006212:	2001      	movcc	r0, #1
 8006214:	b510      	push	{r4, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	4620      	mov	r0, r4
 800621a:	f001 f8d3 	bl	80073c4 <malloc>
 800621e:	b930      	cbnz	r0, 800622e <_Znwj+0x20>
 8006220:	f000 f808 	bl	8006234 <_ZSt15get_new_handlerv>
 8006224:	b908      	cbnz	r0, 800622a <_Znwj+0x1c>
 8006226:	f001 f895 	bl	8007354 <abort>
 800622a:	4780      	blx	r0
 800622c:	e7f4      	b.n	8006218 <_Znwj+0xa>
 800622e:	bd10      	pop	{r4, pc}

08006230 <_ZdlPv>:
 8006230:	f001 b8d0 	b.w	80073d4 <free>

08006234 <_ZSt15get_new_handlerv>:
 8006234:	4b02      	ldr	r3, [pc, #8]	; (8006240 <_ZSt15get_new_handlerv+0xc>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	f3bf 8f5b 	dmb	ish
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20002b80 	.word	0x20002b80
 8006244:	00000000 	.word	0x00000000

08006248 <cos>:
 8006248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800624a:	ec53 2b10 	vmov	r2, r3, d0
 800624e:	4824      	ldr	r0, [pc, #144]	; (80062e0 <cos+0x98>)
 8006250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006254:	4281      	cmp	r1, r0
 8006256:	dc06      	bgt.n	8006266 <cos+0x1e>
 8006258:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80062d8 <cos+0x90>
 800625c:	f000 faa4 	bl	80067a8 <__kernel_cos>
 8006260:	ec51 0b10 	vmov	r0, r1, d0
 8006264:	e007      	b.n	8006276 <cos+0x2e>
 8006266:	481f      	ldr	r0, [pc, #124]	; (80062e4 <cos+0x9c>)
 8006268:	4281      	cmp	r1, r0
 800626a:	dd09      	ble.n	8006280 <cos+0x38>
 800626c:	ee10 0a10 	vmov	r0, s0
 8006270:	4619      	mov	r1, r3
 8006272:	f7fa f809 	bl	8000288 <__aeabi_dsub>
 8006276:	ec41 0b10 	vmov	d0, r0, r1
 800627a:	b005      	add	sp, #20
 800627c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006280:	4668      	mov	r0, sp
 8006282:	f000 f885 	bl	8006390 <__ieee754_rem_pio2>
 8006286:	f000 0003 	and.w	r0, r0, #3
 800628a:	2801      	cmp	r0, #1
 800628c:	d007      	beq.n	800629e <cos+0x56>
 800628e:	2802      	cmp	r0, #2
 8006290:	d012      	beq.n	80062b8 <cos+0x70>
 8006292:	b9c0      	cbnz	r0, 80062c6 <cos+0x7e>
 8006294:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006298:	ed9d 0b00 	vldr	d0, [sp]
 800629c:	e7de      	b.n	800625c <cos+0x14>
 800629e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062a2:	ed9d 0b00 	vldr	d0, [sp]
 80062a6:	f000 fe87 	bl	8006fb8 <__kernel_sin>
 80062aa:	ec53 2b10 	vmov	r2, r3, d0
 80062ae:	ee10 0a10 	vmov	r0, s0
 80062b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062b6:	e7de      	b.n	8006276 <cos+0x2e>
 80062b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062bc:	ed9d 0b00 	vldr	d0, [sp]
 80062c0:	f000 fa72 	bl	80067a8 <__kernel_cos>
 80062c4:	e7f1      	b.n	80062aa <cos+0x62>
 80062c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062ca:	ed9d 0b00 	vldr	d0, [sp]
 80062ce:	2001      	movs	r0, #1
 80062d0:	f000 fe72 	bl	8006fb8 <__kernel_sin>
 80062d4:	e7c4      	b.n	8006260 <cos+0x18>
 80062d6:	bf00      	nop
	...
 80062e0:	3fe921fb 	.word	0x3fe921fb
 80062e4:	7fefffff 	.word	0x7fefffff

080062e8 <sin>:
 80062e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ea:	ec53 2b10 	vmov	r2, r3, d0
 80062ee:	4826      	ldr	r0, [pc, #152]	; (8006388 <sin+0xa0>)
 80062f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062f4:	4281      	cmp	r1, r0
 80062f6:	dc07      	bgt.n	8006308 <sin+0x20>
 80062f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006380 <sin+0x98>
 80062fc:	2000      	movs	r0, #0
 80062fe:	f000 fe5b 	bl	8006fb8 <__kernel_sin>
 8006302:	ec51 0b10 	vmov	r0, r1, d0
 8006306:	e007      	b.n	8006318 <sin+0x30>
 8006308:	4820      	ldr	r0, [pc, #128]	; (800638c <sin+0xa4>)
 800630a:	4281      	cmp	r1, r0
 800630c:	dd09      	ble.n	8006322 <sin+0x3a>
 800630e:	ee10 0a10 	vmov	r0, s0
 8006312:	4619      	mov	r1, r3
 8006314:	f7f9 ffb8 	bl	8000288 <__aeabi_dsub>
 8006318:	ec41 0b10 	vmov	d0, r0, r1
 800631c:	b005      	add	sp, #20
 800631e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006322:	4668      	mov	r0, sp
 8006324:	f000 f834 	bl	8006390 <__ieee754_rem_pio2>
 8006328:	f000 0003 	and.w	r0, r0, #3
 800632c:	2801      	cmp	r0, #1
 800632e:	d008      	beq.n	8006342 <sin+0x5a>
 8006330:	2802      	cmp	r0, #2
 8006332:	d00d      	beq.n	8006350 <sin+0x68>
 8006334:	b9d0      	cbnz	r0, 800636c <sin+0x84>
 8006336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800633a:	ed9d 0b00 	vldr	d0, [sp]
 800633e:	2001      	movs	r0, #1
 8006340:	e7dd      	b.n	80062fe <sin+0x16>
 8006342:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006346:	ed9d 0b00 	vldr	d0, [sp]
 800634a:	f000 fa2d 	bl	80067a8 <__kernel_cos>
 800634e:	e7d8      	b.n	8006302 <sin+0x1a>
 8006350:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006354:	ed9d 0b00 	vldr	d0, [sp]
 8006358:	2001      	movs	r0, #1
 800635a:	f000 fe2d 	bl	8006fb8 <__kernel_sin>
 800635e:	ec53 2b10 	vmov	r2, r3, d0
 8006362:	ee10 0a10 	vmov	r0, s0
 8006366:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800636a:	e7d5      	b.n	8006318 <sin+0x30>
 800636c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006370:	ed9d 0b00 	vldr	d0, [sp]
 8006374:	f000 fa18 	bl	80067a8 <__kernel_cos>
 8006378:	e7f1      	b.n	800635e <sin+0x76>
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w
	...
 8006388:	3fe921fb 	.word	0x3fe921fb
 800638c:	7fefffff 	.word	0x7fefffff

08006390 <__ieee754_rem_pio2>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	ed2d 8b02 	vpush	{d8}
 8006398:	ec55 4b10 	vmov	r4, r5, d0
 800639c:	4bca      	ldr	r3, [pc, #808]	; (80066c8 <__ieee754_rem_pio2+0x338>)
 800639e:	b08b      	sub	sp, #44	; 0x2c
 80063a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80063a4:	4598      	cmp	r8, r3
 80063a6:	4682      	mov	sl, r0
 80063a8:	9502      	str	r5, [sp, #8]
 80063aa:	dc08      	bgt.n	80063be <__ieee754_rem_pio2+0x2e>
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	ed80 0b00 	vstr	d0, [r0]
 80063b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80063b8:	f04f 0b00 	mov.w	fp, #0
 80063bc:	e028      	b.n	8006410 <__ieee754_rem_pio2+0x80>
 80063be:	4bc3      	ldr	r3, [pc, #780]	; (80066cc <__ieee754_rem_pio2+0x33c>)
 80063c0:	4598      	cmp	r8, r3
 80063c2:	dc78      	bgt.n	80064b6 <__ieee754_rem_pio2+0x126>
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	4ec2      	ldr	r6, [pc, #776]	; (80066d0 <__ieee754_rem_pio2+0x340>)
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	ee10 0a10 	vmov	r0, s0
 80063ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8006690 <__ieee754_rem_pio2+0x300>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	4629      	mov	r1, r5
 80063d6:	dd39      	ble.n	800644c <__ieee754_rem_pio2+0xbc>
 80063d8:	f7f9 ff56 	bl	8000288 <__aeabi_dsub>
 80063dc:	45b0      	cmp	r8, r6
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	d01b      	beq.n	800641c <__ieee754_rem_pio2+0x8c>
 80063e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006698 <__ieee754_rem_pio2+0x308>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 ff4d 	bl	8000288 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	e9ca 2300 	strd	r2, r3, [sl]
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7f9 ff45 	bl	8000288 <__aeabi_dsub>
 80063fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8006698 <__ieee754_rem_pio2+0x308>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7f9 ff40 	bl	8000288 <__aeabi_dsub>
 8006408:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800640c:	f04f 0b01 	mov.w	fp, #1
 8006410:	4658      	mov	r0, fp
 8006412:	b00b      	add	sp, #44	; 0x2c
 8006414:	ecbd 8b02 	vpop	{d8}
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	a3a0      	add	r3, pc, #640	; (adr r3, 80066a0 <__ieee754_rem_pio2+0x310>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7f9 ff31 	bl	8000288 <__aeabi_dsub>
 8006426:	a3a0      	add	r3, pc, #640	; (adr r3, 80066a8 <__ieee754_rem_pio2+0x318>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	f7f9 ff2a 	bl	8000288 <__aeabi_dsub>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9ca 2300 	strd	r2, r3, [sl]
 800643c:	4620      	mov	r0, r4
 800643e:	4629      	mov	r1, r5
 8006440:	f7f9 ff22 	bl	8000288 <__aeabi_dsub>
 8006444:	a398      	add	r3, pc, #608	; (adr r3, 80066a8 <__ieee754_rem_pio2+0x318>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	e7db      	b.n	8006404 <__ieee754_rem_pio2+0x74>
 800644c:	f7f9 ff1e 	bl	800028c <__adddf3>
 8006450:	45b0      	cmp	r8, r6
 8006452:	4604      	mov	r4, r0
 8006454:	460d      	mov	r5, r1
 8006456:	d016      	beq.n	8006486 <__ieee754_rem_pio2+0xf6>
 8006458:	a38f      	add	r3, pc, #572	; (adr r3, 8006698 <__ieee754_rem_pio2+0x308>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7f9 ff15 	bl	800028c <__adddf3>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9ca 2300 	strd	r2, r3, [sl]
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7f9 ff0b 	bl	8000288 <__aeabi_dsub>
 8006472:	a389      	add	r3, pc, #548	; (adr r3, 8006698 <__ieee754_rem_pio2+0x308>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7f9 ff08 	bl	800028c <__adddf3>
 800647c:	f04f 3bff 	mov.w	fp, #4294967295
 8006480:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006484:	e7c4      	b.n	8006410 <__ieee754_rem_pio2+0x80>
 8006486:	a386      	add	r3, pc, #536	; (adr r3, 80066a0 <__ieee754_rem_pio2+0x310>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f7f9 fefe 	bl	800028c <__adddf3>
 8006490:	a385      	add	r3, pc, #532	; (adr r3, 80066a8 <__ieee754_rem_pio2+0x318>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	f7f9 fef7 	bl	800028c <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	e9ca 2300 	strd	r2, r3, [sl]
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7f9 feed 	bl	8000288 <__aeabi_dsub>
 80064ae:	a37e      	add	r3, pc, #504	; (adr r3, 80066a8 <__ieee754_rem_pio2+0x318>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	e7e0      	b.n	8006478 <__ieee754_rem_pio2+0xe8>
 80064b6:	4b87      	ldr	r3, [pc, #540]	; (80066d4 <__ieee754_rem_pio2+0x344>)
 80064b8:	4598      	cmp	r8, r3
 80064ba:	f300 80d9 	bgt.w	8006670 <__ieee754_rem_pio2+0x2e0>
 80064be:	f000 fe39 	bl	8007134 <fabs>
 80064c2:	ec55 4b10 	vmov	r4, r5, d0
 80064c6:	ee10 0a10 	vmov	r0, s0
 80064ca:	a379      	add	r3, pc, #484	; (adr r3, 80066b0 <__ieee754_rem_pio2+0x320>)
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa f891 	bl	80005f8 <__aeabi_dmul>
 80064d6:	4b80      	ldr	r3, [pc, #512]	; (80066d8 <__ieee754_rem_pio2+0x348>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f7f9 fed7 	bl	800028c <__adddf3>
 80064de:	f7fa fb25 	bl	8000b2c <__aeabi_d2iz>
 80064e2:	4683      	mov	fp, r0
 80064e4:	f7fa f81e 	bl	8000524 <__aeabi_i2d>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	ec43 2b18 	vmov	d8, r2, r3
 80064f0:	a367      	add	r3, pc, #412	; (adr r3, 8006690 <__ieee754_rem_pio2+0x300>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f87f 	bl	80005f8 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	a364      	add	r3, pc, #400	; (adr r3, 8006698 <__ieee754_rem_pio2+0x308>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	4606      	mov	r6, r0
 800650e:	460f      	mov	r7, r1
 8006510:	ec51 0b18 	vmov	r0, r1, d8
 8006514:	f7fa f870 	bl	80005f8 <__aeabi_dmul>
 8006518:	f1bb 0f1f 	cmp.w	fp, #31
 800651c:	4604      	mov	r4, r0
 800651e:	460d      	mov	r5, r1
 8006520:	dc0d      	bgt.n	800653e <__ieee754_rem_pio2+0x1ae>
 8006522:	4b6e      	ldr	r3, [pc, #440]	; (80066dc <__ieee754_rem_pio2+0x34c>)
 8006524:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	4543      	cmp	r3, r8
 800652e:	d006      	beq.n	800653e <__ieee754_rem_pio2+0x1ae>
 8006530:	4622      	mov	r2, r4
 8006532:	462b      	mov	r3, r5
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7f9 fea6 	bl	8000288 <__aeabi_dsub>
 800653c:	e00f      	b.n	800655e <__ieee754_rem_pio2+0x1ce>
 800653e:	462b      	mov	r3, r5
 8006540:	4622      	mov	r2, r4
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7f9 fe9f 	bl	8000288 <__aeabi_dsub>
 800654a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006554:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006558:	f1b8 0f10 	cmp.w	r8, #16
 800655c:	dc02      	bgt.n	8006564 <__ieee754_rem_pio2+0x1d4>
 800655e:	e9ca 0100 	strd	r0, r1, [sl]
 8006562:	e039      	b.n	80065d8 <__ieee754_rem_pio2+0x248>
 8006564:	a34e      	add	r3, pc, #312	; (adr r3, 80066a0 <__ieee754_rem_pio2+0x310>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	ec51 0b18 	vmov	r0, r1, d8
 800656e:	f7fa f843 	bl	80005f8 <__aeabi_dmul>
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7f9 fe83 	bl	8000288 <__aeabi_dsub>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dsub>
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	f7f9 fe77 	bl	8000288 <__aeabi_dsub>
 800659a:	a343      	add	r3, pc, #268	; (adr r3, 80066a8 <__ieee754_rem_pio2+0x318>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	ec51 0b18 	vmov	r0, r1, d8
 80065a8:	f7fa f826 	bl	80005f8 <__aeabi_dmul>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7f9 fe6a 	bl	8000288 <__aeabi_dsub>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4604      	mov	r4, r0
 80065ba:	460d      	mov	r5, r1
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	f7f9 fe62 	bl	8000288 <__aeabi_dsub>
 80065c4:	9a03      	ldr	r2, [sp, #12]
 80065c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b31      	cmp	r3, #49	; 0x31
 80065ce:	dc24      	bgt.n	800661a <__ieee754_rem_pio2+0x28a>
 80065d0:	e9ca 0100 	strd	r0, r1, [sl]
 80065d4:	4646      	mov	r6, r8
 80065d6:	464f      	mov	r7, r9
 80065d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80065dc:	4630      	mov	r0, r6
 80065de:	4642      	mov	r2, r8
 80065e0:	464b      	mov	r3, r9
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7f9 fe50 	bl	8000288 <__aeabi_dsub>
 80065e8:	462b      	mov	r3, r5
 80065ea:	4622      	mov	r2, r4
 80065ec:	f7f9 fe4c 	bl	8000288 <__aeabi_dsub>
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065f8:	f6bf af0a 	bge.w	8006410 <__ieee754_rem_pio2+0x80>
 80065fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006600:	f8ca 3004 	str.w	r3, [sl, #4]
 8006604:	f8ca 8000 	str.w	r8, [sl]
 8006608:	f8ca 0008 	str.w	r0, [sl, #8]
 800660c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006610:	f8ca 300c 	str.w	r3, [sl, #12]
 8006614:	f1cb 0b00 	rsb	fp, fp, #0
 8006618:	e6fa      	b.n	8006410 <__ieee754_rem_pio2+0x80>
 800661a:	a327      	add	r3, pc, #156	; (adr r3, 80066b8 <__ieee754_rem_pio2+0x328>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	ec51 0b18 	vmov	r0, r1, d8
 8006624:	f7f9 ffe8 	bl	80005f8 <__aeabi_dmul>
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7f9 fe28 	bl	8000288 <__aeabi_dsub>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fe20 	bl	8000288 <__aeabi_dsub>
 8006648:	4622      	mov	r2, r4
 800664a:	462b      	mov	r3, r5
 800664c:	f7f9 fe1c 	bl	8000288 <__aeabi_dsub>
 8006650:	a31b      	add	r3, pc, #108	; (adr r3, 80066c0 <__ieee754_rem_pio2+0x330>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	ec51 0b18 	vmov	r0, r1, d8
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f7f9 fe0f 	bl	8000288 <__aeabi_dsub>
 800666a:	4604      	mov	r4, r0
 800666c:	460d      	mov	r5, r1
 800666e:	e75f      	b.n	8006530 <__ieee754_rem_pio2+0x1a0>
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <__ieee754_rem_pio2+0x350>)
 8006672:	4598      	cmp	r8, r3
 8006674:	dd36      	ble.n	80066e4 <__ieee754_rem_pio2+0x354>
 8006676:	ee10 2a10 	vmov	r2, s0
 800667a:	462b      	mov	r3, r5
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fe02 	bl	8000288 <__aeabi_dsub>
 8006684:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006688:	e9ca 0100 	strd	r0, r1, [sl]
 800668c:	e694      	b.n	80063b8 <__ieee754_rem_pio2+0x28>
 800668e:	bf00      	nop
 8006690:	54400000 	.word	0x54400000
 8006694:	3ff921fb 	.word	0x3ff921fb
 8006698:	1a626331 	.word	0x1a626331
 800669c:	3dd0b461 	.word	0x3dd0b461
 80066a0:	1a600000 	.word	0x1a600000
 80066a4:	3dd0b461 	.word	0x3dd0b461
 80066a8:	2e037073 	.word	0x2e037073
 80066ac:	3ba3198a 	.word	0x3ba3198a
 80066b0:	6dc9c883 	.word	0x6dc9c883
 80066b4:	3fe45f30 	.word	0x3fe45f30
 80066b8:	2e000000 	.word	0x2e000000
 80066bc:	3ba3198a 	.word	0x3ba3198a
 80066c0:	252049c1 	.word	0x252049c1
 80066c4:	397b839a 	.word	0x397b839a
 80066c8:	3fe921fb 	.word	0x3fe921fb
 80066cc:	4002d97b 	.word	0x4002d97b
 80066d0:	3ff921fb 	.word	0x3ff921fb
 80066d4:	413921fb 	.word	0x413921fb
 80066d8:	3fe00000 	.word	0x3fe00000
 80066dc:	08008a0c 	.word	0x08008a0c
 80066e0:	7fefffff 	.word	0x7fefffff
 80066e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80066e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80066ec:	ee10 0a10 	vmov	r0, s0
 80066f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80066f4:	ee10 6a10 	vmov	r6, s0
 80066f8:	460f      	mov	r7, r1
 80066fa:	f7fa fa17 	bl	8000b2c <__aeabi_d2iz>
 80066fe:	f7f9 ff11 	bl	8000524 <__aeabi_i2d>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800670e:	f7f9 fdbb 	bl	8000288 <__aeabi_dsub>
 8006712:	4b22      	ldr	r3, [pc, #136]	; (800679c <__ieee754_rem_pio2+0x40c>)
 8006714:	2200      	movs	r2, #0
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	460f      	mov	r7, r1
 800671c:	4606      	mov	r6, r0
 800671e:	f7fa fa05 	bl	8000b2c <__aeabi_d2iz>
 8006722:	f7f9 feff 	bl	8000524 <__aeabi_i2d>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006732:	f7f9 fda9 	bl	8000288 <__aeabi_dsub>
 8006736:	4b19      	ldr	r3, [pc, #100]	; (800679c <__ieee754_rem_pio2+0x40c>)
 8006738:	2200      	movs	r2, #0
 800673a:	f7f9 ff5d 	bl	80005f8 <__aeabi_dmul>
 800673e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006742:	ad04      	add	r5, sp, #16
 8006744:	f04f 0803 	mov.w	r8, #3
 8006748:	46a9      	mov	r9, r5
 800674a:	2600      	movs	r6, #0
 800674c:	2700      	movs	r7, #0
 800674e:	4632      	mov	r2, r6
 8006750:	463b      	mov	r3, r7
 8006752:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006756:	46c3      	mov	fp, r8
 8006758:	3d08      	subs	r5, #8
 800675a:	f108 38ff 	add.w	r8, r8, #4294967295
 800675e:	f7fa f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006762:	2800      	cmp	r0, #0
 8006764:	d1f3      	bne.n	800674e <__ieee754_rem_pio2+0x3be>
 8006766:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <__ieee754_rem_pio2+0x410>)
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	2302      	movs	r3, #2
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4622      	mov	r2, r4
 8006770:	465b      	mov	r3, fp
 8006772:	4651      	mov	r1, sl
 8006774:	4648      	mov	r0, r9
 8006776:	f000 f8df 	bl	8006938 <__kernel_rem_pio2>
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	4683      	mov	fp, r0
 8006780:	f6bf ae46 	bge.w	8006410 <__ieee754_rem_pio2+0x80>
 8006784:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006788:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f8ca 3004 	str.w	r3, [sl, #4]
 8006790:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006794:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006798:	e73a      	b.n	8006610 <__ieee754_rem_pio2+0x280>
 800679a:	bf00      	nop
 800679c:	41700000 	.word	0x41700000
 80067a0:	08008a8c 	.word	0x08008a8c
 80067a4:	00000000 	.word	0x00000000

080067a8 <__kernel_cos>:
 80067a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	ec57 6b10 	vmov	r6, r7, d0
 80067b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80067b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80067b8:	ed8d 1b00 	vstr	d1, [sp]
 80067bc:	da07      	bge.n	80067ce <__kernel_cos+0x26>
 80067be:	ee10 0a10 	vmov	r0, s0
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7fa f9b2 	bl	8000b2c <__aeabi_d2iz>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f000 8088 	beq.w	80068de <__kernel_cos+0x136>
 80067ce:	4632      	mov	r2, r6
 80067d0:	463b      	mov	r3, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	f7f9 ff0f 	bl	80005f8 <__aeabi_dmul>
 80067da:	4b51      	ldr	r3, [pc, #324]	; (8006920 <__kernel_cos+0x178>)
 80067dc:	2200      	movs	r2, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	460d      	mov	r5, r1
 80067e2:	f7f9 ff09 	bl	80005f8 <__aeabi_dmul>
 80067e6:	a340      	add	r3, pc, #256	; (adr r3, 80068e8 <__kernel_cos+0x140>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	4682      	mov	sl, r0
 80067ee:	468b      	mov	fp, r1
 80067f0:	4620      	mov	r0, r4
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7f9 ff00 	bl	80005f8 <__aeabi_dmul>
 80067f8:	a33d      	add	r3, pc, #244	; (adr r3, 80068f0 <__kernel_cos+0x148>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fd45 	bl	800028c <__adddf3>
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	f7f9 fef7 	bl	80005f8 <__aeabi_dmul>
 800680a:	a33b      	add	r3, pc, #236	; (adr r3, 80068f8 <__kernel_cos+0x150>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f7f9 fd3a 	bl	8000288 <__aeabi_dsub>
 8006814:	4622      	mov	r2, r4
 8006816:	462b      	mov	r3, r5
 8006818:	f7f9 feee 	bl	80005f8 <__aeabi_dmul>
 800681c:	a338      	add	r3, pc, #224	; (adr r3, 8006900 <__kernel_cos+0x158>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fd33 	bl	800028c <__adddf3>
 8006826:	4622      	mov	r2, r4
 8006828:	462b      	mov	r3, r5
 800682a:	f7f9 fee5 	bl	80005f8 <__aeabi_dmul>
 800682e:	a336      	add	r3, pc, #216	; (adr r3, 8006908 <__kernel_cos+0x160>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	f7f9 fedc 	bl	80005f8 <__aeabi_dmul>
 8006840:	a333      	add	r3, pc, #204	; (adr r3, 8006910 <__kernel_cos+0x168>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7f9 fd21 	bl	800028c <__adddf3>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fed3 	bl	80005f8 <__aeabi_dmul>
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	f7f9 fecf 	bl	80005f8 <__aeabi_dmul>
 800685a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800685e:	4604      	mov	r4, r0
 8006860:	460d      	mov	r5, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	460b      	mov	r3, r1
 800686c:	4602      	mov	r2, r0
 800686e:	4629      	mov	r1, r5
 8006870:	4620      	mov	r0, r4
 8006872:	f7f9 fd09 	bl	8000288 <__aeabi_dsub>
 8006876:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <__kernel_cos+0x17c>)
 8006878:	4598      	cmp	r8, r3
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	dc10      	bgt.n	80068a2 <__kernel_cos+0xfa>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4650      	mov	r0, sl
 8006886:	4659      	mov	r1, fp
 8006888:	f7f9 fcfe 	bl	8000288 <__aeabi_dsub>
 800688c:	460b      	mov	r3, r1
 800688e:	4926      	ldr	r1, [pc, #152]	; (8006928 <__kernel_cos+0x180>)
 8006890:	4602      	mov	r2, r0
 8006892:	2000      	movs	r0, #0
 8006894:	f7f9 fcf8 	bl	8000288 <__aeabi_dsub>
 8006898:	ec41 0b10 	vmov	d0, r0, r1
 800689c:	b003      	add	sp, #12
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	4b22      	ldr	r3, [pc, #136]	; (800692c <__kernel_cos+0x184>)
 80068a4:	4920      	ldr	r1, [pc, #128]	; (8006928 <__kernel_cos+0x180>)
 80068a6:	4598      	cmp	r8, r3
 80068a8:	bfcc      	ite	gt
 80068aa:	4d21      	ldrgt	r5, [pc, #132]	; (8006930 <__kernel_cos+0x188>)
 80068ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80068b0:	2400      	movs	r4, #0
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7f9 fce6 	bl	8000288 <__aeabi_dsub>
 80068bc:	4622      	mov	r2, r4
 80068be:	4680      	mov	r8, r0
 80068c0:	4689      	mov	r9, r1
 80068c2:	462b      	mov	r3, r5
 80068c4:	4650      	mov	r0, sl
 80068c6:	4659      	mov	r1, fp
 80068c8:	f7f9 fcde 	bl	8000288 <__aeabi_dsub>
 80068cc:	4632      	mov	r2, r6
 80068ce:	463b      	mov	r3, r7
 80068d0:	f7f9 fcda 	bl	8000288 <__aeabi_dsub>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	e7da      	b.n	8006894 <__kernel_cos+0xec>
 80068de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006918 <__kernel_cos+0x170>
 80068e2:	e7db      	b.n	800689c <__kernel_cos+0xf4>
 80068e4:	f3af 8000 	nop.w
 80068e8:	be8838d4 	.word	0xbe8838d4
 80068ec:	bda8fae9 	.word	0xbda8fae9
 80068f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80068f4:	3e21ee9e 	.word	0x3e21ee9e
 80068f8:	809c52ad 	.word	0x809c52ad
 80068fc:	3e927e4f 	.word	0x3e927e4f
 8006900:	19cb1590 	.word	0x19cb1590
 8006904:	3efa01a0 	.word	0x3efa01a0
 8006908:	16c15177 	.word	0x16c15177
 800690c:	3f56c16c 	.word	0x3f56c16c
 8006910:	5555554c 	.word	0x5555554c
 8006914:	3fa55555 	.word	0x3fa55555
 8006918:	00000000 	.word	0x00000000
 800691c:	3ff00000 	.word	0x3ff00000
 8006920:	3fe00000 	.word	0x3fe00000
 8006924:	3fd33332 	.word	0x3fd33332
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	3fe90000 	.word	0x3fe90000
 8006930:	3fd20000 	.word	0x3fd20000
 8006934:	00000000 	.word	0x00000000

08006938 <__kernel_rem_pio2>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	ed2d 8b02 	vpush	{d8}
 8006940:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006944:	f112 0f14 	cmn.w	r2, #20
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9101      	str	r1, [sp, #4]
 800694c:	4bc6      	ldr	r3, [pc, #792]	; (8006c68 <__kernel_rem_pio2+0x330>)
 800694e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006950:	9009      	str	r0, [sp, #36]	; 0x24
 8006952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	f103 33ff 	add.w	r3, r3, #4294967295
 800695e:	bfa8      	it	ge
 8006960:	1ed4      	subge	r4, r2, #3
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	bfb2      	itee	lt
 8006966:	2400      	movlt	r4, #0
 8006968:	2318      	movge	r3, #24
 800696a:	fb94 f4f3 	sdivge	r4, r4, r3
 800696e:	f06f 0317 	mvn.w	r3, #23
 8006972:	fb04 3303 	mla	r3, r4, r3, r3
 8006976:	eb03 0a02 	add.w	sl, r3, r2
 800697a:	9b04      	ldr	r3, [sp, #16]
 800697c:	9a06      	ldr	r2, [sp, #24]
 800697e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006c58 <__kernel_rem_pio2+0x320>
 8006982:	eb03 0802 	add.w	r8, r3, r2
 8006986:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006988:	1aa7      	subs	r7, r4, r2
 800698a:	ae20      	add	r6, sp, #128	; 0x80
 800698c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006990:	2500      	movs	r5, #0
 8006992:	4545      	cmp	r5, r8
 8006994:	dd18      	ble.n	80069c8 <__kernel_rem_pio2+0x90>
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800699c:	aa20      	add	r2, sp, #128	; 0x80
 800699e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006c58 <__kernel_rem_pio2+0x320>
 80069a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80069a6:	f1c3 0301 	rsb	r3, r3, #1
 80069aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80069ae:	9307      	str	r3, [sp, #28]
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	4443      	add	r3, r8
 80069b6:	429a      	cmp	r2, r3
 80069b8:	db2f      	blt.n	8006a1a <__kernel_rem_pio2+0xe2>
 80069ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80069be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069c2:	462f      	mov	r7, r5
 80069c4:	2600      	movs	r6, #0
 80069c6:	e01b      	b.n	8006a00 <__kernel_rem_pio2+0xc8>
 80069c8:	42ef      	cmn	r7, r5
 80069ca:	d407      	bmi.n	80069dc <__kernel_rem_pio2+0xa4>
 80069cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80069d0:	f7f9 fda8 	bl	8000524 <__aeabi_i2d>
 80069d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80069d8:	3501      	adds	r5, #1
 80069da:	e7da      	b.n	8006992 <__kernel_rem_pio2+0x5a>
 80069dc:	ec51 0b18 	vmov	r0, r1, d8
 80069e0:	e7f8      	b.n	80069d4 <__kernel_rem_pio2+0x9c>
 80069e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f6:	f7f9 fc49 	bl	800028c <__adddf3>
 80069fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069fe:	3601      	adds	r6, #1
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	429e      	cmp	r6, r3
 8006a04:	f1a7 0708 	sub.w	r7, r7, #8
 8006a08:	ddeb      	ble.n	80069e2 <__kernel_rem_pio2+0xaa>
 8006a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a0e:	3508      	adds	r5, #8
 8006a10:	ecab 7b02 	vstmia	fp!, {d7}
 8006a14:	f108 0801 	add.w	r8, r8, #1
 8006a18:	e7ca      	b.n	80069b0 <__kernel_rem_pio2+0x78>
 8006a1a:	9b04      	ldr	r3, [sp, #16]
 8006a1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006a1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a24:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006a26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006a2a:	9c04      	ldr	r4, [sp, #16]
 8006a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a2e:	ab98      	add	r3, sp, #608	; 0x260
 8006a30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a34:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006a38:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006a3c:	f8cd b008 	str.w	fp, [sp, #8]
 8006a40:	4625      	mov	r5, r4
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	dc78      	bgt.n	8006b38 <__kernel_rem_pio2+0x200>
 8006a46:	ec47 6b10 	vmov	d0, r6, r7
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	f000 fbfc 	bl	8007248 <scalbn>
 8006a50:	ec57 6b10 	vmov	r6, r7, d0
 8006a54:	2200      	movs	r2, #0
 8006a56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006a5a:	ee10 0a10 	vmov	r0, s0
 8006a5e:	4639      	mov	r1, r7
 8006a60:	f7f9 fdca 	bl	80005f8 <__aeabi_dmul>
 8006a64:	ec41 0b10 	vmov	d0, r0, r1
 8006a68:	f000 fb6e 	bl	8007148 <floor>
 8006a6c:	4b7f      	ldr	r3, [pc, #508]	; (8006c6c <__kernel_rem_pio2+0x334>)
 8006a6e:	ec51 0b10 	vmov	r0, r1, d0
 8006a72:	2200      	movs	r2, #0
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc02 	bl	8000288 <__aeabi_dsub>
 8006a84:	460f      	mov	r7, r1
 8006a86:	4606      	mov	r6, r0
 8006a88:	f7fa f850 	bl	8000b2c <__aeabi_d2iz>
 8006a8c:	9007      	str	r0, [sp, #28]
 8006a8e:	f7f9 fd49 	bl	8000524 <__aeabi_i2d>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7f9 fbf5 	bl	8000288 <__aeabi_dsub>
 8006a9e:	f1ba 0f00 	cmp.w	sl, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	dd70      	ble.n	8006b8a <__kernel_rem_pio2+0x252>
 8006aa8:	1e62      	subs	r2, r4, #1
 8006aaa:	ab0c      	add	r3, sp, #48	; 0x30
 8006aac:	9d07      	ldr	r5, [sp, #28]
 8006aae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ab2:	f1ca 0118 	rsb	r1, sl, #24
 8006ab6:	fa40 f301 	asr.w	r3, r0, r1
 8006aba:	441d      	add	r5, r3
 8006abc:	408b      	lsls	r3, r1
 8006abe:	1ac0      	subs	r0, r0, r3
 8006ac0:	ab0c      	add	r3, sp, #48	; 0x30
 8006ac2:	9507      	str	r5, [sp, #28]
 8006ac4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006ac8:	f1ca 0317 	rsb	r3, sl, #23
 8006acc:	fa40 f303 	asr.w	r3, r0, r3
 8006ad0:	9302      	str	r3, [sp, #8]
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dd66      	ble.n	8006ba6 <__kernel_rem_pio2+0x26e>
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	2200      	movs	r2, #0
 8006adc:	3301      	adds	r3, #1
 8006ade:	9307      	str	r3, [sp, #28]
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006ae6:	4294      	cmp	r4, r2
 8006ae8:	f300 8099 	bgt.w	8006c1e <__kernel_rem_pio2+0x2e6>
 8006aec:	f1ba 0f00 	cmp.w	sl, #0
 8006af0:	dd07      	ble.n	8006b02 <__kernel_rem_pio2+0x1ca>
 8006af2:	f1ba 0f01 	cmp.w	sl, #1
 8006af6:	f000 80a5 	beq.w	8006c44 <__kernel_rem_pio2+0x30c>
 8006afa:	f1ba 0f02 	cmp.w	sl, #2
 8006afe:	f000 80c1 	beq.w	8006c84 <__kernel_rem_pio2+0x34c>
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d14e      	bne.n	8006ba6 <__kernel_rem_pio2+0x26e>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	4958      	ldr	r1, [pc, #352]	; (8006c70 <__kernel_rem_pio2+0x338>)
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f7f9 fbba 	bl	8000288 <__aeabi_dsub>
 8006b14:	4606      	mov	r6, r0
 8006b16:	460f      	mov	r7, r1
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	d044      	beq.n	8006ba6 <__kernel_rem_pio2+0x26e>
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006c60 <__kernel_rem_pio2+0x328>
 8006b22:	f000 fb91 	bl	8007248 <scalbn>
 8006b26:	4630      	mov	r0, r6
 8006b28:	4639      	mov	r1, r7
 8006b2a:	ec53 2b10 	vmov	r2, r3, d0
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	4606      	mov	r6, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	e036      	b.n	8006ba6 <__kernel_rem_pio2+0x26e>
 8006b38:	4b4e      	ldr	r3, [pc, #312]	; (8006c74 <__kernel_rem_pio2+0x33c>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	f7f9 fff2 	bl	8000b2c <__aeabi_d2iz>
 8006b48:	f7f9 fcec 	bl	8000524 <__aeabi_i2d>
 8006b4c:	4b4a      	ldr	r3, [pc, #296]	; (8006c78 <__kernel_rem_pio2+0x340>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4680      	mov	r8, r0
 8006b52:	4689      	mov	r9, r1
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 fb92 	bl	8000288 <__aeabi_dsub>
 8006b64:	f7f9 ffe2 	bl	8000b2c <__aeabi_d2iz>
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	f843 0b04 	str.w	r0, [r3], #4
 8006b6e:	3d01      	subs	r5, #1
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 fb84 	bl	800028c <__adddf3>
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	e75b      	b.n	8006a42 <__kernel_rem_pio2+0x10a>
 8006b8a:	d105      	bne.n	8006b98 <__kernel_rem_pio2+0x260>
 8006b8c:	1e63      	subs	r3, r4, #1
 8006b8e:	aa0c      	add	r2, sp, #48	; 0x30
 8006b90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b94:	15c3      	asrs	r3, r0, #23
 8006b96:	e79b      	b.n	8006ad0 <__kernel_rem_pio2+0x198>
 8006b98:	4b38      	ldr	r3, [pc, #224]	; (8006c7c <__kernel_rem_pio2+0x344>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 ffb2 	bl	8000b04 <__aeabi_dcmpge>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d139      	bne.n	8006c18 <__kernel_rem_pio2+0x2e0>
 8006ba4:	9002      	str	r0, [sp, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4630      	mov	r0, r6
 8006bac:	4639      	mov	r1, r7
 8006bae:	f7f9 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f000 80b4 	beq.w	8006d20 <__kernel_rem_pio2+0x3e8>
 8006bb8:	f104 3bff 	add.w	fp, r4, #4294967295
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	9904      	ldr	r1, [sp, #16]
 8006bc2:	428b      	cmp	r3, r1
 8006bc4:	da65      	bge.n	8006c92 <__kernel_rem_pio2+0x35a>
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	d07b      	beq.n	8006cc2 <__kernel_rem_pio2+0x38a>
 8006bca:	ab0c      	add	r3, sp, #48	; 0x30
 8006bcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006bd0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80a0 	beq.w	8006d1a <__kernel_rem_pio2+0x3e2>
 8006bda:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006c60 <__kernel_rem_pio2+0x328>
 8006bde:	4650      	mov	r0, sl
 8006be0:	f000 fb32 	bl	8007248 <scalbn>
 8006be4:	4f23      	ldr	r7, [pc, #140]	; (8006c74 <__kernel_rem_pio2+0x33c>)
 8006be6:	ec55 4b10 	vmov	r4, r5, d0
 8006bea:	46d8      	mov	r8, fp
 8006bec:	2600      	movs	r6, #0
 8006bee:	f1b8 0f00 	cmp.w	r8, #0
 8006bf2:	f280 80cf 	bge.w	8006d94 <__kernel_rem_pio2+0x45c>
 8006bf6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006c58 <__kernel_rem_pio2+0x320>
 8006bfa:	465f      	mov	r7, fp
 8006bfc:	f04f 0800 	mov.w	r8, #0
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f2c0 80fd 	blt.w	8006e00 <__kernel_rem_pio2+0x4c8>
 8006c06:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c08:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006c80 <__kernel_rem_pio2+0x348>
 8006c0c:	ec55 4b18 	vmov	r4, r5, d8
 8006c10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006c14:	2600      	movs	r6, #0
 8006c16:	e0e5      	b.n	8006de4 <__kernel_rem_pio2+0x4ac>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	e75c      	b.n	8006ad8 <__kernel_rem_pio2+0x1a0>
 8006c1e:	f8db 3000 	ldr.w	r3, [fp]
 8006c22:	b955      	cbnz	r5, 8006c3a <__kernel_rem_pio2+0x302>
 8006c24:	b123      	cbz	r3, 8006c30 <__kernel_rem_pio2+0x2f8>
 8006c26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006c2a:	f8cb 3000 	str.w	r3, [fp]
 8006c2e:	2301      	movs	r3, #1
 8006c30:	3201      	adds	r2, #1
 8006c32:	f10b 0b04 	add.w	fp, fp, #4
 8006c36:	461d      	mov	r5, r3
 8006c38:	e755      	b.n	8006ae6 <__kernel_rem_pio2+0x1ae>
 8006c3a:	1acb      	subs	r3, r1, r3
 8006c3c:	f8cb 3000 	str.w	r3, [fp]
 8006c40:	462b      	mov	r3, r5
 8006c42:	e7f5      	b.n	8006c30 <__kernel_rem_pio2+0x2f8>
 8006c44:	1e62      	subs	r2, r4, #1
 8006c46:	ab0c      	add	r3, sp, #48	; 0x30
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c50:	a90c      	add	r1, sp, #48	; 0x30
 8006c52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c56:	e754      	b.n	8006b02 <__kernel_rem_pio2+0x1ca>
	...
 8006c64:	3ff00000 	.word	0x3ff00000
 8006c68:	08008bd8 	.word	0x08008bd8
 8006c6c:	40200000 	.word	0x40200000
 8006c70:	3ff00000 	.word	0x3ff00000
 8006c74:	3e700000 	.word	0x3e700000
 8006c78:	41700000 	.word	0x41700000
 8006c7c:	3fe00000 	.word	0x3fe00000
 8006c80:	08008b98 	.word	0x08008b98
 8006c84:	1e62      	subs	r2, r4, #1
 8006c86:	ab0c      	add	r3, sp, #48	; 0x30
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c90:	e7de      	b.n	8006c50 <__kernel_rem_pio2+0x318>
 8006c92:	a90c      	add	r1, sp, #48	; 0x30
 8006c94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	e790      	b.n	8006bc0 <__kernel_rem_pio2+0x288>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	d0fa      	beq.n	8006c9e <__kernel_rem_pio2+0x366>
 8006ca8:	9a08      	ldr	r2, [sp, #32]
 8006caa:	18e3      	adds	r3, r4, r3
 8006cac:	18a6      	adds	r6, r4, r2
 8006cae:	aa20      	add	r2, sp, #128	; 0x80
 8006cb0:	1c65      	adds	r5, r4, #1
 8006cb2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	9b02      	ldr	r3, [sp, #8]
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	da04      	bge.n	8006cc8 <__kernel_rem_pio2+0x390>
 8006cbe:	461c      	mov	r4, r3
 8006cc0:	e6b5      	b.n	8006a2e <__kernel_rem_pio2+0xf6>
 8006cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e7eb      	b.n	8006ca0 <__kernel_rem_pio2+0x368>
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cce:	f7f9 fc29 	bl	8000524 <__aeabi_i2d>
 8006cd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	46b3      	mov	fp, r6
 8006cda:	461c      	mov	r4, r3
 8006cdc:	2700      	movs	r7, #0
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	9b06      	ldr	r3, [sp, #24]
 8006ce8:	429f      	cmp	r7, r3
 8006cea:	dd06      	ble.n	8006cfa <__kernel_rem_pio2+0x3c2>
 8006cec:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006cf2:	e9c3 8900 	strd	r8, r9, [r3]
 8006cf6:	3501      	adds	r5, #1
 8006cf8:	e7de      	b.n	8006cb8 <__kernel_rem_pio2+0x380>
 8006cfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006cfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006d02:	f7f9 fc79 	bl	80005f8 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fabd 	bl	800028c <__adddf3>
 8006d12:	3701      	adds	r7, #1
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	e7e5      	b.n	8006ce6 <__kernel_rem_pio2+0x3ae>
 8006d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d1e:	e754      	b.n	8006bca <__kernel_rem_pio2+0x292>
 8006d20:	ec47 6b10 	vmov	d0, r6, r7
 8006d24:	f1ca 0000 	rsb	r0, sl, #0
 8006d28:	f000 fa8e 	bl	8007248 <scalbn>
 8006d2c:	ec57 6b10 	vmov	r6, r7, d0
 8006d30:	4b9f      	ldr	r3, [pc, #636]	; (8006fb0 <__kernel_rem_pio2+0x678>)
 8006d32:	ee10 0a10 	vmov	r0, s0
 8006d36:	2200      	movs	r2, #0
 8006d38:	4639      	mov	r1, r7
 8006d3a:	f7f9 fee3 	bl	8000b04 <__aeabi_dcmpge>
 8006d3e:	b300      	cbz	r0, 8006d82 <__kernel_rem_pio2+0x44a>
 8006d40:	4b9c      	ldr	r3, [pc, #624]	; (8006fb4 <__kernel_rem_pio2+0x67c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 fc56 	bl	80005f8 <__aeabi_dmul>
 8006d4c:	f7f9 feee 	bl	8000b2c <__aeabi_d2iz>
 8006d50:	4605      	mov	r5, r0
 8006d52:	f7f9 fbe7 	bl	8000524 <__aeabi_i2d>
 8006d56:	4b96      	ldr	r3, [pc, #600]	; (8006fb0 <__kernel_rem_pio2+0x678>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4602      	mov	r2, r0
 8006d62:	4639      	mov	r1, r7
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	f7f9 fedf 	bl	8000b2c <__aeabi_d2iz>
 8006d6e:	f104 0b01 	add.w	fp, r4, #1
 8006d72:	ab0c      	add	r3, sp, #48	; 0x30
 8006d74:	f10a 0a18 	add.w	sl, sl, #24
 8006d78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d7c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006d80:	e72b      	b.n	8006bda <__kernel_rem_pio2+0x2a2>
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fed1 	bl	8000b2c <__aeabi_d2iz>
 8006d8a:	ab0c      	add	r3, sp, #48	; 0x30
 8006d8c:	46a3      	mov	fp, r4
 8006d8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d92:	e722      	b.n	8006bda <__kernel_rem_pio2+0x2a2>
 8006d94:	ab70      	add	r3, sp, #448	; 0x1c0
 8006d96:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006d9a:	ab0c      	add	r3, sp, #48	; 0x30
 8006d9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006da0:	f7f9 fbc0 	bl	8000524 <__aeabi_i2d>
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	f7f9 fc26 	bl	80005f8 <__aeabi_dmul>
 8006dac:	4632      	mov	r2, r6
 8006dae:	e9c9 0100 	strd	r0, r1, [r9]
 8006db2:	463b      	mov	r3, r7
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	e713      	b.n	8006bee <__kernel_rem_pio2+0x2b6>
 8006dc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006dca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006dce:	f7f9 fc13 	bl	80005f8 <__aeabi_dmul>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fa57 	bl	800028c <__adddf3>
 8006dde:	3601      	adds	r6, #1
 8006de0:	4604      	mov	r4, r0
 8006de2:	460d      	mov	r5, r1
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	429e      	cmp	r6, r3
 8006de8:	dc01      	bgt.n	8006dee <__kernel_rem_pio2+0x4b6>
 8006dea:	45b0      	cmp	r8, r6
 8006dec:	daeb      	bge.n	8006dc6 <__kernel_rem_pio2+0x48e>
 8006dee:	ab48      	add	r3, sp, #288	; 0x120
 8006df0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006df4:	e9c3 4500 	strd	r4, r5, [r3]
 8006df8:	3f01      	subs	r7, #1
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	e6ff      	b.n	8006c00 <__kernel_rem_pio2+0x2c8>
 8006e00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	dc0b      	bgt.n	8006e1e <__kernel_rem_pio2+0x4e6>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc6e      	bgt.n	8006ee8 <__kernel_rem_pio2+0x5b0>
 8006e0a:	d045      	beq.n	8006e98 <__kernel_rem_pio2+0x560>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	f003 0007 	and.w	r0, r3, #7
 8006e12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006e16:	ecbd 8b02 	vpop	{d8}
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d1f3      	bne.n	8006e0c <__kernel_rem_pio2+0x4d4>
 8006e24:	ab48      	add	r3, sp, #288	; 0x120
 8006e26:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006e2a:	46d0      	mov	r8, sl
 8006e2c:	46d9      	mov	r9, fp
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	f1a8 0808 	sub.w	r8, r8, #8
 8006e36:	dc64      	bgt.n	8006f02 <__kernel_rem_pio2+0x5ca>
 8006e38:	465c      	mov	r4, fp
 8006e3a:	2c01      	cmp	r4, #1
 8006e3c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006e40:	dc7e      	bgt.n	8006f40 <__kernel_rem_pio2+0x608>
 8006e42:	2000      	movs	r0, #0
 8006e44:	2100      	movs	r1, #0
 8006e46:	f1bb 0f01 	cmp.w	fp, #1
 8006e4a:	f300 8097 	bgt.w	8006f7c <__kernel_rem_pio2+0x644>
 8006e4e:	9b02      	ldr	r3, [sp, #8]
 8006e50:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006e54:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f040 8099 	bne.w	8006f90 <__kernel_rem_pio2+0x658>
 8006e5e:	9b01      	ldr	r3, [sp, #4]
 8006e60:	e9c3 5600 	strd	r5, r6, [r3]
 8006e64:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006e68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e6c:	e7ce      	b.n	8006e0c <__kernel_rem_pio2+0x4d4>
 8006e6e:	ab48      	add	r3, sp, #288	; 0x120
 8006e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 fa08 	bl	800028c <__adddf3>
 8006e7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e80:	f1bb 0f00 	cmp.w	fp, #0
 8006e84:	daf3      	bge.n	8006e6e <__kernel_rem_pio2+0x536>
 8006e86:	9b02      	ldr	r3, [sp, #8]
 8006e88:	b113      	cbz	r3, 8006e90 <__kernel_rem_pio2+0x558>
 8006e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e8e:	4619      	mov	r1, r3
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	e9c3 0100 	strd	r0, r1, [r3]
 8006e96:	e7b9      	b.n	8006e0c <__kernel_rem_pio2+0x4d4>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	e7f0      	b.n	8006e80 <__kernel_rem_pio2+0x548>
 8006e9e:	ab48      	add	r3, sp, #288	; 0x120
 8006ea0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9f0 	bl	800028c <__adddf3>
 8006eac:	3c01      	subs	r4, #1
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	daf5      	bge.n	8006e9e <__kernel_rem_pio2+0x566>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	b1e3      	cbz	r3, 8006ef0 <__kernel_rem_pio2+0x5b8>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ebc:	9c01      	ldr	r4, [sp, #4]
 8006ebe:	e9c4 2300 	strd	r2, r3, [r4]
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006eca:	f7f9 f9dd 	bl	8000288 <__aeabi_dsub>
 8006ece:	ad4a      	add	r5, sp, #296	; 0x128
 8006ed0:	2401      	movs	r4, #1
 8006ed2:	45a3      	cmp	fp, r4
 8006ed4:	da0f      	bge.n	8006ef6 <__kernel_rem_pio2+0x5be>
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	b113      	cbz	r3, 8006ee0 <__kernel_rem_pio2+0x5a8>
 8006eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ede:	4619      	mov	r1, r3
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006ee6:	e791      	b.n	8006e0c <__kernel_rem_pio2+0x4d4>
 8006ee8:	465c      	mov	r4, fp
 8006eea:	2000      	movs	r0, #0
 8006eec:	2100      	movs	r1, #0
 8006eee:	e7de      	b.n	8006eae <__kernel_rem_pio2+0x576>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e7e2      	b.n	8006ebc <__kernel_rem_pio2+0x584>
 8006ef6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006efa:	f7f9 f9c7 	bl	800028c <__adddf3>
 8006efe:	3401      	adds	r4, #1
 8006f00:	e7e7      	b.n	8006ed2 <__kernel_rem_pio2+0x59a>
 8006f02:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006f06:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	463b      	mov	r3, r7
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 f9bb 	bl	800028c <__adddf3>
 8006f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 f9b1 	bl	8000288 <__aeabi_dsub>
 8006f26:	4632      	mov	r2, r6
 8006f28:	463b      	mov	r3, r7
 8006f2a:	f7f9 f9af 	bl	800028c <__adddf3>
 8006f2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f32:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006f36:	ed88 7b00 	vstr	d7, [r8]
 8006f3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f3e:	e776      	b.n	8006e2e <__kernel_rem_pio2+0x4f6>
 8006f40:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f44:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f99c 	bl	800028c <__adddf3>
 8006f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 f992 	bl	8000288 <__aeabi_dsub>
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	f7f9 f990 	bl	800028c <__adddf3>
 8006f6c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f74:	ed8a 7b00 	vstr	d7, [sl]
 8006f78:	3c01      	subs	r4, #1
 8006f7a:	e75e      	b.n	8006e3a <__kernel_rem_pio2+0x502>
 8006f7c:	ab48      	add	r3, sp, #288	; 0x120
 8006f7e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 f981 	bl	800028c <__adddf3>
 8006f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f8e:	e75a      	b.n	8006e46 <__kernel_rem_pio2+0x50e>
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	9a01      	ldr	r2, [sp, #4]
 8006f94:	601d      	str	r5, [r3, #0]
 8006f96:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006f9a:	605c      	str	r4, [r3, #4]
 8006f9c:	609f      	str	r7, [r3, #8]
 8006f9e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006fa2:	60d3      	str	r3, [r2, #12]
 8006fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fa8:	6110      	str	r0, [r2, #16]
 8006faa:	6153      	str	r3, [r2, #20]
 8006fac:	e72e      	b.n	8006e0c <__kernel_rem_pio2+0x4d4>
 8006fae:	bf00      	nop
 8006fb0:	41700000 	.word	0x41700000
 8006fb4:	3e700000 	.word	0x3e700000

08006fb8 <__kernel_sin>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	ed2d 8b04 	vpush	{d8-d9}
 8006fc0:	eeb0 8a41 	vmov.f32	s16, s2
 8006fc4:	eef0 8a61 	vmov.f32	s17, s3
 8006fc8:	ec55 4b10 	vmov	r4, r5, d0
 8006fcc:	b083      	sub	sp, #12
 8006fce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006fd2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006fd6:	9001      	str	r0, [sp, #4]
 8006fd8:	da06      	bge.n	8006fe8 <__kernel_sin+0x30>
 8006fda:	ee10 0a10 	vmov	r0, s0
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 fda4 	bl	8000b2c <__aeabi_d2iz>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d051      	beq.n	800708c <__kernel_sin+0xd4>
 8006fe8:	4622      	mov	r2, r4
 8006fea:	462b      	mov	r3, r5
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 fb02 	bl	80005f8 <__aeabi_dmul>
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	468b      	mov	fp, r1
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 fafa 	bl	80005f8 <__aeabi_dmul>
 8007004:	a341      	add	r3, pc, #260	; (adr r3, 800710c <__kernel_sin+0x154>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	4680      	mov	r8, r0
 800700c:	4689      	mov	r9, r1
 800700e:	4650      	mov	r0, sl
 8007010:	4659      	mov	r1, fp
 8007012:	f7f9 faf1 	bl	80005f8 <__aeabi_dmul>
 8007016:	a33f      	add	r3, pc, #252	; (adr r3, 8007114 <__kernel_sin+0x15c>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	4652      	mov	r2, sl
 8007022:	465b      	mov	r3, fp
 8007024:	f7f9 fae8 	bl	80005f8 <__aeabi_dmul>
 8007028:	a33c      	add	r3, pc, #240	; (adr r3, 800711c <__kernel_sin+0x164>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f92d 	bl	800028c <__adddf3>
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	f7f9 fadf 	bl	80005f8 <__aeabi_dmul>
 800703a:	a33a      	add	r3, pc, #232	; (adr r3, 8007124 <__kernel_sin+0x16c>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f922 	bl	8000288 <__aeabi_dsub>
 8007044:	4652      	mov	r2, sl
 8007046:	465b      	mov	r3, fp
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	a337      	add	r3, pc, #220	; (adr r3, 800712c <__kernel_sin+0x174>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f91b 	bl	800028c <__adddf3>
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	b9eb      	cbnz	r3, 800709a <__kernel_sin+0xe2>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4650      	mov	r0, sl
 8007064:	4659      	mov	r1, fp
 8007066:	f7f9 fac7 	bl	80005f8 <__aeabi_dmul>
 800706a:	a325      	add	r3, pc, #148	; (adr r3, 8007100 <__kernel_sin+0x148>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 f90a 	bl	8000288 <__aeabi_dsub>
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f902 	bl	800028c <__adddf3>
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	ec45 4b10 	vmov	d0, r4, r5
 8007090:	b003      	add	sp, #12
 8007092:	ecbd 8b04 	vpop	{d8-d9}
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <__kernel_sin+0x150>)
 800709c:	ec51 0b18 	vmov	r0, r1, d8
 80070a0:	2200      	movs	r2, #0
 80070a2:	f7f9 faa9 	bl	80005f8 <__aeabi_dmul>
 80070a6:	4632      	mov	r2, r6
 80070a8:	ec41 0b19 	vmov	d9, r0, r1
 80070ac:	463b      	mov	r3, r7
 80070ae:	4640      	mov	r0, r8
 80070b0:	4649      	mov	r1, r9
 80070b2:	f7f9 faa1 	bl	80005f8 <__aeabi_dmul>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	ec51 0b19 	vmov	r0, r1, d9
 80070be:	f7f9 f8e3 	bl	8000288 <__aeabi_dsub>
 80070c2:	4652      	mov	r2, sl
 80070c4:	465b      	mov	r3, fp
 80070c6:	f7f9 fa97 	bl	80005f8 <__aeabi_dmul>
 80070ca:	ec53 2b18 	vmov	r2, r3, d8
 80070ce:	f7f9 f8db 	bl	8000288 <__aeabi_dsub>
 80070d2:	a30b      	add	r3, pc, #44	; (adr r3, 8007100 <__kernel_sin+0x148>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	4606      	mov	r6, r0
 80070da:	460f      	mov	r7, r1
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fa8a 	bl	80005f8 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f8ce 	bl	800028c <__adddf3>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4620      	mov	r0, r4
 80070f6:	4629      	mov	r1, r5
 80070f8:	f7f9 f8c6 	bl	8000288 <__aeabi_dsub>
 80070fc:	e7c4      	b.n	8007088 <__kernel_sin+0xd0>
 80070fe:	bf00      	nop
 8007100:	55555549 	.word	0x55555549
 8007104:	3fc55555 	.word	0x3fc55555
 8007108:	3fe00000 	.word	0x3fe00000
 800710c:	5acfd57c 	.word	0x5acfd57c
 8007110:	3de5d93a 	.word	0x3de5d93a
 8007114:	8a2b9ceb 	.word	0x8a2b9ceb
 8007118:	3e5ae5e6 	.word	0x3e5ae5e6
 800711c:	57b1fe7d 	.word	0x57b1fe7d
 8007120:	3ec71de3 	.word	0x3ec71de3
 8007124:	19c161d5 	.word	0x19c161d5
 8007128:	3f2a01a0 	.word	0x3f2a01a0
 800712c:	1110f8a6 	.word	0x1110f8a6
 8007130:	3f811111 	.word	0x3f811111

08007134 <fabs>:
 8007134:	ec51 0b10 	vmov	r0, r1, d0
 8007138:	ee10 2a10 	vmov	r2, s0
 800713c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007140:	ec43 2b10 	vmov	d0, r2, r3
 8007144:	4770      	bx	lr
	...

08007148 <floor>:
 8007148:	ec51 0b10 	vmov	r0, r1, d0
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007154:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007158:	2e13      	cmp	r6, #19
 800715a:	ee10 5a10 	vmov	r5, s0
 800715e:	ee10 8a10 	vmov	r8, s0
 8007162:	460c      	mov	r4, r1
 8007164:	dc32      	bgt.n	80071cc <floor+0x84>
 8007166:	2e00      	cmp	r6, #0
 8007168:	da14      	bge.n	8007194 <floor+0x4c>
 800716a:	a333      	add	r3, pc, #204	; (adr r3, 8007238 <floor+0xf0>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 f88c 	bl	800028c <__adddf3>
 8007174:	2200      	movs	r2, #0
 8007176:	2300      	movs	r3, #0
 8007178:	f7f9 fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800717c:	b138      	cbz	r0, 800718e <floor+0x46>
 800717e:	2c00      	cmp	r4, #0
 8007180:	da57      	bge.n	8007232 <floor+0xea>
 8007182:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007186:	431d      	orrs	r5, r3
 8007188:	d001      	beq.n	800718e <floor+0x46>
 800718a:	4c2d      	ldr	r4, [pc, #180]	; (8007240 <floor+0xf8>)
 800718c:	2500      	movs	r5, #0
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	e025      	b.n	80071e0 <floor+0x98>
 8007194:	4f2b      	ldr	r7, [pc, #172]	; (8007244 <floor+0xfc>)
 8007196:	4137      	asrs	r7, r6
 8007198:	ea01 0307 	and.w	r3, r1, r7
 800719c:	4303      	orrs	r3, r0
 800719e:	d01f      	beq.n	80071e0 <floor+0x98>
 80071a0:	a325      	add	r3, pc, #148	; (adr r3, 8007238 <floor+0xf0>)
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f7f9 f871 	bl	800028c <__adddf3>
 80071aa:	2200      	movs	r2, #0
 80071ac:	2300      	movs	r3, #0
 80071ae:	f7f9 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d0eb      	beq.n	800718e <floor+0x46>
 80071b6:	2c00      	cmp	r4, #0
 80071b8:	bfbe      	ittt	lt
 80071ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80071be:	fa43 f606 	asrlt.w	r6, r3, r6
 80071c2:	19a4      	addlt	r4, r4, r6
 80071c4:	ea24 0407 	bic.w	r4, r4, r7
 80071c8:	2500      	movs	r5, #0
 80071ca:	e7e0      	b.n	800718e <floor+0x46>
 80071cc:	2e33      	cmp	r6, #51	; 0x33
 80071ce:	dd0b      	ble.n	80071e8 <floor+0xa0>
 80071d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80071d4:	d104      	bne.n	80071e0 <floor+0x98>
 80071d6:	ee10 2a10 	vmov	r2, s0
 80071da:	460b      	mov	r3, r1
 80071dc:	f7f9 f856 	bl	800028c <__adddf3>
 80071e0:	ec41 0b10 	vmov	d0, r0, r1
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295
 80071f0:	fa23 f707 	lsr.w	r7, r3, r7
 80071f4:	4207      	tst	r7, r0
 80071f6:	d0f3      	beq.n	80071e0 <floor+0x98>
 80071f8:	a30f      	add	r3, pc, #60	; (adr r3, 8007238 <floor+0xf0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f7f9 f845 	bl	800028c <__adddf3>
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	f7f9 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800720a:	2800      	cmp	r0, #0
 800720c:	d0bf      	beq.n	800718e <floor+0x46>
 800720e:	2c00      	cmp	r4, #0
 8007210:	da02      	bge.n	8007218 <floor+0xd0>
 8007212:	2e14      	cmp	r6, #20
 8007214:	d103      	bne.n	800721e <floor+0xd6>
 8007216:	3401      	adds	r4, #1
 8007218:	ea25 0507 	bic.w	r5, r5, r7
 800721c:	e7b7      	b.n	800718e <floor+0x46>
 800721e:	2301      	movs	r3, #1
 8007220:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007224:	fa03 f606 	lsl.w	r6, r3, r6
 8007228:	4435      	add	r5, r6
 800722a:	4545      	cmp	r5, r8
 800722c:	bf38      	it	cc
 800722e:	18e4      	addcc	r4, r4, r3
 8007230:	e7f2      	b.n	8007218 <floor+0xd0>
 8007232:	2500      	movs	r5, #0
 8007234:	462c      	mov	r4, r5
 8007236:	e7aa      	b.n	800718e <floor+0x46>
 8007238:	8800759c 	.word	0x8800759c
 800723c:	7e37e43c 	.word	0x7e37e43c
 8007240:	bff00000 	.word	0xbff00000
 8007244:	000fffff 	.word	0x000fffff

08007248 <scalbn>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	ec55 4b10 	vmov	r4, r5, d0
 800724e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007252:	4606      	mov	r6, r0
 8007254:	462b      	mov	r3, r5
 8007256:	b99a      	cbnz	r2, 8007280 <scalbn+0x38>
 8007258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800725c:	4323      	orrs	r3, r4
 800725e:	d036      	beq.n	80072ce <scalbn+0x86>
 8007260:	4b39      	ldr	r3, [pc, #228]	; (8007348 <scalbn+0x100>)
 8007262:	4629      	mov	r1, r5
 8007264:	ee10 0a10 	vmov	r0, s0
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <scalbn+0x104>)
 8007270:	429e      	cmp	r6, r3
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	da10      	bge.n	800729a <scalbn+0x52>
 8007278:	a32b      	add	r3, pc, #172	; (adr r3, 8007328 <scalbn+0xe0>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	e03a      	b.n	80072f6 <scalbn+0xae>
 8007280:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007284:	428a      	cmp	r2, r1
 8007286:	d10c      	bne.n	80072a2 <scalbn+0x5a>
 8007288:	ee10 2a10 	vmov	r2, s0
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	f7f8 fffc 	bl	800028c <__adddf3>
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	e019      	b.n	80072ce <scalbn+0x86>
 800729a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800729e:	460b      	mov	r3, r1
 80072a0:	3a36      	subs	r2, #54	; 0x36
 80072a2:	4432      	add	r2, r6
 80072a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80072a8:	428a      	cmp	r2, r1
 80072aa:	dd08      	ble.n	80072be <scalbn+0x76>
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	a120      	add	r1, pc, #128	; (adr r1, 8007330 <scalbn+0xe8>)
 80072b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072b4:	da1c      	bge.n	80072f0 <scalbn+0xa8>
 80072b6:	a120      	add	r1, pc, #128	; (adr r1, 8007338 <scalbn+0xf0>)
 80072b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072bc:	e018      	b.n	80072f0 <scalbn+0xa8>
 80072be:	2a00      	cmp	r2, #0
 80072c0:	dd08      	ble.n	80072d4 <scalbn+0x8c>
 80072c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072ce:	ec45 4b10 	vmov	d0, r4, r5
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80072d8:	da19      	bge.n	800730e <scalbn+0xc6>
 80072da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80072de:	429e      	cmp	r6, r3
 80072e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80072e4:	dd0a      	ble.n	80072fc <scalbn+0xb4>
 80072e6:	a112      	add	r1, pc, #72	; (adr r1, 8007330 <scalbn+0xe8>)
 80072e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e2      	bne.n	80072b6 <scalbn+0x6e>
 80072f0:	a30f      	add	r3, pc, #60	; (adr r3, 8007330 <scalbn+0xe8>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	e7cb      	b.n	8007294 <scalbn+0x4c>
 80072fc:	a10a      	add	r1, pc, #40	; (adr r1, 8007328 <scalbn+0xe0>)
 80072fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0b8      	beq.n	8007278 <scalbn+0x30>
 8007306:	a10e      	add	r1, pc, #56	; (adr r1, 8007340 <scalbn+0xf8>)
 8007308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800730c:	e7b4      	b.n	8007278 <scalbn+0x30>
 800730e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007312:	3236      	adds	r2, #54	; 0x36
 8007314:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007318:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800731c:	4620      	mov	r0, r4
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <scalbn+0x108>)
 8007320:	2200      	movs	r2, #0
 8007322:	e7e8      	b.n	80072f6 <scalbn+0xae>
 8007324:	f3af 8000 	nop.w
 8007328:	c2f8f359 	.word	0xc2f8f359
 800732c:	01a56e1f 	.word	0x01a56e1f
 8007330:	8800759c 	.word	0x8800759c
 8007334:	7e37e43c 	.word	0x7e37e43c
 8007338:	8800759c 	.word	0x8800759c
 800733c:	fe37e43c 	.word	0xfe37e43c
 8007340:	c2f8f359 	.word	0xc2f8f359
 8007344:	81a56e1f 	.word	0x81a56e1f
 8007348:	43500000 	.word	0x43500000
 800734c:	ffff3cb0 	.word	0xffff3cb0
 8007350:	3c900000 	.word	0x3c900000

08007354 <abort>:
 8007354:	b508      	push	{r3, lr}
 8007356:	2006      	movs	r0, #6
 8007358:	f000 f96e 	bl	8007638 <raise>
 800735c:	2001      	movs	r0, #1
 800735e:	f7fd faa5 	bl	80048ac <_exit>

08007362 <atexit>:
 8007362:	2300      	movs	r3, #0
 8007364:	4601      	mov	r1, r0
 8007366:	461a      	mov	r2, r3
 8007368:	4618      	mov	r0, r3
 800736a:	f000 b9a1 	b.w	80076b0 <__register_exitproc>
	...

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	; (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	2000000c 	.word	0x2000000c

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4d0d      	ldr	r5, [pc, #52]	; (80073b4 <__libc_init_array+0x38>)
 8007380:	4c0d      	ldr	r4, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	2600      	movs	r6, #0
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	4d0b      	ldr	r5, [pc, #44]	; (80073bc <__libc_init_array+0x40>)
 800738e:	4c0c      	ldr	r4, [pc, #48]	; (80073c0 <__libc_init_array+0x44>)
 8007390:	f001 fa58 	bl	8008844 <_init>
 8007394:	1b64      	subs	r4, r4, r5
 8007396:	10a4      	asrs	r4, r4, #2
 8007398:	2600      	movs	r6, #0
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	08008d3c 	.word	0x08008d3c
 80073b8:	08008d3c 	.word	0x08008d3c
 80073bc:	08008d3c 	.word	0x08008d3c
 80073c0:	08008d40 	.word	0x08008d40

080073c4 <malloc>:
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <malloc+0xc>)
 80073c6:	4601      	mov	r1, r0
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f000 b863 	b.w	8007494 <_malloc_r>
 80073ce:	bf00      	nop
 80073d0:	2000000c 	.word	0x2000000c

080073d4 <free>:
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <free+0xc>)
 80073d6:	4601      	mov	r1, r0
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	f000 b80b 	b.w	80073f4 <_free_r>
 80073de:	bf00      	nop
 80073e0:	2000000c 	.word	0x2000000c

080073e4 <memset>:
 80073e4:	4402      	add	r2, r0
 80073e6:	4603      	mov	r3, r0
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d100      	bne.n	80073ee <memset+0xa>
 80073ec:	4770      	bx	lr
 80073ee:	f803 1b01 	strb.w	r1, [r3], #1
 80073f2:	e7f9      	b.n	80073e8 <memset+0x4>

080073f4 <_free_r>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d048      	beq.n	800748c <_free_r+0x98>
 80073fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fe:	9001      	str	r0, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f1a1 0404 	sub.w	r4, r1, #4
 8007406:	bfb8      	it	lt
 8007408:	18e4      	addlt	r4, r4, r3
 800740a:	f000 f9e7 	bl	80077dc <__malloc_lock>
 800740e:	4a20      	ldr	r2, [pc, #128]	; (8007490 <_free_r+0x9c>)
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	4615      	mov	r5, r2
 8007416:	b933      	cbnz	r3, 8007426 <_free_r+0x32>
 8007418:	6063      	str	r3, [r4, #4]
 800741a:	6014      	str	r4, [r2, #0]
 800741c:	b003      	add	sp, #12
 800741e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007422:	f000 b9e1 	b.w	80077e8 <__malloc_unlock>
 8007426:	42a3      	cmp	r3, r4
 8007428:	d90b      	bls.n	8007442 <_free_r+0x4e>
 800742a:	6821      	ldr	r1, [r4, #0]
 800742c:	1862      	adds	r2, r4, r1
 800742e:	4293      	cmp	r3, r2
 8007430:	bf04      	itt	eq
 8007432:	681a      	ldreq	r2, [r3, #0]
 8007434:	685b      	ldreq	r3, [r3, #4]
 8007436:	6063      	str	r3, [r4, #4]
 8007438:	bf04      	itt	eq
 800743a:	1852      	addeq	r2, r2, r1
 800743c:	6022      	streq	r2, [r4, #0]
 800743e:	602c      	str	r4, [r5, #0]
 8007440:	e7ec      	b.n	800741c <_free_r+0x28>
 8007442:	461a      	mov	r2, r3
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	b10b      	cbz	r3, 800744c <_free_r+0x58>
 8007448:	42a3      	cmp	r3, r4
 800744a:	d9fa      	bls.n	8007442 <_free_r+0x4e>
 800744c:	6811      	ldr	r1, [r2, #0]
 800744e:	1855      	adds	r5, r2, r1
 8007450:	42a5      	cmp	r5, r4
 8007452:	d10b      	bne.n	800746c <_free_r+0x78>
 8007454:	6824      	ldr	r4, [r4, #0]
 8007456:	4421      	add	r1, r4
 8007458:	1854      	adds	r4, r2, r1
 800745a:	42a3      	cmp	r3, r4
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	d1dd      	bne.n	800741c <_free_r+0x28>
 8007460:	681c      	ldr	r4, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	6053      	str	r3, [r2, #4]
 8007466:	4421      	add	r1, r4
 8007468:	6011      	str	r1, [r2, #0]
 800746a:	e7d7      	b.n	800741c <_free_r+0x28>
 800746c:	d902      	bls.n	8007474 <_free_r+0x80>
 800746e:	230c      	movs	r3, #12
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	e7d3      	b.n	800741c <_free_r+0x28>
 8007474:	6825      	ldr	r5, [r4, #0]
 8007476:	1961      	adds	r1, r4, r5
 8007478:	428b      	cmp	r3, r1
 800747a:	bf04      	itt	eq
 800747c:	6819      	ldreq	r1, [r3, #0]
 800747e:	685b      	ldreq	r3, [r3, #4]
 8007480:	6063      	str	r3, [r4, #4]
 8007482:	bf04      	itt	eq
 8007484:	1949      	addeq	r1, r1, r5
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	6054      	str	r4, [r2, #4]
 800748a:	e7c7      	b.n	800741c <_free_r+0x28>
 800748c:	b003      	add	sp, #12
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	20002b84 	.word	0x20002b84

08007494 <_malloc_r>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	1ccd      	adds	r5, r1, #3
 8007498:	f025 0503 	bic.w	r5, r5, #3
 800749c:	3508      	adds	r5, #8
 800749e:	2d0c      	cmp	r5, #12
 80074a0:	bf38      	it	cc
 80074a2:	250c      	movcc	r5, #12
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	4606      	mov	r6, r0
 80074a8:	db01      	blt.n	80074ae <_malloc_r+0x1a>
 80074aa:	42a9      	cmp	r1, r5
 80074ac:	d903      	bls.n	80074b6 <_malloc_r+0x22>
 80074ae:	230c      	movs	r3, #12
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	2000      	movs	r0, #0
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b6:	f000 f991 	bl	80077dc <__malloc_lock>
 80074ba:	4921      	ldr	r1, [pc, #132]	; (8007540 <_malloc_r+0xac>)
 80074bc:	680a      	ldr	r2, [r1, #0]
 80074be:	4614      	mov	r4, r2
 80074c0:	b99c      	cbnz	r4, 80074ea <_malloc_r+0x56>
 80074c2:	4f20      	ldr	r7, [pc, #128]	; (8007544 <_malloc_r+0xb0>)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	b923      	cbnz	r3, 80074d2 <_malloc_r+0x3e>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4630      	mov	r0, r6
 80074cc:	f000 f87c 	bl	80075c8 <_sbrk_r>
 80074d0:	6038      	str	r0, [r7, #0]
 80074d2:	4629      	mov	r1, r5
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f877 	bl	80075c8 <_sbrk_r>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d123      	bne.n	8007526 <_malloc_r+0x92>
 80074de:	230c      	movs	r3, #12
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 f980 	bl	80077e8 <__malloc_unlock>
 80074e8:	e7e3      	b.n	80074b2 <_malloc_r+0x1e>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	1b5b      	subs	r3, r3, r5
 80074ee:	d417      	bmi.n	8007520 <_malloc_r+0x8c>
 80074f0:	2b0b      	cmp	r3, #11
 80074f2:	d903      	bls.n	80074fc <_malloc_r+0x68>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	441c      	add	r4, r3
 80074f8:	6025      	str	r5, [r4, #0]
 80074fa:	e004      	b.n	8007506 <_malloc_r+0x72>
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	42a2      	cmp	r2, r4
 8007500:	bf0c      	ite	eq
 8007502:	600b      	streq	r3, [r1, #0]
 8007504:	6053      	strne	r3, [r2, #4]
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f96e 	bl	80077e8 <__malloc_unlock>
 800750c:	f104 000b 	add.w	r0, r4, #11
 8007510:	1d23      	adds	r3, r4, #4
 8007512:	f020 0007 	bic.w	r0, r0, #7
 8007516:	1ac2      	subs	r2, r0, r3
 8007518:	d0cc      	beq.n	80074b4 <_malloc_r+0x20>
 800751a:	1a1b      	subs	r3, r3, r0
 800751c:	50a3      	str	r3, [r4, r2]
 800751e:	e7c9      	b.n	80074b4 <_malloc_r+0x20>
 8007520:	4622      	mov	r2, r4
 8007522:	6864      	ldr	r4, [r4, #4]
 8007524:	e7cc      	b.n	80074c0 <_malloc_r+0x2c>
 8007526:	1cc4      	adds	r4, r0, #3
 8007528:	f024 0403 	bic.w	r4, r4, #3
 800752c:	42a0      	cmp	r0, r4
 800752e:	d0e3      	beq.n	80074f8 <_malloc_r+0x64>
 8007530:	1a21      	subs	r1, r4, r0
 8007532:	4630      	mov	r0, r6
 8007534:	f000 f848 	bl	80075c8 <_sbrk_r>
 8007538:	3001      	adds	r0, #1
 800753a:	d1dd      	bne.n	80074f8 <_malloc_r+0x64>
 800753c:	e7cf      	b.n	80074de <_malloc_r+0x4a>
 800753e:	bf00      	nop
 8007540:	20002b84 	.word	0x20002b84
 8007544:	20002b88 	.word	0x20002b88

08007548 <rand>:
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <rand+0x60>)
 800754a:	b510      	push	{r4, lr}
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007550:	b9b3      	cbnz	r3, 8007580 <rand+0x38>
 8007552:	2018      	movs	r0, #24
 8007554:	f7ff ff36 	bl	80073c4 <malloc>
 8007558:	63a0      	str	r0, [r4, #56]	; 0x38
 800755a:	b928      	cbnz	r0, 8007568 <rand+0x20>
 800755c:	4602      	mov	r2, r0
 800755e:	4b13      	ldr	r3, [pc, #76]	; (80075ac <rand+0x64>)
 8007560:	4813      	ldr	r0, [pc, #76]	; (80075b0 <rand+0x68>)
 8007562:	214e      	movs	r1, #78	; 0x4e
 8007564:	f000 f906 	bl	8007774 <__assert_func>
 8007568:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <rand+0x6c>)
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <rand+0x70>)
 800756c:	e9c0 2300 	strd	r2, r3, [r0]
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <rand+0x74>)
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	230b      	movs	r3, #11
 8007576:	8183      	strh	r3, [r0, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	2300      	movs	r3, #0
 800757c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007580:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007582:	480f      	ldr	r0, [pc, #60]	; (80075c0 <rand+0x78>)
 8007584:	690a      	ldr	r2, [r1, #16]
 8007586:	694b      	ldr	r3, [r1, #20]
 8007588:	4c0e      	ldr	r4, [pc, #56]	; (80075c4 <rand+0x7c>)
 800758a:	4350      	muls	r0, r2
 800758c:	fb04 0003 	mla	r0, r4, r3, r0
 8007590:	fba2 3404 	umull	r3, r4, r2, r4
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	4404      	add	r4, r0
 8007598:	f144 0000 	adc.w	r0, r4, #0
 800759c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80075a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c
 80075ac:	08008bec 	.word	0x08008bec
 80075b0:	08008c03 	.word	0x08008c03
 80075b4:	abcd330e 	.word	0xabcd330e
 80075b8:	e66d1234 	.word	0xe66d1234
 80075bc:	0005deec 	.word	0x0005deec
 80075c0:	5851f42d 	.word	0x5851f42d
 80075c4:	4c957f2d 	.word	0x4c957f2d

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fd f9e2 	bl	800499c <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20002c2c 	.word	0x20002c2c

080075e8 <_raise_r>:
 80075e8:	291f      	cmp	r1, #31
 80075ea:	b538      	push	{r3, r4, r5, lr}
 80075ec:	4604      	mov	r4, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	d904      	bls.n	80075fc <_raise_r+0x14>
 80075f2:	2316      	movs	r3, #22
 80075f4:	6003      	str	r3, [r0, #0]
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075fe:	b112      	cbz	r2, 8007606 <_raise_r+0x1e>
 8007600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007604:	b94b      	cbnz	r3, 800761a <_raise_r+0x32>
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f830 	bl	800766c <_getpid_r>
 800760c:	462a      	mov	r2, r5
 800760e:	4601      	mov	r1, r0
 8007610:	4620      	mov	r0, r4
 8007612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007616:	f000 b817 	b.w	8007648 <_kill_r>
 800761a:	2b01      	cmp	r3, #1
 800761c:	d00a      	beq.n	8007634 <_raise_r+0x4c>
 800761e:	1c59      	adds	r1, r3, #1
 8007620:	d103      	bne.n	800762a <_raise_r+0x42>
 8007622:	2316      	movs	r3, #22
 8007624:	6003      	str	r3, [r0, #0]
 8007626:	2001      	movs	r0, #1
 8007628:	e7e7      	b.n	80075fa <_raise_r+0x12>
 800762a:	2400      	movs	r4, #0
 800762c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007630:	4628      	mov	r0, r5
 8007632:	4798      	blx	r3
 8007634:	2000      	movs	r0, #0
 8007636:	e7e0      	b.n	80075fa <_raise_r+0x12>

08007638 <raise>:
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <raise+0xc>)
 800763a:	4601      	mov	r1, r0
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f7ff bfd3 	b.w	80075e8 <_raise_r>
 8007642:	bf00      	nop
 8007644:	2000000c 	.word	0x2000000c

08007648 <_kill_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_kill_r+0x20>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	602b      	str	r3, [r5, #0]
 8007656:	f7fd f919 	bl	800488c <_kill>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	d102      	bne.n	8007664 <_kill_r+0x1c>
 800765e:	682b      	ldr	r3, [r5, #0]
 8007660:	b103      	cbz	r3, 8007664 <_kill_r+0x1c>
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	bf00      	nop
 8007668:	20002c2c 	.word	0x20002c2c

0800766c <_getpid_r>:
 800766c:	f7fd b906 	b.w	800487c <_getpid>

08007670 <_vsiprintf_r>:
 8007670:	b500      	push	{lr}
 8007672:	b09b      	sub	sp, #108	; 0x6c
 8007674:	9100      	str	r1, [sp, #0]
 8007676:	9104      	str	r1, [sp, #16]
 8007678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800767c:	9105      	str	r1, [sp, #20]
 800767e:	9102      	str	r1, [sp, #8]
 8007680:	4905      	ldr	r1, [pc, #20]	; (8007698 <_vsiprintf_r+0x28>)
 8007682:	9103      	str	r1, [sp, #12]
 8007684:	4669      	mov	r1, sp
 8007686:	f000 f911 	bl	80078ac <_svfiprintf_r>
 800768a:	9b00      	ldr	r3, [sp, #0]
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	b01b      	add	sp, #108	; 0x6c
 8007692:	f85d fb04 	ldr.w	pc, [sp], #4
 8007696:	bf00      	nop
 8007698:	ffff0208 	.word	0xffff0208

0800769c <vsiprintf>:
 800769c:	4613      	mov	r3, r2
 800769e:	460a      	mov	r2, r1
 80076a0:	4601      	mov	r1, r0
 80076a2:	4802      	ldr	r0, [pc, #8]	; (80076ac <vsiprintf+0x10>)
 80076a4:	6800      	ldr	r0, [r0, #0]
 80076a6:	f7ff bfe3 	b.w	8007670 <_vsiprintf_r>
 80076aa:	bf00      	nop
 80076ac:	2000000c 	.word	0x2000000c

080076b0 <__register_exitproc>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007770 <__register_exitproc+0xc0>
 80076b8:	4606      	mov	r6, r0
 80076ba:	f8d8 0000 	ldr.w	r0, [r8]
 80076be:	461f      	mov	r7, r3
 80076c0:	460d      	mov	r5, r1
 80076c2:	4691      	mov	r9, r2
 80076c4:	f000 f887 	bl	80077d6 <__retarget_lock_acquire_recursive>
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__register_exitproc+0xb0>)
 80076ca:	681c      	ldr	r4, [r3, #0]
 80076cc:	b934      	cbnz	r4, 80076dc <__register_exitproc+0x2c>
 80076ce:	4c25      	ldr	r4, [pc, #148]	; (8007764 <__register_exitproc+0xb4>)
 80076d0:	601c      	str	r4, [r3, #0]
 80076d2:	4b25      	ldr	r3, [pc, #148]	; (8007768 <__register_exitproc+0xb8>)
 80076d4:	b113      	cbz	r3, 80076dc <__register_exitproc+0x2c>
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	2b1f      	cmp	r3, #31
 80076e0:	dd07      	ble.n	80076f2 <__register_exitproc+0x42>
 80076e2:	f8d8 0000 	ldr.w	r0, [r8]
 80076e6:	f000 f878 	bl	80077da <__retarget_lock_release_recursive>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	b34e      	cbz	r6, 8007748 <__register_exitproc+0x98>
 80076f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80076f8:	b988      	cbnz	r0, 800771e <__register_exitproc+0x6e>
 80076fa:	4b1c      	ldr	r3, [pc, #112]	; (800776c <__register_exitproc+0xbc>)
 80076fc:	b923      	cbnz	r3, 8007708 <__register_exitproc+0x58>
 80076fe:	f8d8 0000 	ldr.w	r0, [r8]
 8007702:	f000 f869 	bl	80077d8 <__retarget_lock_release>
 8007706:	e7f0      	b.n	80076ea <__register_exitproc+0x3a>
 8007708:	f44f 7084 	mov.w	r0, #264	; 0x108
 800770c:	f7ff fe5a 	bl	80073c4 <malloc>
 8007710:	2800      	cmp	r0, #0
 8007712:	d0f4      	beq.n	80076fe <__register_exitproc+0x4e>
 8007714:	2300      	movs	r3, #0
 8007716:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800771a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800771e:	6863      	ldr	r3, [r4, #4]
 8007720:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800772c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007730:	4313      	orrs	r3, r2
 8007732:	2e02      	cmp	r6, #2
 8007734:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007738:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800773c:	bf02      	ittt	eq
 800773e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8007742:	431a      	orreq	r2, r3
 8007744:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	f8d8 0000 	ldr.w	r0, [r8]
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	3302      	adds	r3, #2
 8007752:	6062      	str	r2, [r4, #4]
 8007754:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007758:	f000 f83f 	bl	80077da <__retarget_lock_release_recursive>
 800775c:	2000      	movs	r0, #0
 800775e:	e7c6      	b.n	80076ee <__register_exitproc+0x3e>
 8007760:	20002c18 	.word	0x20002c18
 8007764:	20002b8c 	.word	0x20002b8c
 8007768:	00000000 	.word	0x00000000
 800776c:	080073c5 	.word	0x080073c5
 8007770:	20000070 	.word	0x20000070

08007774 <__assert_func>:
 8007774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007776:	4614      	mov	r4, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <__assert_func+0x2c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4605      	mov	r5, r0
 8007780:	68d8      	ldr	r0, [r3, #12]
 8007782:	b14c      	cbz	r4, 8007798 <__assert_func+0x24>
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <__assert_func+0x30>)
 8007786:	9100      	str	r1, [sp, #0]
 8007788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <__assert_func+0x34>)
 800778e:	462b      	mov	r3, r5
 8007790:	f000 f80e 	bl	80077b0 <fiprintf>
 8007794:	f7ff fdde 	bl	8007354 <abort>
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <__assert_func+0x38>)
 800779a:	461c      	mov	r4, r3
 800779c:	e7f3      	b.n	8007786 <__assert_func+0x12>
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	08008c62 	.word	0x08008c62
 80077a8:	08008c6f 	.word	0x08008c6f
 80077ac:	08008c9d 	.word	0x08008c9d

080077b0 <fiprintf>:
 80077b0:	b40e      	push	{r1, r2, r3}
 80077b2:	b503      	push	{r0, r1, lr}
 80077b4:	4601      	mov	r1, r0
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	4805      	ldr	r0, [pc, #20]	; (80077d0 <fiprintf+0x20>)
 80077ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80077be:	6800      	ldr	r0, [r0, #0]
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f000 f99d 	bl	8007b00 <_vfiprintf_r>
 80077c6:	b002      	add	sp, #8
 80077c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077cc:	b003      	add	sp, #12
 80077ce:	4770      	bx	lr
 80077d0:	2000000c 	.word	0x2000000c

080077d4 <__retarget_lock_init_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__retarget_lock_acquire_recursive>:
 80077d6:	4770      	bx	lr

080077d8 <__retarget_lock_release>:
 80077d8:	4770      	bx	lr

080077da <__retarget_lock_release_recursive>:
 80077da:	4770      	bx	lr

080077dc <__malloc_lock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_lock+0x8>)
 80077de:	f7ff bffa 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	20002c24 	.word	0x20002c24

080077e8 <__malloc_unlock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_unlock+0x8>)
 80077ea:	f7ff bff6 	b.w	80077da <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	20002c24 	.word	0x20002c24

080077f4 <__ssputs_r>:
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	688e      	ldr	r6, [r1, #8]
 80077fa:	429e      	cmp	r6, r3
 80077fc:	4682      	mov	sl, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	4690      	mov	r8, r2
 8007802:	461f      	mov	r7, r3
 8007804:	d838      	bhi.n	8007878 <__ssputs_r+0x84>
 8007806:	898a      	ldrh	r2, [r1, #12]
 8007808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800780c:	d032      	beq.n	8007874 <__ssputs_r+0x80>
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	6909      	ldr	r1, [r1, #16]
 8007812:	eba5 0901 	sub.w	r9, r5, r1
 8007816:	6965      	ldr	r5, [r4, #20]
 8007818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800781c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007820:	3301      	adds	r3, #1
 8007822:	444b      	add	r3, r9
 8007824:	106d      	asrs	r5, r5, #1
 8007826:	429d      	cmp	r5, r3
 8007828:	bf38      	it	cc
 800782a:	461d      	movcc	r5, r3
 800782c:	0553      	lsls	r3, r2, #21
 800782e:	d531      	bpl.n	8007894 <__ssputs_r+0xa0>
 8007830:	4629      	mov	r1, r5
 8007832:	f7ff fe2f 	bl	8007494 <_malloc_r>
 8007836:	4606      	mov	r6, r0
 8007838:	b950      	cbnz	r0, 8007850 <__ssputs_r+0x5c>
 800783a:	230c      	movs	r3, #12
 800783c:	f8ca 3000 	str.w	r3, [sl]
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007850:	6921      	ldr	r1, [r4, #16]
 8007852:	464a      	mov	r2, r9
 8007854:	f000 fef4 	bl	8008640 <memcpy>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800785e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	6126      	str	r6, [r4, #16]
 8007866:	6165      	str	r5, [r4, #20]
 8007868:	444e      	add	r6, r9
 800786a:	eba5 0509 	sub.w	r5, r5, r9
 800786e:	6026      	str	r6, [r4, #0]
 8007870:	60a5      	str	r5, [r4, #8]
 8007872:	463e      	mov	r6, r7
 8007874:	42be      	cmp	r6, r7
 8007876:	d900      	bls.n	800787a <__ssputs_r+0x86>
 8007878:	463e      	mov	r6, r7
 800787a:	4632      	mov	r2, r6
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	4641      	mov	r1, r8
 8007880:	f000 feec 	bl	800865c <memmove>
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	1b9b      	subs	r3, r3, r6
 800788a:	4432      	add	r2, r6
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	6022      	str	r2, [r4, #0]
 8007890:	2000      	movs	r0, #0
 8007892:	e7db      	b.n	800784c <__ssputs_r+0x58>
 8007894:	462a      	mov	r2, r5
 8007896:	f000 fefb 	bl	8008690 <_realloc_r>
 800789a:	4606      	mov	r6, r0
 800789c:	2800      	cmp	r0, #0
 800789e:	d1e1      	bne.n	8007864 <__ssputs_r+0x70>
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	4650      	mov	r0, sl
 80078a4:	f7ff fda6 	bl	80073f4 <_free_r>
 80078a8:	e7c7      	b.n	800783a <__ssputs_r+0x46>
	...

080078ac <_svfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	4698      	mov	r8, r3
 80078b2:	898b      	ldrh	r3, [r1, #12]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	b09d      	sub	sp, #116	; 0x74
 80078b8:	4607      	mov	r7, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	d50e      	bpl.n	80078de <_svfiprintf_r+0x32>
 80078c0:	690b      	ldr	r3, [r1, #16]
 80078c2:	b963      	cbnz	r3, 80078de <_svfiprintf_r+0x32>
 80078c4:	2140      	movs	r1, #64	; 0x40
 80078c6:	f7ff fde5 	bl	8007494 <_malloc_r>
 80078ca:	6028      	str	r0, [r5, #0]
 80078cc:	6128      	str	r0, [r5, #16]
 80078ce:	b920      	cbnz	r0, 80078da <_svfiprintf_r+0x2e>
 80078d0:	230c      	movs	r3, #12
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e0d1      	b.n	8007a7e <_svfiprintf_r+0x1d2>
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	616b      	str	r3, [r5, #20]
 80078de:	2300      	movs	r3, #0
 80078e0:	9309      	str	r3, [sp, #36]	; 0x24
 80078e2:	2320      	movs	r3, #32
 80078e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ec:	2330      	movs	r3, #48	; 0x30
 80078ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a98 <_svfiprintf_r+0x1ec>
 80078f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078f6:	f04f 0901 	mov.w	r9, #1
 80078fa:	4623      	mov	r3, r4
 80078fc:	469a      	mov	sl, r3
 80078fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007902:	b10a      	cbz	r2, 8007908 <_svfiprintf_r+0x5c>
 8007904:	2a25      	cmp	r2, #37	; 0x25
 8007906:	d1f9      	bne.n	80078fc <_svfiprintf_r+0x50>
 8007908:	ebba 0b04 	subs.w	fp, sl, r4
 800790c:	d00b      	beq.n	8007926 <_svfiprintf_r+0x7a>
 800790e:	465b      	mov	r3, fp
 8007910:	4622      	mov	r2, r4
 8007912:	4629      	mov	r1, r5
 8007914:	4638      	mov	r0, r7
 8007916:	f7ff ff6d 	bl	80077f4 <__ssputs_r>
 800791a:	3001      	adds	r0, #1
 800791c:	f000 80aa 	beq.w	8007a74 <_svfiprintf_r+0x1c8>
 8007920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007922:	445a      	add	r2, fp
 8007924:	9209      	str	r2, [sp, #36]	; 0x24
 8007926:	f89a 3000 	ldrb.w	r3, [sl]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80a2 	beq.w	8007a74 <_svfiprintf_r+0x1c8>
 8007930:	2300      	movs	r3, #0
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800793a:	f10a 0a01 	add.w	sl, sl, #1
 800793e:	9304      	str	r3, [sp, #16]
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007946:	931a      	str	r3, [sp, #104]	; 0x68
 8007948:	4654      	mov	r4, sl
 800794a:	2205      	movs	r2, #5
 800794c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007950:	4851      	ldr	r0, [pc, #324]	; (8007a98 <_svfiprintf_r+0x1ec>)
 8007952:	f7f8 fc45 	bl	80001e0 <memchr>
 8007956:	9a04      	ldr	r2, [sp, #16]
 8007958:	b9d8      	cbnz	r0, 8007992 <_svfiprintf_r+0xe6>
 800795a:	06d0      	lsls	r0, r2, #27
 800795c:	bf44      	itt	mi
 800795e:	2320      	movmi	r3, #32
 8007960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007964:	0711      	lsls	r1, r2, #28
 8007966:	bf44      	itt	mi
 8007968:	232b      	movmi	r3, #43	; 0x2b
 800796a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796e:	f89a 3000 	ldrb.w	r3, [sl]
 8007972:	2b2a      	cmp	r3, #42	; 0x2a
 8007974:	d015      	beq.n	80079a2 <_svfiprintf_r+0xf6>
 8007976:	9a07      	ldr	r2, [sp, #28]
 8007978:	4654      	mov	r4, sl
 800797a:	2000      	movs	r0, #0
 800797c:	f04f 0c0a 	mov.w	ip, #10
 8007980:	4621      	mov	r1, r4
 8007982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007986:	3b30      	subs	r3, #48	; 0x30
 8007988:	2b09      	cmp	r3, #9
 800798a:	d94e      	bls.n	8007a2a <_svfiprintf_r+0x17e>
 800798c:	b1b0      	cbz	r0, 80079bc <_svfiprintf_r+0x110>
 800798e:	9207      	str	r2, [sp, #28]
 8007990:	e014      	b.n	80079bc <_svfiprintf_r+0x110>
 8007992:	eba0 0308 	sub.w	r3, r0, r8
 8007996:	fa09 f303 	lsl.w	r3, r9, r3
 800799a:	4313      	orrs	r3, r2
 800799c:	9304      	str	r3, [sp, #16]
 800799e:	46a2      	mov	sl, r4
 80079a0:	e7d2      	b.n	8007948 <_svfiprintf_r+0x9c>
 80079a2:	9b03      	ldr	r3, [sp, #12]
 80079a4:	1d19      	adds	r1, r3, #4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	9103      	str	r1, [sp, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bfbb      	ittet	lt
 80079ae:	425b      	neglt	r3, r3
 80079b0:	f042 0202 	orrlt.w	r2, r2, #2
 80079b4:	9307      	strge	r3, [sp, #28]
 80079b6:	9307      	strlt	r3, [sp, #28]
 80079b8:	bfb8      	it	lt
 80079ba:	9204      	strlt	r2, [sp, #16]
 80079bc:	7823      	ldrb	r3, [r4, #0]
 80079be:	2b2e      	cmp	r3, #46	; 0x2e
 80079c0:	d10c      	bne.n	80079dc <_svfiprintf_r+0x130>
 80079c2:	7863      	ldrb	r3, [r4, #1]
 80079c4:	2b2a      	cmp	r3, #42	; 0x2a
 80079c6:	d135      	bne.n	8007a34 <_svfiprintf_r+0x188>
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	9203      	str	r2, [sp, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfb8      	it	lt
 80079d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079d8:	3402      	adds	r4, #2
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aa8 <_svfiprintf_r+0x1fc>
 80079e0:	7821      	ldrb	r1, [r4, #0]
 80079e2:	2203      	movs	r2, #3
 80079e4:	4650      	mov	r0, sl
 80079e6:	f7f8 fbfb 	bl	80001e0 <memchr>
 80079ea:	b140      	cbz	r0, 80079fe <_svfiprintf_r+0x152>
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	eba0 000a 	sub.w	r0, r0, sl
 80079f2:	fa03 f000 	lsl.w	r0, r3, r0
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	4303      	orrs	r3, r0
 80079fa:	3401      	adds	r4, #1
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a02:	4826      	ldr	r0, [pc, #152]	; (8007a9c <_svfiprintf_r+0x1f0>)
 8007a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a08:	2206      	movs	r2, #6
 8007a0a:	f7f8 fbe9 	bl	80001e0 <memchr>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d038      	beq.n	8007a84 <_svfiprintf_r+0x1d8>
 8007a12:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <_svfiprintf_r+0x1f4>)
 8007a14:	bb1b      	cbnz	r3, 8007a5e <_svfiprintf_r+0x1b2>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a24:	4433      	add	r3, r6
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
 8007a28:	e767      	b.n	80078fa <_svfiprintf_r+0x4e>
 8007a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7a5      	b.n	8007980 <_svfiprintf_r+0xd4>
 8007a34:	2300      	movs	r3, #0
 8007a36:	3401      	adds	r4, #1
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0c0a 	mov.w	ip, #10
 8007a40:	4620      	mov	r0, r4
 8007a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a46:	3a30      	subs	r2, #48	; 0x30
 8007a48:	2a09      	cmp	r2, #9
 8007a4a:	d903      	bls.n	8007a54 <_svfiprintf_r+0x1a8>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0c5      	beq.n	80079dc <_svfiprintf_r+0x130>
 8007a50:	9105      	str	r1, [sp, #20]
 8007a52:	e7c3      	b.n	80079dc <_svfiprintf_r+0x130>
 8007a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7f0      	b.n	8007a40 <_svfiprintf_r+0x194>
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	462a      	mov	r2, r5
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <_svfiprintf_r+0x1f8>)
 8007a66:	a904      	add	r1, sp, #16
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f3af 8000 	nop.w
 8007a6e:	1c42      	adds	r2, r0, #1
 8007a70:	4606      	mov	r6, r0
 8007a72:	d1d6      	bne.n	8007a22 <_svfiprintf_r+0x176>
 8007a74:	89ab      	ldrh	r3, [r5, #12]
 8007a76:	065b      	lsls	r3, r3, #25
 8007a78:	f53f af2c 	bmi.w	80078d4 <_svfiprintf_r+0x28>
 8007a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a7e:	b01d      	add	sp, #116	; 0x74
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	ab03      	add	r3, sp, #12
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <_svfiprintf_r+0x1f8>)
 8007a8c:	a904      	add	r1, sp, #16
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f000 f9d4 	bl	8007e3c <_printf_i>
 8007a94:	e7eb      	b.n	8007a6e <_svfiprintf_r+0x1c2>
 8007a96:	bf00      	nop
 8007a98:	08008c9e 	.word	0x08008c9e
 8007a9c:	08008ca8 	.word	0x08008ca8
 8007aa0:	00000000 	.word	0x00000000
 8007aa4:	080077f5 	.word	0x080077f5
 8007aa8:	08008ca4 	.word	0x08008ca4

08007aac <__sfputc_r>:
 8007aac:	6893      	ldr	r3, [r2, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	b410      	push	{r4}
 8007ab4:	6093      	str	r3, [r2, #8]
 8007ab6:	da08      	bge.n	8007aca <__sfputc_r+0x1e>
 8007ab8:	6994      	ldr	r4, [r2, #24]
 8007aba:	42a3      	cmp	r3, r4
 8007abc:	db01      	blt.n	8007ac2 <__sfputc_r+0x16>
 8007abe:	290a      	cmp	r1, #10
 8007ac0:	d103      	bne.n	8007aca <__sfputc_r+0x1e>
 8007ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac6:	f000 badf 	b.w	8008088 <__swbuf_r>
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	1c58      	adds	r0, r3, #1
 8007ace:	6010      	str	r0, [r2, #0]
 8007ad0:	7019      	strb	r1, [r3, #0]
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <__sfputs_r>:
 8007ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007adc:	4606      	mov	r6, r0
 8007ade:	460f      	mov	r7, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	18d5      	adds	r5, r2, r3
 8007ae4:	42ac      	cmp	r4, r5
 8007ae6:	d101      	bne.n	8007aec <__sfputs_r+0x12>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e007      	b.n	8007afc <__sfputs_r+0x22>
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	463a      	mov	r2, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff ffda 	bl	8007aac <__sfputc_r>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d1f3      	bne.n	8007ae4 <__sfputs_r+0xa>
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b00 <_vfiprintf_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	460d      	mov	r5, r1
 8007b06:	b09d      	sub	sp, #116	; 0x74
 8007b08:	4614      	mov	r4, r2
 8007b0a:	4698      	mov	r8, r3
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b118      	cbz	r0, 8007b18 <_vfiprintf_r+0x18>
 8007b10:	6983      	ldr	r3, [r0, #24]
 8007b12:	b90b      	cbnz	r3, 8007b18 <_vfiprintf_r+0x18>
 8007b14:	f000 fc92 	bl	800843c <__sinit>
 8007b18:	4b89      	ldr	r3, [pc, #548]	; (8007d40 <_vfiprintf_r+0x240>)
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	d11b      	bne.n	8007b56 <_vfiprintf_r+0x56>
 8007b1e:	6875      	ldr	r5, [r6, #4]
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d405      	bmi.n	8007b32 <_vfiprintf_r+0x32>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	059a      	lsls	r2, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_vfiprintf_r+0x32>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f7ff fe52 	bl	80077d6 <__retarget_lock_acquire_recursive>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	071b      	lsls	r3, r3, #28
 8007b36:	d501      	bpl.n	8007b3c <_vfiprintf_r+0x3c>
 8007b38:	692b      	ldr	r3, [r5, #16]
 8007b3a:	b9eb      	cbnz	r3, 8007b78 <_vfiprintf_r+0x78>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 faf4 	bl	800812c <__swsetup_r>
 8007b44:	b1c0      	cbz	r0, 8007b78 <_vfiprintf_r+0x78>
 8007b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b48:	07dc      	lsls	r4, r3, #31
 8007b4a:	d50e      	bpl.n	8007b6a <_vfiprintf_r+0x6a>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	b01d      	add	sp, #116	; 0x74
 8007b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b56:	4b7b      	ldr	r3, [pc, #492]	; (8007d44 <_vfiprintf_r+0x244>)
 8007b58:	429d      	cmp	r5, r3
 8007b5a:	d101      	bne.n	8007b60 <_vfiprintf_r+0x60>
 8007b5c:	68b5      	ldr	r5, [r6, #8]
 8007b5e:	e7df      	b.n	8007b20 <_vfiprintf_r+0x20>
 8007b60:	4b79      	ldr	r3, [pc, #484]	; (8007d48 <_vfiprintf_r+0x248>)
 8007b62:	429d      	cmp	r5, r3
 8007b64:	bf08      	it	eq
 8007b66:	68f5      	ldreq	r5, [r6, #12]
 8007b68:	e7da      	b.n	8007b20 <_vfiprintf_r+0x20>
 8007b6a:	89ab      	ldrh	r3, [r5, #12]
 8007b6c:	0598      	lsls	r0, r3, #22
 8007b6e:	d4ed      	bmi.n	8007b4c <_vfiprintf_r+0x4c>
 8007b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b72:	f7ff fe32 	bl	80077da <__retarget_lock_release_recursive>
 8007b76:	e7e9      	b.n	8007b4c <_vfiprintf_r+0x4c>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b86:	2330      	movs	r3, #48	; 0x30
 8007b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d4c <_vfiprintf_r+0x24c>
 8007b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b90:	f04f 0901 	mov.w	r9, #1
 8007b94:	4623      	mov	r3, r4
 8007b96:	469a      	mov	sl, r3
 8007b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9c:	b10a      	cbz	r2, 8007ba2 <_vfiprintf_r+0xa2>
 8007b9e:	2a25      	cmp	r2, #37	; 0x25
 8007ba0:	d1f9      	bne.n	8007b96 <_vfiprintf_r+0x96>
 8007ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ba6:	d00b      	beq.n	8007bc0 <_vfiprintf_r+0xc0>
 8007ba8:	465b      	mov	r3, fp
 8007baa:	4622      	mov	r2, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ff93 	bl	8007ada <__sfputs_r>
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f000 80aa 	beq.w	8007d0e <_vfiprintf_r+0x20e>
 8007bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bbc:	445a      	add	r2, fp
 8007bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80a2 	beq.w	8007d0e <_vfiprintf_r+0x20e>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bd4:	f10a 0a01 	add.w	sl, sl, #1
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be0:	931a      	str	r3, [sp, #104]	; 0x68
 8007be2:	4654      	mov	r4, sl
 8007be4:	2205      	movs	r2, #5
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	4858      	ldr	r0, [pc, #352]	; (8007d4c <_vfiprintf_r+0x24c>)
 8007bec:	f7f8 faf8 	bl	80001e0 <memchr>
 8007bf0:	9a04      	ldr	r2, [sp, #16]
 8007bf2:	b9d8      	cbnz	r0, 8007c2c <_vfiprintf_r+0x12c>
 8007bf4:	06d1      	lsls	r1, r2, #27
 8007bf6:	bf44      	itt	mi
 8007bf8:	2320      	movmi	r3, #32
 8007bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bfe:	0713      	lsls	r3, r2, #28
 8007c00:	bf44      	itt	mi
 8007c02:	232b      	movmi	r3, #43	; 0x2b
 8007c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c08:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c0e:	d015      	beq.n	8007c3c <_vfiprintf_r+0x13c>
 8007c10:	9a07      	ldr	r2, [sp, #28]
 8007c12:	4654      	mov	r4, sl
 8007c14:	2000      	movs	r0, #0
 8007c16:	f04f 0c0a 	mov.w	ip, #10
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c20:	3b30      	subs	r3, #48	; 0x30
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d94e      	bls.n	8007cc4 <_vfiprintf_r+0x1c4>
 8007c26:	b1b0      	cbz	r0, 8007c56 <_vfiprintf_r+0x156>
 8007c28:	9207      	str	r2, [sp, #28]
 8007c2a:	e014      	b.n	8007c56 <_vfiprintf_r+0x156>
 8007c2c:	eba0 0308 	sub.w	r3, r0, r8
 8007c30:	fa09 f303 	lsl.w	r3, r9, r3
 8007c34:	4313      	orrs	r3, r2
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	46a2      	mov	sl, r4
 8007c3a:	e7d2      	b.n	8007be2 <_vfiprintf_r+0xe2>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	1d19      	adds	r1, r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	9103      	str	r1, [sp, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfbb      	ittet	lt
 8007c48:	425b      	neglt	r3, r3
 8007c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c4e:	9307      	strge	r3, [sp, #28]
 8007c50:	9307      	strlt	r3, [sp, #28]
 8007c52:	bfb8      	it	lt
 8007c54:	9204      	strlt	r2, [sp, #16]
 8007c56:	7823      	ldrb	r3, [r4, #0]
 8007c58:	2b2e      	cmp	r3, #46	; 0x2e
 8007c5a:	d10c      	bne.n	8007c76 <_vfiprintf_r+0x176>
 8007c5c:	7863      	ldrb	r3, [r4, #1]
 8007c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c60:	d135      	bne.n	8007cce <_vfiprintf_r+0x1ce>
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	1d1a      	adds	r2, r3, #4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	9203      	str	r2, [sp, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bfb8      	it	lt
 8007c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c72:	3402      	adds	r4, #2
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d5c <_vfiprintf_r+0x25c>
 8007c7a:	7821      	ldrb	r1, [r4, #0]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	4650      	mov	r0, sl
 8007c80:	f7f8 faae 	bl	80001e0 <memchr>
 8007c84:	b140      	cbz	r0, 8007c98 <_vfiprintf_r+0x198>
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	eba0 000a 	sub.w	r0, r0, sl
 8007c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c90:	9b04      	ldr	r3, [sp, #16]
 8007c92:	4303      	orrs	r3, r0
 8007c94:	3401      	adds	r4, #1
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	482c      	ldr	r0, [pc, #176]	; (8007d50 <_vfiprintf_r+0x250>)
 8007c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	f7f8 fa9c 	bl	80001e0 <memchr>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d03f      	beq.n	8007d2c <_vfiprintf_r+0x22c>
 8007cac:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <_vfiprintf_r+0x254>)
 8007cae:	bb1b      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x1f8>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	3307      	adds	r3, #7
 8007cb4:	f023 0307 	bic.w	r3, r3, #7
 8007cb8:	3308      	adds	r3, #8
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	443b      	add	r3, r7
 8007cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc2:	e767      	b.n	8007b94 <_vfiprintf_r+0x94>
 8007cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2001      	movs	r0, #1
 8007ccc:	e7a5      	b.n	8007c1a <_vfiprintf_r+0x11a>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f04f 0c0a 	mov.w	ip, #10
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce0:	3a30      	subs	r2, #48	; 0x30
 8007ce2:	2a09      	cmp	r2, #9
 8007ce4:	d903      	bls.n	8007cee <_vfiprintf_r+0x1ee>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0c5      	beq.n	8007c76 <_vfiprintf_r+0x176>
 8007cea:	9105      	str	r1, [sp, #20]
 8007cec:	e7c3      	b.n	8007c76 <_vfiprintf_r+0x176>
 8007cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e7f0      	b.n	8007cda <_vfiprintf_r+0x1da>
 8007cf8:	ab03      	add	r3, sp, #12
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <_vfiprintf_r+0x258>)
 8007d00:	a904      	add	r1, sp, #16
 8007d02:	4630      	mov	r0, r6
 8007d04:	f3af 8000 	nop.w
 8007d08:	4607      	mov	r7, r0
 8007d0a:	1c78      	adds	r0, r7, #1
 8007d0c:	d1d6      	bne.n	8007cbc <_vfiprintf_r+0x1bc>
 8007d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d10:	07d9      	lsls	r1, r3, #31
 8007d12:	d405      	bmi.n	8007d20 <_vfiprintf_r+0x220>
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	059a      	lsls	r2, r3, #22
 8007d18:	d402      	bmi.n	8007d20 <_vfiprintf_r+0x220>
 8007d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1c:	f7ff fd5d 	bl	80077da <__retarget_lock_release_recursive>
 8007d20:	89ab      	ldrh	r3, [r5, #12]
 8007d22:	065b      	lsls	r3, r3, #25
 8007d24:	f53f af12 	bmi.w	8007b4c <_vfiprintf_r+0x4c>
 8007d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2a:	e711      	b.n	8007b50 <_vfiprintf_r+0x50>
 8007d2c:	ab03      	add	r3, sp, #12
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <_vfiprintf_r+0x258>)
 8007d34:	a904      	add	r1, sp, #16
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 f880 	bl	8007e3c <_printf_i>
 8007d3c:	e7e4      	b.n	8007d08 <_vfiprintf_r+0x208>
 8007d3e:	bf00      	nop
 8007d40:	08008cf4 	.word	0x08008cf4
 8007d44:	08008d14 	.word	0x08008d14
 8007d48:	08008cd4 	.word	0x08008cd4
 8007d4c:	08008c9e 	.word	0x08008c9e
 8007d50:	08008ca8 	.word	0x08008ca8
 8007d54:	00000000 	.word	0x00000000
 8007d58:	08007adb 	.word	0x08007adb
 8007d5c:	08008ca4 	.word	0x08008ca4

08007d60 <_printf_common>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4616      	mov	r6, r2
 8007d66:	4699      	mov	r9, r3
 8007d68:	688a      	ldr	r2, [r1, #8]
 8007d6a:	690b      	ldr	r3, [r1, #16]
 8007d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	bfb8      	it	lt
 8007d74:	4613      	movlt	r3, r2
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b10a      	cbz	r2, 8007d86 <_printf_common+0x26>
 8007d82:	3301      	adds	r3, #1
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0699      	lsls	r1, r3, #26
 8007d8a:	bf42      	ittt	mi
 8007d8c:	6833      	ldrmi	r3, [r6, #0]
 8007d8e:	3302      	addmi	r3, #2
 8007d90:	6033      	strmi	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f015 0506 	ands.w	r5, r5, #6
 8007d98:	d106      	bne.n	8007da8 <_printf_common+0x48>
 8007d9a:	f104 0a19 	add.w	sl, r4, #25
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	6832      	ldr	r2, [r6, #0]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc26      	bgt.n	8007df6 <_printf_common+0x96>
 8007da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dac:	1e13      	subs	r3, r2, #0
 8007dae:	6822      	ldr	r2, [r4, #0]
 8007db0:	bf18      	it	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	0692      	lsls	r2, r2, #26
 8007db6:	d42b      	bmi.n	8007e10 <_printf_common+0xb0>
 8007db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c0      	blx	r8
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d01e      	beq.n	8007e04 <_printf_common+0xa4>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	68e5      	ldr	r5, [r4, #12]
 8007dca:	6832      	ldr	r2, [r6, #0]
 8007dcc:	f003 0306 	and.w	r3, r3, #6
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	bf08      	it	eq
 8007dd4:	1aad      	subeq	r5, r5, r2
 8007dd6:	68a3      	ldr	r3, [r4, #8]
 8007dd8:	6922      	ldr	r2, [r4, #16]
 8007dda:	bf0c      	ite	eq
 8007ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de0:	2500      	movne	r5, #0
 8007de2:	4293      	cmp	r3, r2
 8007de4:	bfc4      	itt	gt
 8007de6:	1a9b      	subgt	r3, r3, r2
 8007de8:	18ed      	addgt	r5, r5, r3
 8007dea:	2600      	movs	r6, #0
 8007dec:	341a      	adds	r4, #26
 8007dee:	42b5      	cmp	r5, r6
 8007df0:	d11a      	bne.n	8007e28 <_printf_common+0xc8>
 8007df2:	2000      	movs	r0, #0
 8007df4:	e008      	b.n	8007e08 <_printf_common+0xa8>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4652      	mov	r2, sl
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	47c0      	blx	r8
 8007e00:	3001      	adds	r0, #1
 8007e02:	d103      	bne.n	8007e0c <_printf_common+0xac>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	e7c6      	b.n	8007d9e <_printf_common+0x3e>
 8007e10:	18e1      	adds	r1, r4, r3
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	2030      	movs	r0, #48	; 0x30
 8007e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e1a:	4422      	add	r2, r4
 8007e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e24:	3302      	adds	r3, #2
 8007e26:	e7c7      	b.n	8007db8 <_printf_common+0x58>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c0      	blx	r8
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0e6      	beq.n	8007e04 <_printf_common+0xa4>
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7d9      	b.n	8007dee <_printf_common+0x8e>
	...

08007e3c <_printf_i>:
 8007e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	460c      	mov	r4, r1
 8007e42:	4691      	mov	r9, r2
 8007e44:	7e27      	ldrb	r7, [r4, #24]
 8007e46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e48:	2f78      	cmp	r7, #120	; 0x78
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	469a      	mov	sl, r3
 8007e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e52:	d807      	bhi.n	8007e64 <_printf_i+0x28>
 8007e54:	2f62      	cmp	r7, #98	; 0x62
 8007e56:	d80a      	bhi.n	8007e6e <_printf_i+0x32>
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f000 80d8 	beq.w	800800e <_printf_i+0x1d2>
 8007e5e:	2f58      	cmp	r7, #88	; 0x58
 8007e60:	f000 80a3 	beq.w	8007faa <_printf_i+0x16e>
 8007e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e6c:	e03a      	b.n	8007ee4 <_printf_i+0xa8>
 8007e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e72:	2b15      	cmp	r3, #21
 8007e74:	d8f6      	bhi.n	8007e64 <_printf_i+0x28>
 8007e76:	a001      	add	r0, pc, #4	; (adr r0, 8007e7c <_printf_i+0x40>)
 8007e78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ee9 	.word	0x08007ee9
 8007e84:	08007e65 	.word	0x08007e65
 8007e88:	08007e65 	.word	0x08007e65
 8007e8c:	08007e65 	.word	0x08007e65
 8007e90:	08007e65 	.word	0x08007e65
 8007e94:	08007ee9 	.word	0x08007ee9
 8007e98:	08007e65 	.word	0x08007e65
 8007e9c:	08007e65 	.word	0x08007e65
 8007ea0:	08007e65 	.word	0x08007e65
 8007ea4:	08007e65 	.word	0x08007e65
 8007ea8:	08007ff5 	.word	0x08007ff5
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007fd7 	.word	0x08007fd7
 8007eb4:	08007e65 	.word	0x08007e65
 8007eb8:	08007e65 	.word	0x08007e65
 8007ebc:	08008017 	.word	0x08008017
 8007ec0:	08007e65 	.word	0x08007e65
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007e65 	.word	0x08007e65
 8007ecc:	08007e65 	.word	0x08007e65
 8007ed0:	08007fdf 	.word	0x08007fdf
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	1d1a      	adds	r2, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	600a      	str	r2, [r1, #0]
 8007edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0a3      	b.n	8008030 <_printf_i+0x1f4>
 8007ee8:	6825      	ldr	r5, [r4, #0]
 8007eea:	6808      	ldr	r0, [r1, #0]
 8007eec:	062e      	lsls	r6, r5, #24
 8007eee:	f100 0304 	add.w	r3, r0, #4
 8007ef2:	d50a      	bpl.n	8007f0a <_printf_i+0xce>
 8007ef4:	6805      	ldr	r5, [r0, #0]
 8007ef6:	600b      	str	r3, [r1, #0]
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	da03      	bge.n	8007f04 <_printf_i+0xc8>
 8007efc:	232d      	movs	r3, #45	; 0x2d
 8007efe:	426d      	negs	r5, r5
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f04:	485e      	ldr	r0, [pc, #376]	; (8008080 <_printf_i+0x244>)
 8007f06:	230a      	movs	r3, #10
 8007f08:	e019      	b.n	8007f3e <_printf_i+0x102>
 8007f0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f0e:	6805      	ldr	r5, [r0, #0]
 8007f10:	600b      	str	r3, [r1, #0]
 8007f12:	bf18      	it	ne
 8007f14:	b22d      	sxthne	r5, r5
 8007f16:	e7ef      	b.n	8007ef8 <_printf_i+0xbc>
 8007f18:	680b      	ldr	r3, [r1, #0]
 8007f1a:	6825      	ldr	r5, [r4, #0]
 8007f1c:	1d18      	adds	r0, r3, #4
 8007f1e:	6008      	str	r0, [r1, #0]
 8007f20:	0628      	lsls	r0, r5, #24
 8007f22:	d501      	bpl.n	8007f28 <_printf_i+0xec>
 8007f24:	681d      	ldr	r5, [r3, #0]
 8007f26:	e002      	b.n	8007f2e <_printf_i+0xf2>
 8007f28:	0669      	lsls	r1, r5, #25
 8007f2a:	d5fb      	bpl.n	8007f24 <_printf_i+0xe8>
 8007f2c:	881d      	ldrh	r5, [r3, #0]
 8007f2e:	4854      	ldr	r0, [pc, #336]	; (8008080 <_printf_i+0x244>)
 8007f30:	2f6f      	cmp	r7, #111	; 0x6f
 8007f32:	bf0c      	ite	eq
 8007f34:	2308      	moveq	r3, #8
 8007f36:	230a      	movne	r3, #10
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f3e:	6866      	ldr	r6, [r4, #4]
 8007f40:	60a6      	str	r6, [r4, #8]
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	bfa2      	ittt	ge
 8007f46:	6821      	ldrge	r1, [r4, #0]
 8007f48:	f021 0104 	bicge.w	r1, r1, #4
 8007f4c:	6021      	strge	r1, [r4, #0]
 8007f4e:	b90d      	cbnz	r5, 8007f54 <_printf_i+0x118>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d04d      	beq.n	8007ff0 <_printf_i+0x1b4>
 8007f54:	4616      	mov	r6, r2
 8007f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f5e:	5dc7      	ldrb	r7, [r0, r7]
 8007f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f64:	462f      	mov	r7, r5
 8007f66:	42bb      	cmp	r3, r7
 8007f68:	460d      	mov	r5, r1
 8007f6a:	d9f4      	bls.n	8007f56 <_printf_i+0x11a>
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d10b      	bne.n	8007f88 <_printf_i+0x14c>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	07df      	lsls	r7, r3, #31
 8007f74:	d508      	bpl.n	8007f88 <_printf_i+0x14c>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	6861      	ldr	r1, [r4, #4]
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	bfde      	ittt	le
 8007f7e:	2330      	movle	r3, #48	; 0x30
 8007f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f88:	1b92      	subs	r2, r2, r6
 8007f8a:	6122      	str	r2, [r4, #16]
 8007f8c:	f8cd a000 	str.w	sl, [sp]
 8007f90:	464b      	mov	r3, r9
 8007f92:	aa03      	add	r2, sp, #12
 8007f94:	4621      	mov	r1, r4
 8007f96:	4640      	mov	r0, r8
 8007f98:	f7ff fee2 	bl	8007d60 <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d14c      	bne.n	800803a <_printf_i+0x1fe>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	b004      	add	sp, #16
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	4835      	ldr	r0, [pc, #212]	; (8008080 <_printf_i+0x244>)
 8007fac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	680e      	ldr	r6, [r1, #0]
 8007fb4:	061f      	lsls	r7, r3, #24
 8007fb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007fba:	600e      	str	r6, [r1, #0]
 8007fbc:	d514      	bpl.n	8007fe8 <_printf_i+0x1ac>
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	bf44      	itt	mi
 8007fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fc6:	6023      	strmi	r3, [r4, #0]
 8007fc8:	b91d      	cbnz	r5, 8007fd2 <_printf_i+0x196>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f023 0320 	bic.w	r3, r3, #32
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	e7b0      	b.n	8007f38 <_printf_i+0xfc>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f043 0320 	orr.w	r3, r3, #32
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2378      	movs	r3, #120	; 0x78
 8007fe0:	4828      	ldr	r0, [pc, #160]	; (8008084 <_printf_i+0x248>)
 8007fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fe6:	e7e3      	b.n	8007fb0 <_printf_i+0x174>
 8007fe8:	065e      	lsls	r6, r3, #25
 8007fea:	bf48      	it	mi
 8007fec:	b2ad      	uxthmi	r5, r5
 8007fee:	e7e6      	b.n	8007fbe <_printf_i+0x182>
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	e7bb      	b.n	8007f6c <_printf_i+0x130>
 8007ff4:	680b      	ldr	r3, [r1, #0]
 8007ff6:	6826      	ldr	r6, [r4, #0]
 8007ff8:	6960      	ldr	r0, [r4, #20]
 8007ffa:	1d1d      	adds	r5, r3, #4
 8007ffc:	600d      	str	r5, [r1, #0]
 8007ffe:	0635      	lsls	r5, r6, #24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	d501      	bpl.n	8008008 <_printf_i+0x1cc>
 8008004:	6018      	str	r0, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0x1d2>
 8008008:	0671      	lsls	r1, r6, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0x1c8>
 800800c:	8018      	strh	r0, [r3, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	4616      	mov	r6, r2
 8008014:	e7ba      	b.n	8007f8c <_printf_i+0x150>
 8008016:	680b      	ldr	r3, [r1, #0]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	600a      	str	r2, [r1, #0]
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	2100      	movs	r1, #0
 8008022:	4630      	mov	r0, r6
 8008024:	f7f8 f8dc 	bl	80001e0 <memchr>
 8008028:	b108      	cbz	r0, 800802e <_printf_i+0x1f2>
 800802a:	1b80      	subs	r0, r0, r6
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008038:	e7a8      	b.n	8007f8c <_printf_i+0x150>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d0ab      	beq.n	8007fa0 <_printf_i+0x164>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	d413      	bmi.n	8008076 <_printf_i+0x23a>
 800804e:	68e0      	ldr	r0, [r4, #12]
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	4298      	cmp	r0, r3
 8008054:	bfb8      	it	lt
 8008056:	4618      	movlt	r0, r3
 8008058:	e7a4      	b.n	8007fa4 <_printf_i+0x168>
 800805a:	2301      	movs	r3, #1
 800805c:	4632      	mov	r2, r6
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d09b      	beq.n	8007fa0 <_printf_i+0x164>
 8008068:	3501      	adds	r5, #1
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	9903      	ldr	r1, [sp, #12]
 800806e:	1a5b      	subs	r3, r3, r1
 8008070:	42ab      	cmp	r3, r5
 8008072:	dcf2      	bgt.n	800805a <_printf_i+0x21e>
 8008074:	e7eb      	b.n	800804e <_printf_i+0x212>
 8008076:	2500      	movs	r5, #0
 8008078:	f104 0619 	add.w	r6, r4, #25
 800807c:	e7f5      	b.n	800806a <_printf_i+0x22e>
 800807e:	bf00      	nop
 8008080:	08008caf 	.word	0x08008caf
 8008084:	08008cc0 	.word	0x08008cc0

08008088 <__swbuf_r>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	4614      	mov	r4, r2
 800808e:	4605      	mov	r5, r0
 8008090:	b118      	cbz	r0, 800809a <__swbuf_r+0x12>
 8008092:	6983      	ldr	r3, [r0, #24]
 8008094:	b90b      	cbnz	r3, 800809a <__swbuf_r+0x12>
 8008096:	f000 f9d1 	bl	800843c <__sinit>
 800809a:	4b21      	ldr	r3, [pc, #132]	; (8008120 <__swbuf_r+0x98>)
 800809c:	429c      	cmp	r4, r3
 800809e:	d12b      	bne.n	80080f8 <__swbuf_r+0x70>
 80080a0:	686c      	ldr	r4, [r5, #4]
 80080a2:	69a3      	ldr	r3, [r4, #24]
 80080a4:	60a3      	str	r3, [r4, #8]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	071a      	lsls	r2, r3, #28
 80080aa:	d52f      	bpl.n	800810c <__swbuf_r+0x84>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	b36b      	cbz	r3, 800810c <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	6820      	ldr	r0, [r4, #0]
 80080b4:	1ac0      	subs	r0, r0, r3
 80080b6:	6963      	ldr	r3, [r4, #20]
 80080b8:	b2f6      	uxtb	r6, r6
 80080ba:	4283      	cmp	r3, r0
 80080bc:	4637      	mov	r7, r6
 80080be:	dc04      	bgt.n	80080ca <__swbuf_r+0x42>
 80080c0:	4621      	mov	r1, r4
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f926 	bl	8008314 <_fflush_r>
 80080c8:	bb30      	cbnz	r0, 8008118 <__swbuf_r+0x90>
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	701e      	strb	r6, [r3, #0]
 80080d8:	6963      	ldr	r3, [r4, #20]
 80080da:	3001      	adds	r0, #1
 80080dc:	4283      	cmp	r3, r0
 80080de:	d004      	beq.n	80080ea <__swbuf_r+0x62>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	07db      	lsls	r3, r3, #31
 80080e4:	d506      	bpl.n	80080f4 <__swbuf_r+0x6c>
 80080e6:	2e0a      	cmp	r6, #10
 80080e8:	d104      	bne.n	80080f4 <__swbuf_r+0x6c>
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 f911 	bl	8008314 <_fflush_r>
 80080f2:	b988      	cbnz	r0, 8008118 <__swbuf_r+0x90>
 80080f4:	4638      	mov	r0, r7
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <__swbuf_r+0x9c>)
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d101      	bne.n	8008102 <__swbuf_r+0x7a>
 80080fe:	68ac      	ldr	r4, [r5, #8]
 8008100:	e7cf      	b.n	80080a2 <__swbuf_r+0x1a>
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <__swbuf_r+0xa0>)
 8008104:	429c      	cmp	r4, r3
 8008106:	bf08      	it	eq
 8008108:	68ec      	ldreq	r4, [r5, #12]
 800810a:	e7ca      	b.n	80080a2 <__swbuf_r+0x1a>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f80c 	bl	800812c <__swsetup_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d0cb      	beq.n	80080b0 <__swbuf_r+0x28>
 8008118:	f04f 37ff 	mov.w	r7, #4294967295
 800811c:	e7ea      	b.n	80080f4 <__swbuf_r+0x6c>
 800811e:	bf00      	nop
 8008120:	08008cf4 	.word	0x08008cf4
 8008124:	08008d14 	.word	0x08008d14
 8008128:	08008cd4 	.word	0x08008cd4

0800812c <__swsetup_r>:
 800812c:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <__swsetup_r+0xcc>)
 800812e:	b570      	push	{r4, r5, r6, lr}
 8008130:	681d      	ldr	r5, [r3, #0]
 8008132:	4606      	mov	r6, r0
 8008134:	460c      	mov	r4, r1
 8008136:	b125      	cbz	r5, 8008142 <__swsetup_r+0x16>
 8008138:	69ab      	ldr	r3, [r5, #24]
 800813a:	b913      	cbnz	r3, 8008142 <__swsetup_r+0x16>
 800813c:	4628      	mov	r0, r5
 800813e:	f000 f97d 	bl	800843c <__sinit>
 8008142:	4b2e      	ldr	r3, [pc, #184]	; (80081fc <__swsetup_r+0xd0>)
 8008144:	429c      	cmp	r4, r3
 8008146:	d10f      	bne.n	8008168 <__swsetup_r+0x3c>
 8008148:	686c      	ldr	r4, [r5, #4]
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008150:	0719      	lsls	r1, r3, #28
 8008152:	d42c      	bmi.n	80081ae <__swsetup_r+0x82>
 8008154:	06dd      	lsls	r5, r3, #27
 8008156:	d411      	bmi.n	800817c <__swsetup_r+0x50>
 8008158:	2309      	movs	r3, #9
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	e03e      	b.n	80081e6 <__swsetup_r+0xba>
 8008168:	4b25      	ldr	r3, [pc, #148]	; (8008200 <__swsetup_r+0xd4>)
 800816a:	429c      	cmp	r4, r3
 800816c:	d101      	bne.n	8008172 <__swsetup_r+0x46>
 800816e:	68ac      	ldr	r4, [r5, #8]
 8008170:	e7eb      	b.n	800814a <__swsetup_r+0x1e>
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <__swsetup_r+0xd8>)
 8008174:	429c      	cmp	r4, r3
 8008176:	bf08      	it	eq
 8008178:	68ec      	ldreq	r4, [r5, #12]
 800817a:	e7e6      	b.n	800814a <__swsetup_r+0x1e>
 800817c:	0758      	lsls	r0, r3, #29
 800817e:	d512      	bpl.n	80081a6 <__swsetup_r+0x7a>
 8008180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008182:	b141      	cbz	r1, 8008196 <__swsetup_r+0x6a>
 8008184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008188:	4299      	cmp	r1, r3
 800818a:	d002      	beq.n	8008192 <__swsetup_r+0x66>
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff f931 	bl	80073f4 <_free_r>
 8008192:	2300      	movs	r3, #0
 8008194:	6363      	str	r3, [r4, #52]	; 0x34
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	2300      	movs	r3, #0
 80081a0:	6063      	str	r3, [r4, #4]
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f043 0308 	orr.w	r3, r3, #8
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	b94b      	cbnz	r3, 80081c6 <__swsetup_r+0x9a>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081bc:	d003      	beq.n	80081c6 <__swsetup_r+0x9a>
 80081be:	4621      	mov	r1, r4
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f9fd 	bl	80085c0 <__smakebuf_r>
 80081c6:	89a0      	ldrh	r0, [r4, #12]
 80081c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081cc:	f010 0301 	ands.w	r3, r0, #1
 80081d0:	d00a      	beq.n	80081e8 <__swsetup_r+0xbc>
 80081d2:	2300      	movs	r3, #0
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6963      	ldr	r3, [r4, #20]
 80081d8:	425b      	negs	r3, r3
 80081da:	61a3      	str	r3, [r4, #24]
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	b943      	cbnz	r3, 80081f2 <__swsetup_r+0xc6>
 80081e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e4:	d1ba      	bne.n	800815c <__swsetup_r+0x30>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	0781      	lsls	r1, r0, #30
 80081ea:	bf58      	it	pl
 80081ec:	6963      	ldrpl	r3, [r4, #20]
 80081ee:	60a3      	str	r3, [r4, #8]
 80081f0:	e7f4      	b.n	80081dc <__swsetup_r+0xb0>
 80081f2:	2000      	movs	r0, #0
 80081f4:	e7f7      	b.n	80081e6 <__swsetup_r+0xba>
 80081f6:	bf00      	nop
 80081f8:	2000000c 	.word	0x2000000c
 80081fc:	08008cf4 	.word	0x08008cf4
 8008200:	08008d14 	.word	0x08008d14
 8008204:	08008cd4 	.word	0x08008cd4

08008208 <__sflush_r>:
 8008208:	898a      	ldrh	r2, [r1, #12]
 800820a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820e:	4605      	mov	r5, r0
 8008210:	0710      	lsls	r0, r2, #28
 8008212:	460c      	mov	r4, r1
 8008214:	d458      	bmi.n	80082c8 <__sflush_r+0xc0>
 8008216:	684b      	ldr	r3, [r1, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dc05      	bgt.n	8008228 <__sflush_r+0x20>
 800821c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	dc02      	bgt.n	8008228 <__sflush_r+0x20>
 8008222:	2000      	movs	r0, #0
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800822a:	2e00      	cmp	r6, #0
 800822c:	d0f9      	beq.n	8008222 <__sflush_r+0x1a>
 800822e:	2300      	movs	r3, #0
 8008230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008234:	682f      	ldr	r7, [r5, #0]
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	d032      	beq.n	80082a0 <__sflush_r+0x98>
 800823a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	075a      	lsls	r2, r3, #29
 8008240:	d505      	bpl.n	800824e <__sflush_r+0x46>
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	1ac0      	subs	r0, r0, r3
 8008246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008248:	b10b      	cbz	r3, 800824e <__sflush_r+0x46>
 800824a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800824c:	1ac0      	subs	r0, r0, r3
 800824e:	2300      	movs	r3, #0
 8008250:	4602      	mov	r2, r0
 8008252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008254:	6a21      	ldr	r1, [r4, #32]
 8008256:	4628      	mov	r0, r5
 8008258:	47b0      	blx	r6
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	d106      	bne.n	800826e <__sflush_r+0x66>
 8008260:	6829      	ldr	r1, [r5, #0]
 8008262:	291d      	cmp	r1, #29
 8008264:	d82c      	bhi.n	80082c0 <__sflush_r+0xb8>
 8008266:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <__sflush_r+0x108>)
 8008268:	40ca      	lsrs	r2, r1
 800826a:	07d6      	lsls	r6, r2, #31
 800826c:	d528      	bpl.n	80082c0 <__sflush_r+0xb8>
 800826e:	2200      	movs	r2, #0
 8008270:	6062      	str	r2, [r4, #4]
 8008272:	04d9      	lsls	r1, r3, #19
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	6022      	str	r2, [r4, #0]
 8008278:	d504      	bpl.n	8008284 <__sflush_r+0x7c>
 800827a:	1c42      	adds	r2, r0, #1
 800827c:	d101      	bne.n	8008282 <__sflush_r+0x7a>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	b903      	cbnz	r3, 8008284 <__sflush_r+0x7c>
 8008282:	6560      	str	r0, [r4, #84]	; 0x54
 8008284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008286:	602f      	str	r7, [r5, #0]
 8008288:	2900      	cmp	r1, #0
 800828a:	d0ca      	beq.n	8008222 <__sflush_r+0x1a>
 800828c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008290:	4299      	cmp	r1, r3
 8008292:	d002      	beq.n	800829a <__sflush_r+0x92>
 8008294:	4628      	mov	r0, r5
 8008296:	f7ff f8ad 	bl	80073f4 <_free_r>
 800829a:	2000      	movs	r0, #0
 800829c:	6360      	str	r0, [r4, #52]	; 0x34
 800829e:	e7c1      	b.n	8008224 <__sflush_r+0x1c>
 80082a0:	6a21      	ldr	r1, [r4, #32]
 80082a2:	2301      	movs	r3, #1
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b0      	blx	r6
 80082a8:	1c41      	adds	r1, r0, #1
 80082aa:	d1c7      	bne.n	800823c <__sflush_r+0x34>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c4      	beq.n	800823c <__sflush_r+0x34>
 80082b2:	2b1d      	cmp	r3, #29
 80082b4:	d001      	beq.n	80082ba <__sflush_r+0xb2>
 80082b6:	2b16      	cmp	r3, #22
 80082b8:	d101      	bne.n	80082be <__sflush_r+0xb6>
 80082ba:	602f      	str	r7, [r5, #0]
 80082bc:	e7b1      	b.n	8008222 <__sflush_r+0x1a>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	e7ad      	b.n	8008224 <__sflush_r+0x1c>
 80082c8:	690f      	ldr	r7, [r1, #16]
 80082ca:	2f00      	cmp	r7, #0
 80082cc:	d0a9      	beq.n	8008222 <__sflush_r+0x1a>
 80082ce:	0793      	lsls	r3, r2, #30
 80082d0:	680e      	ldr	r6, [r1, #0]
 80082d2:	bf08      	it	eq
 80082d4:	694b      	ldreq	r3, [r1, #20]
 80082d6:	600f      	str	r7, [r1, #0]
 80082d8:	bf18      	it	ne
 80082da:	2300      	movne	r3, #0
 80082dc:	eba6 0807 	sub.w	r8, r6, r7
 80082e0:	608b      	str	r3, [r1, #8]
 80082e2:	f1b8 0f00 	cmp.w	r8, #0
 80082e6:	dd9c      	ble.n	8008222 <__sflush_r+0x1a>
 80082e8:	6a21      	ldr	r1, [r4, #32]
 80082ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082ec:	4643      	mov	r3, r8
 80082ee:	463a      	mov	r2, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b0      	blx	r6
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dc06      	bgt.n	8008306 <__sflush_r+0xfe>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	e78e      	b.n	8008224 <__sflush_r+0x1c>
 8008306:	4407      	add	r7, r0
 8008308:	eba8 0800 	sub.w	r8, r8, r0
 800830c:	e7e9      	b.n	80082e2 <__sflush_r+0xda>
 800830e:	bf00      	nop
 8008310:	20400001 	.word	0x20400001

08008314 <_fflush_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	4605      	mov	r5, r0
 800831a:	460c      	mov	r4, r1
 800831c:	b913      	cbnz	r3, 8008324 <_fflush_r+0x10>
 800831e:	2500      	movs	r5, #0
 8008320:	4628      	mov	r0, r5
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	b118      	cbz	r0, 800832e <_fflush_r+0x1a>
 8008326:	6983      	ldr	r3, [r0, #24]
 8008328:	b90b      	cbnz	r3, 800832e <_fflush_r+0x1a>
 800832a:	f000 f887 	bl	800843c <__sinit>
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <_fflush_r+0x6c>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d11b      	bne.n	800836c <_fflush_r+0x58>
 8008334:	686c      	ldr	r4, [r5, #4]
 8008336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0ef      	beq.n	800831e <_fflush_r+0xa>
 800833e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008340:	07d0      	lsls	r0, r2, #31
 8008342:	d404      	bmi.n	800834e <_fflush_r+0x3a>
 8008344:	0599      	lsls	r1, r3, #22
 8008346:	d402      	bmi.n	800834e <_fflush_r+0x3a>
 8008348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834a:	f7ff fa44 	bl	80077d6 <__retarget_lock_acquire_recursive>
 800834e:	4628      	mov	r0, r5
 8008350:	4621      	mov	r1, r4
 8008352:	f7ff ff59 	bl	8008208 <__sflush_r>
 8008356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008358:	07da      	lsls	r2, r3, #31
 800835a:	4605      	mov	r5, r0
 800835c:	d4e0      	bmi.n	8008320 <_fflush_r+0xc>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	059b      	lsls	r3, r3, #22
 8008362:	d4dd      	bmi.n	8008320 <_fflush_r+0xc>
 8008364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008366:	f7ff fa38 	bl	80077da <__retarget_lock_release_recursive>
 800836a:	e7d9      	b.n	8008320 <_fflush_r+0xc>
 800836c:	4b05      	ldr	r3, [pc, #20]	; (8008384 <_fflush_r+0x70>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d101      	bne.n	8008376 <_fflush_r+0x62>
 8008372:	68ac      	ldr	r4, [r5, #8]
 8008374:	e7df      	b.n	8008336 <_fflush_r+0x22>
 8008376:	4b04      	ldr	r3, [pc, #16]	; (8008388 <_fflush_r+0x74>)
 8008378:	429c      	cmp	r4, r3
 800837a:	bf08      	it	eq
 800837c:	68ec      	ldreq	r4, [r5, #12]
 800837e:	e7da      	b.n	8008336 <_fflush_r+0x22>
 8008380:	08008cf4 	.word	0x08008cf4
 8008384:	08008d14 	.word	0x08008d14
 8008388:	08008cd4 	.word	0x08008cd4

0800838c <std>:
 800838c:	2300      	movs	r3, #0
 800838e:	b510      	push	{r4, lr}
 8008390:	4604      	mov	r4, r0
 8008392:	e9c0 3300 	strd	r3, r3, [r0]
 8008396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800839a:	6083      	str	r3, [r0, #8]
 800839c:	8181      	strh	r1, [r0, #12]
 800839e:	6643      	str	r3, [r0, #100]	; 0x64
 80083a0:	81c2      	strh	r2, [r0, #14]
 80083a2:	6183      	str	r3, [r0, #24]
 80083a4:	4619      	mov	r1, r3
 80083a6:	2208      	movs	r2, #8
 80083a8:	305c      	adds	r0, #92	; 0x5c
 80083aa:	f7ff f81b 	bl	80073e4 <memset>
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <std+0x38>)
 80083b0:	6263      	str	r3, [r4, #36]	; 0x24
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std+0x3c>)
 80083b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x40>)
 80083b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x44>)
 80083bc:	6224      	str	r4, [r4, #32]
 80083be:	6323      	str	r3, [r4, #48]	; 0x30
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	bf00      	nop
 80083c4:	080086dd 	.word	0x080086dd
 80083c8:	080086ff 	.word	0x080086ff
 80083cc:	08008737 	.word	0x08008737
 80083d0:	0800875b 	.word	0x0800875b

080083d4 <_cleanup_r>:
 80083d4:	4901      	ldr	r1, [pc, #4]	; (80083dc <_cleanup_r+0x8>)
 80083d6:	f000 b8af 	b.w	8008538 <_fwalk_reent>
 80083da:	bf00      	nop
 80083dc:	08008315 	.word	0x08008315

080083e0 <__sfmoreglue>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	1e4a      	subs	r2, r1, #1
 80083e4:	2568      	movs	r5, #104	; 0x68
 80083e6:	4355      	muls	r5, r2
 80083e8:	460e      	mov	r6, r1
 80083ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083ee:	f7ff f851 	bl	8007494 <_malloc_r>
 80083f2:	4604      	mov	r4, r0
 80083f4:	b140      	cbz	r0, 8008408 <__sfmoreglue+0x28>
 80083f6:	2100      	movs	r1, #0
 80083f8:	e9c0 1600 	strd	r1, r6, [r0]
 80083fc:	300c      	adds	r0, #12
 80083fe:	60a0      	str	r0, [r4, #8]
 8008400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008404:	f7fe ffee 	bl	80073e4 <memset>
 8008408:	4620      	mov	r0, r4
 800840a:	bd70      	pop	{r4, r5, r6, pc}

0800840c <__sfp_lock_acquire>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__sfp_lock_acquire+0x8>)
 800840e:	f7ff b9e2 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 8008412:	bf00      	nop
 8008414:	20002c28 	.word	0x20002c28

08008418 <__sfp_lock_release>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__sfp_lock_release+0x8>)
 800841a:	f7ff b9de 	b.w	80077da <__retarget_lock_release_recursive>
 800841e:	bf00      	nop
 8008420:	20002c28 	.word	0x20002c28

08008424 <__sinit_lock_acquire>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__sinit_lock_acquire+0x8>)
 8008426:	f7ff b9d6 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	20002c23 	.word	0x20002c23

08008430 <__sinit_lock_release>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sinit_lock_release+0x8>)
 8008432:	f7ff b9d2 	b.w	80077da <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	20002c23 	.word	0x20002c23

0800843c <__sinit>:
 800843c:	b510      	push	{r4, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	f7ff fff0 	bl	8008424 <__sinit_lock_acquire>
 8008444:	69a3      	ldr	r3, [r4, #24]
 8008446:	b11b      	cbz	r3, 8008450 <__sinit+0x14>
 8008448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844c:	f7ff bff0 	b.w	8008430 <__sinit_lock_release>
 8008450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008454:	6523      	str	r3, [r4, #80]	; 0x50
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <__sinit+0x68>)
 8008458:	4a13      	ldr	r2, [pc, #76]	; (80084a8 <__sinit+0x6c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	62a2      	str	r2, [r4, #40]	; 0x28
 800845e:	42a3      	cmp	r3, r4
 8008460:	bf04      	itt	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	61a3      	streq	r3, [r4, #24]
 8008466:	4620      	mov	r0, r4
 8008468:	f000 f820 	bl	80084ac <__sfp>
 800846c:	6060      	str	r0, [r4, #4]
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f81c 	bl	80084ac <__sfp>
 8008474:	60a0      	str	r0, [r4, #8]
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f818 	bl	80084ac <__sfp>
 800847c:	2200      	movs	r2, #0
 800847e:	60e0      	str	r0, [r4, #12]
 8008480:	2104      	movs	r1, #4
 8008482:	6860      	ldr	r0, [r4, #4]
 8008484:	f7ff ff82 	bl	800838c <std>
 8008488:	68a0      	ldr	r0, [r4, #8]
 800848a:	2201      	movs	r2, #1
 800848c:	2109      	movs	r1, #9
 800848e:	f7ff ff7d 	bl	800838c <std>
 8008492:	68e0      	ldr	r0, [r4, #12]
 8008494:	2202      	movs	r2, #2
 8008496:	2112      	movs	r1, #18
 8008498:	f7ff ff78 	bl	800838c <std>
 800849c:	2301      	movs	r3, #1
 800849e:	61a3      	str	r3, [r4, #24]
 80084a0:	e7d2      	b.n	8008448 <__sinit+0xc>
 80084a2:	bf00      	nop
 80084a4:	08008be8 	.word	0x08008be8
 80084a8:	080083d5 	.word	0x080083d5

080084ac <__sfp>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	4607      	mov	r7, r0
 80084b0:	f7ff ffac 	bl	800840c <__sfp_lock_acquire>
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <__sfp+0x84>)
 80084b6:	681e      	ldr	r6, [r3, #0]
 80084b8:	69b3      	ldr	r3, [r6, #24]
 80084ba:	b913      	cbnz	r3, 80084c2 <__sfp+0x16>
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ffbd 	bl	800843c <__sinit>
 80084c2:	3648      	adds	r6, #72	; 0x48
 80084c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	d503      	bpl.n	80084d4 <__sfp+0x28>
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	b30b      	cbz	r3, 8008514 <__sfp+0x68>
 80084d0:	6836      	ldr	r6, [r6, #0]
 80084d2:	e7f7      	b.n	80084c4 <__sfp+0x18>
 80084d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084d8:	b9d5      	cbnz	r5, 8008510 <__sfp+0x64>
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <__sfp+0x88>)
 80084dc:	60e3      	str	r3, [r4, #12]
 80084de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084e2:	6665      	str	r5, [r4, #100]	; 0x64
 80084e4:	f7ff f976 	bl	80077d4 <__retarget_lock_init_recursive>
 80084e8:	f7ff ff96 	bl	8008418 <__sfp_lock_release>
 80084ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084f4:	6025      	str	r5, [r4, #0]
 80084f6:	61a5      	str	r5, [r4, #24]
 80084f8:	2208      	movs	r2, #8
 80084fa:	4629      	mov	r1, r5
 80084fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008500:	f7fe ff70 	bl	80073e4 <memset>
 8008504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800850c:	4620      	mov	r0, r4
 800850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008510:	3468      	adds	r4, #104	; 0x68
 8008512:	e7d9      	b.n	80084c8 <__sfp+0x1c>
 8008514:	2104      	movs	r1, #4
 8008516:	4638      	mov	r0, r7
 8008518:	f7ff ff62 	bl	80083e0 <__sfmoreglue>
 800851c:	4604      	mov	r4, r0
 800851e:	6030      	str	r0, [r6, #0]
 8008520:	2800      	cmp	r0, #0
 8008522:	d1d5      	bne.n	80084d0 <__sfp+0x24>
 8008524:	f7ff ff78 	bl	8008418 <__sfp_lock_release>
 8008528:	230c      	movs	r3, #12
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	e7ee      	b.n	800850c <__sfp+0x60>
 800852e:	bf00      	nop
 8008530:	08008be8 	.word	0x08008be8
 8008534:	ffff0001 	.word	0xffff0001

08008538 <_fwalk_reent>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	4606      	mov	r6, r0
 800853e:	4688      	mov	r8, r1
 8008540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008544:	2700      	movs	r7, #0
 8008546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800854a:	f1b9 0901 	subs.w	r9, r9, #1
 800854e:	d505      	bpl.n	800855c <_fwalk_reent+0x24>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	2c00      	cmp	r4, #0
 8008554:	d1f7      	bne.n	8008546 <_fwalk_reent+0xe>
 8008556:	4638      	mov	r0, r7
 8008558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855c:	89ab      	ldrh	r3, [r5, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d907      	bls.n	8008572 <_fwalk_reent+0x3a>
 8008562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008566:	3301      	adds	r3, #1
 8008568:	d003      	beq.n	8008572 <_fwalk_reent+0x3a>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	47c0      	blx	r8
 8008570:	4307      	orrs	r7, r0
 8008572:	3568      	adds	r5, #104	; 0x68
 8008574:	e7e9      	b.n	800854a <_fwalk_reent+0x12>

08008576 <__swhatbuf_r>:
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	460e      	mov	r6, r1
 800857a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857e:	2900      	cmp	r1, #0
 8008580:	b096      	sub	sp, #88	; 0x58
 8008582:	4614      	mov	r4, r2
 8008584:	461d      	mov	r5, r3
 8008586:	da07      	bge.n	8008598 <__swhatbuf_r+0x22>
 8008588:	2300      	movs	r3, #0
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	89b3      	ldrh	r3, [r6, #12]
 800858e:	061a      	lsls	r2, r3, #24
 8008590:	d410      	bmi.n	80085b4 <__swhatbuf_r+0x3e>
 8008592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008596:	e00e      	b.n	80085b6 <__swhatbuf_r+0x40>
 8008598:	466a      	mov	r2, sp
 800859a:	f000 f905 	bl	80087a8 <_fstat_r>
 800859e:	2800      	cmp	r0, #0
 80085a0:	dbf2      	blt.n	8008588 <__swhatbuf_r+0x12>
 80085a2:	9a01      	ldr	r2, [sp, #4]
 80085a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085ac:	425a      	negs	r2, r3
 80085ae:	415a      	adcs	r2, r3
 80085b0:	602a      	str	r2, [r5, #0]
 80085b2:	e7ee      	b.n	8008592 <__swhatbuf_r+0x1c>
 80085b4:	2340      	movs	r3, #64	; 0x40
 80085b6:	2000      	movs	r0, #0
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	b016      	add	sp, #88	; 0x58
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080085c0 <__smakebuf_r>:
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085c4:	079d      	lsls	r5, r3, #30
 80085c6:	4606      	mov	r6, r0
 80085c8:	460c      	mov	r4, r1
 80085ca:	d507      	bpl.n	80085dc <__smakebuf_r+0x1c>
 80085cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	2301      	movs	r3, #1
 80085d6:	6163      	str	r3, [r4, #20]
 80085d8:	b002      	add	sp, #8
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	ab01      	add	r3, sp, #4
 80085de:	466a      	mov	r2, sp
 80085e0:	f7ff ffc9 	bl	8008576 <__swhatbuf_r>
 80085e4:	9900      	ldr	r1, [sp, #0]
 80085e6:	4605      	mov	r5, r0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7fe ff53 	bl	8007494 <_malloc_r>
 80085ee:	b948      	cbnz	r0, 8008604 <__smakebuf_r+0x44>
 80085f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d4ef      	bmi.n	80085d8 <__smakebuf_r+0x18>
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	e7e3      	b.n	80085cc <__smakebuf_r+0xc>
 8008604:	4b0d      	ldr	r3, [pc, #52]	; (800863c <__smakebuf_r+0x7c>)
 8008606:	62b3      	str	r3, [r6, #40]	; 0x28
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	6020      	str	r0, [r4, #0]
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	6163      	str	r3, [r4, #20]
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	6120      	str	r0, [r4, #16]
 800861a:	b15b      	cbz	r3, 8008634 <__smakebuf_r+0x74>
 800861c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008620:	4630      	mov	r0, r6
 8008622:	f000 f8d3 	bl	80087cc <_isatty_r>
 8008626:	b128      	cbz	r0, 8008634 <__smakebuf_r+0x74>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	f043 0301 	orr.w	r3, r3, #1
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	89a0      	ldrh	r0, [r4, #12]
 8008636:	4305      	orrs	r5, r0
 8008638:	81a5      	strh	r5, [r4, #12]
 800863a:	e7cd      	b.n	80085d8 <__smakebuf_r+0x18>
 800863c:	080083d5 	.word	0x080083d5

08008640 <memcpy>:
 8008640:	440a      	add	r2, r1
 8008642:	4291      	cmp	r1, r2
 8008644:	f100 33ff 	add.w	r3, r0, #4294967295
 8008648:	d100      	bne.n	800864c <memcpy+0xc>
 800864a:	4770      	bx	lr
 800864c:	b510      	push	{r4, lr}
 800864e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008656:	4291      	cmp	r1, r2
 8008658:	d1f9      	bne.n	800864e <memcpy+0xe>
 800865a:	bd10      	pop	{r4, pc}

0800865c <memmove>:
 800865c:	4288      	cmp	r0, r1
 800865e:	b510      	push	{r4, lr}
 8008660:	eb01 0402 	add.w	r4, r1, r2
 8008664:	d902      	bls.n	800866c <memmove+0x10>
 8008666:	4284      	cmp	r4, r0
 8008668:	4623      	mov	r3, r4
 800866a:	d807      	bhi.n	800867c <memmove+0x20>
 800866c:	1e43      	subs	r3, r0, #1
 800866e:	42a1      	cmp	r1, r4
 8008670:	d008      	beq.n	8008684 <memmove+0x28>
 8008672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800867a:	e7f8      	b.n	800866e <memmove+0x12>
 800867c:	4402      	add	r2, r0
 800867e:	4601      	mov	r1, r0
 8008680:	428a      	cmp	r2, r1
 8008682:	d100      	bne.n	8008686 <memmove+0x2a>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800868a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800868e:	e7f7      	b.n	8008680 <memmove+0x24>

08008690 <_realloc_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	4607      	mov	r7, r0
 8008694:	4614      	mov	r4, r2
 8008696:	460e      	mov	r6, r1
 8008698:	b921      	cbnz	r1, 80086a4 <_realloc_r+0x14>
 800869a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800869e:	4611      	mov	r1, r2
 80086a0:	f7fe bef8 	b.w	8007494 <_malloc_r>
 80086a4:	b922      	cbnz	r2, 80086b0 <_realloc_r+0x20>
 80086a6:	f7fe fea5 	bl	80073f4 <_free_r>
 80086aa:	4625      	mov	r5, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b0:	f000 f8ae 	bl	8008810 <_malloc_usable_size_r>
 80086b4:	42a0      	cmp	r0, r4
 80086b6:	d20f      	bcs.n	80086d8 <_realloc_r+0x48>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4638      	mov	r0, r7
 80086bc:	f7fe feea 	bl	8007494 <_malloc_r>
 80086c0:	4605      	mov	r5, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0f2      	beq.n	80086ac <_realloc_r+0x1c>
 80086c6:	4631      	mov	r1, r6
 80086c8:	4622      	mov	r2, r4
 80086ca:	f7ff ffb9 	bl	8008640 <memcpy>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7fe fe8f 	bl	80073f4 <_free_r>
 80086d6:	e7e9      	b.n	80086ac <_realloc_r+0x1c>
 80086d8:	4635      	mov	r5, r6
 80086da:	e7e7      	b.n	80086ac <_realloc_r+0x1c>

080086dc <__sread>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	460c      	mov	r4, r1
 80086e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e4:	f000 f89c 	bl	8008820 <_read_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	bfab      	itete	ge
 80086ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ee:	89a3      	ldrhlt	r3, [r4, #12]
 80086f0:	181b      	addge	r3, r3, r0
 80086f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086f6:	bfac      	ite	ge
 80086f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086fa:	81a3      	strhlt	r3, [r4, #12]
 80086fc:	bd10      	pop	{r4, pc}

080086fe <__swrite>:
 80086fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	461f      	mov	r7, r3
 8008704:	898b      	ldrh	r3, [r1, #12]
 8008706:	05db      	lsls	r3, r3, #23
 8008708:	4605      	mov	r5, r0
 800870a:	460c      	mov	r4, r1
 800870c:	4616      	mov	r6, r2
 800870e:	d505      	bpl.n	800871c <__swrite+0x1e>
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	2302      	movs	r3, #2
 8008716:	2200      	movs	r2, #0
 8008718:	f000 f868 	bl	80087ec <_lseek_r>
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	4632      	mov	r2, r6
 800872a:	463b      	mov	r3, r7
 800872c:	4628      	mov	r0, r5
 800872e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	f000 b817 	b.w	8008764 <_write_r>

08008736 <__sseek>:
 8008736:	b510      	push	{r4, lr}
 8008738:	460c      	mov	r4, r1
 800873a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873e:	f000 f855 	bl	80087ec <_lseek_r>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	bf15      	itete	ne
 8008748:	6560      	strne	r0, [r4, #84]	; 0x54
 800874a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800874e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008752:	81a3      	strheq	r3, [r4, #12]
 8008754:	bf18      	it	ne
 8008756:	81a3      	strhne	r3, [r4, #12]
 8008758:	bd10      	pop	{r4, pc}

0800875a <__sclose>:
 800875a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875e:	f000 b813 	b.w	8008788 <_close_r>
	...

08008764 <_write_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	; (8008784 <_write_r+0x20>)
 8008768:	4604      	mov	r4, r0
 800876a:	4608      	mov	r0, r1
 800876c:	4611      	mov	r1, r2
 800876e:	2200      	movs	r2, #0
 8008770:	602a      	str	r2, [r5, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	f7fc f8c1 	bl	80048fa <_write>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_write_r+0x1e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_write_r+0x1e>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	20002c2c 	.word	0x20002c2c

08008788 <_close_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	; (80087a4 <_close_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7fc f8cd 	bl	8004932 <_close>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_close_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_close_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20002c2c 	.word	0x20002c2c

080087a8 <_fstat_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_fstat_r+0x20>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	4611      	mov	r1, r2
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	f7fc f8c8 	bl	800494a <_fstat>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d102      	bne.n	80087c4 <_fstat_r+0x1c>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	b103      	cbz	r3, 80087c4 <_fstat_r+0x1c>
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	20002c2c 	.word	0x20002c2c

080087cc <_isatty_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d06      	ldr	r5, [pc, #24]	; (80087e8 <_isatty_r+0x1c>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	f7fc f8c7 	bl	800496a <_isatty>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_isatty_r+0x1a>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_isatty_r+0x1a>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20002c2c 	.word	0x20002c2c

080087ec <_lseek_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	; (800880c <_lseek_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7fc f8c0 	bl	8004980 <_lseek>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_lseek_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_lseek_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20002c2c 	.word	0x20002c2c

08008810 <_malloc_usable_size_r>:
 8008810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008814:	1f18      	subs	r0, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	bfbc      	itt	lt
 800881a:	580b      	ldrlt	r3, [r1, r0]
 800881c:	18c0      	addlt	r0, r0, r3
 800881e:	4770      	bx	lr

08008820 <_read_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d07      	ldr	r5, [pc, #28]	; (8008840 <_read_r+0x20>)
 8008824:	4604      	mov	r4, r0
 8008826:	4608      	mov	r0, r1
 8008828:	4611      	mov	r1, r2
 800882a:	2200      	movs	r2, #0
 800882c:	602a      	str	r2, [r5, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	f7fc f846 	bl	80048c0 <_read>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d102      	bne.n	800883e <_read_r+0x1e>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	b103      	cbz	r3, 800883e <_read_r+0x1e>
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	20002c2c 	.word	0x20002c2c

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
