
mStack-stm32f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008604  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080087a8  080087a8  000187a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb8  20000078  08008d10  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c30  08008d10  00022c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ef6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065be  00000000  00000000  00044f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0004b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  0004cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1ab  00000000  00000000  0004e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ae9  00000000  00000000  0006c343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097802  00000000  00000000  00080e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011862e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da8  00000000  00000000  00118684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800878c 	.word	0x0800878c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800878c 	.word	0x0800878c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <_ZN4core5QueueC1EPht>:
{

class Queue
{
public:
    Queue(uint8_t* buf, uint16_t size)
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
    {
        first_ = buf;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
        size_ = size;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	801a      	strh	r2, [r3, #0]
        last_ = first_ + size;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	441a      	add	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	609a      	str	r2, [r3, #8]
        inPtr_ = first_;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	60da      	str	r2, [r3, #12]
        outPtr_ = first_;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
    }
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN4core5Queue9availableEv>:
    uint16_t available()
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    {
    	uint16_t ret = size_+outPtr_-inPtr_;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	81fb      	strh	r3, [r7, #14]
    	if (ret > size_) ret -= size_;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	89fa      	ldrh	r2, [r7, #14]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d904      	bls.n	8000ee6 <_ZN4core5Queue9availableEv+0x2e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	81fb      	strh	r3, [r7, #14]
    	return ret;
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
    }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN4core9Component4initEv>:
{

class Component
{
public:
    virtual void init(){/*empty*/}
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_ZN4core9ComponentD1Ev>:
    virtual ~Component(){}
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <_ZN4core9ComponentD1Ev+0x1c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	08008890 	.word	0x08008890

08000f28 <_ZN4core9ComponentD0Ev>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffe9 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 8000f36:	2104      	movs	r1, #4
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f005 f8fb 	bl	8006134 <_ZdlPvj>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZN4core5EventD1Ev>:

class Event
{
public:
    Event();
    virtual ~Event(){};
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <_ZN4core5EventD1Ev+0x1c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	0800887c 	.word	0x0800887c

08000f68 <_ZN4core5EventD0Ev>:
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe9 	bl	8000f48 <_ZN4core5EventD1Ev>
 8000f76:	210c      	movs	r1, #12
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f005 f8db 	bl	8006134 <_ZdlPvj>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN4core5Event7executeEv>:

protected:
    virtual void execute(){};
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_ZN7console10ControllerD1Ev>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_ZN7console10ControllerD1Ev+0x20>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffab 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08008868 	.word	0x08008868

08000fc0 <_ZN7console10ControllerD0Ev>:
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffe7 	bl	8000f9c <_ZN7console10ControllerD1Ev>
 8000fce:	2158      	movs	r1, #88	; 0x58
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f005 f8af 	bl	8006134 <_ZdlPvj>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZN4core9ComponentC1Ev>:
class Component
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <_ZN4core9ComponentC1Ev+0x1c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	08008890 	.word	0x08008890

08001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>:

class EmptyEvent: public Event
{
public:
    typedef void (Component::*Handler) ();
    EmptyEvent(Component* component, Handler handler):component_(component), handler_(handler){}
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	4639      	mov	r1, r7
 800100c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fbd2 	bl	80027bc <_ZN4core5EventC1Ev>
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE+0x3c>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3310      	adds	r3, #16
 8001028:	463a      	mov	r2, r7
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08008854 	.word	0x08008854

08001040 <_ZN4core10EmptyEvent7executeEv>:
    void post()
    {
        core::Engine::instance().events().post(container_);
    }
private:
    void execute() override
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    {
        (component_->*handler_)();
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6952      	ldr	r2, [r2, #20]
 8001050:	1052      	asrs	r2, r2, #1
 8001052:	1899      	adds	r1, r3, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_ZN4core10EmptyEvent7executeEv+0x26>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	e00a      	b.n	800107c <_ZN4core10EmptyEvent7executeEv+0x3c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6952      	ldr	r2, [r2, #20]
 800106e:	1052      	asrs	r2, r2, #1
 8001070:	4413      	add	r3, r2
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6912      	ldr	r2, [r2, #16]
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4608      	mov	r0, r1
 800107e:	4798      	blx	r3
    }
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN4core7Machine9NullStateEv>:
class Machine: public core::Component
{
public:
    typedef void (Machine::*State)();
protected:
    void NullState(){}
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_ZN4core7Machine6check_EhMS0_FvvE>:
    State nextState_ = nullptr;
    State currentState_ = &Machine::NullState;
    virtual bool check_(uint8_t event, State next){return false;}
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	4608      	mov	r0, r1
 80010a6:	4639      	mov	r1, r7
 80010a8:	e881 000c 	stmia.w	r1, {r2, r3}
 80010ac:	4603      	mov	r3, r0
 80010ae:	72fb      	strb	r3, [r7, #11]
 80010b0:	2300      	movs	r3, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN4core7Machine6start_EMS0_FvvE>:
    virtual void start_(State state){currentState_ = state;}
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	330c      	adds	r3, #12
 80010d0:	1d3a      	adds	r2, r7, #4
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <__tcf_3>:
#define TX_BUF_SIZE   		2048
#define HEADER_INDICATOR	0xFE
#define FOOTER_INDICATOR	0xFD
#define MAX_PACKET_LENGTH	250

MACHINE(console, Driver, uint8_t)
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <__tcf_3+0xc>)
 80010ee:	f000 f87b 	bl	80011e8 <_ZN7console6DriverD1Ev>
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000094 	.word	0x20000094

080010f8 <_ZN7console6Driver8instanceEv>:
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f3bf 8f5b 	dmb	ish
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <_ZN7console6Driver8instanceEv+0x48>
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 800111a:	f005 f80d 	bl	8006138 <__cxa_guard_acquire>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <_ZN7console6Driver8instanceEv+0x48>
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <_ZN7console6Driver8instanceEv+0x54>)
 8001130:	f000 f8c6 	bl	80012c0 <_ZN7console6DriverC1Ev>
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 8001136:	f005 f80b 	bl	8006150 <__cxa_guard_release>
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <_ZN7console6Driver8instanceEv+0x58>)
 800113c:	f006 f8b5 	bl	80072aa <atexit>
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <_ZN7console6Driver8instanceEv+0x54>)
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200009f4 	.word	0x200009f4
 800114c:	20000094 	.word	0x20000094
 8001150:	080010e9 	.word	0x080010e9

08001154 <_ZN4core7MachineD1Ev>:
class Machine: public core::Component
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_ZN4core7MachineD1Ev+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fecf 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08008838 	.word	0x08008838

08001178 <_ZN4core7MachineD0Ev>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe7 	bl	8001154 <_ZN4core7MachineD1Ev>
 8001186:	2114      	movs	r1, #20
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f004 ffd3 	bl	8006134 <_ZdlPvj>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN4core11ByteMachineIhED1Ev>:
        (this->*currentState_)();
    }
};

template <typename T>
class ByteMachine: public core::Machine
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <_ZN4core11ByteMachineIhED1Ev+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3318      	adds	r3, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 faf8 	bl	80017a0 <_ZN4core10FixedEventIhED1Ev>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffce 	bl	8001154 <_ZN4core7MachineD1Ev>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08008808 	.word	0x08008808

080011c8 <_ZN4core11ByteMachineIhED0Ev>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffe1 	bl	8001198 <_ZN4core11ByteMachineIhED1Ev>
 80011d6:	2134      	movs	r1, #52	; 0x34
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f004 ffab 	bl	8006134 <_ZdlPvj>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN7console6DriverD1Ev>:
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <_ZN7console6DriverD1Ev+0x2c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3334      	adds	r3, #52	; 0x34
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 faf2 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffc8 	bl	8001198 <_ZN4core11ByteMachineIhED1Ev>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	080088a4 	.word	0x080088a4

08001218 <_ZN7console6DriverD0Ev>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe1 	bl	80011e8 <_ZN7console6DriverD1Ev>
 8001226:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f004 ff82 	bl	8006134 <_ZdlPvj>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <_ZN4core7MachineC1Ev>:
class Machine: public core::Component
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff feca 	bl	8000fe0 <_ZN4core9ComponentC1Ev>
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <_ZN4core7MachineC1Ev+0x38>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_ZN4core7MachineC1Ev+0x3c>)
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08008838 	.word	0x08008838
 8001278:	08001089 	.word	0x08001089

0800127c <_ZN4core11ByteMachineIhEC1Ev>:
class ByteMachine: public core::Machine
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffd8 	bl	800123c <_ZN4core7MachineC1Ev>
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <_ZN4core11ByteMachineIhEC1Ev+0x3c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f103 0018 	add.w	r0, r3, #24
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_ZN4core11ByteMachineIhEC1Ev+0x40>)
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	cb0c      	ldmia	r3, {r2, r3}
 80012a8:	f000 f9ca 	bl	8001640 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08008808 	.word	0x08008808
 80012bc:	0800169d 	.word	0x0800169d

080012c0 <_ZN7console6DriverC1Ev>:
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffd6 	bl	800127c <_ZN4core11ByteMachineIhEC1Ev>
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <_ZN7console6DriverC1Ev+0x58>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <_ZN7console6DriverC1Ev+0x5c>)
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	cb0c      	ldmia	r3, {r2, r3}
 80012ec:	f7ff fe88 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	334c      	adds	r3, #76	; 0x4c
 80012fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fdb8 	bl	8000e74 <_ZN4core5QueueC1EPht>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	080088a4 	.word	0x080088a4
 800131c:	0800201b 	.word	0x0800201b

08001320 <_ZN7console6Driver15checkBeforeSendEh>:
    M_EVENT(send);
public:
	void init();
	bool sendPacket(uint16_t type, uint8_t length, const uint8_t* data);
    bool checkBeforeSend(uint8_t lenth){return (txQueue_.available()>lenth);}
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fdc0 	bl	8000eb8 <_ZN4core5Queue9availableEv>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	b29b      	uxth	r3, r3
 8001340:	429a      	cmp	r2, r3
 8001342:	bf8c      	ite	hi
 8001344:	2301      	movhi	r3, #1
 8001346:	2300      	movls	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN7console10Controller4initEv>:
#include <stdio.h>
#include <stdarg.h>
#include <console/driver.h>

void console::Controller::init()
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
    console::Driver::instance().init();
 800135a:	f7ff fecd 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 800135e:	4603      	mov	r3, r0
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	4790      	blx	r2
    plotTask_.start(20);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3308      	adds	r3, #8
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	2114      	movs	r1, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fbdc 	bl	8002b30 <_ZN4core4Task5startEml>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN7console10Controller7sendOSCEhhtPKh>:
//    	Error_Handler();
//    }
}

bool console::Controller::sendOSC(uint8_t channel, uint8_t length, uint16_t index, const uint8_t* data)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b0c5      	sub	sp, #276	; 0x114
 8001384:	af00      	add	r7, sp, #0
 8001386:	1d3c      	adds	r4, r7, #4
 8001388:	6020      	str	r0, [r4, #0]
 800138a:	460c      	mov	r4, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	1cfb      	adds	r3, r7, #3
 8001392:	4622      	mov	r2, r4
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	4602      	mov	r2, r0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	463b      	mov	r3, r7
 800139e:	460a      	mov	r2, r1
 80013a0:	801a      	strh	r2, [r3, #0]
    if (!console::Driver::instance().checkBeforeSend(length + 100)) return false;
 80013a2:	f7ff fea9 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3364      	adds	r3, #100	; 0x64
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7ff ffb4 	bl	8001320 <_ZN7console6Driver15checkBeforeSendEh>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f083 0301 	eor.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <_ZN7console10Controller7sendOSCEhhtPKh+0x48>
 80013c4:	2300      	movs	r3, #0
 80013c6:	e039      	b.n	800143c <_ZN7console10Controller7sendOSCEhhtPKh+0xbc>
    uint8_t buf[256];
    buf[0] = channel;
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	1cfa      	adds	r2, r7, #3
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
    buf[1] = (index >> 8) & 0xFF;
 80013d2:	463b      	mov	r3, r7
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	705a      	strb	r2, [r3, #1]
    buf[2] = index & 0xFF;
 80013e2:	463b      	mov	r3, r7
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	709a      	strb	r2, [r3, #2]

    for (int i =0;i < length;i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80013fc:	429a      	cmp	r2, r3
 80013fe:	da11      	bge.n	8001424 <_ZN7console10Controller7sendOSCEhhtPKh+0xa4>
    {
        buf[i+3] = data[i];
 8001400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001404:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001408:	441a      	add	r2, r3
 800140a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140e:	3303      	adds	r3, #3
 8001410:	7811      	ldrb	r1, [r2, #0]
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	54d1      	strb	r1, [r2, r3]
    for (int i =0;i < length;i++)
 8001418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800141c:	3301      	adds	r3, #1
 800141e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001422:	e7e7      	b.n	80013f4 <_ZN7console10Controller7sendOSCEhhtPKh+0x74>
    }
    console::Driver::instance().sendPacket(console::Controller::Oscilloscope, length+3, buf);
 8001424:	f7ff fe68 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8001428:	1cbb      	adds	r3, r7, #2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3303      	adds	r3, #3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2106      	movs	r1, #6
 8001436:	f000 fd5d 	bl	8001ef4 <_ZN7console6Driver10sendPacketEthPKh>
//    if(!ret)
//    {
//    	Error_Handler();
//    }

    return true;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}

08001446 <_ZN7console10Controller6printfEPKcz>:

void console::Controller::printf(const char* format, ...)
{
 8001446:	b40e      	push	{r1, r2, r3}
 8001448:	b580      	push	{r7, lr}
 800144a:	b0c5      	sub	sp, #276	; 0x114
 800144c:	af00      	add	r7, sp, #0
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	6018      	str	r0, [r3, #0]
    char buf[256];
    va_list args;
    va_start (args, format);
 8001452:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	601a      	str	r2, [r3, #0]
    int l = vsprintf(buf, format ,args) + 1;
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	f107 000c 	add.w	r0, r7, #12
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800146a:	f006 f8bb 	bl	80075e4 <vsiprintf>
 800146e:	4603      	mov	r3, r0
 8001470:	3301      	adds	r3, #1
 8001472:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    va_end(args);
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
 8001476:	f7ff fe3f 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 800147a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800147e:	b2da      	uxtb	r2, r3
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2101      	movs	r1, #1
 8001486:	f000 fd35 	bl	8001ef4 <_ZN7console6Driver10sendPacketEthPKh>
//    bool ret = console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 800148a:	bf00      	nop
 800148c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001496:	b003      	add	sp, #12
 8001498:	4770      	bx	lr

0800149a <_ZN7console10Controller15registerCommandEtPFvthPhE>:

console::Command* console::Controller::registerCommand(uint16_t type, Handler handler)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	460b      	mov	r3, r1
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	817b      	strh	r3, [r7, #10]
    Command* cmd = new Command();
 80014a8:	200c      	movs	r0, #12
 80014aa:	f004 fe54 	bl	8006156 <_Znwj>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	617b      	str	r3, [r7, #20]
    cmd->type = type;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	897a      	ldrh	r2, [r7, #10]
 80014c2:	801a      	strh	r2, [r3, #0]
    cmd->handler = handler;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	605a      	str	r2, [r3, #4]
    cmd->next = commands_;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	609a      	str	r2, [r3, #8]
    commands_ = cmd;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
    return cmd;
 80014d8:	697b      	ldr	r3, [r7, #20]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN7console10Controller14updateIntFieldEtl>:

void console::Controller::updateIntField(uint16_t command, int32_t value)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	460b      	mov	r3, r1
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	817b      	strh	r3, [r7, #10]
    uint8_t buf[6];
    ENCODE_16(command,buf,0);
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	743b      	strb	r3, [r7, #16]
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	747b      	strb	r3, [r7, #17]
    ENCODE_32(value,buf,2);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0e1b      	lsrs	r3, r3, #24
 8001504:	b2db      	uxtb	r3, r3
 8001506:	74bb      	strb	r3, [r7, #18]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	141b      	asrs	r3, r3, #16
 800150c:	b2db      	uxtb	r3, r3
 800150e:	74fb      	strb	r3, [r7, #19]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	121b      	asrs	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	753b      	strb	r3, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	757b      	strb	r3, [r7, #21]
    console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
 800151e:	f7ff fdeb 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	2206      	movs	r2, #6
 8001528:	2102      	movs	r1, #2
 800152a:	f000 fce3 	bl	8001ef4 <_ZN7console6Driver10sendPacketEthPKh>
//    bool ret = console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZN7console10Controller14processCommandEthPh>:

void console::Controller::processCommand(uint16_t type, uint8_t length, uint8_t* data)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	817b      	strh	r3, [r7, #10]
 8001544:	4613      	mov	r3, r2
 8001546:	727b      	strb	r3, [r7, #9]
	Command* it = commands_;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d010      	beq.n	8001576 <_ZN7console10Controller14processCommandEthPh+0x40>
	{
		if (it->type==type)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	897a      	ldrh	r2, [r7, #10]
 800155a:	429a      	cmp	r2, r3
 800155c:	d107      	bne.n	800156e <_ZN7console10Controller14processCommandEthPh+0x38>
		{
			(*it->handler)(type, length,data);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	7a79      	ldrb	r1, [r7, #9]
 8001564:	8978      	ldrh	r0, [r7, #10]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4798      	blx	r3
			break;
 800156a:	bf00      	nop
		}
		it=it->next;
	}
}
 800156c:	e003      	b.n	8001576 <_ZN7console10Controller14processCommandEthPh+0x40>
		it=it->next;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 8001574:	e7eb      	b.n	800154e <_ZN7console10Controller14processCommandEthPh+0x18>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZN7console10Controller15updateTextFieldEthPh>:
    int8_t length = strlen(data);
    updateTextField(command, length, (uint8_t*)data);
}

void console::Controller::updateTextField(uint16_t command, uint8_t length, uint8_t* data)
{
 800157e:	b5b0      	push	{r4, r5, r7, lr}
 8001580:	b088      	sub	sp, #32
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	817b      	strh	r3, [r7, #10]
 800158c:	4613      	mov	r3, r2
 800158e:	727b      	strb	r3, [r7, #9]
    if (length > MAX_PACKET_LENGTH-6) return;
    uint8_t buf[length+2];
    ENCODE_16(command,buf,0);
    for (int i=0;i<length;i++) buf[i+2] = data[i];
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 8001590:	466b      	mov	r3, sp
 8001592:	461d      	mov	r5, r3
    if (length > MAX_PACKET_LENGTH-6) return;
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	2bf4      	cmp	r3, #244	; 0xf4
 8001598:	d901      	bls.n	800159e <_ZN7console10Controller15updateTextFieldEthPh+0x20>
 800159a:	46ad      	mov	sp, r5
 800159c:	e04c      	b.n	8001638 <_ZN7console10Controller15updateTextFieldEthPh+0xba>
    uint8_t buf[length+2];
 800159e:	7a7b      	ldrb	r3, [r7, #9]
 80015a0:	1c5c      	adds	r4, r3, #1
 80015a2:	61bc      	str	r4, [r7, #24]
 80015a4:	4623      	mov	r3, r4
 80015a6:	3301      	adds	r3, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	00cb      	lsls	r3, r1, #3
 80015b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015bc:	00c2      	lsls	r2, r0, #3
 80015be:	4623      	mov	r3, r4
 80015c0:	3301      	adds	r3, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	00cb      	lsls	r3, r1, #3
 80015d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015d6:	00c2      	lsls	r2, r0, #3
 80015d8:	4623      	mov	r3, r4
 80015da:	3301      	adds	r3, #1
 80015dc:	3307      	adds	r3, #7
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	ebad 0d03 	sub.w	sp, sp, r3
 80015e6:	466b      	mov	r3, sp
 80015e8:	3300      	adds	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    ENCODE_16(command,buf,0);
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	705a      	strb	r2, [r3, #1]
    for (int i=0;i<length;i++) buf[i+2] = data[i];
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	7a7b      	ldrb	r3, [r7, #9]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	da0b      	bge.n	8001624 <_ZN7console10Controller15updateTextFieldEthPh+0xa6>
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	441a      	add	r2, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3302      	adds	r3, #2
 8001616:	7811      	ldrb	r1, [r2, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	54d1      	strb	r1, [r2, r3]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e7ef      	b.n	8001604 <_ZN7console10Controller15updateTextFieldEthPh+0x86>
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 8001624:	f7ff fd68 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8001628:	7a7b      	ldrb	r3, [r7, #9]
 800162a:	3302      	adds	r3, #2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2103      	movs	r1, #3
 8001632:	f000 fc5f 	bl	8001ef4 <_ZN7console6Driver10sendPacketEthPKh>
 8001636:	46ad      	mov	sp, r5
//    bool ret = console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001640 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>:
template <typename E>
class FixedEvent: public Event
{
public:
    typedef void (Component::*Handler) (const E&);
    FixedEvent(Component* component, Handler handler)
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4639      	mov	r1, r7
 800164c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f8b2 	bl	80027bc <_ZN4core5EventC1Ev>
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE+0x58>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3310      	adds	r3, #16
 800166e:	463a      	mov	r2, r7
 8001670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001674:	e883 0003 	stmia.w	r3, {r0, r1}
//    	Declare MemPool with correspond type here
    	pool_ = new MemPool<E>(3);	//FIXME: 2 is constant
 8001678:	200c      	movs	r0, #12
 800167a:	f004 fd6c 	bl	8006156 <_Znwj>
 800167e:	4603      	mov	r3, r0
 8001680:	461c      	mov	r4, r3
 8001682:	2103      	movs	r1, #3
 8001684:	4620      	mov	r0, r4
 8001686:	f000 f84d 	bl	8001724 <_ZN7MemPoolIhEC1Em>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	619c      	str	r4, [r3, #24]
    }
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	08008824 	.word	0x08008824

0800169c <_ZN4core11ByteMachineIhE8execute_ERKh>:
protected:
    T data_;
    typedef void (Component::*Handler) (const T&);
    core::FixedEvent<T> postEvent_ = core::FixedEvent<T>(this, (Handler)&ByteMachine<T>::execute_);

    void execute_(const T& c)
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    {
        data_ = c;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	751a      	strb	r2, [r3, #20]
        nextState_ = nullptr;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
        (this->*currentState_)();
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6912      	ldr	r2, [r2, #16]
 80016c0:	1052      	asrs	r2, r2, #1
 80016c2:	1899      	adds	r1, r3, r2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_ZN4core11ByteMachineIhE8execute_ERKh+0x3a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	e009      	b.n	80016ea <_ZN4core11ByteMachineIhE8execute_ERKh+0x4e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6912      	ldr	r2, [r2, #16]
 80016dc:	1052      	asrs	r2, r2, #1
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68d2      	ldr	r2, [r2, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4608      	mov	r0, r1
 80016ec:	4798      	blx	r3
        if (nextState_ != nullptr) currentState_ = nextState_;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6c>
 8001706:	2300      	movs	r3, #0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d007      	beq.n	800171c <_ZN4core11ByteMachineIhE8execute_ERKh+0x80>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	330c      	adds	r3, #12
 8001712:	3204      	adds	r2, #4
 8001714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001718:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZN7MemPoolIhEC1Em>:
    struct _Unit*    m_pAllocatedMemBlock; //Head pointer to Allocated linkedlist.
    struct _Unit*    m_pFreeMemBlock;      //Head pointer to Free linkedlist.

public:

    MemPool(unsigned long ulUnitNum):
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
            m_pMemBlock(nullptr),
            m_pAllocatedMemBlock(nullptr),
            m_pFreeMemBlock(nullptr)//,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    {
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f005 fddf 	bl	800730c <malloc>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d018      	beq.n	8001790 <_ZN7MemPoolIhEC1Em+0x6c>
        {
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d214      	bcs.n	8001794 <_ZN7MemPoolIhEC1Em+0x70>
            {
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	440b      	add	r3, r1
 8001778:	60bb      	str	r3, [r7, #8]

                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]

                m_pFreeMemBlock = pCurUnit;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e7e8      	b.n	8001762 <_ZN7MemPoolIhEC1Em+0x3e>
            }
        }
        else
        {
        	Error_Handler();
 8001790:	f002 fffc 	bl	800478c <Error_Handler>
        }
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <_ZN4core10FixedEventIhED1Ev>:
class FixedEvent: public Event
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_ZN4core10FixedEventIhED1Ev+0x20>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fbc9 	bl	8000f48 <_ZN4core5EventD1Ev>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	08008824 	.word	0x08008824

080017c4 <_ZN4core10FixedEventIhED0Ev>:
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_ZN4core10FixedEventIhED1Ev>
 80017d2:	211c      	movs	r1, #28
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f004 fcad 	bl	8006134 <_ZdlPvj>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZN4core10EmptyEventD1Ev>:
class EmptyEvent: public Event
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_ZN4core10EmptyEventD1Ev+0x20>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fba7 	bl	8000f48 <_ZN4core5EventD1Ev>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	08008854 	.word	0x08008854

08001808 <_ZN4core10EmptyEventD0Ev>:
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffe7 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 8001816:	2118      	movs	r1, #24
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f004 fc8b 	bl	8006134 <_ZdlPvj>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN4core11ByteMachineIhE6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        currentState_ = s;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	330c      	adds	r3, #12
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001840:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZN4core10FixedEventIhE7executeEv>:
    	memcpy(container_.payload_, &e, sizeof(E));

    	core::Engine::instance().events().post(container_);
    }
protected:
    void execute() override
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    {
    	E* e = (E*)container_.payload_;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	60fb      	str	r3, [r7, #12]
    	pool_->Free(e);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f820 	bl	80018aa <_ZN7MemPoolIhE4FreeEPh>
        (component_->*handler_)(*e);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6952      	ldr	r2, [r2, #20]
 8001872:	1052      	asrs	r2, r2, #1
 8001874:	1898      	adds	r0, r3, r2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <_ZN4core10FixedEventIhE7executeEv+0x38>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	e00a      	b.n	800189e <_ZN4core10FixedEventIhE7executeEv+0x4e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6952      	ldr	r2, [r2, #20]
 8001890:	1052      	asrs	r2, r2, #1
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6912      	ldr	r2, [r2, #16]
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	4798      	blx	r3
    }
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZN7MemPoolIhE4FreeEPh>:
        m_pAllocatedMemBlock = pCurUnit;

        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
    }

    void Free(T* p)
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
    {
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3b04      	subs	r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01e      	beq.n	8001908 <_ZN7MemPoolIhE4FreeEPh+0x5e>
		{
			if(it == pCurUnit)
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d114      	bne.n	80018fc <_ZN7MemPoolIhE4FreeEPh+0x52>
			{
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <_ZN7MemPoolIhE4FreeEPh+0x38>
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	e003      	b.n	80018ea <_ZN7MemPoolIhE4FreeEPh+0x40>
				else prev->pNext = it->pNext;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]
				break;
 80018f8:	bf00      	nop
			}
			prev = it;
		}
    }
 80018fa:	e005      	b.n	8001908 <_ZN7MemPoolIhE4FreeEPh+0x5e>
			prev = it;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e7dd      	b.n	80018c4 <_ZN7MemPoolIhE4FreeEPh+0x1a>
    }
 8001908:	bf00      	nop
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_ZN4core5Queue5emptyEv>:
    bool notEmpty(){return (inPtr_ != outPtr_);}
    bool empty(){return (inPtr_ == outPtr_);}
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_ZN4core5Queue4pushEh>:
    {
        inPtr_ = first_;
        outPtr_ = first_;
    }

    void push(uint8_t val)
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
    {
    	uint8_t* next = inPtr_ + 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
    	if (next == last_) next = first_;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d102      	bne.n	800195e <_ZN4core5Queue4pushEh+0x24>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
		if (next!=outPtr_) //queue not full
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d006      	beq.n	8001976 <_ZN4core5Queue4pushEh+0x3c>
		{
			*inPtr_ = val;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	701a      	strb	r2, [r3, #0]
			inPtr_ = next;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	60da      	str	r2, [r3, #12]
		}
    }
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZN4core5Queue3popEv>:

    uint8_t pop()
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
    {
    	if (outPtr_ != inPtr_)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	429a      	cmp	r2, r3
 8001994:	d014      	beq.n	80019c0 <_ZN4core5Queue3popEv+0x3e>
		{
			uint8_t ret = *outPtr_;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	73fb      	strb	r3, [r7, #15]
			outPtr_++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]
			if (outPtr_ == last_) outPtr_ = first_;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d103      	bne.n	80019bc <_ZN4core5Queue3popEv+0x3a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
			return ret;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	e000      	b.n	80019c2 <_ZN4core5Queue3popEv+0x40>
		}
        return 0;
 80019c0:	2300      	movs	r3, #0
    }
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_ZN4core10EventQueueD1Ev>:
{

class EventQueue//: public AbstractEventQueue
{
public:
	virtual ~EventQueue(){}
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <_ZN4core10EventQueueD1Ev+0x1c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	080088c0 	.word	0x080088c0

080019f0 <_ZN4core10EventQueueD0Ev>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe9 	bl	80019d0 <_ZN4core10EventQueueD1Ev>
 80019fe:	f240 611c 	movw	r1, #1564	; 0x61c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f004 fb96 	bl	8006134 <_ZdlPvj>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZN4core10EventQueue4postENS_9ContainerE>:
        	Error_Handler();
        }
		return true;
	}

    inline void post(container_t container)
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        uint16_t avail = size_ + outPtr_ - inPtr_;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	441a      	add	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	10db      	asrs	r3, r3, #3
 8001a3a:	82fb      	strh	r3, [r7, #22]
        if (avail > size_) avail -= size_;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a42:	8afa      	ldrh	r2, [r7, #22]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d905      	bls.n	8001a54 <_ZN4core10EventQueue4postENS_9ContainerE+0x42>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	82fb      	strh	r3, [r7, #22]
        if (avail < 2)
 8001a54:	8afb      	ldrh	r3, [r7, #22]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d802      	bhi.n	8001a60 <_ZN4core10EventQueue4postENS_9ContainerE+0x4e>
        {
        	Error_Handler();
 8001a5a:	f002 fe97 	bl	800478c <Error_Handler>
        	return;
 8001a5e:	e009      	b.n	8001a74 <_ZN4core10EventQueue4postENS_9ContainerE+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
        }

        DISABLE_INTERRUPT;
        push_(container);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f805 	bl	8001a7a <_ZN4core10EventQueue5push_ENS_9ContainerE>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a70:	b662      	cpsie	i
}
 8001a72:	bf00      	nop
        ENABLE_INTERRUPT;
    }
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZN4core10EventQueue5push_ENS_9ContainerE>:

private:
    inline void push_(container_t val)
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        *(inPtr_) = val;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001a8e:	461a      	mov	r2, r3
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a96:	e882 0003 	stmia.w	r2, {r0, r1}
        inPtr_++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001aa0:	f103 0208 	add.w	r2, r3, #8
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (inPtr_ == last_) inPtr_ = first_;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d105      	bne.n	8001ac6 <_ZN4core10EventQueue5push_ENS_9ContainerE+0x4c>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    }
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_ZN4core6EngineD1Ev>:
class Task;

class Engine: public Event
{
public:
    ~Engine(){}
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <_ZN4core6EngineD1Ev+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff72 	bl	80019d0 <_ZN4core10EventQueueD1Ev>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa2a 	bl	8000f48 <_ZN4core5EventD1Ev>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	080088d0 	.word	0x080088d0

08001b04 <_ZN4core6EngineD0Ev>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe1 	bl	8001ad4 <_ZN4core6EngineD1Ev>
 8001b12:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f004 fb0c 	bl	8006134 <_ZdlPvj>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN4core6Engine6eventsEv>:
    void run();
    inline void tick(); /*must be called in timer interrupt or SysTick interrupt, 1ms usually*/
    inline uint64_t tickCount(){return tickCount_;}
    void delay(uint32_t t); //t in ms, WARNING: this function is blocking, use in some limited context only
    EventQueue& events(){return events_;}
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	330c      	adds	r3, #12
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <__tcf_0>:
    static Engine& instance()
    {
        static Engine engine;
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4801      	ldr	r0, [pc, #4]	; (8001b4c <__tcf_0+0xc>)
 8001b46:	f7ff ffc5 	bl	8001ad4 <_ZN4core6EngineD1Ev>
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200009f8 	.word	0x200009f8

08001b50 <_ZN4core6Engine8instanceEv>:
    static Engine& instance()
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
        static Engine engine;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <_ZN4core6Engine8instanceEv+0x50>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f3bf 8f5b 	dmb	ish
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <_ZN4core6Engine8instanceEv+0x48>
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <_ZN4core6Engine8instanceEv+0x50>)
 8001b72:	f004 fae1 	bl	8006138 <__cxa_guard_acquire>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <_ZN4core6Engine8instanceEv+0x48>
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <_ZN4core6Engine8instanceEv+0x54>)
 8001b88:	f000 fe38 	bl	80027fc <_ZN4core6EngineC1Ev>
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <_ZN4core6Engine8instanceEv+0x50>)
 8001b8e:	f004 fadf 	bl	8006150 <__cxa_guard_release>
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <_ZN4core6Engine8instanceEv+0x58>)
 8001b94:	f005 fb89 	bl	80072aa <atexit>
        return engine;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <_ZN4core6Engine8instanceEv+0x54>)
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20001038 	.word	0x20001038
 8001ba4:	200009f8 	.word	0x200009f8
 8001ba8:	08001b41 	.word	0x08001b41

08001bac <__tcf_1>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <__tcf_1+0xc>)
 8001bb2:	f7ff f9f3 	bl	8000f9c <_ZN7console10ControllerD1Ev>
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20001040 	.word	0x20001040

08001bbc <_ZN7console10Controller8instanceEv>:
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <_ZN7console10Controller8instanceEv+0x50>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	f3bf 8f5b 	dmb	ish
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <_ZN7console10Controller8instanceEv+0x48>
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <_ZN7console10Controller8instanceEv+0x50>)
 8001bde:	f004 faab 	bl	8006138 <__cxa_guard_acquire>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <_ZN7console10Controller8instanceEv+0x48>
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <_ZN7console10Controller8instanceEv+0x54>)
 8001bf4:	f000 f810 	bl	8001c18 <_ZN7console10ControllerC1Ev>
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <_ZN7console10Controller8instanceEv+0x50>)
 8001bfa:	f004 faa9 	bl	8006150 <__cxa_guard_release>
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <_ZN7console10Controller8instanceEv+0x58>)
 8001c00:	f005 fb53 	bl	80072aa <atexit>
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <_ZN7console10Controller8instanceEv+0x54>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20001098 	.word	0x20001098
 8001c10:	20001040 	.word	0x20001040
 8001c14:	08001bad 	.word	0x08001bad

08001c18 <_ZN7console10ControllerC1Ev>:
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9dc 	bl	8000fe0 <_ZN4core9ComponentC1Ev>
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <_ZN7console10ControllerC1Ev+0x50>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0008 	add.w	r0, r3, #8
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <_ZN7console10ControllerC1Ev+0x54>)
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	cb0c      	ldmia	r3, {r2, r3}
 8001c44:	f000 ff50 	bl	8002ae8 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	08008868 	.word	0x08008868
 8001c6c:	08002499 	.word	0x08002499

08001c70 <_ZN4core10EmptyEvent4postEv>:
    void post()
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
        core::Engine::instance().events().post(container_);
 8001c78:	f7ff ff6a 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff51 	bl	8001b26 <_ZN4core6Engine6eventsEv>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c8c:	f7ff fec1 	bl	8001a12 <_ZN4core10EventQueue4postENS_9ContainerE>
    }
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_ZN7console6Driver4initEv>:
#include <console/controller.h>
#include <console/driver.h>
#include <console/hal.h>

void console::Driver::init()
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    console::HAL::init();
 8001ca0:	f000 fafa 	bl	8002298 <_ZN7console3HAL4initEv>
    SM_START(ReceiveHeader);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3310      	adds	r3, #16
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <_ZN7console6Driver4initEv+0x30>)
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60fa      	str	r2, [r7, #12]
 8001cb6:	f107 0208 	add.w	r2, r7, #8
 8001cba:	ca06      	ldmia	r2, {r1, r2}
 8001cbc:	4798      	blx	r3
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08001ccd 	.word	0x08001ccd

08001ccc <_ZN7console6Driver13ReceiveHeaderEv>:

STATE_BODY(console::Driver::ReceiveHeader)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    if (data_ == HEADER_INDICATOR) SM_SWITCH(Driver::ReceiveLength);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d1b      	ldrb	r3, [r3, #20]
 8001cd8:	2bfe      	cmp	r3, #254	; 0xfe
 8001cda:	d105      	bne.n	8001ce8 <_ZN7console6Driver13ReceiveHeaderEv+0x1c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <_ZN7console6Driver13ReceiveHeaderEv+0x28>)
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	08001cf9 	.word	0x08001cf9

08001cf8 <_ZN7console6Driver13ReceiveLengthEv>:

STATE_BODY(console::Driver::ReceiveLength)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    rxLength_ = data_;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7d1a      	ldrb	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f883 295b 	strb.w	r2, [r3, #2395]	; 0x95b
    if (rxLength_ < MAX_PACKET_LENGTH)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d10:	2bf9      	cmp	r3, #249	; 0xf9
 8001d12:	d816      	bhi.n	8001d42 <_ZN7console6Driver13ReceiveLengthEv+0x4a>
    {
        rxIndex_ = 2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
        rxType_ = 0;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
        checksum_ = HEADER_INDICATOR + rxLength_;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d2a:	3b02      	subs	r3, #2
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
        SM_SWITCH(ReceiveType);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <_ZN7console6Driver13ReceiveLengthEv+0x64>)
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
    }
    else SM_SWITCH(ReceiveHeader);
}
 8001d40:	e005      	b.n	8001d4e <_ZN7console6Driver13ReceiveLengthEv+0x56>
    else SM_SWITCH(ReceiveHeader);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <_ZN7console6Driver13ReceiveLengthEv+0x68>)
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001ccd 	.word	0x08001ccd

08001d64 <_ZN7console6Driver11ReceiveTypeEv>:

STATE_BODY(console::Driver::ReceiveType)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7d1b      	ldrb	r3, [r3, #20]
 8001d76:	4413      	add	r3, r2
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxType_ <<= 8;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8b3 395e 	ldrh.w	r3, [r3, #2398]	; 0x95e
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    rxType_+= data_;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8b3 295e 	ldrh.w	r2, [r3, #2398]	; 0x95e
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7d1b      	ldrb	r3, [r3, #20]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    if (--rxIndex_ == 0)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d011      	beq.n	8001dee <_ZN7console6Driver11ReceiveTypeEv+0x8a>
    {
        if (rxLength_ > 0) SM_SWITCH(ReceiveData);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <_ZN7console6Driver11ReceiveTypeEv+0x7e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <_ZN7console6Driver11ReceiveTypeEv+0x98>)
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
        else SM_SWITCH(ReceiveChecksum);
    }
}
 8001de0:	e005      	b.n	8001dee <_ZN7console6Driver11ReceiveTypeEv+0x8a>
        else SM_SWITCH(ReceiveChecksum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <_ZN7console6Driver11ReceiveTypeEv+0x9c>)
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	08001e05 	.word	0x08001e05
 8001e00:	08001e6d 	.word	0x08001e6d

08001e04 <_ZN7console6Driver11ReceiveDataEv>:

STATE_BODY(console::Driver::ReceiveData)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxBuffer_[rxIndex_++] = data_;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	f882 195d 	strb.w	r1, [r2, #2397]	; 0x95d
 8001e30:	4619      	mov	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d1a      	ldrb	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	440b      	add	r3, r1
 8001e3a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
    if (rxIndex_==rxLength_) SM_SWITCH(ReceiveChecksum);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 295d 	ldrb.w	r2, [r3, #2397]	; 0x95d
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d105      	bne.n	8001e5a <_ZN7console6Driver11ReceiveDataEv+0x56>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_ZN7console6Driver11ReceiveDataEv+0x64>)
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	08001e6d 	.word	0x08001e6d

08001e6c <_ZN7console6Driver15ReceiveChecksumEv>:
STATE_BODY(console::Driver::ReceiveChecksum)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    if (data_ == checksum_) SM_SWITCH(ReceiveFooter);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7d1a      	ldrb	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 395c 	ldrb.w	r3, [r3, #2396]	; 0x95c
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d106      	bne.n	8001e90 <_ZN7console6Driver15ReceiveChecksumEv+0x24>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <_ZN7console6Driver15ReceiveChecksumEv+0x3c>)
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
    else SM_SWITCH(ReceiveHeader);
}
 8001e8e:	e005      	b.n	8001e9c <_ZN7console6Driver15ReceiveChecksumEv+0x30>
    else SM_SWITCH(ReceiveHeader);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a06      	ldr	r2, [pc, #24]	; (8001eac <_ZN7console6Driver15ReceiveChecksumEv+0x40>)
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001ccd 	.word	0x08001ccd

08001eb0 <_ZN7console6Driver13ReceiveFooterEv>:

STATE_BODY(console::Driver::ReceiveFooter)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    if (data_ == FOOTER_INDICATOR)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7d1b      	ldrb	r3, [r3, #20]
 8001ebc:	2bfd      	cmp	r3, #253	; 0xfd
 8001ebe:	d10c      	bne.n	8001eda <_ZN7console6Driver13ReceiveFooterEv+0x2a>
    {
        Controller::instance().processCommand(rxType_, rxLength_, rxBuffer_);
 8001ec0:	f7ff fe7c 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8b3 195e 	ldrh.w	r1, [r3, #2398]	; 0x95e
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 295b 	ldrb.w	r2, [r3, #2395]	; 0x95b
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f603 0361 	addw	r3, r3, #2145	; 0x861
 8001ed6:	f7ff fb2e 	bl	8001536 <_ZN7console10Controller14processCommandEthPh>
    }
    SM_SWITCH(ReceiveHeader);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <_ZN7console6Driver13ReceiveFooterEv+0x40>)
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08001ccd 	.word	0x08001ccd

08001ef4 <_ZN7console6Driver10sendPacketEthPKh>:

bool console::Driver::sendPacket(uint16_t type, uint8_t length, const uint8_t* data)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	817b      	strh	r3, [r7, #10]
 8001f02:	4613      	mov	r3, r2
 8001f04:	727b      	strb	r3, [r7, #9]
    uint8_t checksum = 0u;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    if (txQueue_.available() < length + 5)
 8001f0a:	7a7b      	ldrb	r3, [r7, #9]
 8001f0c:	1d1c      	adds	r4, r3, #4
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ffcf 	bl	8000eb8 <_ZN4core5Queue9availableEv>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	429c      	cmp	r4, r3
 8001f1e:	bfac      	ite	ge
 8001f20:	2301      	movge	r3, #1
 8001f22:	2300      	movlt	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_ZN7console6Driver10sendPacketEthPKh+0x3a>
    {
    	//TODO: Warning here
    	return false;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e071      	b.n	8002012 <_ZN7console6Driver10sendPacketEthPKh+0x11e>
    }
    txQueue_.push(HEADER_INDICATOR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f34:	21fe      	movs	r1, #254	; 0xfe
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fcff 	bl	800193a <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) HEADER_INDICATOR;
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	3b02      	subs	r3, #2
 8001f40:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(length);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f48:	7a7a      	ldrb	r2, [r7, #9]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fcf4 	bl	800193a <_ZN4core5Queue4pushEh>
    checksum += length;
 8001f52:	7dfa      	ldrb	r2, [r7, #23]
 8001f54:	7a7b      	ldrb	r3, [r7, #9]
 8001f56:	4413      	add	r3, r2
 8001f58:	75fb      	strb	r3, [r7, #23]
    txQueue_.push((type >> 8) & 0xFF);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f603 024c 	addw	r2, r3, #2124	; 0x84c
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f7ff fce5 	bl	800193a <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) ((type >> 8) & 0xFF);
 8001f70:	897b      	ldrh	r3, [r7, #10]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(type & 0xFF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f84:	897a      	ldrh	r2, [r7, #10]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fcd5 	bl	800193a <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) (type & 0xFF);
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	4413      	add	r3, r2
 8001f98:	75fb      	strb	r3, [r7, #23]

    for (int i =0;i < length;i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	7a7b      	ldrb	r3, [r7, #9]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	da14      	bge.n	8001fd0 <_ZN7console6Driver10sendPacketEthPKh+0xdc>
    {
        txQueue_.push(data[i]);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7ff fcc0 	bl	800193a <_ZN4core5Queue4pushEh>
        checksum += data[i];
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	75fb      	strb	r3, [r7, #23]
    for (int i =0;i < length;i++)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e7e6      	b.n	8001f9e <_ZN7console6Driver10sendPacketEthPKh+0xaa>
    }
    txQueue_.push(checksum);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001fd6:	7dfa      	ldrb	r2, [r7, #23]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fcad 	bl	800193a <_ZN4core5Queue4pushEh>
    txQueue_.push(FOOTER_INDICATOR);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001fe6:	21fd      	movs	r1, #253	; 0xfd
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fca6 	bl	800193a <_ZN4core5Queue4pushEh>

    if (!sending_)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <_ZN7console6Driver10sendPacketEthPKh+0x11c>
    {
        sendEvent.post();
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3334      	adds	r3, #52	; 0x34
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe34 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
        sending_ = true;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
    return true;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}

0800201a <_ZN7console6Driver12sendHandler_Ev>:

M_EVENT_HANDLER(console::Driver,send)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
    if (txQueue_.empty())
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc73 	bl	8001914 <_ZN4core5Queue5emptyEv>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <_ZN7console6Driver12sendHandler_Ev+0x24>
    {
    	sending_ = false;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    	return;
 800203c:	e013      	b.n	8002066 <_ZN7console6Driver12sendHandler_Ev+0x4c>
    }
    if (console::HAL::txReady()) console::HAL::write(txQueue_.pop());
 800203e:	f000 f93f 	bl	80022c0 <_ZN7console3HAL7txReadyEv>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <_ZN7console6Driver12sendHandler_Ev+0x42>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc97 	bl	8001982 <_ZN4core5Queue3popEv>
 8002054:	4603      	mov	r3, r0
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f942 	bl	80022e0 <_ZN7console3HAL5writeEh>
    sendEvent.post();
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3334      	adds	r3, #52	; 0x34
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe05 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
}
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b20      	cmp	r3, #32
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b089      	sub	sp, #36	; 0x24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	330c      	adds	r3, #12
 8002106:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	e853 3f00 	ldrex	r3, [r3]
 800210e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	330c      	adds	r3, #12
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	61ba      	str	r2, [r7, #24]
 8002120:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	e841 2300 	strex	r3, r2, [r1]
 800212a:	613b      	str	r3, [r7, #16]
   return(result);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	bf14      	ite	ne
 8002132:	2301      	movne	r3, #1
 8002134:	2300      	moveq	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <LL_USART_EnableIT_RXNE+0x44>
 800213c:	e7e1      	b.n	8002102 <LL_USART_EnableIT_RXNE+0x8>
}
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800214a:	b480      	push	{r7}
 800214c:	b089      	sub	sp, #36	; 0x24
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3314      	adds	r3, #20
 8002156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	e853 3f00 	ldrex	r3, [r3]
 800215e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3314      	adds	r3, #20
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	61ba      	str	r2, [r7, #24]
 8002170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002172:	6979      	ldr	r1, [r7, #20]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	e841 2300 	strex	r3, r2, [r1]
 800217a:	613b      	str	r3, [r7, #16]
   return(result);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf14      	ite	ne
 8002182:	2301      	movne	r3, #1
 8002184:	2300      	moveq	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d000      	beq.n	800218e <LL_USART_EnableIT_ERROR+0x44>
 800218c:	e7e1      	b.n	8002152 <LL_USART_EnableIT_ERROR+0x8>
}
 800218e:	bf00      	nop
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 800219a:	b480      	push	{r7}
 800219c:	b089      	sub	sp, #36	; 0x24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	330c      	adds	r3, #12
 80021a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	330c      	adds	r3, #12
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	61ba      	str	r2, [r7, #24]
 80021c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	613b      	str	r3, [r7, #16]
   return(result);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d000      	beq.n	80021de <LL_USART_DisableIT_TC+0x44>
 80021dc:	e7e1      	b.n	80021a2 <LL_USART_DisableIT_TC+0x8>
}
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b089      	sub	sp, #36	; 0x24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	330c      	adds	r3, #12
 80021f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	e853 3f00 	ldrex	r3, [r3]
 80021fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	330c      	adds	r3, #12
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	61ba      	str	r2, [r7, #24]
 8002210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002212:	6979      	ldr	r1, [r7, #20]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	613b      	str	r3, [r7, #16]
   return(result);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d000      	beq.n	800222e <LL_USART_DisableIT_TXE+0x44>
 800222c:	e7e1      	b.n	80021f2 <LL_USART_DisableIT_TXE+0x8>
}
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b2db      	uxtb	r3, r3
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	605a      	str	r2, [r3, #4]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZN7console3HAL4initEv>:

#define UART_PORT			USART2
#define UART_ISR_HANDLER()	extern "C" void USART2_IRQHandler(void)

void console::HAL::init()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 800229c:	f002 fc5c 	bl	8004b58 <MX_USART2_UART_Init>
	LL_USART_EnableIT_RXNE(UART_PORT);
 80022a0:	4806      	ldr	r0, [pc, #24]	; (80022bc <_ZN7console3HAL4initEv+0x24>)
 80022a2:	f7ff ff2a 	bl	80020fa <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(UART_PORT);
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <_ZN7console3HAL4initEv+0x24>)
 80022a8:	f7ff ff4f 	bl	800214a <LL_USART_EnableIT_ERROR>
	LL_USART_DisableIT_TC(UART_PORT);
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <_ZN7console3HAL4initEv+0x24>)
 80022ae:	f7ff ff74 	bl	800219a <LL_USART_DisableIT_TC>
	LL_USART_DisableIT_TXE(UART_PORT);
 80022b2:	4802      	ldr	r0, [pc, #8]	; (80022bc <_ZN7console3HAL4initEv+0x24>)
 80022b4:	f7ff ff99 	bl	80021ea <LL_USART_DisableIT_TXE>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40004400 	.word	0x40004400

080022c0 <_ZN7console3HAL7txReadyEv>:

bool console::HAL::txReady()
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	return (LL_USART_IsActiveFlag_TXE(UART_PORT));
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <_ZN7console3HAL7txReadyEv+0x1c>)
 80022c6:	f7ff fef7 	bl	80020b8 <LL_USART_IsActiveFlag_TXE>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40004400 	.word	0x40004400

080022e0 <_ZN7console3HAL5writeEh>:

void console::HAL::write(uint8_t c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(UART_PORT, c);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4803      	ldr	r0, [pc, #12]	; (80022fc <_ZN7console3HAL5writeEh+0x1c>)
 80022f0:	f7ff ffc3 	bl	800227a <LL_USART_TransmitData8>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40004400 	.word	0x40004400

08002300 <USART2_IRQHandler>:

UART_ISR_HANDLER()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(UART_PORT) && LL_USART_IsEnabledIT_RXNE(UART_PORT))
 8002306:	4822      	ldr	r0, [pc, #136]	; (8002390 <USART2_IRQHandler+0x90>)
 8002308:	f7ff feb0 	bl	800206c <LL_USART_IsActiveFlag_RXNE>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <USART2_IRQHandler+0x22>
 8002312:	481f      	ldr	r0, [pc, #124]	; (8002390 <USART2_IRQHandler+0x90>)
 8002314:	f7ff ff91 	bl	800223a <LL_USART_IsEnabledIT_RXNE>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <USART2_IRQHandler+0x22>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <USART2_IRQHandler+0x24>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <USART2_IRQHandler+0x46>
	{
		uint8_t c = LL_USART_ReceiveData8(UART_PORT);
 8002328:	4819      	ldr	r0, [pc, #100]	; (8002390 <USART2_IRQHandler+0x90>)
 800232a:	f7ff ff99 	bl	8002260 <LL_USART_ReceiveData8>
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
		console::Driver::instance().post(c);
 8002332:	f7fe fee1 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 f84f 	bl	80023e2 <_ZN4core11ByteMachineIhE4postEh>
	}
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
	{
		LL_USART_DisableIT_TXE(UART_PORT);
	}
}
 8002344:	e01f      	b.n	8002386 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TC(UART_PORT))
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <USART2_IRQHandler+0x90>)
 8002348:	f7ff fea3 	bl	8002092 <LL_USART_IsActiveFlag_TC>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <USART2_IRQHandler+0x6a>
		LL_USART_ClearFlag_TC(UART_PORT);
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <USART2_IRQHandler+0x90>)
 800235e:	f7ff febe 	bl	80020de <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART_PORT);
 8002362:	480b      	ldr	r0, [pc, #44]	; (8002390 <USART2_IRQHandler+0x90>)
 8002364:	f7ff ff19 	bl	800219a <LL_USART_DisableIT_TC>
}
 8002368:	e00d      	b.n	8002386 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <USART2_IRQHandler+0x90>)
 800236c:	f7ff fea4 	bl	80020b8 <LL_USART_IsActiveFlag_TXE>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <USART2_IRQHandler+0x86>
		LL_USART_DisableIT_TXE(UART_PORT);
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <USART2_IRQHandler+0x90>)
 8002382:	f7ff ff32 	bl	80021ea <LL_USART_DisableIT_TXE>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40004400 	.word	0x40004400

08002394 <_ZN4core10FixedEventIhE4postERKh>:
    void post(const E& e)
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f82e 	bl	8002404 <_ZN7MemPoolIhE5AllocEv>
 80023a8:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d014      	beq.n	80023da <_ZN4core10FixedEventIhE4postERKh+0x46>
    	container_.payload_ = p;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 80023c0:	f7ff fbc6 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fbad 	bl	8001b26 <_ZN4core6Engine6eventsEv>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023d4:	f7ff fb1d 	bl	8001a12 <_ZN4core10EventQueue4postENS_9ContainerE>
 80023d8:	e000      	b.n	80023dc <_ZN4core10FixedEventIhE4postERKh+0x48>
    		return;
 80023da:	bf00      	nop
    }
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZN4core11ByteMachineIhE4postEh>:
    void post(T c)
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
        postEvent_.post(c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3318      	adds	r3, #24
 80023f2:	1cfa      	adds	r2, r7, #3
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ffcc 	bl	8002394 <_ZN4core10FixedEventIhE4postERKh>
    }
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN7MemPoolIhE5AllocEv>:
    void* Alloc()
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <_ZN7MemPoolIhE5AllocEv+0x18>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <_ZN7MemPoolIhE5AllocEv+0x1c>
			return nullptr;
 800241c:	2300      	movs	r3, #0
 800241e:	e00f      	b.n	8002440 <_ZN7MemPoolIhE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3304      	adds	r3, #4
    }
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZN7console10Controller4plotEhl>:

#define MAX_ONE (1<<7)
#define MAX_TWO (1<<15)

void console::Controller::plot(uint8_t channel, int32_t value)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	460b      	mov	r3, r1
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	72fb      	strb	r3, [r7, #11]
    if (channel>7) return;
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	2b07      	cmp	r3, #7
 800245e:	d815      	bhi.n	800248c <_ZN7console10Controller4plotEhl+0x40>
    plotReg_ |= (1<<channel);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002466:	b25a      	sxtb	r2, r3
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	b25b      	sxtb	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b25b      	sxtb	r3, r3
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    plotValues_[channel] = value;
 800247e:	7afa      	ldrb	r2, [r7, #11]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	320c      	adds	r2, #12
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800248a:	e000      	b.n	800248e <_ZN7console10Controller4plotEhl+0x42>
    if (channel>7) return;
 800248c:	bf00      	nop
}
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_ZN7console10Controller12plotHandler_Ev>:

M_TASK_HANDLER(console::Controller,plot)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    if (plotReg_ == 0) return;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80bf 	beq.w	800262a <_ZN7console10Controller12plotHandler_Ev+0x192>
    uint16_t plotMask = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t buf[34];
    uint8_t index = 2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    for (int i=0;i<8;i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	2b07      	cmp	r3, #7
 80024be:	f300 80a2 	bgt.w	8002606 <_ZN7console10Controller12plotHandler_Ev+0x16e>
    {
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024c8:	461a      	mov	r2, r3
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	fa42 f303 	asr.w	r3, r2, r3
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8091 	beq.w	80025fc <_ZN7console10Controller12plotHandler_Ev+0x164>
        int32_t value = plotValues_[i];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024de:	320c      	adds	r2, #12
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (value < MAX_ONE && value > -MAX_ONE)
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b7f      	cmp	r3, #127	; 0x7f
 80024ea:	dc1b      	bgt.n	8002524 <_ZN7console10Controller12plotHandler_Ev+0x8c>
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80024f2:	db17      	blt.n	8002524 <_ZN7console10Controller12plotHandler_Ev+0x8c>
        {
        	plotMask |= (1 << (i*2));
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2201      	movs	r2, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	b21a      	sxth	r2, r3
 8002500:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002504:	4313      	orrs	r3, r2
 8002506:	b21b      	sxth	r3, r3
 8002508:	86fb      	strh	r3, [r7, #54]	; 0x36
        	buf[index++] = (value & 0xFF);
 800250a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800251c:	440b      	add	r3, r1
 800251e:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002522:	e06c      	b.n	80025fe <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else if (value < MAX_TWO && value > -MAX_TWO)
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252a:	da28      	bge.n	800257e <_ZN7console10Controller12plotHandler_Ev+0xe6>
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002532:	dd24      	ble.n	800257e <_ZN7console10Controller12plotHandler_Ev+0xe6>
        {
        	plotMask |= (2 << (i*2));
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2202      	movs	r2, #2
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	b21a      	sxth	r2, r3
 8002540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002544:	4313      	orrs	r3, r2
 8002546:	b21b      	sxth	r3, r3
 8002548:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value >>8) & 0xFF);
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	121a      	asrs	r2, r3, #8
 800254e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800255e:	440b      	add	r3, r1
 8002560:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 8002564:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002576:	440b      	add	r3, r1
 8002578:	f803 2c30 	strb.w	r2, [r3, #-48]
 800257c:	e03f      	b.n	80025fe <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else
        {
        	plotMask |= (3 << (i*2));
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	b21a      	sxth	r2, r3
 800258a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800258e:	4313      	orrs	r3, r2
 8002590:	b21b      	sxth	r3, r3
 8002592:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value>>24) & 0xFF);
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	0e1a      	lsrs	r2, r3, #24
 8002598:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800259c:	1c59      	adds	r1, r3, #1
 800259e:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a8:	440b      	add	r3, r1
 80025aa:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>16) & 0xFF);
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	141a      	asrs	r2, r3, #16
 80025b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c2:	440b      	add	r3, r1
 80025c4:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>8) & 0xFF);
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	121a      	asrs	r2, r3, #8
 80025cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025dc:	440b      	add	r3, r1
 80025de:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 80025e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025f4:	440b      	add	r3, r1
 80025f6:	f803 2c30 	strb.w	r2, [r3, #-48]
 80025fa:	e000      	b.n	80025fe <_ZN7console10Controller12plotHandler_Ev+0x166>
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 80025fc:	bf00      	nop
    for (int i=0;i<8;i++)
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	3301      	adds	r3, #1
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
 8002604:	e759      	b.n	80024ba <_ZN7console10Controller12plotHandler_Ev+0x22>
        }
    }

    buf[0] = ((plotMask>>8) & 0xFF);
 8002606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29b      	uxth	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	723b      	strb	r3, [r7, #8]
    buf[1] = (plotMask& 0xFF);
 8002610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002612:	b2db      	uxtb	r3, r3
 8002614:	727b      	strb	r3, [r7, #9]

    console::Driver::instance().sendPacket(PlotReceived,index,buf);
 8002616:	f7fe fd6f 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002622:	2104      	movs	r1, #4
 8002624:	f7ff fc66 	bl	8001ef4 <_ZN7console6Driver10sendPacketEthPKh>
 8002628:	e000      	b.n	800262c <_ZN7console10Controller12plotHandler_Ev+0x194>
    if (plotReg_ == 0) return;
 800262a:	bf00      	nop
}
 800262c:	3738      	adds	r7, #56	; 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <_ZN4core5EventC1Eh>:
    Event(uint8_t index)
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
    {
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <_ZN4core5EventC1Eh+0x2c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	601a      	str	r2, [r3, #0]
    	container_.index_ = index;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	711a      	strb	r2, [r3, #4]
    	container_.payload_ = nullptr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    }
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	0800887c 	.word	0x0800887c

08002664 <_ZN4core10EventQueueC1Ev>:
    EventQueue(){}
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <_ZN4core10EventQueueC1Ev+0x58>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	1d1a      	adds	r2, r3, #4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	1d1a      	adds	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1d1a      	adds	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	080088c0 	.word	0x080088c0

080026c0 <_ZN4core10EventQueue4nextEv>:
	inline bool next()
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
		if (inPtr_ == outPtr_) return false;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d101      	bne.n	80026dc <_ZN4core10EventQueue4nextEv+0x1c>
 80026d8:	2300      	movs	r3, #0
 80026da:	e01d      	b.n	8002718 <_ZN4core10EventQueue4nextEv+0x58>
        container_t container_ = pop_();
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f81c 	bl	8002720 <_ZN4core10EventQueue4pop_Ev>
        if (container_.index_ < poolSize_)
 80026e8:	7b3a      	ldrb	r2, [r7, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d20e      	bcs.n	8002712 <_ZN4core10EventQueue4nextEv+0x52>
            Event* e = events_[container_.index_];
 80026f4:	7b3b      	ldrb	r3, [r7, #12]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	617b      	str	r3, [r7, #20]
            e->execute();
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3308      	adds	r3, #8
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	4798      	blx	r3
 8002710:	e001      	b.n	8002716 <_ZN4core10EventQueue4nextEv+0x56>
        	Error_Handler();
 8002712:	f002 f83b 	bl	800478c <Error_Handler>
		return true;
 8002716:	2301      	movs	r3, #1
	}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_ZN4core10EventQueue4pop_Ev>:

    inline container_t pop_()
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
    {
    	container_t ret = *(outPtr_);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002736:	e883 0003 	stmia.w	r3, {r0, r1}
		outPtr_++;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002740:	f103 0208 	add.w	r2, r3, #8
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		if (outPtr_ == last_) outPtr_ = first_;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002756:	429a      	cmp	r2, r3
 8002758:	d105      	bne.n	8002766 <_ZN4core10EventQueue4pop_Ev+0x46>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		return ret;
 8002766:	bf00      	nop
    }
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>:
    container_t* outPtr_ = buffer_;
private:
    Event* events_[EVENT_POOL_SIZE];
    uint8_t poolSize_ = 0;

    uint8_t registerEvent_(Event* event)
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
    {
        events_[poolSize_] = event;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800278c:	6839      	ldr	r1, [r7, #0]
 800278e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (poolSize_>= EVENT_POOL_SIZE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8002798:	b25b      	sxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	da01      	bge.n	80027a2 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE+0x2e>
        {
            /*TODO: warning here. Over Event Pool*/
        	Error_Handler();
 800279e:	f001 fff5 	bl	800478c <Error_Handler>
        }
        return poolSize_++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	b2d1      	uxtb	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	f882 1618 	strb.w	r1, [r2, #1560]	; 0x618
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <_ZN4core5EventC1Ev>:
#include "engine.h"
#include <core/system.h>
#include <core/event.h>
#include <console/log.h>

core::Event::Event()
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <_ZN4core5EventC1Ev+0x3c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
{
    container_.index_ = core::Engine::instance().events().registerEvent_(this);
 80027ca:	f7ff f9c1 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f9a8 	bl	8001b26 <_ZN4core6Engine6eventsEv>
 80027d6:	4603      	mov	r3, r0
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ffca 	bl	8002774 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	711a      	strb	r2, [r3, #4]
    container_.payload_ = nullptr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	0800887c 	.word	0x0800887c

080027fc <_ZN4core6EngineC1Ev>:

core::Engine::Engine(): Event(0)
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff13 	bl	8002634 <_ZN4core5EventC1Eh>
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <_ZN4core6EngineC1Ev+0x74>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	330c      	adds	r3, #12
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff23 	bl	8002664 <_ZN4core10EventQueueC1Ev>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f503 61c6 	add.w	r1, r3, #1584	; 0x630
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 61c7 	add.w	r1, r3, #1592	; 0x638
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	e9c1 2300 	strd	r2, r3, [r1]
{
    events_.registerEvent_(this);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	330c      	adds	r3, #12
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff8a 	bl	8002774 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
    systemInit();
 8002860:	f000 f936 	bl	8002ad0 <_Z10systemInitv>
}
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	080088d0 	.word	0x080088d0

08002874 <_ZN4core6Engine3runEv>:

void core::Engine::run()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    while (true)
    {
        if (events_.next()) continue;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	330c      	adds	r3, #12
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff1d 	bl	80026c0 <_ZN4core10EventQueue4nextEv>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <_ZN4core6Engine3runEv+0x1c>
        WAIT_FOR_INTERUPT;
 800288c:	bf30      	wfi
 800288e:	e7f5      	b.n	800287c <_ZN4core6Engine3runEv+0x8>
        if (events_.next()) continue;
 8002890:	bf00      	nop
 8002892:	e7f3      	b.n	800287c <_ZN4core6Engine3runEv+0x8>

08002894 <_ZN4core6Engine13registerTask_EPNS_4TaskE>:
    }
}

void core::Engine::registerTask_(Task* task)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    task->next_ = tasks_;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 2628 	ldr.w	r2, [r3, #1576]	; 0x628
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	601a      	str	r2, [r3, #0]
    tasks_ = task;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_ZN4core6Engine10startTask_EPNS_4TaskE>:

void core::Engine::startTask_(Task* task)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
    {
        if (it == task)
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d116      	bne.n	800290e <_ZN4core6Engine10startTask_EPNS_4TaskE+0x52>
        {
            if (prev == nullptr) tasks_ = it->next_;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x36>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 80028f0:	e003      	b.n	80028fa <_ZN4core6Engine10startTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	601a      	str	r2, [r3, #0]
            task->next_ = activeTasks_;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	601a      	str	r2, [r3, #0]
            activeTasks_ = task;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
            break;
 800290c:	e005      	b.n	800291a <_ZN4core6Engine10startTask_EPNS_4TaskE+0x5e>
        }
        prev = it;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e7db      	b.n	80028d2 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x16>
    }
    if (nextTick_ > task->nextTick_) nextTick_ = task->nextTick_;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800292a:	4299      	cmp	r1, r3
 800292c:	bf08      	it	eq
 800292e:	4290      	cmpeq	r0, r2
 8002930:	d207      	bcs.n	8002942 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x86>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 800293e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_ZN4core6Engine9stopTask_EPNS_4TaskE>:

void core::Engine::stopTask_(Task* task)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d021      	beq.n	80029ae <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
    {
        if (it == task)
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d117      	bne.n	80029a2 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x54>
        {
            if (prev == nullptr) activeTasks_ = it->next_;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x36>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
 8002982:	e003      	b.n	800298c <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x3e>
            else prev->next_ = it->next_;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
            task->next_ = tasks_;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 2628 	ldr.w	r2, [r3, #1576]	; 0x628
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
            tasks_ = task;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            break;
 800299e:	bf00      	nop
        }
        prev = it;
    }
}
 80029a0:	e005      	b.n	80029ae <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x60>
        prev = it;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e7da      	b.n	8002964 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x16>
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_ZN4core6Engine7executeEv>:
    auto timeout = tickCount_ + t;
    while (tickCount_ < timeout){NO_OPERATION;}
}

void core::Engine::execute()
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
    uint64_t min = LAST_TICK;
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    Task* it = activeTasks_;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 80029d4:	60fb      	str	r3, [r7, #12]
    Task* next;
    while (it!=nullptr)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d027      	beq.n	8002a2c <_ZN4core6Engine7executeEv+0x72>
    {
        next = it->next_;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]
        if (tickCount_ >= it->nextTick_) it->run_();
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 80029e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029f2:	4299      	cmp	r1, r3
 80029f4:	bf08      	it	eq
 80029f6:	4290      	cmpeq	r0, r2
 80029f8:	bf2c      	ite	cs
 80029fa:	2301      	movcs	r3, #1
 80029fc:	2300      	movcc	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <_ZN4core6Engine7executeEv+0x50>
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f8b9 	bl	8002b7c <_ZN4core4Task4run_Ev>
        if (min > it->nextTick_) min = it->nextTick_;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a14:	4299      	cmp	r1, r3
 8002a16:	bf08      	it	eq
 8002a18:	4290      	cmpeq	r0, r2
 8002a1a:	d204      	bcs.n	8002a26 <_ZN4core6Engine7executeEv+0x6c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a22:	e9c7 2304 	strd	r2, r3, [r7, #16]
        it = next;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
    while (it!=nullptr)
 8002a2a:	e7d4      	b.n	80029d6 <_ZN4core6Engine7executeEv+0x1c>
    }
    nextTick_ = min;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 61c7 	add.w	r1, r3, #1592	; 0x638
 8002a32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_SYSTICK_EnableIT+0x1c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <LL_SYSTICK_EnableIT+0x1c>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <_ZN4core6Engine4tickEv>:
private:
    friend class Task;
};

inline void core::Engine::tick()
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    if (++tickCount_ >= nextTick_) events_.post(container_);
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8002a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a76:	1c42      	adds	r2, r0, #1
 8002a78:	f141 0300 	adc.w	r3, r1, #0
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
 8002a82:	e9c1 2300 	strd	r2, r3, [r1]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	f501 61c7 	add.w	r1, r1, #1592	; 0x638
 8002a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a90:	428b      	cmp	r3, r1
 8002a92:	bf08      	it	eq
 8002a94:	4282      	cmpeq	r2, r0
 8002a96:	bf2c      	ite	cs
 8002a98:	2301      	movcs	r3, #1
 8002a9a:	2300      	movcc	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <_ZN4core6Engine4tickEv+0x50>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f103 000c 	add.w	r0, r3, #12
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ab0:	f7fe ffaf 	bl	8001a12 <_ZN4core10EventQueue4postENS_9ContainerE>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SysTick_Handler>:
#include "gpio.h"

extern "C" void SystemClock_Config(void);

extern "C" void SysTick_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	core::Engine::instance().tick();
 8002ac0:	f7ff f846 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ffcc 	bl	8002a64 <_ZN4core6Engine4tickEv>
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_Z10systemInitv>:

void systemInit()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	HAL_Init();
 8002ad4:	f002 f8ca 	bl	8004c6c <HAL_Init>
	SystemClock_Config();
 8002ad8:	f001 fdf0 	bl	80046bc <SystemClock_Config>
	MX_GPIO_Init();
 8002adc:	f001 fdc4 	bl	8004668 <MX_GPIO_Init>
	LL_SYSTICK_EnableIT();
 8002ae0:	f7ff ffb0 	bl	8002a44 <LL_SYSTICK_EnableIT>
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>:
#include <core/task.h>
#include <core/engine.h>

core::Task::Task(Component* component, Handler handler): component_(component), handler_(handler)
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	4639      	mov	r1, r7
 8002af4:	e881 000c 	stmia.w	r1, {r2, r3}
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	615a      	str	r2, [r3, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	463a      	mov	r2, r7
 8002b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b14:	e883 0003 	stmia.w	r3, {r0, r1}
{
    core::Engine::instance().registerTask_(this);
 8002b18:	f7ff f81a 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff feb7 	bl	8002894 <_ZN4core6Engine13registerTask_EPNS_4TaskE>
}
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZN4core4Task5startEml>:

void core::Task::start(uint32_t interval, int32_t loop)
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
    core::Engine& engine = core::Engine::instance();
 8002b3c:	f7ff f808 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8002b40:	6178      	str	r0, [r7, #20]
    this->interval_ = interval;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
    this->nextTick_ = engine.tickCount_ + interval;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8002b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	1884      	adds	r4, r0, r2
 8002b5c:	eb41 0503 	adc.w	r5, r1, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	e9c3 4502 	strd	r4, r5, [r3, #8]
    this->loop_ = loop;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
    engine.startTask_(this);
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff fea4 	bl	80028bc <_ZN4core6Engine10startTask_EPNS_4TaskE>
}
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}

08002b7c <_ZN4core4Task4run_Ev>:
    core::Engine::instance().stopTask_(this);
    this->nextTick_ = LAST_TICK - 1;
}

void core::Task::run_()
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    if (--loop_ == 0)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <_ZN4core4Task4run_Ev+0x42>
    {
        core::Engine::instance().stopTask_(this);
 8002ba0:	f7fe ffd6 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fed0 	bl	800294e <_ZN4core6Engine9stopTask_EPNS_4TaskE>
        this->nextTick_ = LAST_TICK - 1;
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f06f 0201 	mvn.w	r2, #1
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bbc:	e015      	b.n	8002bea <_ZN4core4Task4run_Ev+0x6e>
    }
    else
    {
        nextTick_ += interval_;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	1884      	adds	r4, r0, r2
 8002bd0:	eb41 0503 	adc.w	r5, r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	e9c3 4502 	strd	r4, r5, [r3, #8]
        if (loop_ < 0) loop_ = -1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da03      	bge.n	8002bea <_ZN4core4Task4run_Ev+0x6e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	611a      	str	r2, [r3, #16]
    }

    (component_->*handler_)();
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	69d2      	ldr	r2, [r2, #28]
 8002bf2:	1052      	asrs	r2, r2, #1
 8002bf4:	1899      	adds	r1, r3, r2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <_ZN4core4Task4run_Ev+0x8c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	e00a      	b.n	8002c1e <_ZN4core4Task4run_Ev+0xa2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	69d2      	ldr	r2, [r2, #28]
 8002c10:	1052      	asrs	r2, r2, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6992      	ldr	r2, [r2, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4798      	blx	r3
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}

08002c2a <_ZN3osc4Data5resetEt>:
    uint16_t lastVal;
    uint8_t buffer[1200];
    uint16_t index;
    uint16_t countIndex;

    void reset(uint16_t v)
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	807b      	strh	r3, [r7, #2]
    {
        countIndex = 0;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
        buffer[0] = 1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	711a      	strb	r2, [r3, #4]
        buffer[1] = ((v>>8) & 0xFF);
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	715a      	strb	r2, [r3, #5]
        buffer[2] = (v & 0xFF);
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	719a      	strb	r2, [r3, #6]
        index = 3;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
    }
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_ZN3osc4Data3addEt>:

    void add(uint16_t v)
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
    {
        int16_t d = v - lastVal;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	885b      	ldrh	r3, [r3, #2]
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	81fb      	strh	r3, [r7, #14]
        if ((d > 127) || (d < -127) || (buffer[countIndex] > 80))
 8002c84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c88:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8a:	dc0d      	bgt.n	8002ca8 <_ZN3osc4Data3addEt+0x3c>
 8002c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c90:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8002c94:	db08      	blt.n	8002ca8 <_ZN3osc4Data3addEt+0x3c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	791b      	ldrb	r3, [r3, #4]
 8002ca4:	2b50      	cmp	r3, #80	; 0x50
 8002ca6:	d931      	bls.n	8002d0c <_ZN3osc4Data3addEt+0xa0>
        {
            countIndex = index;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            buffer[index++] = 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	b291      	uxth	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	2201      	movs	r2, #1
 8002ccc:	711a      	strb	r2, [r3, #4]
            buffer[index++] = ((v >> 8)& 0xFF);
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b298      	uxth	r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	b291      	uxth	r1, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	b2c2      	uxtb	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	440b      	add	r3, r1
 8002cec:	711a      	strb	r2, [r3, #4]
            buffer[index++] = (v & 0xFF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	b291      	uxth	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	440b      	add	r3, r1
 8002d08:	711a      	strb	r2, [r3, #4]
 8002d0a:	e01a      	b.n	8002d42 <_ZN3osc4Data3addEt+0xd6>
        }
        else
        {
            buffer[countIndex]++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	441a      	add	r2, r3
 8002d16:	7912      	ldrb	r2, [r2, #4]
 8002d18:	3201      	adds	r2, #1
 8002d1a:	b2d1      	uxtb	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	460a      	mov	r2, r1
 8002d22:	711a      	strb	r2, [r3, #4]
            buffer[index++] = d;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	b291      	uxth	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	f8a2 14b4 	strh.w	r1, [r2, #1204]	; 0x4b4
 8002d34:	4619      	mov	r1, r3
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	440b      	add	r3, r1
 8002d3e:	711a      	strb	r2, [r3, #4]
        }
    }
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_ZN3osc4Data5flushEv>:

    bool flush()
 8002d4e:	b5b0      	push	{r4, r5, r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	6078      	str	r0, [r7, #4]
    {
        uint8_t count = buffer[index];
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]
        if (console::Controller::instance().sendOSC(channel, count+1, countIndex, buffer+index+1))
 8002d66:	f7fe ff29 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7819      	ldrb	r1, [r3, #0]
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2d8      	uxtb	r0, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8b3 44b6 	ldrh.w	r4, [r3, #1206]	; 0x4b6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002d86:	3301      	adds	r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7fe faf5 	bl	8001380 <_ZN7console10Controller7sendOSCEhhtPKh>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d02c      	beq.n	8002df6 <_ZN3osc4Data5flushEv+0xa8>
        {
            countIndex += count;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
            index += count+2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8b3 24b4 	ldrh.w	r2, [r3, #1204]	; 0x4b4
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
            if ((countIndex > 999) || (index > 1198))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 34b6 	ldrh.w	r3, [r3, #1206]	; 0x4b6
 8002dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd2:	d206      	bcs.n	8002de2 <_ZN3osc4Data5flushEv+0x94>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 8002dda:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d909      	bls.n	8002df6 <_ZN3osc4Data5flushEv+0xa8>
            {
                index = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
                countIndex = 0;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
                return true;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <_ZN3osc4Data5flushEv+0xaa>
            }
        }
        return false;
 8002df6:	2300      	movs	r3, #0
    }
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdb0      	pop	{r4, r5, r7, pc}

08002e00 <_ZN3osc4Data12prepareFlushEv>:
    void prepareFlush()
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
    {
        index = 0;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
        countIndex = 0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
    }
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_ZN3osc4Quad5idle_Etttt>:
        c2_.lastVal = v2;
        c3_.lastVal = v3;
        c4_.lastVal = v4;
    }
private:
    void idle_(uint16_t, uint16_t, uint16_t v3, uint16_t v4){}
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	460b      	mov	r3, r1
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <_ZN3osc4QuadC1Ehttt>:
#include "quad.h"
#include <console/controller.h>

osc::Quad::Quad(uint8_t c1, uint16_t c2, uint16_t c3, uint16_t c4)
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	72fb      	strb	r3, [r7, #11]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f8b9 	bl	8000fe0 <_ZN4core9ComponentC1Ev>
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <_ZN3osc4QuadC1Ehttt+0xf4>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <_ZN3osc4QuadC1Ehttt+0xf8>)
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	819a      	strh	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	81da      	strh	r2, [r3, #14]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e94:	821a      	strh	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002e9c:	3312      	adds	r3, #18
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f503 5097 	add.w	r0, r3, #4832	; 0x12e0
 8002ea8:	3014      	adds	r0, #20
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <_ZN3osc4QuadC1Ehttt+0xfc>)
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	cb0c      	ldmia	r3, {r2, r3}
 8002eba:	f7fe f8a1 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f503 5098 	add.w	r0, r3, #4864	; 0x1300
 8002ec4:	300c      	adds	r0, #12
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <_ZN3osc4QuadC1Ehttt+0x100>)
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	f107 0318 	add.w	r3, r7, #24
 8002ed4:	cb0c      	ldmia	r3, {r2, r3}
 8002ed6:	f7fe f893 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f503 5099 	add.w	r0, r3, #4896	; 0x1320
 8002ee0:	3004      	adds	r0, #4
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <_ZN3osc4QuadC1Ehttt+0x104>)
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
 8002eec:	f107 0320 	add.w	r3, r7, #32
 8002ef0:	cb0c      	ldmia	r3, {r2, r3}
 8002ef2:	f7fe f885 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f503 5099 	add.w	r0, r3, #4896	; 0x1320
 8002efc:	301c      	adds	r0, #28
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <_ZN3osc4QuadC1Ehttt+0x108>)
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0c:	cb0c      	ldmia	r3, {r2, r3}
 8002f0e:	f7fe f877 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
{
    c1_.channel = c1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	7afa      	ldrb	r2, [r7, #11]
 8002f16:	749a      	strb	r2, [r3, #18]
    c2_.channel = c2;
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
    c3_.channel = c3;
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
    c4_.channel = c4;
 8002f2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f883 2e3a 	strb.w	r2, [r3, #3642]	; 0xe3a
}
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	080088e4 	.word	0x080088e4
 8002f44:	08002f59 	.word	0x08002f59
 8002f48:	08003275 	.word	0x08003275
 8002f4c:	080032b3 	.word	0x080032b3
 8002f50:	080032f3 	.word	0x080032f3
 8002f54:	08003335 	.word	0x08003335

08002f58 <_ZN3osc4Quad13thresholding_Etttt>:

void osc::Quad::thresholding_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	817b      	strh	r3, [r7, #10]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	813b      	strh	r3, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
    if (threshold_ > 0)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dd0c      	ble.n	8002f96 <_ZN3osc4Quad13thresholding_Etttt+0x3e>
    {
        total_ = 0;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002f82:	3312      	adds	r3, #18
 8002f84:	2200      	movs	r2, #0
 8002f86:	801a      	strh	r2, [r3, #0]
        state_ = &osc::Quad::probing_;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <_ZN3osc4Quad13thresholding_Etttt+0xdc>)
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
        return;
 8002f94:	e04b      	b.n	800302e <_ZN3osc4Quad13thresholding_Etttt+0xd6>
    }

    if (v1 < min_) min_ = v1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	899b      	ldrh	r3, [r3, #12]
 8002f9a:	897a      	ldrh	r2, [r7, #10]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d202      	bcs.n	8002fa6 <_ZN3osc4Quad13thresholding_Etttt+0x4e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	897a      	ldrh	r2, [r7, #10]
 8002fa4:	819a      	strh	r2, [r3, #12]
    if (v1 > max_) max_ = v1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	89db      	ldrh	r3, [r3, #14]
 8002faa:	897a      	ldrh	r2, [r7, #10]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d902      	bls.n	8002fb6 <_ZN3osc4Quad13thresholding_Etttt+0x5e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	897a      	ldrh	r2, [r7, #10]
 8002fb4:	81da      	strh	r2, [r3, #14]
    if (total_++ > 1000)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fbc:	3312      	adds	r3, #18
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	1c53      	adds	r3, r2, #1
 8002fc2:	b299      	uxth	r1, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fca:	3312      	adds	r3, #18
 8002fcc:	8019      	strh	r1, [r3, #0]
 8002fce:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002fd2:	bf8c      	ite	hi
 8002fd4:	2301      	movhi	r3, #1
 8002fd6:	2300      	movls	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d027      	beq.n	800302e <_ZN3osc4Quad13thresholding_Etttt+0xd6>
    {
        threshold_ = (min_+max_)/2;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	899b      	ldrh	r3, [r3, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	89db      	ldrh	r3, [r3, #14]
 8002fe8:	4413      	add	r3, r2
 8002fea:	0fda      	lsrs	r2, r3, #31
 8002fec:	4413      	add	r3, r2
 8002fee:	105b      	asrs	r3, r3, #1
 8002ff0:	b21a      	sxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	821a      	strh	r2, [r3, #16]
        min_ = 65535;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffc:	819a      	strh	r2, [r3, #12]
        max_ = 0;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	81da      	strh	r2, [r3, #14]
        total_ = 0;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800300a:	3312      	adds	r3, #18
 800300c:	2200      	movs	r2, #0
 800300e:	801a      	strh	r2, [r3, #0]
        console::Controller::instance().printf("Auto detect threshold:%d", threshold_);
 8003010:	f7fe fdd4 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800301a:	461a      	mov	r2, r3
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <_ZN3osc4Quad13thresholding_Etttt+0xe0>)
 800301e:	f7fe fa12 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
        state_ = &osc::Quad::probing_;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a03      	ldr	r2, [pc, #12]	; (8003034 <_ZN3osc4Quad13thresholding_Etttt+0xdc>)
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
    }
}
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800303d 	.word	0x0800303d
 8003038:	080087a8 	.word	0x080087a8

0800303c <_ZN3osc4Quad8probing_Etttt>:

void osc::Quad::probing_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
    if (++total_ > 1000)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800305c:	3312      	adds	r3, #18
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800306a:	3312      	adds	r3, #18
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003074:	3312      	adds	r3, #18
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307c:	bf8c      	ite	hi
 800307e:	2301      	movhi	r3, #1
 8003080:	2300      	movls	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <_ZN3osc4Quad8probing_Etttt+0x6c>
    {
        total_ = 0;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800308e:	3312      	adds	r3, #18
 8003090:	2200      	movs	r2, #0
 8003092:	801a      	strh	r2, [r3, #0]
        threshold_ = -1;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309a:	821a      	strh	r2, [r3, #16]
        state_ = &osc::Quad::thresholding_;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <_ZN3osc4Quad8probing_Etttt+0xa0>)
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
    }

    if ((c1_.lastVal < threshold_) && (v1 >= threshold_))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8a9b      	ldrh	r3, [r3, #20]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	da0b      	bge.n	80030d0 <_ZN3osc4Quad8probing_Etttt+0x94>
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	db05      	blt.n	80030d0 <_ZN3osc4Quad8probing_Etttt+0x94>
    {
        state_ = &osc::Quad::first_;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <_ZN3osc4Quad8probing_Etttt+0xa4>)
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
    }
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	08002f59 	.word	0x08002f59
 80030e0:	080030e5 	.word	0x080030e5

080030e4 <_ZN3osc4Quad6first_Etttt>:

void osc::Quad::first_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
    c1_.reset(v1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3312      	adds	r3, #18
 8003102:	897a      	ldrh	r2, [r7, #10]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fd8f 	bl	8002c2a <_ZN3osc4Data5resetEt>
    c2_.reset(v2);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 8003112:	893a      	ldrh	r2, [r7, #8]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd87 	bl	8002c2a <_ZN3osc4Data5resetEt>
    c3_.reset(v3);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f603 1382 	addw	r3, r3, #2434	; 0x982
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fd7f 	bl	8002c2a <_ZN3osc4Data5resetEt>
    c4_.reset(v4);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 8003132:	8b3a      	ldrh	r2, [r7, #24]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fd77 	bl	8002c2a <_ZN3osc4Data5resetEt>
    total_ = 1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003142:	3312      	adds	r3, #18
 8003144:	2201      	movs	r2, #1
 8003146:	801a      	strh	r2, [r3, #0]
    state_ = &osc::Quad::adding_;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <_ZN3osc4Quad6first_Etttt+0x78>)
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	08003161 	.word	0x08003161

08003160 <_ZN3osc4Quad7adding_Etttt>:

void osc::Quad::adding_(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
    c1_.add(v1);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3312      	adds	r3, #18
 800317e:	897a      	ldrh	r2, [r7, #10]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fd72 	bl	8002c6c <_ZN3osc4Data3addEt>
    c2_.add(v2);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 800318e:	893a      	ldrh	r2, [r7, #8]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fd6a 	bl	8002c6c <_ZN3osc4Data3addEt>
    c3_.add(v3);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f603 1382 	addw	r3, r3, #2434	; 0x982
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fd62 	bl	8002c6c <_ZN3osc4Data3addEt>
    c4_.add(v4);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 80031ae:	8b3a      	ldrh	r2, [r7, #24]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fd5a 	bl	8002c6c <_ZN3osc4Data3addEt>

    total_++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031be:	3312      	adds	r3, #18
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031cc:	3312      	adds	r3, #18
 80031ce:	801a      	strh	r2, [r3, #0]
    if ((total_ > 1000) || (c1_.index > 1199) || (c2_.index > 1199)|| (c3_.index > 1199)|| (c4_.index > 1199))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80031d6:	3312      	adds	r3, #18
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031de:	d819      	bhi.n	8003214 <_ZN3osc4Quad7adding_Etttt+0xb4>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 80031e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80031ea:	d213      	bcs.n	8003214 <_ZN3osc4Quad7adding_Etttt+0xb4>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f8b3 397e 	ldrh.w	r3, [r3, #2430]	; 0x97e
 80031f2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80031f6:	d20d      	bcs.n	8003214 <_ZN3osc4Quad7adding_Etttt+0xb4>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8b3 3e36 	ldrh.w	r3, [r3, #3638]	; 0xe36
 80031fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003202:	d207      	bcs.n	8003214 <_ZN3osc4Quad7adding_Etttt+0xb4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800320a:	330e      	adds	r3, #14
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003212:	d329      	bcc.n	8003268 <_ZN3osc4Quad7adding_Etttt+0x108>
    {
        state_ = &osc::Quad::idle_;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <_ZN3osc4Quad7adding_Etttt+0x110>)
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
        total_ = 0;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003226:	3312      	adds	r3, #18
 8003228:	2200      	movs	r2, #0
 800322a:	801a      	strh	r2, [r3, #0]
        c1_.prepareFlush();
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3312      	adds	r3, #18
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fde5 	bl	8002e00 <_ZN3osc4Data12prepareFlushEv>
        c2_.prepareFlush();
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fddf 	bl	8002e00 <_ZN3osc4Data12prepareFlushEv>
        c3_.prepareFlush();
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f603 1382 	addw	r3, r3, #2434	; 0x982
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fdd9 	bl	8002e00 <_ZN3osc4Data12prepareFlushEv>
        c4_.prepareFlush();
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdd3 	bl	8002e00 <_ZN3osc4Data12prepareFlushEv>
        c1FlushEvent_.post();
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003260:	3314      	adds	r3, #20
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fd04 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
    }
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	08002e25 	.word	0x08002e25

08003274 <_ZN3osc4Quad8c1Flush_Ev>:

void osc::Quad::c1Flush_()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    if (c1_.flush())
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3312      	adds	r3, #18
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fd64 	bl	8002d4e <_ZN3osc4Data5flushEv>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <_ZN3osc4Quad8c1Flush_Ev+0x28>
    {
        c2FlushEvent_.post();
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003292:	330c      	adds	r3, #12
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fceb 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c1FlushEvent_.post();
    }
}
 800329a:	e006      	b.n	80032aa <_ZN3osc4Quad8c1Flush_Ev+0x36>
        c1FlushEvent_.post();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80032a2:	3314      	adds	r3, #20
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fce3 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZN3osc4Quad8c2Flush_Ev>:

void osc::Quad::c2Flush_()
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
    if (c2_.flush())
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 43ca 	addw	r3, r3, #1226	; 0x4ca
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fd44 	bl	8002d4e <_ZN3osc4Data5flushEv>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <_ZN3osc4Quad8c2Flush_Ev+0x2a>
    {
        c3FlushEvent_.post();
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fccb 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c2FlushEvent_.post();
    }
}
 80032da:	e006      	b.n	80032ea <_ZN3osc4Quad8c2Flush_Ev+0x38>
        c2FlushEvent_.post();
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80032e2:	330c      	adds	r3, #12
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fcc3 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_ZN3osc4Quad8c3Flush_Ev>:

void osc::Quad::c3Flush_()
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
    if (c3_.flush())
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f603 1382 	addw	r3, r3, #2434	; 0x982
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fd24 	bl	8002d4e <_ZN3osc4Data5flushEv>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <_ZN3osc4Quad8c3Flush_Ev+0x2a>
    {
        c4FlushEvent_.post();
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8003312:	331c      	adds	r3, #28
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fcab 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
    }
    else
    {
        c3FlushEvent_.post();
    }
}
 800331a:	e006      	b.n	800332a <_ZN3osc4Quad8c3Flush_Ev+0x38>
        c3FlushEvent_.post();
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8003322:	3304      	adds	r3, #4
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fca3 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <_ZN3osc4Quad8c4Flush_Ev>:

void osc::Quad::c4Flush_()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    if (c4_.flush())
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f603 633a 	addw	r3, r3, #3642	; 0xe3a
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fd03 	bl	8002d4e <_ZN3osc4Data5flushEv>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <_ZN3osc4Quad8c4Flush_Ev+0x28>
    {
        state_ = &osc::Quad::probing_;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <_ZN3osc4Quad8c4Flush_Ev+0x40>)
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
    }
    else
    {
        c4FlushEvent_.post();
    }
}
 800335a:	e006      	b.n	800336a <_ZN3osc4Quad8c4Flush_Ev+0x36>
        c4FlushEvent_.post();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8003362:	331c      	adds	r3, #28
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fc83 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	0800303d 	.word	0x0800303d

08003378 <_ZN3osc4QuadD1Ev>:
class Quad: public core::Component
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <_ZN3osc4QuadD1Ev+0x58>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800338c:	331c      	adds	r3, #28
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fa28 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800339a:	3304      	adds	r3, #4
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fa21 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80033a8:	330c      	adds	r3, #12
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fa1a 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80033b6:	3314      	adds	r3, #20
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fa13 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fda1 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	080088e4 	.word	0x080088e4

080033d4 <_ZN3osc4QuadD0Ev>:
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffcb 	bl	8003378 <_ZN3osc4QuadD1Ev>
 80033e2:	f241 3154 	movw	r1, #4948	; 0x1354
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f002 fea4 	bl	8006134 <_ZdlPvj>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <_ZN2ex4Test7StartUpEv>:
#include <console/log.h>
#include <test/example/example.h>

STATE_BODY(ex::Test::StartUp)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("START UP");
	}
	TRANSITION_(Event::TIMEOUT, Running){}
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	681c      	ldr	r4, [r3, #0]
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <_ZN2ex4Test7StartUpEv+0x2c>)
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	cb0c      	ldmia	r3, {r2, r3}
 8003418:	2100      	movs	r1, #0
 800341a:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT START UP");
//	}
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}
 8003424:	08003429 	.word	0x08003429

08003428 <_ZN2ex4Test7RunningEv>:

STATE_BODY(ex::Test::Running)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("RUNNING");
	}
	TRANSITION_(Event::TIMEOUT, Pause){}
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	681c      	ldr	r4, [r3, #0]
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <_ZN2ex4Test7RunningEv+0x2c>)
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	cb0c      	ldmia	r3, {r2, r3}
 8003448:	2100      	movs	r1, #0
 800344a:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT RUNNING");
//	}
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	08003459 	.word	0x08003459

08003458 <_ZN2ex4Test5PauseEv>:

STATE_BODY(ex::Test::Pause)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("PAUSE");
	}
	TRANSITION_(Event::TIMEOUT, StartUp){}
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	681c      	ldr	r4, [r3, #0]
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <_ZN2ex4Test5PauseEv+0x2c>)
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	cb0c      	ldmia	r3, {r2, r3}
 8003478:	2100      	movs	r1, #0
 800347a:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT PAUSE");
//	}
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	080033f9 	.word	0x080033f9

08003488 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	4013      	ands	r3, r2
 800349e:	041a      	lsls	r2, r3, #16
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	400b      	ands	r3, r1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	619a      	str	r2, [r3, #24]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_ZN4core13SimpleMachine9postEventEh>:
    void postEvent(uint8_t event)
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
        postEvent_.post(event);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3318      	adds	r3, #24
 80034ca:	1cfa      	adds	r2, r7, #3
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe ff60 	bl	8002394 <_ZN4core10FixedEventIhE4postERKh>
    }
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE>:
    bool check_(uint8_t input, State state) override
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	4608      	mov	r0, r1
 80034e6:	4639      	mov	r1, r7
 80034e8:	e881 000c 	stmia.w	r1, {r2, r3}
 80034ec:	4603      	mov	r3, r0
 80034ee:	72fb      	strb	r3, [r7, #11]
        if (nextEvent_ != input) return false;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	7d1b      	ldrb	r3, [r3, #20]
 80034f4:	7afa      	ldrb	r2, [r7, #11]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x22>
 80034fa:	2300      	movs	r3, #0
 80034fc:	e007      	b.n	800350e <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x32>
        nextState_ = state;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3304      	adds	r3, #4
 8003502:	463a      	mov	r2, r7
 8003504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003508:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
 800350c:	2301      	movs	r3, #1
    }
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	e883 0006 	stmia.w	r3, {r1, r2}
        currentState_ = s;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	330c      	adds	r3, #12
 800352c:	1d3a      	adds	r2, r7, #4
 800352e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003532:	e883 0003 	stmia.w	r3, {r0, r1}
        nextEvent_ = ENTER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22fe      	movs	r2, #254	; 0xfe
 800353a:	751a      	strb	r2, [r3, #20]
        (this->*currentState_)();
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6912      	ldr	r2, [r2, #16]
 8003542:	1052      	asrs	r2, r2, #1
 8003544:	1899      	adds	r1, r3, r2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x3e>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	e009      	b.n	800356c <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x52>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	6912      	ldr	r2, [r2, #16]
 800355e:	1052      	asrs	r2, r2, #1
 8003560:	4413      	add	r3, r2
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	68d2      	ldr	r2, [r2, #12]
 8003568:	4413      	add	r3, r2
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4608      	mov	r0, r1
 800356e:	4798      	blx	r3
    }
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>:
{

class EmptySignalOne
{
public:
    void connect(EmptyEvent* event){this->event_ = event;}
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_ZN4core14EmptySignalOne4emitEv>:
    void disconnect(){event_ = nullptr;}
    inline void emit(){if (event_ != nullptr) event_->post();}
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <_ZN4core14EmptySignalOne4emitEv+0x1a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fb61 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN3osc4Quad4plotEtttt>:
{
public:
    Quad(uint8_t c1, uint16_t c2, uint16_t c3, uint16_t c4);
    typedef void (osc::Quad::*State) (uint16_t, uint16_t, uint16_t, uint16_t);

    inline void plot(uint16_t v1, uint16_t v2, uint16_t v3, uint16_t v4)
 80035b6:	b5b0      	push	{r4, r5, r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	4608      	mov	r0, r1
 80035c0:	4611      	mov	r1, r2
 80035c2:	461a      	mov	r2, r3
 80035c4:	4603      	mov	r3, r0
 80035c6:	817b      	strh	r3, [r7, #10]
 80035c8:	460b      	mov	r3, r1
 80035ca:	813b      	strh	r3, [r7, #8]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
    {
        (this->*state_)(v1, v2, v3, v4);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	105b      	asrs	r3, r3, #1
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1898      	adds	r0, r3, r2
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <_ZN3osc4Quad4plotEtttt+0x4a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	105b      	asrs	r3, r3, #1
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6852      	ldr	r2, [r2, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	681c      	ldr	r4, [r3, #0]
 80035fe:	e001      	b.n	8003604 <_ZN3osc4Quad4plotEtttt+0x4e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685c      	ldr	r4, [r3, #4]
 8003604:	88fd      	ldrh	r5, [r7, #6]
 8003606:	893a      	ldrh	r2, [r7, #8]
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	8c3b      	ldrh	r3, [r7, #32]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	462b      	mov	r3, r5
 8003610:	47a0      	blx	r4
        c1_.lastVal = v1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	897a      	ldrh	r2, [r7, #10]
 8003616:	829a      	strh	r2, [r3, #20]
        c2_.lastVal = v2;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	893a      	ldrh	r2, [r7, #8]
 800361c:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
        c3_.lastVal = v3;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 2984 	strh.w	r2, [r3, #2436]	; 0x984
        c4_.lastVal = v4;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8c3a      	ldrh	r2, [r7, #32]
 800362c:	f8a3 2e3c 	strh.w	r2, [r3, #3644]	; 0xe3c
    }
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bdb0      	pop	{r4, r5, r7, pc}

08003638 <_ZN4core13SimpleMachineD1Ev>:
class SimpleMachine: public core::Machine
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <_ZN4core13SimpleMachineD1Ev+0x2c>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3318      	adds	r3, #24
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f8a8 	bl	80017a0 <_ZN4core10FixedEventIhED1Ev>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fd7e 	bl	8001154 <_ZN4core7MachineD1Ev>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0800893c 	.word	0x0800893c

08003668 <_ZN4core13SimpleMachineD0Ev>:
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ffe1 	bl	8003638 <_ZN4core13SimpleMachineD1Ev>
 8003676:	2134      	movs	r1, #52	; 0x34
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f002 fd5b 	bl	8006134 <_ZdlPvj>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN2ex4TestD1Ev>:
#include <core/machine.h>
#include <core/signal.h>
#include <console/controller.h>
#include <oscilloscope/quad.h>

MACHINE(ex, Test)
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <_ZN2ex4TestD1Ev+0x58>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fb6d 	bl	8003d7c <_ZN4core10FixedEventItED1Ev>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80036a8:	3308      	adds	r3, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe f89a 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	33cc      	adds	r3, #204	; 0xcc
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fe5f 	bl	8003378 <_ZN3osc4QuadD1Ev>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	33b0      	adds	r3, #176	; 0xb0
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fb7e 	bl	8003dc0 <_ZN4core10FixedEventImED1Ev>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3398      	adds	r3, #152	; 0x98
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe f88b 	bl	80017e4 <_ZN4core10EmptyEventD1Ev>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffb1 	bl	8003638 <_ZN4core13SimpleMachineD1Ev>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	080088f8 	.word	0x080088f8

080036e4 <_ZN2ex4TestD0Ev>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffcb 	bl	8003688 <_ZN2ex4TestD1Ev>
 80036f2:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f002 fd1c 	bl	8006134 <_ZdlPvj>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN2ex4Test8quadPlotEtttt>:
	M_TASK(plot)
	M_TASK(oscilloscope)
	M_EVENT(emptyEvent)
	M_EVENT(fixedEvent, uint32_t)

	O_QUAD(quad, 2,3,4,5)
 8003706:	b590      	push	{r4, r7, lr}
 8003708:	b087      	sub	sp, #28
 800370a:	af02      	add	r7, sp, #8
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	4608      	mov	r0, r1
 8003710:	4611      	mov	r1, r2
 8003712:	461a      	mov	r2, r3
 8003714:	4603      	mov	r3, r0
 8003716:	817b      	strh	r3, [r7, #10]
 8003718:	460b      	mov	r3, r1
 800371a:	813b      	strh	r3, [r7, #8]
 800371c:	4613      	mov	r3, r2
 800371e:	80fb      	strh	r3, [r7, #6]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8003726:	88fc      	ldrh	r4, [r7, #6]
 8003728:	893a      	ldrh	r2, [r7, #8]
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	8c3b      	ldrh	r3, [r7, #32]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4623      	mov	r3, r4
 8003732:	f7ff ff40 	bl	80035b6 <_ZN3osc4Quad4plotEtttt>
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
	...

08003740 <_ZN2ex4Test4initEv>:
#include <math.h>
#include <test/example/example.h>
#define PI 3.14159265358979323846

void ex::Test::init()
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    for (int i=0;i<400;i++)
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003752:	da58      	bge.n	8003806 <_ZN2ex4Test4initEv+0xc6>
    {
        double v = ((double)i/200) * PI;
 8003754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003756:	f7fc fee5 	bl	8000524 <__aeabi_i2d>
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <_ZN2ex4Test4initEv+0x150>)
 8003760:	f7fd f874 	bl	800084c <__aeabi_ddiv>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	a346      	add	r3, pc, #280	; (adr r3, 8003888 <_ZN2ex4Test4initEv+0x148>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        int16_t sine = (int16_t)(sin(v)*512.0);
 800377e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003782:	f002 fd55 	bl	8006230 <sin>
 8003786:	ec51 0b10 	vmov	r0, r1, d0
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003792:	f7fc ff31 	bl	80005f8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	f7fd f9c5 	bl	8000b2c <__aeabi_d2iz>
 80037a2:	4603      	mov	r3, r0
 80037a4:	82fb      	strh	r3, [r7, #22]
        int16_t cosine = (int16_t)(cos(v)*512.0);
 80037a6:	ed97 0b06 	vldr	d0, [r7, #24]
 80037aa:	f002 fcf1 	bl	8006190 <cos>
 80037ae:	ec51 0b10 	vmov	r0, r1, d0
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80037ba:	f7fc ff1d 	bl	80005f8 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd f9b1 	bl	8000b2c <__aeabi_d2iz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	82bb      	strh	r3, [r7, #20]
        sine_[i] = sine + 512;
 80037ce:	8afb      	ldrh	r3, [r7, #22]
 80037d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037d4:	b299      	uxth	r1, r3
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	460a      	mov	r2, r1
 80037e4:	809a      	strh	r2, [r3, #4]
        cosine_[i] = cosine + 512;
 80037e6:	8abb      	ldrh	r3, [r7, #20]
 80037e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037ec:	b299      	uxth	r1, r3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	460a      	mov	r2, r1
 80037fc:	809a      	strh	r2, [r3, #4]
    for (int i=0;i<400;i++)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e7a2      	b.n	800374c <_ZN2ex4Test4initEv+0xc>
    }

    plotTask_.start(1); //100Hz
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3358      	adds	r3, #88	; 0x58
 800380a:	f04f 32ff 	mov.w	r2, #4294967295
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f98d 	bl	8002b30 <_ZN4core4Task5startEml>
    oscilloscopeTask_.start(1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3378      	adds	r3, #120	; 0x78
 800381a:	f04f 32ff 	mov.w	r2, #4294967295
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f985 	bl	8002b30 <_ZN4core4Task5startEml>

    emptySignal.connect(&emptySignalReceivedEvent);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f503 52a1 	add.w	r2, r3, #5152	; 0x1420
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003832:	3308      	adds	r3, #8
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7ff fe9e 	bl	8003578 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>
    fixedSignal.connect(&fixedSignalReceivedEvent);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003842:	3304      	adds	r3, #4
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f502 52a2 	add.w	r2, r2, #5184	; 0x1440
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f9dd 	bl	8003c0c <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>

	timeoutTask_.start(1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3338      	adds	r3, #56	; 0x38
 8003856:	f04f 32ff 	mov.w	r2, #4294967295
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f967 	bl	8002b30 <_ZN4core4Task5startEml>
	SM_START(StartUp);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3310      	adds	r3, #16
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a09      	ldr	r2, [pc, #36]	; (8003894 <_ZN2ex4Test4initEv+0x154>)
 800386e:	60fa      	str	r2, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	613a      	str	r2, [r7, #16]
 8003874:	f107 020c 	add.w	r2, r7, #12
 8003878:	ca06      	ldmia	r2, {r1, r2}
 800387a:	4798      	blx	r3
}
 800387c:	bf00      	nop
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	f3af 8000 	nop.w
 8003888:	54442d18 	.word	0x54442d18
 800388c:	400921fb 	.word	0x400921fb
 8003890:	40690000 	.word	0x40690000
 8003894:	080033f9 	.word	0x080033f9

08003898 <_ZN2ex4Test12plotHandler_Ev>:

M_TASK_HANDLER(ex::Test, plot)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	emptySignal.emit();
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fe74 	bl	8003594 <_ZN4core14EmptySignalOne4emitEv>
	fixedSignal.emit(cosine_[angle_]);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f503 52a1 	add.w	r2, r3, #5152	; 0x1420
 80038b2:	3204      	adds	r2, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80038ba:	3310      	adds	r3, #16
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	440b      	add	r3, r1
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 f9ab 	bl	8003c28 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt>
	if (++angle_>=400) angle_=0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80038d8:	3310      	adds	r3, #16
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80038e4:	3310      	adds	r3, #16
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80038ee:	3310      	adds	r3, #16
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f240 128f 	movw	r2, #399	; 0x18f
 80038f6:	4293      	cmp	r3, r2
 80038f8:	bf8c      	ite	hi
 80038fa:	2301      	movhi	r3, #1
 80038fc:	2300      	movls	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <_ZN2ex4Test12plotHandler_Ev+0x78>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 800390a:	3310      	adds	r3, #16
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZN2ex4Test20oscilloscopeHandler_Ev>:

M_TASK_HANDLER(ex::Test, oscilloscope)
{
 8003918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af02      	add	r7, sp, #8
 8003920:	6078      	str	r0, [r7, #4]
	static uint16_t angle;
    //singlePlot(sine_[angle] + rand()%10);
//    dualPlot(sine_[angle_] + rand()%10, cosine_[angle_] + rand()%10);
    //triplePlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5);
    quadPlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5, sine_[angle]/2 + rand()%5);
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	889c      	ldrh	r4, [r3, #4]
 8003932:	f003 fdad 	bl	8007490 <rand>
 8003936:	4602      	mov	r2, r0
 8003938:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 800393a:	fb83 1302 	smull	r1, r3, r3, r2
 800393e:	1099      	asrs	r1, r3, #2
 8003940:	17d3      	asrs	r3, r2, #31
 8003942:	1ac9      	subs	r1, r1, r3
 8003944:	460b      	mov	r3, r1
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	1ad1      	subs	r1, r2, r3
 800394e:	b28b      	uxth	r3, r1
 8003950:	4423      	add	r3, r4
 8003952:	b29d      	uxth	r5, r3
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	889c      	ldrh	r4, [r3, #4]
 8003964:	f003 fd94 	bl	8007490 <rand>
 8003968:	4602      	mov	r2, r0
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 800396c:	fb83 1302 	smull	r1, r3, r3, r2
 8003970:	1099      	asrs	r1, r3, #2
 8003972:	17d3      	asrs	r3, r2, #31
 8003974:	1ac9      	subs	r1, r1, r3
 8003976:	460b      	mov	r3, r1
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	1ad1      	subs	r1, r2, r3
 8003980:	b28b      	uxth	r3, r1
 8003982:	4423      	add	r3, r4
 8003984:	b29e      	uxth	r6, r3
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	889b      	ldrh	r3, [r3, #4]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	b29c      	uxth	r4, r3
 800399a:	f003 fd79 	bl	8007490 <rand>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 80039a2:	fb83 1302 	smull	r1, r3, r3, r2
 80039a6:	1059      	asrs	r1, r3, #1
 80039a8:	17d3      	asrs	r3, r2, #31
 80039aa:	1ac9      	subs	r1, r1, r3
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	1ad1      	subs	r1, r2, r3
 80039b4:	b28b      	uxth	r3, r1
 80039b6:	4423      	add	r3, r4
 80039b8:	fa1f f883 	uxth.w	r8, r3
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	889b      	ldrh	r3, [r3, #4]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29c      	uxth	r4, r3
 80039d0:	f003 fd5e 	bl	8007490 <rand>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x11c>)
 80039d8:	fb83 1302 	smull	r1, r3, r3, r2
 80039dc:	1059      	asrs	r1, r3, #1
 80039de:	17d3      	asrs	r3, r2, #31
 80039e0:	1ac9      	subs	r1, r1, r3
 80039e2:	460b      	mov	r3, r1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	1ad1      	subs	r1, r2, r3
 80039ea:	b28b      	uxth	r3, r1
 80039ec:	4423      	add	r3, r4
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4643      	mov	r3, r8
 80039f4:	4632      	mov	r2, r6
 80039f6:	4629      	mov	r1, r5
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fe84 	bl	8003706 <_ZN2ex4Test8quadPlotEtttt>
    if (++angle>=400) angle=0;
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f240 128f 	movw	r2, #399	; 0x18f
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bf8c      	ite	hi
 8003a16:	2301      	movhi	r3, #1
 8003a18:	2300      	movls	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x10e>
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <_ZN2ex4Test20oscilloscopeHandler_Ev+0x118>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	801a      	strh	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a30:	2000109c 	.word	0x2000109c
 8003a34:	66666667 	.word	0x66666667

08003a38 <_ZN2ex4Test15timeoutHandler_Ev>:

M_TASK_HANDLER(ex::Test, timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	emptyEventEvent.post();
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3398      	adds	r3, #152	; 0x98
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe f913 	bl	8001c70 <_ZN4core10EmptyEvent4postEv>
	fixedEventEvent.post(count_++);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003a56:	330c      	adds	r3, #12
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	1c51      	adds	r1, r2, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003a62:	330c      	adds	r3, #12
 8003a64:	6019      	str	r1, [r3, #0]
 8003a66:	60fa      	str	r2, [r7, #12]
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f000 f8ee 	bl	8003c4e <_ZN4core10FixedEventImE4postERKm>
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8003a72:	2120      	movs	r1, #32
 8003a74:	4805      	ldr	r0, [pc, #20]	; (8003a8c <_ZN2ex4Test15timeoutHandler_Ev+0x54>)
 8003a76:	f7ff fd07 	bl	8003488 <LL_GPIO_TogglePin>
	SM_POST(Event::TIMEOUT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fd1b 	bl	80034ba <_ZN4core13SimpleMachine9postEventEh>
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40020000 	.word	0x40020000

08003a90 <_ZN2ex4Test18emptyEventHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptyEvent)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("EmptyEvent");
 8003a98:	f7fe f890 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4904      	ldr	r1, [pc, #16]	; (8003ab0 <_ZN2ex4Test18emptyEventHandler_Ev+0x20>)
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd fcd0 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	080087c4 	.word	0x080087c4

08003ab4 <_ZN2ex4Test18fixedEventHandler_ERKm>:

M_EVENT_HANDLER(ex::Test, fixedEvent, uint32_t)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("FixedEvent %d", event);
 8003abe:	f7fe f87d 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <_ZN2ex4Test18fixedEventHandler_ERKm+0x24>)
 8003aca:	f7fd fcbc 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	080087d0 	.word	0x080087d0

08003adc <_ZN2ex4Test27emptySignalReceivedHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptySignalReceived)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    console::Controller::instance().plot(0, sine_[angle_]);
 8003ae4:	f7fe f86a 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8003aee:	3310      	adds	r3, #16
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	889b      	ldrh	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	2100      	movs	r1, #0
 8003b02:	f7fe fca3 	bl	800244c <_ZN7console10Controller4plotEhl>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_ZN2ex4Test27fixedSignalReceivedHandler_ERKt>:

M_EVENT_HANDLER(ex::Test, fixedSignalReceived, uint16_t)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
	console::Controller::instance().plot(1, event);
 8003b18:	f7fe f850 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	2101      	movs	r1, #1
 8003b24:	f7fe fc92 	bl	800244c <_ZN7console10Controller4plotEhl>
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZN2ex4Test20startCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, start)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("START");
 8003b38:	f7fe f840 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <_ZN2ex4Test20startCommandHandler_Ev+0x20>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd fc80 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	080087e0 	.word	0x080087e0

08003b54 <_ZN2ex4Test19stopCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, stop)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("STOP");
 8003b5c:	f7fe f82e 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4904      	ldr	r1, [pc, #16]	; (8003b74 <_ZN2ex4Test19stopCommandHandler_Ev+0x20>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fc6e 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	080087e8 	.word	0x080087e8

08003b78 <_ZN2ex4Test22integerCommandHandler_El>:

U_INTEGER_HANDLER(ex::Test, integer)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("Integer: %d", value);
 8003b82:	f7fe f81b 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <_ZN2ex4Test22integerCommandHandler_El+0x24>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fc5a 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	080087f0 	.word	0x080087f0

08003ba0 <_ZN2ex4Test19nameCommandHandler_EhPh>:

U_TEXT_HANDLER(ex::Test, name)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
	for(; i < length; i++)
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	da0f      	bge.n	8003bda <_ZN2ex4Test19nameCommandHandler_EhPh+0x3a>
	{
		name_[i] = data[i];
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	7819      	ldrb	r1, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003bcc:	3314      	adds	r3, #20
 8003bce:	460a      	mov	r2, r1
 8003bd0:	701a      	strb	r2, [r3, #0]
	for(; i < length; i++)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e7eb      	b.n	8003bb2 <_ZN2ex4Test19nameCommandHandler_EhPh+0x12>
	}
	name_[i] = 0;
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003be4:	3314      	adds	r3, #20
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
	LOG_PRINTF("%s", name_);
 8003bea:	f7fd ffe7 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <_ZN2ex4Test19nameCommandHandler_EhPh+0x68>)
 8003bfa:	f7fd fc24 	bl	8001446 <_ZN7console10Controller6printfEPKcz>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	080087fc 	.word	0x080087fc

08003c0c <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>:

template <typename EV, typename E>
class SignalOne
{
public:
    void connect(EV* event){this->event_ = event;}
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt>:
    void disconnect(){event_ = nullptr;}
    inline void emit(E& e){if (event_ != nullptr) event_->post(e);}
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitERt+0x1e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f82b 	bl	8003c9c <_ZN4core10FixedEventItE4postERKt>
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN4core10FixedEventImE4postERKm>:
    void post(const E& e)
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f845 	bl	8003cec <_ZN7MemPoolImE5AllocEv>
 8003c62:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d014      	beq.n	8003c94 <_ZN4core10FixedEventImE4postERKm+0x46>
    	container_.payload_ = p;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	601a      	str	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 8003c7a:	f7fd ff69 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd ff50 	bl	8001b26 <_ZN4core6Engine6eventsEv>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c8e:	f7fd fec0 	bl	8001a12 <_ZN4core10EventQueue4postENS_9ContainerE>
 8003c92:	e000      	b.n	8003c96 <_ZN4core10FixedEventImE4postERKm+0x48>
    		return;
 8003c94:	bf00      	nop
    }
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_ZN4core10FixedEventItE4postERKt>:
    void post(const E& e)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
    	void* p = pool_->Alloc();
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f842 	bl	8003d34 <_ZN7MemPoolItE5AllocEv>
 8003cb0:	60f8      	str	r0, [r7, #12]
    	if(p  == nullptr)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <_ZN4core10FixedEventItE4postERKt+0x48>
    	container_.payload_ = p;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	609a      	str	r2, [r3, #8]
    	memcpy(container_.payload_, &e, sizeof(E));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	8812      	ldrh	r2, [r2, #0]
 8003cc6:	b292      	uxth	r2, r2
 8003cc8:	801a      	strh	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 8003cca:	f7fd ff41 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd ff28 	bl	8001b26 <_ZN4core6Engine6eventsEv>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003cde:	f7fd fe98 	bl	8001a12 <_ZN4core10EventQueue4postENS_9ContainerE>
 8003ce2:	e000      	b.n	8003ce6 <_ZN4core10FixedEventItE4postERKt+0x4a>
    		return;
 8003ce4:	bf00      	nop
    }
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZN7MemPoolImE5AllocEv>:
    void* Alloc()
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <_ZN7MemPoolImE5AllocEv+0x18>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <_ZN7MemPoolImE5AllocEv+0x1c>
			return nullptr;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e00f      	b.n	8003d28 <_ZN7MemPoolImE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3304      	adds	r3, #4
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_ZN7MemPoolItE5AllocEv>:
    void* Alloc()
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <_ZN7MemPoolItE5AllocEv+0x18>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <_ZN7MemPoolItE5AllocEv+0x1c>
			return nullptr;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e00f      	b.n	8003d70 <_ZN7MemPoolItE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
        return (void *)((char *)pCurUnit + sizeof(struct _Unit) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3304      	adds	r3, #4
    }
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <_ZN4core10FixedEventItED1Ev>:
class FixedEvent: public Event
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <_ZN4core10FixedEventItED1Ev+0x20>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd f8db 	bl	8000f48 <_ZN4core5EventD1Ev>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08008914 	.word	0x08008914

08003da0 <_ZN4core10FixedEventItED0Ev>:
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffe7 	bl	8003d7c <_ZN4core10FixedEventItED1Ev>
 8003dae:	211c      	movs	r1, #28
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f002 f9bf 	bl	8006134 <_ZdlPvj>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZN4core10FixedEventImED1Ev>:
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <_ZN4core10FixedEventImED1Ev+0x20>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd f8b9 	bl	8000f48 <_ZN4core5EventD1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	08008928 	.word	0x08008928

08003de4 <_ZN4core10FixedEventImED0Ev>:
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffe7 	bl	8003dc0 <_ZN4core10FixedEventImED1Ev>
 8003df2:	211c      	movs	r1, #28
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f002 f99d 	bl	8006134 <_ZdlPvj>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZN4core10FixedEventItE7executeEv>:
    void execute() override
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    	E* e = (E*)container_.payload_;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	60fb      	str	r3, [r7, #12]
    	pool_->Free(e);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f84d 	bl	8003eb8 <_ZN7MemPoolItE4FreeEPt>
        (component_->*handler_)(*e);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6952      	ldr	r2, [r2, #20]
 8003e26:	1052      	asrs	r2, r2, #1
 8003e28:	1898      	adds	r0, r3, r2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <_ZN4core10FixedEventItE7executeEv+0x38>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	e00a      	b.n	8003e52 <_ZN4core10FixedEventItE7executeEv+0x4e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6952      	ldr	r2, [r2, #20]
 8003e44:	1052      	asrs	r2, r2, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6912      	ldr	r2, [r2, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4798      	blx	r3
    }
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZN4core10FixedEventImE7executeEv>:
    void execute() override
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
    	E* e = (E*)container_.payload_;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60fb      	str	r3, [r7, #12]
    	pool_->Free(e);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f855 	bl	8003f22 <_ZN7MemPoolImE4FreeEPm>
        (component_->*handler_)(*e);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6952      	ldr	r2, [r2, #20]
 8003e80:	1052      	asrs	r2, r2, #1
 8003e82:	1898      	adds	r0, r3, r2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <_ZN4core10FixedEventImE7executeEv+0x38>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	e00a      	b.n	8003eac <_ZN4core10FixedEventImE7executeEv+0x4e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6952      	ldr	r2, [r2, #20]
 8003e9e:	1052      	asrs	r2, r2, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6912      	ldr	r2, [r2, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4798      	blx	r3
    }
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZN7MemPoolItE4FreeEPt>:
    void Free(T* p)
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3b04      	subs	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <_ZN7MemPoolItE4FreeEPt+0x5e>
			if(it == pCurUnit)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d114      	bne.n	8003f0a <_ZN7MemPoolItE4FreeEPt+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <_ZN7MemPoolItE4FreeEPt+0x38>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e003      	b.n	8003ef8 <_ZN7MemPoolItE4FreeEPt+0x40>
				else prev->pNext = it->pNext;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	609a      	str	r2, [r3, #8]
				break;
 8003f06:	bf00      	nop
    }
 8003f08:	e005      	b.n	8003f16 <_ZN7MemPoolItE4FreeEPt+0x5e>
			prev = it;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e7dd      	b.n	8003ed2 <_ZN7MemPoolItE4FreeEPt+0x1a>
    }
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_ZN7MemPoolImE4FreeEPm>:
    void Free(T* p)
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01e      	beq.n	8003f80 <_ZN7MemPoolImE4FreeEPm+0x5e>
			if(it == pCurUnit)
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d114      	bne.n	8003f74 <_ZN7MemPoolImE4FreeEPm+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <_ZN7MemPoolImE4FreeEPm+0x38>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e003      	b.n	8003f62 <_ZN7MemPoolImE4FreeEPm+0x40>
				else prev->pNext = it->pNext;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
				break;
 8003f70:	bf00      	nop
    }
 8003f72:	e005      	b.n	8003f80 <_ZN7MemPoolImE4FreeEPm+0x5e>
			prev = it;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e7dd      	b.n	8003f3c <_ZN7MemPoolImE4FreeEPm+0x1a>
    }
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_ZN4core13SimpleMachine7executeERh>:
    void execute(uint8_t& event)
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
        nextState_ = nullptr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
        nextEvent_ = event; (this->*currentState_)();
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	751a      	strb	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6912      	ldr	r2, [r2, #16]
 8003fb0:	1052      	asrs	r2, r2, #1
 8003fb2:	1899      	adds	r1, r3, r2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <_ZN4core13SimpleMachine7executeERh+0x3a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	e009      	b.n	8003fda <_ZN4core13SimpleMachine7executeERh+0x4e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6912      	ldr	r2, [r2, #16]
 8003fcc:	1052      	asrs	r2, r2, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4608      	mov	r0, r1
 8003fdc:	4798      	blx	r3
        if (nextState_ != nullptr && nextState_ != currentState_)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <_ZN4core13SimpleMachine7executeERh+0x6a>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <_ZN4core13SimpleMachine7executeERh+0x6c>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d062      	beq.n	80040c2 <_ZN4core13SimpleMachine7executeERh+0x136>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d117      	bne.n	8004038 <_ZN4core13SimpleMachine7executeERh+0xac>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d00f      	beq.n	8004034 <_ZN4core13SimpleMachine7executeERh+0xa8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <_ZN4core13SimpleMachine7executeERh+0xac>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <_ZN4core13SimpleMachine7executeERh+0xac>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <_ZN4core13SimpleMachine7executeERh+0xac>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <_ZN4core13SimpleMachine7executeERh+0xae>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d141      	bne.n	80040c2 <_ZN4core13SimpleMachine7executeERh+0x136>
            nextEvent_ = EXIT; (this->*currentState_)();
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	22ff      	movs	r2, #255	; 0xff
 8004042:	751a      	strb	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6912      	ldr	r2, [r2, #16]
 800404a:	1052      	asrs	r2, r2, #1
 800404c:	1899      	adds	r1, r3, r2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <_ZN4core13SimpleMachine7executeERh+0xd4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	e009      	b.n	8004074 <_ZN4core13SimpleMachine7executeERh+0xe8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6912      	ldr	r2, [r2, #16]
 8004066:	1052      	asrs	r2, r2, #1
 8004068:	4413      	add	r3, r2
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68d2      	ldr	r2, [r2, #12]
 8004070:	4413      	add	r3, r2
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4608      	mov	r0, r1
 8004076:	4798      	blx	r3
            currentState_ = nextState_;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	330c      	adds	r3, #12
 800407e:	3204      	adds	r2, #4
 8004080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004084:	e883 0003 	stmia.w	r3, {r0, r1}
            nextEvent_ = ENTER; (this->*currentState_)();
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	22fe      	movs	r2, #254	; 0xfe
 800408c:	751a      	strb	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6912      	ldr	r2, [r2, #16]
 8004094:	1052      	asrs	r2, r2, #1
 8004096:	1899      	adds	r1, r3, r2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <_ZN4core13SimpleMachine7executeERh+0x11e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	e009      	b.n	80040be <_ZN4core13SimpleMachine7executeERh+0x132>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6912      	ldr	r2, [r2, #16]
 80040b0:	1052      	asrs	r2, r2, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4608      	mov	r0, r1
 80040c0:	4798      	blx	r3
    }
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <__tcf_3>:
MACHINE(ex, Test)
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <__tcf_3+0xc>)
 80040d2:	f7ff fad9 	bl	8003688 <_ZN2ex4TestD1Ev>
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200010a0 	.word	0x200010a0

080040dc <_ZN2ex4Test8instanceEv>:
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <_ZN2ex4Test8instanceEv+0x50>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f3bf 8f5b 	dmb	ish
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <_ZN2ex4Test8instanceEv+0x48>
 80040fc:	480b      	ldr	r0, [pc, #44]	; (800412c <_ZN2ex4Test8instanceEv+0x50>)
 80040fe:	f002 f81b 	bl	8006138 <__cxa_guard_acquire>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <_ZN2ex4Test8instanceEv+0x48>
 8004112:	4807      	ldr	r0, [pc, #28]	; (8004130 <_ZN2ex4Test8instanceEv+0x54>)
 8004114:	f000 f850 	bl	80041b8 <_ZN2ex4TestC1Ev>
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <_ZN2ex4Test8instanceEv+0x50>)
 800411a:	f002 f819 	bl	8006150 <__cxa_guard_release>
 800411e:	4805      	ldr	r0, [pc, #20]	; (8004134 <_ZN2ex4Test8instanceEv+0x58>)
 8004120:	f003 f8c3 	bl	80072aa <atexit>
 8004124:	4b02      	ldr	r3, [pc, #8]	; (8004130 <_ZN2ex4Test8instanceEv+0x54>)
 8004126:	4618      	mov	r0, r3
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20002b78 	.word	0x20002b78
 8004130:	200010a0 	.word	0x200010a0
 8004134:	080040cd 	.word	0x080040cd

08004138 <_ZN4core13SimpleMachineC1Ev>:
class SimpleMachine: public core::Machine
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd f87a 	bl	800123c <_ZN4core7MachineC1Ev>
 8004148:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <_ZN4core13SimpleMachineC1Ev+0x40>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	751a      	strb	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f103 0018 	add.w	r0, r3, #24
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <_ZN4core13SimpleMachineC1Ev+0x44>)
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	f107 0308 	add.w	r3, r7, #8
 8004168:	cb0c      	ldmia	r3, {r2, r3}
 800416a:	f7fd fa69 	bl	8001640 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	0800893c 	.word	0x0800893c
 800417c:	08003f8d 	.word	0x08003f8d

08004180 <_ZN4core14EmptySignalOneC1Ev>:
class EmptySignalOne
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>:
class SignalOne
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZN2ex4TestC1Ev>:
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b092      	sub	sp, #72	; 0x48
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ffb8 	bl	8004138 <_ZN4core13SimpleMachineC1Ev>
 80041c8:	4a5b      	ldr	r2, [pc, #364]	; (8004338 <_ZN2ex4TestC1Ev+0x180>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4b59      	ldr	r3, [pc, #356]	; (800433c <_ZN2ex4TestC1Ev+0x184>)
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	cb0c      	ldmia	r3, {r2, r3}
 80041e4:	f7fe fc80 	bl	8002ae8 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <_ZN2ex4TestC1Ev+0x188>)
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	cb0c      	ldmia	r3, {r2, r3}
 80041fe:	f7fe fc73 	bl	8002ae8 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4b4e      	ldr	r3, [pc, #312]	; (8004344 <_ZN2ex4TestC1Ev+0x18c>)
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	f107 0318 	add.w	r3, r7, #24
 8004216:	cb0c      	ldmia	r3, {r2, r3}
 8004218:	f7fe fc66 	bl	8002ae8 <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <_ZN2ex4TestC1Ev+0x190>)
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	f107 0320 	add.w	r3, r7, #32
 8004230:	cb0c      	ldmia	r3, {r2, r3}
 8004232:	f7fc fee5 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4b43      	ldr	r3, [pc, #268]	; (800434c <_ZN2ex4TestC1Ev+0x194>)
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
 8004242:	2300      	movs	r3, #0
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800424a:	cb0c      	ldmia	r3, {r2, r3}
 800424c:	f000 f910 	bl	8004470 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8004256:	2305      	movs	r3, #5
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2304      	movs	r3, #4
 800425c:	2203      	movs	r2, #3
 800425e:	2102      	movs	r1, #2
 8004260:	f7fe fdf4 	bl	8002e4c <_ZN3osc4QuadC1Ehttt>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff88 	bl	8004180 <_ZN4core14EmptySignalOneC1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff8f 	bl	800419c <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 50a1 	add.w	r0, r3, #5152	; 0x1420
 8004284:	3008      	adds	r0, #8
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4b31      	ldr	r3, [pc, #196]	; (8004350 <_ZN2ex4TestC1Ev+0x198>)
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
 800428c:	2300      	movs	r3, #0
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
 8004290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004294:	cb0c      	ldmia	r3, {r2, r3}
 8004296:	f7fc feb3 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 50a2 	add.w	r0, r3, #5184	; 0x1440
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <_ZN2ex4TestC1Ev+0x19c>)
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a6:	2300      	movs	r3, #0
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042ae:	cb0c      	ldmia	r3, {r2, r3}
 80042b0:	f000 f90c 	bl	80044cc <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>
 80042b4:	f7fd fc82 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a27      	ldr	r2, [pc, #156]	; (8004358 <_ZN2ex4TestC1Ev+0x1a0>)
 80042bc:	2165      	movs	r1, #101	; 0x65
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd f8eb 	bl	800149a <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80042c4:	4602      	mov	r2, r0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80042cc:	331c      	adds	r3, #28
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f7fd fc74 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <_ZN2ex4TestC1Ev+0x1a4>)
 80042d8:	2166      	movs	r1, #102	; 0x66
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd f8dd 	bl	800149a <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f7fd fc67 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <_ZN2ex4TestC1Ev+0x1a8>)
 80042f2:	2164      	movs	r1, #100	; 0x64
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd f8d0 	bl	800149a <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80042fa:	4602      	mov	r2, r0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8004302:	3304      	adds	r3, #4
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f7fd fc59 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 800430a:	4603      	mov	r3, r0
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <_ZN2ex4TestC1Ev+0x1ac>)
 800430e:	2167      	movs	r1, #103	; 0x67
 8004310:	4618      	mov	r0, r3
 8004312:	f7fd f8c2 	bl	800149a <_ZN7console10Controller15registerCommandEtPFvthPhE>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 800431e:	3308      	adds	r3, #8
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8004328:	3310      	adds	r3, #16
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	; 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	080088f8 	.word	0x080088f8
 800433c:	08003a39 	.word	0x08003a39
 8004340:	08003899 	.word	0x08003899
 8004344:	08003919 	.word	0x08003919
 8004348:	08003a91 	.word	0x08003a91
 800434c:	08003ab5 	.word	0x08003ab5
 8004350:	08003add 	.word	0x08003add
 8004354:	08003b0f 	.word	0x08003b0f
 8004358:	08004369 	.word	0x08004369
 800435c:	0800438d 	.word	0x0800438d
 8004360:	080043b1 	.word	0x080043b1
 8004364:	08004409 	.word	0x08004409

08004368 <_ZN2ex4Test12startCommandEthPh>:
	M_SIGNAL(fixed, uint16_t)

	M_EVENT(emptySignalReceived)
	M_EVENT(fixedSignalReceived, uint16_t)

	U_ACTION(101, start)
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	603a      	str	r2, [r7, #0]
 8004372:	80fb      	strh	r3, [r7, #6]
 8004374:	460b      	mov	r3, r1
 8004376:	717b      	strb	r3, [r7, #5]
 8004378:	f7ff feb0 	bl	80040dc <_ZN2ex4Test8instanceEv>
 800437c:	4603      	mov	r3, r0
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fbd6 	bl	8003b30 <_ZN2ex4Test20startCommandHandler_Ev>
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN2ex4Test11stopCommandEthPh>:
	U_ACTION(102, stop)
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	603a      	str	r2, [r7, #0]
 8004396:	80fb      	strh	r3, [r7, #6]
 8004398:	460b      	mov	r3, r1
 800439a:	717b      	strb	r3, [r7, #5]
 800439c:	f7ff fe9e 	bl	80040dc <_ZN2ex4Test8instanceEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fbd6 	bl	8003b54 <_ZN2ex4Test19stopCommandHandler_Ev>
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_ZN2ex4Test14integerCommandEthPh>:
	U_INTEGER(100, integer)
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	603a      	str	r2, [r7, #0]
 80043ba:	80fb      	strh	r3, [r7, #6]
 80043bc:	460b      	mov	r3, r1
 80043be:	717b      	strb	r3, [r7, #5]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	061a      	lsls	r2, r3, #24
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	3302      	adds	r3, #2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	4313      	orrs	r3, r2
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	3203      	adds	r2, #3
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	f7ff fe7a 	bl	80040dc <_ZN2ex4Test8instanceEv>
 80043e8:	4603      	mov	r3, r0
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fbc3 	bl	8003b78 <_ZN2ex4Test22integerCommandHandler_El>
 80043f2:	f7fd fbe3 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4619      	mov	r1, r3
 80043fc:	f7fd f871 	bl	80014e2 <_ZN7console10Controller14updateIntFieldEtl>
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <_ZN2ex4Test11nameCommandEthPh>:
	U_TEXT(103, name)
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	603a      	str	r2, [r7, #0]
 8004412:	80fb      	strh	r3, [r7, #6]
 8004414:	460b      	mov	r3, r1
 8004416:	717b      	strb	r3, [r7, #5]
 8004418:	f7ff fe60 	bl	80040dc <_ZN2ex4Test8instanceEv>
 800441c:	797b      	ldrb	r3, [r7, #5]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4619      	mov	r1, r3
 8004422:	f7ff fbbd 	bl	8003ba0 <_ZN2ex4Test19nameCommandHandler_EhPh>
 8004426:	f7fd fbc9 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 800442a:	797a      	ldrb	r2, [r7, #5]
 800442c:	88f9      	ldrh	r1, [r7, #6]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f7fd f8a5 	bl	800157e <_ZN7console10Controller15updateTextFieldEthPh>
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <main>:
#include <console/controller.h>
#include <test/example/example.h>

int main()
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
	COMPONENT_REG(ex, Test);
 8004440:	f7ff fe4c 	bl	80040dc <_ZN2ex4Test8instanceEv>
 8004444:	4603      	mov	r3, r0
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	4790      	blx	r2
	COMPONENT_REG(console, Controller);
 800444e:	f7fd fbb5 	bl	8001bbc <_ZN7console10Controller8instanceEv>
 8004452:	4603      	mov	r3, r0
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	4790      	blx	r2

	core::Engine::instance().run();
 800445c:	f7fd fb78 	bl	8001b50 <_ZN4core6Engine8instanceEv>
 8004460:	4603      	mov	r3, r0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fa06 	bl	8002874 <_ZN4core6Engine3runEv>
	return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE>:
    FixedEvent(Component* component, Handler handler)
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4639      	mov	r1, r7
 800447c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f99a 	bl	80027bc <_ZN4core5EventC1Ev>
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE+0x58>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3310      	adds	r3, #16
 800449e:	463a      	mov	r2, r7
 80044a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044a4:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(3);	//FIXME: 2 is constant
 80044a8:	200c      	movs	r0, #12
 80044aa:	f001 fe54 	bl	8006156 <_Znwj>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461c      	mov	r4, r3
 80044b2:	2103      	movs	r1, #3
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 f837 	bl	8004528 <_ZN7MemPoolImEC1Em>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	619c      	str	r4, [r3, #24]
    }
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	08008928 	.word	0x08008928

080044cc <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>:
    FixedEvent(Component* component, Handler handler)
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	4639      	mov	r1, r7
 80044d8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe f96c 	bl	80027bc <_ZN4core5EventC1Ev>
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE+0x58>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	60da      	str	r2, [r3, #12]
    	component_ = component;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3310      	adds	r3, #16
 80044fa:	463a      	mov	r2, r7
 80044fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004500:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(3);	//FIXME: 2 is constant
 8004504:	200c      	movs	r0, #12
 8004506:	f001 fe26 	bl	8006156 <_Znwj>
 800450a:	4603      	mov	r3, r0
 800450c:	461c      	mov	r4, r3
 800450e:	2103      	movs	r1, #3
 8004510:	4620      	mov	r0, r4
 8004512:	f000 f842 	bl	800459a <_ZN7MemPoolItEC1Em>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	619c      	str	r4, [r3, #24]
    }
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}
 8004524:	08008914 	.word	0x08008914

08004528 <_ZN7MemPoolImEC1Em>:
    MemPool(unsigned long ulUnitNum):
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4618      	mov	r0, r3
 800454a:	f002 fedf 	bl	800730c <malloc>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <_ZN7MemPoolImEC1Em+0x64>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d212      	bcs.n	8004590 <_ZN7MemPoolImEC1Em+0x68>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e7ea      	b.n	8004562 <_ZN7MemPoolImEC1Em+0x3a>
        	Error_Handler();
 800458c:	f000 f8fe 	bl	800478c <Error_Handler>
    }
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_ZN7MemPoolItEC1Em>:
    MemPool(unsigned long ulUnitNum):
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4413      	add	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 fea3 	bl	800730c <malloc>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d019      	beq.n	800460a <_ZN7MemPoolItEC1Em+0x70>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d215      	bcs.n	800460e <_ZN7MemPoolItEC1Em+0x74>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	440b      	add	r3, r1
 80045f2:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e7e7      	b.n	80045da <_ZN7MemPoolItEC1Em+0x40>
        	Error_Handler();
 800460a:	f000 f8bf 	bl	800478c <Error_Handler>
    }
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <LL_GPIO_ResetOutputPin>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	041a      	lsls	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	619a      	str	r2, [r3, #24]
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004644:	4907      	ldr	r1, [pc, #28]	; (8004664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4313      	orrs	r3, r2
 800464a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800464e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4013      	ands	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40023800 	.word	0x40023800

08004668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466e:	463b      	mov	r3, r7
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800467e:	2080      	movs	r0, #128	; 0x80
 8004680:	f7ff ffda 	bl	8004638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004684:	2001      	movs	r0, #1
 8004686:	f7ff ffd7 	bl	8004638 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800468a:	2120      	movs	r1, #32
 800468c:	480a      	ldr	r0, [pc, #40]	; (80046b8 <MX_GPIO_Init+0x50>)
 800468e:	f7ff ffc3 	bl	8004618 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004692:	2320      	movs	r3, #32
 8004694:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004696:	2301      	movs	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	463b      	mov	r3, r7
 80046a8:	4619      	mov	r1, r3
 80046aa:	4803      	ldr	r0, [pc, #12]	; (80046b8 <MX_GPIO_Init+0x50>)
 80046ac:	f001 f967 	bl	800597e <LL_GPIO_Init>

}
 80046b0:	bf00      	nop
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40020000 	.word	0x40020000

080046bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b094      	sub	sp, #80	; 0x50
 80046c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046c2:	f107 0320 	add.w	r3, r7, #32
 80046c6:	2230      	movs	r2, #48	; 0x30
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fe2e 	bl	800732c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <SystemClock_Config+0xc8>)
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <SystemClock_Config+0xc8>)
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6413      	str	r3, [r2, #64]	; 0x40
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <SystemClock_Config+0xc8>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046fc:	2300      	movs	r3, #0
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <SystemClock_Config+0xcc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <SystemClock_Config+0xcc>)
 8004706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <SystemClock_Config+0xcc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004718:	2302      	movs	r3, #2
 800471a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004720:	2310      	movs	r3, #16
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004724:	2302      	movs	r3, #2
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004728:	2300      	movs	r3, #0
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800472c:	2308      	movs	r3, #8
 800472e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004730:	2364      	movs	r3, #100	; 0x64
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004734:	2302      	movs	r3, #2
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004738:	2304      	movs	r3, #4
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800473c:	f107 0320 	add.w	r3, r7, #32
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fbd7 	bl	8004ef4 <HAL_RCC_OscConfig>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800474c:	f000 f81e 	bl	800478c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004750:	230f      	movs	r3, #15
 8004752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004754:	2302      	movs	r3, #2
 8004756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800475c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004766:	f107 030c 	add.w	r3, r7, #12
 800476a:	2103      	movs	r1, #3
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fe39 	bl	80053e4 <HAL_RCC_ClockConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004778:	f000 f808 	bl	800478c <Error_Handler>
  }
}
 800477c:	bf00      	nop
 800477e:	3750      	adds	r7, #80	; 0x50
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000

0800478c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004790:	b672      	cpsid	i
}
 8004792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004794:	e7fe      	b.n	8004794 <Error_Handler+0x8>
	...

08004798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_MspInit+0x4c>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <HAL_MspInit+0x4c>)
 80047a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ac:	6453      	str	r3, [r2, #68]	; 0x44
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_MspInit+0x4c>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_MspInit+0x4c>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <HAL_MspInit+0x4c>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_MspInit+0x4c>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800

080047e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
	return 1;
 80047ec:	2301      	movs	r3, #1
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <_kill>:

int _kill(int pid, int sig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004802:	f002 fd59 	bl	80072b8 <__errno>
 8004806:	4603      	mov	r3, r0
 8004808:	2216      	movs	r2, #22
 800480a:	601a      	str	r2, [r3, #0]
	return -1;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <_exit>:

void _exit (int status)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004820:	f04f 31ff 	mov.w	r1, #4294967295
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ffe7 	bl	80047f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800482a:	e7fe      	b.n	800482a <_exit+0x12>

0800482c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e00a      	b.n	8004854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800483e:	f3af 8000 	nop.w
 8004842:	4601      	mov	r1, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	60ba      	str	r2, [r7, #8]
 800484a:	b2ca      	uxtb	r2, r1
 800484c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	dbf0      	blt.n	800483e <_read+0x12>
	}

return len;
 800485c:	687b      	ldr	r3, [r7, #4]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e009      	b.n	800488c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60ba      	str	r2, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3301      	adds	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	dbf1      	blt.n	8004878 <_write+0x12>
	}
	return len;
 8004894:	687b      	ldr	r3, [r7, #4]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_close>:

int _close(int file)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	return -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048c6:	605a      	str	r2, [r3, #4]
	return 0;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <_isatty>:

int _isatty(int file)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
	return 1;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	return 0;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <_sbrk+0x5c>)
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <_sbrk+0x60>)
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <_sbrk+0x64>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <_sbrk+0x64>)
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <_sbrk+0x68>)
 8004928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <_sbrk+0x64>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d207      	bcs.n	8004948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004938:	f002 fcbe 	bl	80072b8 <__errno>
 800493c:	4603      	mov	r3, r0
 800493e:	220c      	movs	r2, #12
 8004940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	e009      	b.n	800495c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004948:	4b08      	ldr	r3, [pc, #32]	; (800496c <_sbrk+0x64>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <_sbrk+0x64>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <_sbrk+0x64>)
 8004958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20020000 	.word	0x20020000
 8004968:	00000400 	.word	0x00000400
 800496c:	20002b7c 	.word	0x20002b7c
 8004970:	20002c30 	.word	0x20002c30

08004974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <SystemInit+0x20>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	4a05      	ldr	r2, [pc, #20]	; (8004994 <SystemInit+0x20>)
 8004980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <__NVIC_GetPriorityGrouping+0x18>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 0307 	and.w	r3, r3, #7
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	db0b      	blt.n	80049de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	4907      	ldr	r1, [pc, #28]	; (80049ec <__NVIC_EnableIRQ+0x38>)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2001      	movs	r0, #1
 80049d6:	fa00 f202 	lsl.w	r2, r0, r2
 80049da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000e100 	.word	0xe000e100

080049f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db0a      	blt.n	8004a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	490c      	ldr	r1, [pc, #48]	; (8004a3c <__NVIC_SetPriority+0x4c>)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	0112      	lsls	r2, r2, #4
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	440b      	add	r3, r1
 8004a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a18:	e00a      	b.n	8004a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4908      	ldr	r1, [pc, #32]	; (8004a40 <__NVIC_SetPriority+0x50>)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	3b04      	subs	r3, #4
 8004a28:	0112      	lsls	r2, r2, #4
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	761a      	strb	r2, [r3, #24]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100
 8004a40:	e000ed00 	.word	0xe000ed00

08004a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b089      	sub	sp, #36	; 0x24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f1c3 0307 	rsb	r3, r3, #7
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	bf28      	it	cs
 8004a62:	2304      	movcs	r3, #4
 8004a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d902      	bls.n	8004a74 <NVIC_EncodePriority+0x30>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3b03      	subs	r3, #3
 8004a72:	e000      	b.n	8004a76 <NVIC_EncodePriority+0x32>
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a78:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43da      	mvns	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	401a      	ands	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	43d9      	mvns	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a9c:	4313      	orrs	r3, r2
         );
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3724      	adds	r7, #36	; 0x24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_USART_Enable>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_USART_ConfigAsyncMode>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	615a      	str	r2, [r3, #20]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <LL_AHB1_GRP1_EnableClock>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4013      	ands	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40023800 	.word	0x40023800

08004b28 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b34:	4907      	ldr	r1, [pc, #28]	; (8004b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40023800 	.word	0x40023800

08004b58 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	; 0x38
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b5e:	f107 031c 	add.w	r3, r7, #28
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	615a      	str	r2, [r3, #20]
 8004b70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
 8004b80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004b82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004b86:	f7ff ffcf 	bl	8004b28 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f7ff ffb4 	bl	8004af8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004b90:	230c      	movs	r3, #12
 8004b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b94:	2302      	movs	r3, #2
 8004b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4818      	ldr	r0, [pc, #96]	; (8004c10 <MX_USART2_UART_Init+0xb8>)
 8004bae:	f000 fee6 	bl	800597e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bb2:	f7ff fef1 	bl	8004998 <__NVIC_GetPriorityGrouping>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff41 	bl	8004a44 <NVIC_EncodePriority>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	2026      	movs	r0, #38	; 0x26
 8004bc8:	f7ff ff12 	bl	80049f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004bcc:	2026      	movs	r0, #38	; 0x26
 8004bce:	f7ff fef1 	bl	80049b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 460800;
 8004bd2:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8004bd6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004be4:	230c      	movs	r3, #12
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4807      	ldr	r0, [pc, #28]	; (8004c14 <MX_USART2_UART_Init+0xbc>)
 8004bf8:	f001 fa38 	bl	800606c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004bfc:	4805      	ldr	r0, [pc, #20]	; (8004c14 <MX_USART2_UART_Init+0xbc>)
 8004bfe:	f7ff ff64 	bl	8004aca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004c02:	4804      	ldr	r0, [pc, #16]	; (8004c14 <MX_USART2_UART_Init+0xbc>)
 8004c04:	f7ff ff51 	bl	8004aaa <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c08:	bf00      	nop
 8004c0a:	3738      	adds	r7, #56	; 0x38
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40020000 	.word	0x40020000
 8004c14:	40004400 	.word	0x40004400

08004c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c1c:	480d      	ldr	r0, [pc, #52]	; (8004c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c1e:	490e      	ldr	r1, [pc, #56]	; (8004c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c20:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c24:	e002      	b.n	8004c2c <LoopCopyDataInit>

08004c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c2a:	3304      	adds	r3, #4

08004c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c30:	d3f9      	bcc.n	8004c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c32:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c34:	4c0b      	ldr	r4, [pc, #44]	; (8004c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c38:	e001      	b.n	8004c3e <LoopFillZerobss>

08004c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c3c:	3204      	adds	r2, #4

08004c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c40:	d3fb      	bcc.n	8004c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c42:	f7ff fe97 	bl	8004974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c46:	f002 fb3d 	bl	80072c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c4a:	f7ff fbf7 	bl	800443c <main>
  bx  lr    
 8004c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004c5c:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 8004c60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004c64:	20002c30 	.word	0x20002c30

08004c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c68:	e7fe      	b.n	8004c68 <ADC_IRQHandler>
	...

08004c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <HAL_Init+0x40>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <HAL_Init+0x40>)
 8004c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_Init+0x40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <HAL_Init+0x40>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_Init+0x40>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_Init+0x40>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c94:	2003      	movs	r0, #3
 8004c96:	f000 f8f9 	bl	8004e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c9a:	200f      	movs	r0, #15
 8004c9c:	f000 f808 	bl	8004cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca0:	f7ff fd7a 	bl	8004798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023c00 	.word	0x40023c00

08004cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_InitTick+0x54>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_InitTick+0x58>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f903 	bl	8004eda <HAL_SYSTICK_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00e      	b.n	8004cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b0f      	cmp	r3, #15
 8004ce2:	d80a      	bhi.n	8004cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f000 f8d9 	bl	8004ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf0:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <HAL_InitTick+0x5c>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000000 	.word	0x20000000
 8004d08:	20000008 	.word	0x20000008
 8004d0c:	20000004 	.word	0x20000004

08004d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return uwTick;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_GetTick+0x14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20002c1c 	.word	0x20002c1c

08004d28 <__NVIC_SetPriorityGrouping>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d5a:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	60d3      	str	r3, [r2, #12]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_GetPriorityGrouping>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_SetPriority>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	db0a      	blt.n	8004db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <__NVIC_SetPriority+0x4c>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	440b      	add	r3, r1
 8004db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004db4:	e00a      	b.n	8004dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <__NVIC_SetPriority+0x50>)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3b04      	subs	r3, #4
 8004dc4:	0112      	lsls	r2, r2, #4
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	440b      	add	r3, r1
 8004dca:	761a      	strb	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000e100 	.word	0xe000e100
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <NVIC_EncodePriority>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f1c3 0307 	rsb	r3, r3, #7
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf28      	it	cs
 8004dfe:	2304      	movcs	r3, #4
 8004e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d902      	bls.n	8004e10 <NVIC_EncodePriority+0x30>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3b03      	subs	r3, #3
 8004e0e:	e000      	b.n	8004e12 <NVIC_EncodePriority+0x32>
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e28:	f04f 31ff 	mov.w	r1, #4294967295
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	4313      	orrs	r3, r2
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e58:	d301      	bcc.n	8004e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00f      	b.n	8004e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <SysTick_Config+0x40>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e66:	210f      	movs	r1, #15
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	f7ff ff8e 	bl	8004d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <SysTick_Config+0x40>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e76:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <SysTick_Config+0x40>)
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff47 	bl	8004d28 <__NVIC_SetPriorityGrouping>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eb4:	f7ff ff5c 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8004eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	6978      	ldr	r0, [r7, #20]
 8004ec0:	f7ff ff8e 	bl	8004de0 <NVIC_EncodePriority>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff ff5d 	bl	8004d8c <__NVIC_SetPriority>
}
 8004ed2:	bf00      	nop
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ffb0 	bl	8004e48 <SysTick_Config>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e264      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d075      	beq.n	8004ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f12:	4ba3      	ldr	r3, [pc, #652]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d00c      	beq.n	8004f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1e:	4ba0      	ldr	r3, [pc, #640]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d112      	bne.n	8004f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2a:	4b9d      	ldr	r3, [pc, #628]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f36:	d10b      	bne.n	8004f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	4b99      	ldr	r3, [pc, #612]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05b      	beq.n	8004ffc <HAL_RCC_OscConfig+0x108>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d157      	bne.n	8004ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e23f      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x74>
 8004f5a:	4b91      	ldr	r3, [pc, #580]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a90      	ldr	r2, [pc, #576]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e01d      	b.n	8004fa4 <HAL_RCC_OscConfig+0xb0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x98>
 8004f72:	4b8b      	ldr	r3, [pc, #556]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a8a      	ldr	r2, [pc, #552]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b88      	ldr	r3, [pc, #544]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a87      	ldr	r2, [pc, #540]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0xb0>
 8004f8c:	4b84      	ldr	r3, [pc, #528]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a83      	ldr	r2, [pc, #524]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b81      	ldr	r3, [pc, #516]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a80      	ldr	r2, [pc, #512]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7ff feb0 	bl	8004d10 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7ff feac 	bl	8004d10 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e204      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0xc0>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7ff fe9c 	bl	8004d10 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7ff fe98 	bl	8004d10 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1f0      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	4b6c      	ldr	r3, [pc, #432]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0xe8>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d063      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800500a:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005016:	4b62      	ldr	r3, [pc, #392]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800501e:	2b08      	cmp	r3, #8
 8005020:	d11c      	bne.n	800505c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005022:	4b5f      	ldr	r3, [pc, #380]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d116      	bne.n	800505c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502e:	4b5c      	ldr	r3, [pc, #368]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x152>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e1c4      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005046:	4b56      	ldr	r3, [pc, #344]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4952      	ldr	r1, [pc, #328]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005056:	4313      	orrs	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505a:	e03a      	b.n	80050d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005064:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <HAL_RCC_OscConfig+0x2b0>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7ff fe51 	bl	8004d10 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005072:	f7ff fe4d 	bl	8004d10 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e1a5      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005084:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4940      	ldr	r1, [pc, #256]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
 80050a4:	e015      	b.n	80050d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a6:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <HAL_RCC_OscConfig+0x2b0>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7ff fe30 	bl	8004d10 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b4:	f7ff fe2c 	bl	8004d10 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e184      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d030      	beq.n	8005140 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e6:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_RCC_OscConfig+0x2b4>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7ff fe10 	bl	8004d10 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f4:	f7ff fe0c 	bl	8004d10 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e164      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005106:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x200>
 8005112:	e015      	b.n	8005140 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_OscConfig+0x2b4>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511a:	f7ff fdf9 	bl	8004d10 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005122:	f7ff fdf5 	bl	8004d10 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e14d      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f0      	bne.n	8005122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80a0 	beq.w	800528e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <HAL_RCC_OscConfig+0x2ac>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_OscConfig+0x2b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d121      	bne.n	80051ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCC_OscConfig+0x2b8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a07      	ldr	r2, [pc, #28]	; (80051ac <HAL_RCC_OscConfig+0x2b8>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005196:	f7ff fdbb 	bl	8004d10 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	e011      	b.n	80051c2 <HAL_RCC_OscConfig+0x2ce>
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800
 80051a4:	42470000 	.word	0x42470000
 80051a8:	42470e80 	.word	0x42470e80
 80051ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b0:	f7ff fdae 	bl	8004d10 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e106      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	4b85      	ldr	r3, [pc, #532]	; (80053d8 <HAL_RCC_OscConfig+0x4e4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2f0>
 80051d6:	4b81      	ldr	r3, [pc, #516]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	4a80      	ldr	r2, [pc, #512]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6713      	str	r3, [r2, #112]	; 0x70
 80051e2:	e01c      	b.n	800521e <HAL_RCC_OscConfig+0x32a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x312>
 80051ec:	4b7b      	ldr	r3, [pc, #492]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a7a      	ldr	r2, [pc, #488]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	4b78      	ldr	r3, [pc, #480]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a77      	ldr	r2, [pc, #476]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
 8005204:	e00b      	b.n	800521e <HAL_RCC_OscConfig+0x32a>
 8005206:	4b75      	ldr	r3, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a74      	ldr	r2, [pc, #464]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	4a71      	ldr	r2, [pc, #452]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d015      	beq.n	8005252 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7ff fd73 	bl	8004d10 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522c:	e00a      	b.n	8005244 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7ff fd6f 	bl	8004d10 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0c5      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	4b65      	ldr	r3, [pc, #404]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ee      	beq.n	800522e <HAL_RCC_OscConfig+0x33a>
 8005250:	e014      	b.n	800527c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005252:	f7ff fd5d 	bl	8004d10 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005258:	e00a      	b.n	8005270 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7ff fd59 	bl	8004d10 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	4293      	cmp	r3, r2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0af      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005270:	4b5a      	ldr	r3, [pc, #360]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ee      	bne.n	800525a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4b56      	ldr	r3, [pc, #344]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	4a55      	ldr	r2, [pc, #340]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 809b 	beq.w	80053ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005298:	4b50      	ldr	r3, [pc, #320]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d05c      	beq.n	800535e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d141      	bne.n	8005330 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <HAL_RCC_OscConfig+0x4ec>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7ff fd2d 	bl	8004d10 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ba:	f7ff fd29 	bl	8004d10 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e081      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052cc:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	019b      	lsls	r3, r3, #6
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005302:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <HAL_RCC_OscConfig+0x4ec>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7ff fd02 	bl	8004d10 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005310:	f7ff fcfe 	bl	8004d10 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e056      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x41c>
 800532e:	e04e      	b.n	80053ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <HAL_RCC_OscConfig+0x4ec>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7ff fceb 	bl	8004d10 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7ff fce7 	bl	8004d10 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e03f      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f0      	bne.n	800533e <HAL_RCC_OscConfig+0x44a>
 800535c:	e037      	b.n	80053ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e032      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800536a:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <HAL_RCC_OscConfig+0x4e8>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d028      	beq.n	80053ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d121      	bne.n	80053ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d11a      	bne.n	80053ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d111      	bne.n	80053ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	3b01      	subs	r3, #1
 80053b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40007000 	.word	0x40007000
 80053dc:	40023800 	.word	0x40023800
 80053e0:	42470060 	.word	0x42470060

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0cc      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d90c      	bls.n	8005420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b63      	ldr	r3, [pc, #396]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0b8      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d020      	beq.n	800546e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005438:	4b59      	ldr	r3, [pc, #356]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4a58      	ldr	r2, [pc, #352]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005450:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a52      	ldr	r2, [pc, #328]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800545a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545c:	4b50      	ldr	r3, [pc, #320]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	494d      	ldr	r1, [pc, #308]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	4313      	orrs	r3, r2
 800546c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d044      	beq.n	8005504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d107      	bne.n	8005492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	4b47      	ldr	r3, [pc, #284]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d119      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e07f      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06f      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b2:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e067      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c2:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f023 0203 	bic.w	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4934      	ldr	r1, [pc, #208]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d4:	f7ff fc1c 	bl	8004d10 <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054dc:	f7ff fc18 	bl	8004d10 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e04f      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	4b2b      	ldr	r3, [pc, #172]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 020c 	and.w	r2, r3, #12
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	429a      	cmp	r2, r3
 8005502:	d1eb      	bne.n	80054dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005504:	4b25      	ldr	r3, [pc, #148]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d20c      	bcs.n	800552c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b20      	ldr	r3, [pc, #128]	; (800559c <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d001      	beq.n	800552c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e032      	b.n	8005592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005538:	4b19      	ldr	r3, [pc, #100]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4916      	ldr	r1, [pc, #88]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	490e      	ldr	r1, [pc, #56]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800556a:	f000 f821 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 800556e:	4602      	mov	r2, r0
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	490a      	ldr	r1, [pc, #40]	; (80055a4 <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	5ccb      	ldrb	r3, [r1, r3]
 800557e:	fa22 f303 	lsr.w	r3, r2, r3
 8005582:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fb90 	bl	8004cb0 <HAL_InitTick>

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40023c00 	.word	0x40023c00
 80055a0:	40023800 	.word	0x40023800
 80055a4:	08008950 	.word	0x08008950
 80055a8:	20000000 	.word	0x20000000
 80055ac:	20000004 	.word	0x20000004

080055b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	2300      	movs	r3, #0
 80055c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055c8:	4b67      	ldr	r3, [pc, #412]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 030c 	and.w	r3, r3, #12
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d00d      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x40>
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	f200 80bd 	bhi.w	8005754 <HAL_RCC_GetSysClockFreq+0x1a4>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x34>
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0x3a>
 80055e2:	e0b7      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055e4:	4b61      	ldr	r3, [pc, #388]	; (800576c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80055e6:	60bb      	str	r3, [r7, #8]
       break;
 80055e8:	e0b7      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ea:	4b61      	ldr	r3, [pc, #388]	; (8005770 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80055ec:	60bb      	str	r3, [r7, #8]
      break;
 80055ee:	e0b4      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f0:	4b5d      	ldr	r3, [pc, #372]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055fa:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d04d      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005606:	4b58      	ldr	r3, [pc, #352]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	ea02 0800 	and.w	r8, r2, r0
 800561e:	ea03 0901 	and.w	r9, r3, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	014b      	lsls	r3, r1, #5
 8005630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005634:	0142      	lsls	r2, r0, #5
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	ebb0 0008 	subs.w	r0, r0, r8
 800563e:	eb61 0109 	sbc.w	r1, r1, r9
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	018b      	lsls	r3, r1, #6
 800564c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005650:	0182      	lsls	r2, r0, #6
 8005652:	1a12      	subs	r2, r2, r0
 8005654:	eb63 0301 	sbc.w	r3, r3, r1
 8005658:	f04f 0000 	mov.w	r0, #0
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	00d9      	lsls	r1, r3, #3
 8005662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005666:	00d0      	lsls	r0, r2, #3
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	eb12 0208 	adds.w	r2, r2, r8
 8005670:	eb43 0309 	adc.w	r3, r3, r9
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0259      	lsls	r1, r3, #9
 800567e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005682:	0250      	lsls	r0, r2, #9
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f7fb fa72 	bl	8000b7c <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4613      	mov	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e04a      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a2:	4b31      	ldr	r3, [pc, #196]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	461a      	mov	r2, r3
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	ea02 0400 	and.w	r4, r2, r0
 80056ba:	ea03 0501 	and.w	r5, r3, r1
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	014b      	lsls	r3, r1, #5
 80056cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056d0:	0142      	lsls	r2, r0, #5
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	1b00      	subs	r0, r0, r4
 80056d8:	eb61 0105 	sbc.w	r1, r1, r5
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	018b      	lsls	r3, r1, #6
 80056e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056ea:	0182      	lsls	r2, r0, #6
 80056ec:	1a12      	subs	r2, r2, r0
 80056ee:	eb63 0301 	sbc.w	r3, r3, r1
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	00d9      	lsls	r1, r3, #3
 80056fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005700:	00d0      	lsls	r0, r2, #3
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	1912      	adds	r2, r2, r4
 8005708:	eb45 0303 	adc.w	r3, r5, r3
 800570c:	f04f 0000 	mov.w	r0, #0
 8005710:	f04f 0100 	mov.w	r1, #0
 8005714:	0299      	lsls	r1, r3, #10
 8005716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800571a:	0290      	lsls	r0, r2, #10
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	461a      	mov	r2, r3
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f7fb fa26 	bl	8000b7c <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4613      	mov	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	60bb      	str	r3, [r7, #8]
      break;
 8005752:	e002      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005756:	60bb      	str	r3, [r7, #8]
      break;
 8005758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575a:	68bb      	ldr	r3, [r7, #8]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	007a1200 	.word	0x007a1200

08005774 <LL_GPIO_SetPinMode>:
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	613b      	str	r3, [r7, #16]
  return result;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	fab3 f383 	clz	r3, r3
 8005796:	b2db      	uxtb	r3, r3
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	2103      	movs	r1, #3
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	61bb      	str	r3, [r7, #24]
  return result;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	fa01 f303 	lsl.w	r3, r1, r3
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3724      	adds	r7, #36	; 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_GPIO_SetPinOutputType>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	401a      	ands	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	431a      	orrs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_GPIO_SetPinSpeed>:
{
 8005802:	b480      	push	{r7}
 8005804:	b089      	sub	sp, #36	; 0x24
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	fa93 f3a3 	rbit	r3, r3
 800581c:	613b      	str	r3, [r7, #16]
  return result;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	fab3 f383 	clz	r3, r3
 8005824:	b2db      	uxtb	r3, r3
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2103      	movs	r1, #3
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	401a      	ands	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	fa93 f3a3 	rbit	r3, r3
 800583c:	61bb      	str	r3, [r7, #24]
  return result;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	fab3 f383 	clz	r3, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	431a      	orrs	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3724      	adds	r7, #36	; 0x24
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <LL_GPIO_SetPinPull>:
{
 8005860:	b480      	push	{r7}
 8005862:	b089      	sub	sp, #36	; 0x24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fa93 f3a3 	rbit	r3, r3
 800587a:	613b      	str	r3, [r7, #16]
  return result;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2103      	movs	r1, #3
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	401a      	ands	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	61bb      	str	r3, [r7, #24]
  return result;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	60da      	str	r2, [r3, #12]
}
 80058b2:	bf00      	nop
 80058b4:	3724      	adds	r7, #36	; 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <LL_GPIO_SetAFPin_0_7>:
{
 80058be:	b480      	push	{r7}
 80058c0:	b089      	sub	sp, #36	; 0x24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	fa93 f3a3 	rbit	r3, r3
 80058d8:	613b      	str	r3, [r7, #16]
  return result;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	fab3 f383 	clz	r3, r3
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	210f      	movs	r1, #15
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	401a      	ands	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	61bb      	str	r3, [r7, #24]
  return result;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_GPIO_SetAFPin_8_15>:
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	fa93 f3a3 	rbit	r3, r3
 8005938:	613b      	str	r3, [r7, #16]
  return result;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	fab3 f383 	clz	r3, r3
 8005940:	b2db      	uxtb	r3, r3
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	210f      	movs	r1, #15
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	401a      	ands	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	fa93 f3a3 	rbit	r3, r3
 800595a:	61bb      	str	r3, [r7, #24]
  return result;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fab3 f383 	clz	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005972:	bf00      	nop
 8005974:	3724      	adds	r7, #36	; 0x24
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa93 f3a3 	rbit	r3, r3
 800599c:	613b      	str	r3, [r7, #16]
  return result;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	fab3 f383 	clz	r3, r3
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059a8:	e050      	b.n	8005a4c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d042      	beq.n	8005a46 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d003      	beq.n	80059d0 <LL_GPIO_Init+0x52>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d10d      	bne.n	80059ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	461a      	mov	r2, r3
 80059d6:	69b9      	ldr	r1, [r7, #24]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff ff12 	bl	8005802 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	461a      	mov	r2, r3
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fef3 	bl	80057d2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	461a      	mov	r2, r3
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff33 	bl	8005860 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d11a      	bne.n	8005a38 <LL_GPIO_Init+0xba>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	fa93 f3a3 	rbit	r3, r3
 8005a0c:	60bb      	str	r3, [r7, #8]
  return result;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005a10:	fab3 f383 	clz	r3, r3
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b07      	cmp	r3, #7
 8005a18:	d807      	bhi.n	8005a2a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	69b9      	ldr	r1, [r7, #24]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff4b 	bl	80058be <LL_GPIO_SetAFPin_0_7>
 8005a28:	e006      	b.n	8005a38 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff72 	bl	800591c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69b9      	ldr	r1, [r7, #24]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fe97 	bl	8005774 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1a7      	bne.n	80059aa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <LL_RCC_GetSysClkSource+0x18>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40023800 	.word	0x40023800

08005a80 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <LL_RCC_GetAHBPrescaler+0x18>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800

08005a9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800

08005ab8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <LL_RCC_PLL_GetMainSource+0x18>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800

08005af0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <LL_RCC_PLL_GetN+0x18>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	099b      	lsrs	r3, r3, #6
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40023800 	.word	0x40023800

08005b0c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <LL_RCC_PLL_GetP+0x18>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800

08005b28 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <LL_RCC_PLL_GetDivider+0x18>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800

08005b44 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005b4c:	f000 f820 	bl	8005b90 <RCC_GetSystemClockFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f840 	bl	8005be0 <RCC_GetHCLKClockFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f84e 	bl	8005c0c <RCC_GetPCLK1ClockFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f85a 	bl	8005c34 <RCC_GetPCLK2ClockFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005b9a:	f7ff ff63 	bl	8005a64 <LL_RCC_GetSysClkSource>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d00c      	beq.n	8005bbe <RCC_GetSystemClockFreq+0x2e>
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d80f      	bhi.n	8005bc8 <RCC_GetSystemClockFreq+0x38>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <RCC_GetSystemClockFreq+0x22>
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d003      	beq.n	8005bb8 <RCC_GetSystemClockFreq+0x28>
 8005bb0:	e00a      	b.n	8005bc8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <RCC_GetSystemClockFreq+0x48>)
 8005bb4:	607b      	str	r3, [r7, #4]
      break;
 8005bb6:	e00a      	b.n	8005bce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005bb8:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <RCC_GetSystemClockFreq+0x4c>)
 8005bba:	607b      	str	r3, [r7, #4]
      break;
 8005bbc:	e007      	b.n	8005bce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005bbe:	2008      	movs	r0, #8
 8005bc0:	f000 f84c 	bl	8005c5c <RCC_PLL_GetFreqDomain_SYS>
 8005bc4:	6078      	str	r0, [r7, #4]
      break;
 8005bc6:	e002      	b.n	8005bce <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <RCC_GetSystemClockFreq+0x48>)
 8005bca:	607b      	str	r3, [r7, #4]
      break;
 8005bcc:	bf00      	nop
  }

  return frequency;
 8005bce:	687b      	ldr	r3, [r7, #4]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	00f42400 	.word	0x00f42400
 8005bdc:	007a1200 	.word	0x007a1200

08005be0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005be8:	f7ff ff4a 	bl	8005a80 <LL_RCC_GetAHBPrescaler>
 8005bec:	4603      	mov	r3, r0
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <RCC_GetHCLKClockFreq+0x28>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	40d3      	lsrs	r3, r2
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	08008950 	.word	0x08008950

08005c0c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c14:	f7ff ff42 	bl	8005a9c <LL_RCC_GetAPB1Prescaler>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	0a9b      	lsrs	r3, r3, #10
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <RCC_GetPCLK1ClockFreq+0x24>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	40d3      	lsrs	r3, r2
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	08008960 	.word	0x08008960

08005c34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c3c:	f7ff ff3c 	bl	8005ab8 <LL_RCC_GetAPB2Prescaler>
 8005c40:	4603      	mov	r3, r0
 8005c42:	0b5b      	lsrs	r3, r3, #13
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <RCC_GetPCLK2ClockFreq+0x24>)
 8005c46:	5cd3      	ldrb	r3, [r2, r3]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	40d3      	lsrs	r3, r2
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	08008960 	.word	0x08008960

08005c5c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c70:	f7ff ff30 	bl	8005ad4 <LL_RCC_PLL_GetMainSource>
 8005c74:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c82:	d003      	beq.n	8005c8c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005c84:	e005      	b.n	8005c92 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005c88:	617b      	str	r3, [r7, #20]
      break;
 8005c8a:	e005      	b.n	8005c98 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005c8e:	617b      	str	r3, [r7, #20]
      break;
 8005c90:	e002      	b.n	8005c98 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005c94:	617b      	str	r3, [r7, #20]
      break;
 8005c96:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d113      	bne.n	8005cc6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c9e:	f7ff ff43 	bl	8005b28 <LL_RCC_PLL_GetDivider>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	fbb3 f4f2 	udiv	r4, r3, r2
 8005caa:	f7ff ff21 	bl	8005af0 <LL_RCC_PLL_GetN>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	fb03 f404 	mul.w	r4, r3, r4
 8005cb4:	f7ff ff2a 	bl	8005b0c <LL_RCC_PLL_GetP>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fbb4 f3f3 	udiv	r3, r4, r3
 8005cc4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005cc6:	693b      	ldr	r3, [r7, #16]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}
 8005cd0:	00f42400 	.word	0x00f42400
 8005cd4:	007a1200 	.word	0x007a1200

08005cd8 <LL_USART_IsEnabled>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cec:	bf0c      	ite	eq
 8005cee:	2301      	moveq	r3, #1
 8005cf0:	2300      	movne	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_USART_SetStopBitsLength>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_USART_SetHWFlowCtrl>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	615a      	str	r2, [r3, #20]
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <LL_USART_SetBaudRate>:
{
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	b09f      	sub	sp, #124	; 0x7c
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6778      	str	r0, [r7, #116]	; 0x74
 8005d56:	6739      	str	r1, [r7, #112]	; 0x70
 8005d58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	f040 80bc 	bne.w	8005ede <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d68:	461c      	mov	r4, r3
 8005d6a:	f04f 0500 	mov.w	r5, #0
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	eb12 0a02 	adds.w	sl, r2, r2
 8005d76:	eb43 0b03 	adc.w	fp, r3, r3
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	465b      	mov	r3, fp
 8005d7e:	1912      	adds	r2, r2, r4
 8005d80:	eb45 0303 	adc.w	r3, r5, r3
 8005d84:	f04f 0000 	mov.w	r0, #0
 8005d88:	f04f 0100 	mov.w	r1, #0
 8005d8c:	00d9      	lsls	r1, r3, #3
 8005d8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d92:	00d0      	lsls	r0, r2, #3
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	1911      	adds	r1, r2, r4
 8005d9a:	6639      	str	r1, [r7, #96]	; 0x60
 8005d9c:	416b      	adcs	r3, r5
 8005d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8005da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da2:	461a      	mov	r2, r3
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	6339      	str	r1, [r7, #48]	; 0x30
 8005dac:	415b      	adcs	r3, r3
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
 8005db0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005db4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005db8:	f7fa fee0 	bl	8000b7c <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4ba9      	ldr	r3, [pc, #676]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	b29e      	uxth	r6, r3
 8005dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dd0:	461c      	mov	r4, r3
 8005dd2:	f04f 0500 	mov.w	r5, #0
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dde:	415b      	adcs	r3, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de6:	1912      	adds	r2, r2, r4
 8005de8:	eb45 0303 	adc.w	r3, r5, r3
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	00d9      	lsls	r1, r3, #3
 8005df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dfa:	00d0      	lsls	r0, r2, #3
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	1911      	adds	r1, r2, r4
 8005e02:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e04:	416b      	adcs	r3, r5
 8005e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	6239      	str	r1, [r7, #32]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e20:	f7fa feac 	bl	8000b7c <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4b8f      	ldr	r3, [pc, #572]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	2164      	movs	r1, #100	; 0x64
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	3332      	adds	r3, #50	; 0x32
 8005e3c:	4a8a      	ldr	r2, [pc, #552]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4433      	add	r3, r6
 8005e52:	b29e      	uxth	r6, r3
 8005e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e56:	4618      	mov	r0, r3
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	1894      	adds	r4, r2, r2
 8005e62:	61bc      	str	r4, [r7, #24]
 8005e64:	415b      	adcs	r3, r3
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e6c:	1812      	adds	r2, r2, r0
 8005e6e:	eb41 0303 	adc.w	r3, r1, r3
 8005e72:	f04f 0400 	mov.w	r4, #0
 8005e76:	f04f 0500 	mov.w	r5, #0
 8005e7a:	00dd      	lsls	r5, r3, #3
 8005e7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e80:	00d4      	lsls	r4, r2, #3
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	1814      	adds	r4, r2, r0
 8005e88:	653c      	str	r4, [r7, #80]	; 0x50
 8005e8a:	414b      	adcs	r3, r1
 8005e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8005e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e90:	461a      	mov	r2, r3
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	6139      	str	r1, [r7, #16]
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ea6:	f7fa fe69 	bl	8000b7c <__aeabi_uldivmod>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4b6e      	ldr	r3, [pc, #440]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	3332      	adds	r3, #50	; 0x32
 8005ec2:	4a69      	ldr	r2, [pc, #420]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4433      	add	r3, r6
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	e0be      	b.n	800605c <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee0:	461c      	mov	r4, r3
 8005ee2:	f04f 0500 	mov.w	r5, #0
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	eb12 0802 	adds.w	r8, r2, r2
 8005eee:	eb43 0903 	adc.w	r9, r3, r3
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	1912      	adds	r2, r2, r4
 8005ef8:	eb45 0303 	adc.w	r3, r5, r3
 8005efc:	f04f 0000 	mov.w	r0, #0
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	00d9      	lsls	r1, r3, #3
 8005f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f0a:	00d0      	lsls	r0, r2, #3
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	1911      	adds	r1, r2, r4
 8005f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f14:	416b      	adcs	r3, r5
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	008b      	lsls	r3, r1, #2
 8005f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f2e:	0082      	lsls	r2, r0, #2
 8005f30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f34:	f7fa fe22 	bl	8000b7c <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	b29e      	uxth	r6, r3
 8005f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f04f 0100 	mov.w	r1, #0
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	1894      	adds	r4, r2, r2
 8005f58:	60bc      	str	r4, [r7, #8]
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f62:	1812      	adds	r2, r2, r0
 8005f64:	eb41 0303 	adc.w	r3, r1, r3
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	f04f 0500 	mov.w	r5, #0
 8005f70:	00dd      	lsls	r5, r3, #3
 8005f72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f76:	00d4      	lsls	r4, r2, #3
 8005f78:	4622      	mov	r2, r4
 8005f7a:	462b      	mov	r3, r5
 8005f7c:	1814      	adds	r4, r2, r0
 8005f7e:	643c      	str	r4, [r7, #64]	; 0x40
 8005f80:	414b      	adcs	r3, r1
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
 8005f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f86:	4618      	mov	r0, r3
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	008b      	lsls	r3, r1, #2
 8005f96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f9a:	0082      	lsls	r2, r0, #2
 8005f9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005fa0:	f7fa fdec 	bl	8000b7c <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005faa:	fba3 1302 	umull	r1, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2164      	movs	r1, #100	; 0x64
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	3332      	adds	r3, #50	; 0x32
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4433      	add	r3, r6
 8005fce:	b29e      	uxth	r6, r3
 8005fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	1894      	adds	r4, r2, r2
 8005fde:	603c      	str	r4, [r7, #0]
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe8:	1812      	adds	r2, r2, r0
 8005fea:	eb41 0303 	adc.w	r3, r1, r3
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	f04f 0500 	mov.w	r5, #0
 8005ff6:	00dd      	lsls	r5, r3, #3
 8005ff8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ffc:	00d4      	lsls	r4, r2, #3
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	1814      	adds	r4, r2, r0
 8006004:	63bc      	str	r4, [r7, #56]	; 0x38
 8006006:	414b      	adcs	r3, r1
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600c:	4618      	mov	r0, r3
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	008b      	lsls	r3, r1, #2
 800601c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006020:	0082      	lsls	r2, r0, #2
 8006022:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006026:	f7fa fda9 	bl	8000b7c <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	; 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	3332      	adds	r3, #50	; 0x32
 8006042:	4a09      	ldr	r2, [pc, #36]	; (8006068 <LL_USART_SetBaudRate+0x31c>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	b29b      	uxth	r3, r3
 8006052:	4433      	add	r3, r6
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	609a      	str	r2, [r3, #8]
}
 800605c:	bf00      	nop
 800605e:	377c      	adds	r7, #124	; 0x7c
 8006060:	46bd      	mov	sp, r7
 8006062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006066:	bf00      	nop
 8006068:	51eb851f 	.word	0x51eb851f

0800606c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fe2a 	bl	8005cd8 <LL_USART_IsEnabled>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d149      	bne.n	800611e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006092:	f023 030c 	bic.w	r3, r3, #12
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	6851      	ldr	r1, [r2, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68d2      	ldr	r2, [r2, #12]
 800609e:	4311      	orrs	r1, r2
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	6912      	ldr	r2, [r2, #16]
 80060a4:	4311      	orrs	r1, r2
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	6992      	ldr	r2, [r2, #24]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fe21 	bl	8005d00 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fe2e 	bl	8005d26 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fd38 	bl	8005b44 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <LL_USART_Init+0xbc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d102      	bne.n	80060e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e00c      	b.n	80060fc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <LL_USART_Init+0xc0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d102      	bne.n	80060f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	e005      	b.n	80060fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <LL_USART_Init+0xc4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d101      	bne.n	80060fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fe17 	bl	8005d4c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800611e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40011000 	.word	0x40011000
 800612c:	40004400 	.word	0x40004400
 8006130:	40011400 	.word	0x40011400

08006134 <_ZdlPvj>:
 8006134:	f000 b820 	b.w	8006178 <_ZdlPv>

08006138 <__cxa_guard_acquire>:
 8006138:	6803      	ldr	r3, [r0, #0]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d406      	bmi.n	800614c <__cxa_guard_acquire+0x14>
 800613e:	7843      	ldrb	r3, [r0, #1]
 8006140:	b103      	cbz	r3, 8006144 <__cxa_guard_acquire+0xc>
 8006142:	deff      	udf	#255	; 0xff
 8006144:	2301      	movs	r3, #1
 8006146:	7043      	strb	r3, [r0, #1]
 8006148:	4618      	mov	r0, r3
 800614a:	4770      	bx	lr
 800614c:	2000      	movs	r0, #0
 800614e:	4770      	bx	lr

08006150 <__cxa_guard_release>:
 8006150:	2301      	movs	r3, #1
 8006152:	6003      	str	r3, [r0, #0]
 8006154:	4770      	bx	lr

08006156 <_Znwj>:
 8006156:	2801      	cmp	r0, #1
 8006158:	bf38      	it	cc
 800615a:	2001      	movcc	r0, #1
 800615c:	b510      	push	{r4, lr}
 800615e:	4604      	mov	r4, r0
 8006160:	4620      	mov	r0, r4
 8006162:	f001 f8d3 	bl	800730c <malloc>
 8006166:	b930      	cbnz	r0, 8006176 <_Znwj+0x20>
 8006168:	f000 f808 	bl	800617c <_ZSt15get_new_handlerv>
 800616c:	b908      	cbnz	r0, 8006172 <_Znwj+0x1c>
 800616e:	f001 f895 	bl	800729c <abort>
 8006172:	4780      	blx	r0
 8006174:	e7f4      	b.n	8006160 <_Znwj+0xa>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_ZdlPv>:
 8006178:	f001 b8d0 	b.w	800731c <free>

0800617c <_ZSt15get_new_handlerv>:
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <_ZSt15get_new_handlerv+0xc>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f3bf 8f5b 	dmb	ish
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20002b80 	.word	0x20002b80
 800618c:	00000000 	.word	0x00000000

08006190 <cos>:
 8006190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006192:	ec53 2b10 	vmov	r2, r3, d0
 8006196:	4824      	ldr	r0, [pc, #144]	; (8006228 <cos+0x98>)
 8006198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800619c:	4281      	cmp	r1, r0
 800619e:	dc06      	bgt.n	80061ae <cos+0x1e>
 80061a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006220 <cos+0x90>
 80061a4:	f000 faa4 	bl	80066f0 <__kernel_cos>
 80061a8:	ec51 0b10 	vmov	r0, r1, d0
 80061ac:	e007      	b.n	80061be <cos+0x2e>
 80061ae:	481f      	ldr	r0, [pc, #124]	; (800622c <cos+0x9c>)
 80061b0:	4281      	cmp	r1, r0
 80061b2:	dd09      	ble.n	80061c8 <cos+0x38>
 80061b4:	ee10 0a10 	vmov	r0, s0
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fa f865 	bl	8000288 <__aeabi_dsub>
 80061be:	ec41 0b10 	vmov	d0, r0, r1
 80061c2:	b005      	add	sp, #20
 80061c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80061c8:	4668      	mov	r0, sp
 80061ca:	f000 f885 	bl	80062d8 <__ieee754_rem_pio2>
 80061ce:	f000 0003 	and.w	r0, r0, #3
 80061d2:	2801      	cmp	r0, #1
 80061d4:	d007      	beq.n	80061e6 <cos+0x56>
 80061d6:	2802      	cmp	r0, #2
 80061d8:	d012      	beq.n	8006200 <cos+0x70>
 80061da:	b9c0      	cbnz	r0, 800620e <cos+0x7e>
 80061dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061e0:	ed9d 0b00 	vldr	d0, [sp]
 80061e4:	e7de      	b.n	80061a4 <cos+0x14>
 80061e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061ea:	ed9d 0b00 	vldr	d0, [sp]
 80061ee:	f000 fe87 	bl	8006f00 <__kernel_sin>
 80061f2:	ec53 2b10 	vmov	r2, r3, d0
 80061f6:	ee10 0a10 	vmov	r0, s0
 80061fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80061fe:	e7de      	b.n	80061be <cos+0x2e>
 8006200:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006204:	ed9d 0b00 	vldr	d0, [sp]
 8006208:	f000 fa72 	bl	80066f0 <__kernel_cos>
 800620c:	e7f1      	b.n	80061f2 <cos+0x62>
 800620e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006212:	ed9d 0b00 	vldr	d0, [sp]
 8006216:	2001      	movs	r0, #1
 8006218:	f000 fe72 	bl	8006f00 <__kernel_sin>
 800621c:	e7c4      	b.n	80061a8 <cos+0x18>
 800621e:	bf00      	nop
	...
 8006228:	3fe921fb 	.word	0x3fe921fb
 800622c:	7fefffff 	.word	0x7fefffff

08006230 <sin>:
 8006230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006232:	ec53 2b10 	vmov	r2, r3, d0
 8006236:	4826      	ldr	r0, [pc, #152]	; (80062d0 <sin+0xa0>)
 8006238:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800623c:	4281      	cmp	r1, r0
 800623e:	dc07      	bgt.n	8006250 <sin+0x20>
 8006240:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80062c8 <sin+0x98>
 8006244:	2000      	movs	r0, #0
 8006246:	f000 fe5b 	bl	8006f00 <__kernel_sin>
 800624a:	ec51 0b10 	vmov	r0, r1, d0
 800624e:	e007      	b.n	8006260 <sin+0x30>
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <sin+0xa4>)
 8006252:	4281      	cmp	r1, r0
 8006254:	dd09      	ble.n	800626a <sin+0x3a>
 8006256:	ee10 0a10 	vmov	r0, s0
 800625a:	4619      	mov	r1, r3
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	ec41 0b10 	vmov	d0, r0, r1
 8006264:	b005      	add	sp, #20
 8006266:	f85d fb04 	ldr.w	pc, [sp], #4
 800626a:	4668      	mov	r0, sp
 800626c:	f000 f834 	bl	80062d8 <__ieee754_rem_pio2>
 8006270:	f000 0003 	and.w	r0, r0, #3
 8006274:	2801      	cmp	r0, #1
 8006276:	d008      	beq.n	800628a <sin+0x5a>
 8006278:	2802      	cmp	r0, #2
 800627a:	d00d      	beq.n	8006298 <sin+0x68>
 800627c:	b9d0      	cbnz	r0, 80062b4 <sin+0x84>
 800627e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006282:	ed9d 0b00 	vldr	d0, [sp]
 8006286:	2001      	movs	r0, #1
 8006288:	e7dd      	b.n	8006246 <sin+0x16>
 800628a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800628e:	ed9d 0b00 	vldr	d0, [sp]
 8006292:	f000 fa2d 	bl	80066f0 <__kernel_cos>
 8006296:	e7d8      	b.n	800624a <sin+0x1a>
 8006298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800629c:	ed9d 0b00 	vldr	d0, [sp]
 80062a0:	2001      	movs	r0, #1
 80062a2:	f000 fe2d 	bl	8006f00 <__kernel_sin>
 80062a6:	ec53 2b10 	vmov	r2, r3, d0
 80062aa:	ee10 0a10 	vmov	r0, s0
 80062ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062b2:	e7d5      	b.n	8006260 <sin+0x30>
 80062b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062b8:	ed9d 0b00 	vldr	d0, [sp]
 80062bc:	f000 fa18 	bl	80066f0 <__kernel_cos>
 80062c0:	e7f1      	b.n	80062a6 <sin+0x76>
 80062c2:	bf00      	nop
 80062c4:	f3af 8000 	nop.w
	...
 80062d0:	3fe921fb 	.word	0x3fe921fb
 80062d4:	7fefffff 	.word	0x7fefffff

080062d8 <__ieee754_rem_pio2>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	ed2d 8b02 	vpush	{d8}
 80062e0:	ec55 4b10 	vmov	r4, r5, d0
 80062e4:	4bca      	ldr	r3, [pc, #808]	; (8006610 <__ieee754_rem_pio2+0x338>)
 80062e6:	b08b      	sub	sp, #44	; 0x2c
 80062e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80062ec:	4598      	cmp	r8, r3
 80062ee:	4682      	mov	sl, r0
 80062f0:	9502      	str	r5, [sp, #8]
 80062f2:	dc08      	bgt.n	8006306 <__ieee754_rem_pio2+0x2e>
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	ed80 0b00 	vstr	d0, [r0]
 80062fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006300:	f04f 0b00 	mov.w	fp, #0
 8006304:	e028      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 8006306:	4bc3      	ldr	r3, [pc, #780]	; (8006614 <__ieee754_rem_pio2+0x33c>)
 8006308:	4598      	cmp	r8, r3
 800630a:	dc78      	bgt.n	80063fe <__ieee754_rem_pio2+0x126>
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	4ec2      	ldr	r6, [pc, #776]	; (8006618 <__ieee754_rem_pio2+0x340>)
 8006310:	2b00      	cmp	r3, #0
 8006312:	ee10 0a10 	vmov	r0, s0
 8006316:	a3b0      	add	r3, pc, #704	; (adr r3, 80065d8 <__ieee754_rem_pio2+0x300>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	4629      	mov	r1, r5
 800631e:	dd39      	ble.n	8006394 <__ieee754_rem_pio2+0xbc>
 8006320:	f7f9 ffb2 	bl	8000288 <__aeabi_dsub>
 8006324:	45b0      	cmp	r8, r6
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	d01b      	beq.n	8006364 <__ieee754_rem_pio2+0x8c>
 800632c:	a3ac      	add	r3, pc, #688	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7f9 ffa9 	bl	8000288 <__aeabi_dsub>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	e9ca 2300 	strd	r2, r3, [sl]
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7f9 ffa1 	bl	8000288 <__aeabi_dsub>
 8006346:	a3a6      	add	r3, pc, #664	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff9c 	bl	8000288 <__aeabi_dsub>
 8006350:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006354:	f04f 0b01 	mov.w	fp, #1
 8006358:	4658      	mov	r0, fp
 800635a:	b00b      	add	sp, #44	; 0x2c
 800635c:	ecbd 8b02 	vpop	{d8}
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	a3a0      	add	r3, pc, #640	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ff8d 	bl	8000288 <__aeabi_dsub>
 800636e:	a3a0      	add	r3, pc, #640	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f7f9 ff86 	bl	8000288 <__aeabi_dsub>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	e9ca 2300 	strd	r2, r3, [sl]
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7f9 ff7e 	bl	8000288 <__aeabi_dsub>
 800638c:	a398      	add	r3, pc, #608	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	e7db      	b.n	800634c <__ieee754_rem_pio2+0x74>
 8006394:	f7f9 ff7a 	bl	800028c <__adddf3>
 8006398:	45b0      	cmp	r8, r6
 800639a:	4604      	mov	r4, r0
 800639c:	460d      	mov	r5, r1
 800639e:	d016      	beq.n	80063ce <__ieee754_rem_pio2+0xf6>
 80063a0:	a38f      	add	r3, pc, #572	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff71 	bl	800028c <__adddf3>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	e9ca 2300 	strd	r2, r3, [sl]
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7f9 ff67 	bl	8000288 <__aeabi_dsub>
 80063ba:	a389      	add	r3, pc, #548	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7f9 ff64 	bl	800028c <__adddf3>
 80063c4:	f04f 3bff 	mov.w	fp, #4294967295
 80063c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063cc:	e7c4      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 80063ce:	a386      	add	r3, pc, #536	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 ff5a 	bl	800028c <__adddf3>
 80063d8:	a385      	add	r3, pc, #532	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	f7f9 ff53 	bl	800028c <__adddf3>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9ca 2300 	strd	r2, r3, [sl]
 80063ee:	4620      	mov	r0, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7f9 ff49 	bl	8000288 <__aeabi_dsub>
 80063f6:	a37e      	add	r3, pc, #504	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	e7e0      	b.n	80063c0 <__ieee754_rem_pio2+0xe8>
 80063fe:	4b87      	ldr	r3, [pc, #540]	; (800661c <__ieee754_rem_pio2+0x344>)
 8006400:	4598      	cmp	r8, r3
 8006402:	f300 80d9 	bgt.w	80065b8 <__ieee754_rem_pio2+0x2e0>
 8006406:	f000 fe39 	bl	800707c <fabs>
 800640a:	ec55 4b10 	vmov	r4, r5, d0
 800640e:	ee10 0a10 	vmov	r0, s0
 8006412:	a379      	add	r3, pc, #484	; (adr r3, 80065f8 <__ieee754_rem_pio2+0x320>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4629      	mov	r1, r5
 800641a:	f7fa f8ed 	bl	80005f8 <__aeabi_dmul>
 800641e:	4b80      	ldr	r3, [pc, #512]	; (8006620 <__ieee754_rem_pio2+0x348>)
 8006420:	2200      	movs	r2, #0
 8006422:	f7f9 ff33 	bl	800028c <__adddf3>
 8006426:	f7fa fb81 	bl	8000b2c <__aeabi_d2iz>
 800642a:	4683      	mov	fp, r0
 800642c:	f7fa f87a 	bl	8000524 <__aeabi_i2d>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	ec43 2b18 	vmov	d8, r2, r3
 8006438:	a367      	add	r3, pc, #412	; (adr r3, 80065d8 <__ieee754_rem_pio2+0x300>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa f8db 	bl	80005f8 <__aeabi_dmul>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 ff1d 	bl	8000288 <__aeabi_dsub>
 800644e:	a364      	add	r3, pc, #400	; (adr r3, 80065e0 <__ieee754_rem_pio2+0x308>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	ec51 0b18 	vmov	r0, r1, d8
 800645c:	f7fa f8cc 	bl	80005f8 <__aeabi_dmul>
 8006460:	f1bb 0f1f 	cmp.w	fp, #31
 8006464:	4604      	mov	r4, r0
 8006466:	460d      	mov	r5, r1
 8006468:	dc0d      	bgt.n	8006486 <__ieee754_rem_pio2+0x1ae>
 800646a:	4b6e      	ldr	r3, [pc, #440]	; (8006624 <__ieee754_rem_pio2+0x34c>)
 800646c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	4543      	cmp	r3, r8
 8006476:	d006      	beq.n	8006486 <__ieee754_rem_pio2+0x1ae>
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	4630      	mov	r0, r6
 800647e:	4639      	mov	r1, r7
 8006480:	f7f9 ff02 	bl	8000288 <__aeabi_dsub>
 8006484:	e00f      	b.n	80064a6 <__ieee754_rem_pio2+0x1ce>
 8006486:	462b      	mov	r3, r5
 8006488:	4622      	mov	r2, r4
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7f9 fefb 	bl	8000288 <__aeabi_dsub>
 8006492:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800649c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80064a0:	f1b8 0f10 	cmp.w	r8, #16
 80064a4:	dc02      	bgt.n	80064ac <__ieee754_rem_pio2+0x1d4>
 80064a6:	e9ca 0100 	strd	r0, r1, [sl]
 80064aa:	e039      	b.n	8006520 <__ieee754_rem_pio2+0x248>
 80064ac:	a34e      	add	r3, pc, #312	; (adr r3, 80065e8 <__ieee754_rem_pio2+0x310>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	ec51 0b18 	vmov	r0, r1, d8
 80064b6:	f7fa f89f 	bl	80005f8 <__aeabi_dmul>
 80064ba:	4604      	mov	r4, r0
 80064bc:	460d      	mov	r5, r1
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4630      	mov	r0, r6
 80064c4:	4639      	mov	r1, r7
 80064c6:	f7f9 fedf 	bl	8000288 <__aeabi_dsub>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4680      	mov	r8, r0
 80064d0:	4689      	mov	r9, r1
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7f9 fed7 	bl	8000288 <__aeabi_dsub>
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	a343      	add	r3, pc, #268	; (adr r3, 80065f0 <__ieee754_rem_pio2+0x318>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	ec51 0b18 	vmov	r0, r1, d8
 80064f0:	f7fa f882 	bl	80005f8 <__aeabi_dmul>
 80064f4:	4622      	mov	r2, r4
 80064f6:	462b      	mov	r3, r5
 80064f8:	f7f9 fec6 	bl	8000288 <__aeabi_dsub>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4604      	mov	r4, r0
 8006502:	460d      	mov	r5, r1
 8006504:	4640      	mov	r0, r8
 8006506:	4649      	mov	r1, r9
 8006508:	f7f9 febe 	bl	8000288 <__aeabi_dsub>
 800650c:	9a03      	ldr	r2, [sp, #12]
 800650e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b31      	cmp	r3, #49	; 0x31
 8006516:	dc24      	bgt.n	8006562 <__ieee754_rem_pio2+0x28a>
 8006518:	e9ca 0100 	strd	r0, r1, [sl]
 800651c:	4646      	mov	r6, r8
 800651e:	464f      	mov	r7, r9
 8006520:	e9da 8900 	ldrd	r8, r9, [sl]
 8006524:	4630      	mov	r0, r6
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 feac 	bl	8000288 <__aeabi_dsub>
 8006530:	462b      	mov	r3, r5
 8006532:	4622      	mov	r2, r4
 8006534:	f7f9 fea8 	bl	8000288 <__aeabi_dsub>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006540:	f6bf af0a 	bge.w	8006358 <__ieee754_rem_pio2+0x80>
 8006544:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006548:	f8ca 3004 	str.w	r3, [sl, #4]
 800654c:	f8ca 8000 	str.w	r8, [sl]
 8006550:	f8ca 0008 	str.w	r0, [sl, #8]
 8006554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006558:	f8ca 300c 	str.w	r3, [sl, #12]
 800655c:	f1cb 0b00 	rsb	fp, fp, #0
 8006560:	e6fa      	b.n	8006358 <__ieee754_rem_pio2+0x80>
 8006562:	a327      	add	r3, pc, #156	; (adr r3, 8006600 <__ieee754_rem_pio2+0x328>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	ec51 0b18 	vmov	r0, r1, d8
 800656c:	f7fa f844 	bl	80005f8 <__aeabi_dmul>
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	f7f9 fe84 	bl	8000288 <__aeabi_dsub>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4606      	mov	r6, r0
 8006586:	460f      	mov	r7, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	4622      	mov	r2, r4
 8006592:	462b      	mov	r3, r5
 8006594:	f7f9 fe78 	bl	8000288 <__aeabi_dsub>
 8006598:	a31b      	add	r3, pc, #108	; (adr r3, 8006608 <__ieee754_rem_pio2+0x330>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	ec51 0b18 	vmov	r0, r1, d8
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	f7f9 fe6b 	bl	8000288 <__aeabi_dsub>
 80065b2:	4604      	mov	r4, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	e75f      	b.n	8006478 <__ieee754_rem_pio2+0x1a0>
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <__ieee754_rem_pio2+0x350>)
 80065ba:	4598      	cmp	r8, r3
 80065bc:	dd36      	ble.n	800662c <__ieee754_rem_pio2+0x354>
 80065be:	ee10 2a10 	vmov	r2, s0
 80065c2:	462b      	mov	r3, r5
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7f9 fe5e 	bl	8000288 <__aeabi_dsub>
 80065cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065d0:	e9ca 0100 	strd	r0, r1, [sl]
 80065d4:	e694      	b.n	8006300 <__ieee754_rem_pio2+0x28>
 80065d6:	bf00      	nop
 80065d8:	54400000 	.word	0x54400000
 80065dc:	3ff921fb 	.word	0x3ff921fb
 80065e0:	1a626331 	.word	0x1a626331
 80065e4:	3dd0b461 	.word	0x3dd0b461
 80065e8:	1a600000 	.word	0x1a600000
 80065ec:	3dd0b461 	.word	0x3dd0b461
 80065f0:	2e037073 	.word	0x2e037073
 80065f4:	3ba3198a 	.word	0x3ba3198a
 80065f8:	6dc9c883 	.word	0x6dc9c883
 80065fc:	3fe45f30 	.word	0x3fe45f30
 8006600:	2e000000 	.word	0x2e000000
 8006604:	3ba3198a 	.word	0x3ba3198a
 8006608:	252049c1 	.word	0x252049c1
 800660c:	397b839a 	.word	0x397b839a
 8006610:	3fe921fb 	.word	0x3fe921fb
 8006614:	4002d97b 	.word	0x4002d97b
 8006618:	3ff921fb 	.word	0x3ff921fb
 800661c:	413921fb 	.word	0x413921fb
 8006620:	3fe00000 	.word	0x3fe00000
 8006624:	08008968 	.word	0x08008968
 8006628:	7fefffff 	.word	0x7fefffff
 800662c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006630:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006634:	ee10 0a10 	vmov	r0, s0
 8006638:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800663c:	ee10 6a10 	vmov	r6, s0
 8006640:	460f      	mov	r7, r1
 8006642:	f7fa fa73 	bl	8000b2c <__aeabi_d2iz>
 8006646:	f7f9 ff6d 	bl	8000524 <__aeabi_i2d>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006656:	f7f9 fe17 	bl	8000288 <__aeabi_dsub>
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <__ieee754_rem_pio2+0x40c>)
 800665c:	2200      	movs	r2, #0
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	460f      	mov	r7, r1
 8006664:	4606      	mov	r6, r0
 8006666:	f7fa fa61 	bl	8000b2c <__aeabi_d2iz>
 800666a:	f7f9 ff5b 	bl	8000524 <__aeabi_i2d>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800667a:	f7f9 fe05 	bl	8000288 <__aeabi_dsub>
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <__ieee754_rem_pio2+0x40c>)
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 ffb9 	bl	80005f8 <__aeabi_dmul>
 8006686:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800668a:	ad04      	add	r5, sp, #16
 800668c:	f04f 0803 	mov.w	r8, #3
 8006690:	46a9      	mov	r9, r5
 8006692:	2600      	movs	r6, #0
 8006694:	2700      	movs	r7, #0
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800669e:	46c3      	mov	fp, r8
 80066a0:	3d08      	subs	r5, #8
 80066a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066a6:	f7fa fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d1f3      	bne.n	8006696 <__ieee754_rem_pio2+0x3be>
 80066ae:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <__ieee754_rem_pio2+0x410>)
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	2302      	movs	r3, #2
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4622      	mov	r2, r4
 80066b8:	465b      	mov	r3, fp
 80066ba:	4651      	mov	r1, sl
 80066bc:	4648      	mov	r0, r9
 80066be:	f000 f8df 	bl	8006880 <__kernel_rem_pio2>
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	4683      	mov	fp, r0
 80066c8:	f6bf ae46 	bge.w	8006358 <__ieee754_rem_pio2+0x80>
 80066cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80066d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80066dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	e73a      	b.n	8006558 <__ieee754_rem_pio2+0x280>
 80066e2:	bf00      	nop
 80066e4:	41700000 	.word	0x41700000
 80066e8:	080089e8 	.word	0x080089e8
 80066ec:	00000000 	.word	0x00000000

080066f0 <__kernel_cos>:
 80066f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	ec57 6b10 	vmov	r6, r7, d0
 80066f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80066fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006700:	ed8d 1b00 	vstr	d1, [sp]
 8006704:	da07      	bge.n	8006716 <__kernel_cos+0x26>
 8006706:	ee10 0a10 	vmov	r0, s0
 800670a:	4639      	mov	r1, r7
 800670c:	f7fa fa0e 	bl	8000b2c <__aeabi_d2iz>
 8006710:	2800      	cmp	r0, #0
 8006712:	f000 8088 	beq.w	8006826 <__kernel_cos+0x136>
 8006716:	4632      	mov	r2, r6
 8006718:	463b      	mov	r3, r7
 800671a:	4630      	mov	r0, r6
 800671c:	4639      	mov	r1, r7
 800671e:	f7f9 ff6b 	bl	80005f8 <__aeabi_dmul>
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <__kernel_cos+0x178>)
 8006724:	2200      	movs	r2, #0
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	f7f9 ff65 	bl	80005f8 <__aeabi_dmul>
 800672e:	a340      	add	r3, pc, #256	; (adr r3, 8006830 <__kernel_cos+0x140>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	f7f9 ff5c 	bl	80005f8 <__aeabi_dmul>
 8006740:	a33d      	add	r3, pc, #244	; (adr r3, 8006838 <__kernel_cos+0x148>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 fda1 	bl	800028c <__adddf3>
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	a33b      	add	r3, pc, #236	; (adr r3, 8006840 <__kernel_cos+0x150>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fd96 	bl	8000288 <__aeabi_dsub>
 800675c:	4622      	mov	r2, r4
 800675e:	462b      	mov	r3, r5
 8006760:	f7f9 ff4a 	bl	80005f8 <__aeabi_dmul>
 8006764:	a338      	add	r3, pc, #224	; (adr r3, 8006848 <__kernel_cos+0x158>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 fd8f 	bl	800028c <__adddf3>
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	f7f9 ff41 	bl	80005f8 <__aeabi_dmul>
 8006776:	a336      	add	r3, pc, #216	; (adr r3, 8006850 <__kernel_cos+0x160>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fd84 	bl	8000288 <__aeabi_dsub>
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 ff38 	bl	80005f8 <__aeabi_dmul>
 8006788:	a333      	add	r3, pc, #204	; (adr r3, 8006858 <__kernel_cos+0x168>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	4622      	mov	r2, r4
 8006794:	462b      	mov	r3, r5
 8006796:	f7f9 ff2f 	bl	80005f8 <__aeabi_dmul>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 ff2b 	bl	80005f8 <__aeabi_dmul>
 80067a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7f9 ff23 	bl	80005f8 <__aeabi_dmul>
 80067b2:	460b      	mov	r3, r1
 80067b4:	4602      	mov	r2, r0
 80067b6:	4629      	mov	r1, r5
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7f9 fd65 	bl	8000288 <__aeabi_dsub>
 80067be:	4b2b      	ldr	r3, [pc, #172]	; (800686c <__kernel_cos+0x17c>)
 80067c0:	4598      	cmp	r8, r3
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	dc10      	bgt.n	80067ea <__kernel_cos+0xfa>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4650      	mov	r0, sl
 80067ce:	4659      	mov	r1, fp
 80067d0:	f7f9 fd5a 	bl	8000288 <__aeabi_dsub>
 80067d4:	460b      	mov	r3, r1
 80067d6:	4926      	ldr	r1, [pc, #152]	; (8006870 <__kernel_cos+0x180>)
 80067d8:	4602      	mov	r2, r0
 80067da:	2000      	movs	r0, #0
 80067dc:	f7f9 fd54 	bl	8000288 <__aeabi_dsub>
 80067e0:	ec41 0b10 	vmov	d0, r0, r1
 80067e4:	b003      	add	sp, #12
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	4b22      	ldr	r3, [pc, #136]	; (8006874 <__kernel_cos+0x184>)
 80067ec:	4920      	ldr	r1, [pc, #128]	; (8006870 <__kernel_cos+0x180>)
 80067ee:	4598      	cmp	r8, r3
 80067f0:	bfcc      	ite	gt
 80067f2:	4d21      	ldrgt	r5, [pc, #132]	; (8006878 <__kernel_cos+0x188>)
 80067f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80067f8:	2400      	movs	r4, #0
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	2000      	movs	r0, #0
 8006800:	f7f9 fd42 	bl	8000288 <__aeabi_dsub>
 8006804:	4622      	mov	r2, r4
 8006806:	4680      	mov	r8, r0
 8006808:	4689      	mov	r9, r1
 800680a:	462b      	mov	r3, r5
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	f7f9 fd3a 	bl	8000288 <__aeabi_dsub>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	f7f9 fd36 	bl	8000288 <__aeabi_dsub>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	e7da      	b.n	80067dc <__kernel_cos+0xec>
 8006826:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006860 <__kernel_cos+0x170>
 800682a:	e7db      	b.n	80067e4 <__kernel_cos+0xf4>
 800682c:	f3af 8000 	nop.w
 8006830:	be8838d4 	.word	0xbe8838d4
 8006834:	bda8fae9 	.word	0xbda8fae9
 8006838:	bdb4b1c4 	.word	0xbdb4b1c4
 800683c:	3e21ee9e 	.word	0x3e21ee9e
 8006840:	809c52ad 	.word	0x809c52ad
 8006844:	3e927e4f 	.word	0x3e927e4f
 8006848:	19cb1590 	.word	0x19cb1590
 800684c:	3efa01a0 	.word	0x3efa01a0
 8006850:	16c15177 	.word	0x16c15177
 8006854:	3f56c16c 	.word	0x3f56c16c
 8006858:	5555554c 	.word	0x5555554c
 800685c:	3fa55555 	.word	0x3fa55555
 8006860:	00000000 	.word	0x00000000
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	3fe00000 	.word	0x3fe00000
 800686c:	3fd33332 	.word	0x3fd33332
 8006870:	3ff00000 	.word	0x3ff00000
 8006874:	3fe90000 	.word	0x3fe90000
 8006878:	3fd20000 	.word	0x3fd20000
 800687c:	00000000 	.word	0x00000000

08006880 <__kernel_rem_pio2>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	ed2d 8b02 	vpush	{d8}
 8006888:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800688c:	f112 0f14 	cmn.w	r2, #20
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	9101      	str	r1, [sp, #4]
 8006894:	4bc6      	ldr	r3, [pc, #792]	; (8006bb0 <__kernel_rem_pio2+0x330>)
 8006896:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006898:	9009      	str	r0, [sp, #36]	; 0x24
 800689a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068a6:	bfa8      	it	ge
 80068a8:	1ed4      	subge	r4, r2, #3
 80068aa:	9306      	str	r3, [sp, #24]
 80068ac:	bfb2      	itee	lt
 80068ae:	2400      	movlt	r4, #0
 80068b0:	2318      	movge	r3, #24
 80068b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80068b6:	f06f 0317 	mvn.w	r3, #23
 80068ba:	fb04 3303 	mla	r3, r4, r3, r3
 80068be:	eb03 0a02 	add.w	sl, r3, r2
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006ba0 <__kernel_rem_pio2+0x320>
 80068ca:	eb03 0802 	add.w	r8, r3, r2
 80068ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80068d0:	1aa7      	subs	r7, r4, r2
 80068d2:	ae20      	add	r6, sp, #128	; 0x80
 80068d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068d8:	2500      	movs	r5, #0
 80068da:	4545      	cmp	r5, r8
 80068dc:	dd18      	ble.n	8006910 <__kernel_rem_pio2+0x90>
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80068e4:	aa20      	add	r2, sp, #128	; 0x80
 80068e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006ba0 <__kernel_rem_pio2+0x320>
 80068ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80068ee:	f1c3 0301 	rsb	r3, r3, #1
 80068f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80068f6:	9307      	str	r3, [sp, #28]
 80068f8:	9b07      	ldr	r3, [sp, #28]
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	4443      	add	r3, r8
 80068fe:	429a      	cmp	r2, r3
 8006900:	db2f      	blt.n	8006962 <__kernel_rem_pio2+0xe2>
 8006902:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006906:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800690a:	462f      	mov	r7, r5
 800690c:	2600      	movs	r6, #0
 800690e:	e01b      	b.n	8006948 <__kernel_rem_pio2+0xc8>
 8006910:	42ef      	cmn	r7, r5
 8006912:	d407      	bmi.n	8006924 <__kernel_rem_pio2+0xa4>
 8006914:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006918:	f7f9 fe04 	bl	8000524 <__aeabi_i2d>
 800691c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006920:	3501      	adds	r5, #1
 8006922:	e7da      	b.n	80068da <__kernel_rem_pio2+0x5a>
 8006924:	ec51 0b18 	vmov	r0, r1, d8
 8006928:	e7f8      	b.n	800691c <__kernel_rem_pio2+0x9c>
 800692a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006932:	f7f9 fe61 	bl	80005f8 <__aeabi_dmul>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693e:	f7f9 fca5 	bl	800028c <__adddf3>
 8006942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006946:	3601      	adds	r6, #1
 8006948:	9b06      	ldr	r3, [sp, #24]
 800694a:	429e      	cmp	r6, r3
 800694c:	f1a7 0708 	sub.w	r7, r7, #8
 8006950:	ddeb      	ble.n	800692a <__kernel_rem_pio2+0xaa>
 8006952:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006956:	3508      	adds	r5, #8
 8006958:	ecab 7b02 	vstmia	fp!, {d7}
 800695c:	f108 0801 	add.w	r8, r8, #1
 8006960:	e7ca      	b.n	80068f8 <__kernel_rem_pio2+0x78>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	aa0c      	add	r2, sp, #48	; 0x30
 8006966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800696a:	930b      	str	r3, [sp, #44]	; 0x2c
 800696c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800696e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006972:	9c04      	ldr	r4, [sp, #16]
 8006974:	930a      	str	r3, [sp, #40]	; 0x28
 8006976:	ab98      	add	r3, sp, #608	; 0x260
 8006978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800697c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006980:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006984:	f8cd b008 	str.w	fp, [sp, #8]
 8006988:	4625      	mov	r5, r4
 800698a:	2d00      	cmp	r5, #0
 800698c:	dc78      	bgt.n	8006a80 <__kernel_rem_pio2+0x200>
 800698e:	ec47 6b10 	vmov	d0, r6, r7
 8006992:	4650      	mov	r0, sl
 8006994:	f000 fbfc 	bl	8007190 <scalbn>
 8006998:	ec57 6b10 	vmov	r6, r7, d0
 800699c:	2200      	movs	r2, #0
 800699e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069a2:	ee10 0a10 	vmov	r0, s0
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	ec41 0b10 	vmov	d0, r0, r1
 80069b0:	f000 fb6e 	bl	8007090 <floor>
 80069b4:	4b7f      	ldr	r3, [pc, #508]	; (8006bb4 <__kernel_rem_pio2+0x334>)
 80069b6:	ec51 0b10 	vmov	r0, r1, d0
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc5e 	bl	8000288 <__aeabi_dsub>
 80069cc:	460f      	mov	r7, r1
 80069ce:	4606      	mov	r6, r0
 80069d0:	f7fa f8ac 	bl	8000b2c <__aeabi_d2iz>
 80069d4:	9007      	str	r0, [sp, #28]
 80069d6:	f7f9 fda5 	bl	8000524 <__aeabi_i2d>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fc51 	bl	8000288 <__aeabi_dsub>
 80069e6:	f1ba 0f00 	cmp.w	sl, #0
 80069ea:	4606      	mov	r6, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	dd70      	ble.n	8006ad2 <__kernel_rem_pio2+0x252>
 80069f0:	1e62      	subs	r2, r4, #1
 80069f2:	ab0c      	add	r3, sp, #48	; 0x30
 80069f4:	9d07      	ldr	r5, [sp, #28]
 80069f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80069fa:	f1ca 0118 	rsb	r1, sl, #24
 80069fe:	fa40 f301 	asr.w	r3, r0, r1
 8006a02:	441d      	add	r5, r3
 8006a04:	408b      	lsls	r3, r1
 8006a06:	1ac0      	subs	r0, r0, r3
 8006a08:	ab0c      	add	r3, sp, #48	; 0x30
 8006a0a:	9507      	str	r5, [sp, #28]
 8006a0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a10:	f1ca 0317 	rsb	r3, sl, #23
 8006a14:	fa40 f303 	asr.w	r3, r0, r3
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	9b02      	ldr	r3, [sp, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd66      	ble.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	2200      	movs	r2, #0
 8006a24:	3301      	adds	r3, #1
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	4615      	mov	r5, r2
 8006a2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a2e:	4294      	cmp	r4, r2
 8006a30:	f300 8099 	bgt.w	8006b66 <__kernel_rem_pio2+0x2e6>
 8006a34:	f1ba 0f00 	cmp.w	sl, #0
 8006a38:	dd07      	ble.n	8006a4a <__kernel_rem_pio2+0x1ca>
 8006a3a:	f1ba 0f01 	cmp.w	sl, #1
 8006a3e:	f000 80a5 	beq.w	8006b8c <__kernel_rem_pio2+0x30c>
 8006a42:	f1ba 0f02 	cmp.w	sl, #2
 8006a46:	f000 80c1 	beq.w	8006bcc <__kernel_rem_pio2+0x34c>
 8006a4a:	9b02      	ldr	r3, [sp, #8]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d14e      	bne.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	4958      	ldr	r1, [pc, #352]	; (8006bb8 <__kernel_rem_pio2+0x338>)
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	d044      	beq.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a64:	4650      	mov	r0, sl
 8006a66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006ba8 <__kernel_rem_pio2+0x328>
 8006a6a:	f000 fb91 	bl	8007190 <scalbn>
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	ec53 2b10 	vmov	r2, r3, d0
 8006a76:	f7f9 fc07 	bl	8000288 <__aeabi_dsub>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	e036      	b.n	8006aee <__kernel_rem_pio2+0x26e>
 8006a80:	4b4e      	ldr	r3, [pc, #312]	; (8006bbc <__kernel_rem_pio2+0x33c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fdb6 	bl	80005f8 <__aeabi_dmul>
 8006a8c:	f7fa f84e 	bl	8000b2c <__aeabi_d2iz>
 8006a90:	f7f9 fd48 	bl	8000524 <__aeabi_i2d>
 8006a94:	4b4a      	ldr	r3, [pc, #296]	; (8006bc0 <__kernel_rem_pio2+0x340>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4689      	mov	r9, r1
 8006a9c:	f7f9 fdac 	bl	80005f8 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7f9 fbee 	bl	8000288 <__aeabi_dsub>
 8006aac:	f7fa f83e 	bl	8000b2c <__aeabi_d2iz>
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	f843 0b04 	str.w	r0, [r3], #4
 8006ab6:	3d01      	subs	r5, #1
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	ab70      	add	r3, sp, #448	; 0x1c0
 8006abc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fbe0 	bl	800028c <__adddf3>
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	e75b      	b.n	800698a <__kernel_rem_pio2+0x10a>
 8006ad2:	d105      	bne.n	8006ae0 <__kernel_rem_pio2+0x260>
 8006ad4:	1e63      	subs	r3, r4, #1
 8006ad6:	aa0c      	add	r2, sp, #48	; 0x30
 8006ad8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006adc:	15c3      	asrs	r3, r0, #23
 8006ade:	e79b      	b.n	8006a18 <__kernel_rem_pio2+0x198>
 8006ae0:	4b38      	ldr	r3, [pc, #224]	; (8006bc4 <__kernel_rem_pio2+0x344>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7fa f80e 	bl	8000b04 <__aeabi_dcmpge>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d139      	bne.n	8006b60 <__kernel_rem_pio2+0x2e0>
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f000 80b4 	beq.w	8006c68 <__kernel_rem_pio2+0x3e8>
 8006b00:	f104 3bff 	add.w	fp, r4, #4294967295
 8006b04:	465b      	mov	r3, fp
 8006b06:	2200      	movs	r2, #0
 8006b08:	9904      	ldr	r1, [sp, #16]
 8006b0a:	428b      	cmp	r3, r1
 8006b0c:	da65      	bge.n	8006bda <__kernel_rem_pio2+0x35a>
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	d07b      	beq.n	8006c0a <__kernel_rem_pio2+0x38a>
 8006b12:	ab0c      	add	r3, sp, #48	; 0x30
 8006b14:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b18:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a0 	beq.w	8006c62 <__kernel_rem_pio2+0x3e2>
 8006b22:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006ba8 <__kernel_rem_pio2+0x328>
 8006b26:	4650      	mov	r0, sl
 8006b28:	f000 fb32 	bl	8007190 <scalbn>
 8006b2c:	4f23      	ldr	r7, [pc, #140]	; (8006bbc <__kernel_rem_pio2+0x33c>)
 8006b2e:	ec55 4b10 	vmov	r4, r5, d0
 8006b32:	46d8      	mov	r8, fp
 8006b34:	2600      	movs	r6, #0
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	f280 80cf 	bge.w	8006cdc <__kernel_rem_pio2+0x45c>
 8006b3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006ba0 <__kernel_rem_pio2+0x320>
 8006b42:	465f      	mov	r7, fp
 8006b44:	f04f 0800 	mov.w	r8, #0
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f2c0 80fd 	blt.w	8006d48 <__kernel_rem_pio2+0x4c8>
 8006b4e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b50:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006bc8 <__kernel_rem_pio2+0x348>
 8006b54:	ec55 4b18 	vmov	r4, r5, d8
 8006b58:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	e0e5      	b.n	8006d2c <__kernel_rem_pio2+0x4ac>
 8006b60:	2302      	movs	r3, #2
 8006b62:	9302      	str	r3, [sp, #8]
 8006b64:	e75c      	b.n	8006a20 <__kernel_rem_pio2+0x1a0>
 8006b66:	f8db 3000 	ldr.w	r3, [fp]
 8006b6a:	b955      	cbnz	r5, 8006b82 <__kernel_rem_pio2+0x302>
 8006b6c:	b123      	cbz	r3, 8006b78 <__kernel_rem_pio2+0x2f8>
 8006b6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006b72:	f8cb 3000 	str.w	r3, [fp]
 8006b76:	2301      	movs	r3, #1
 8006b78:	3201      	adds	r2, #1
 8006b7a:	f10b 0b04 	add.w	fp, fp, #4
 8006b7e:	461d      	mov	r5, r3
 8006b80:	e755      	b.n	8006a2e <__kernel_rem_pio2+0x1ae>
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	f8cb 3000 	str.w	r3, [fp]
 8006b88:	462b      	mov	r3, r5
 8006b8a:	e7f5      	b.n	8006b78 <__kernel_rem_pio2+0x2f8>
 8006b8c:	1e62      	subs	r2, r4, #1
 8006b8e:	ab0c      	add	r3, sp, #48	; 0x30
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006b98:	a90c      	add	r1, sp, #48	; 0x30
 8006b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006b9e:	e754      	b.n	8006a4a <__kernel_rem_pio2+0x1ca>
	...
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	08008b30 	.word	0x08008b30
 8006bb4:	40200000 	.word	0x40200000
 8006bb8:	3ff00000 	.word	0x3ff00000
 8006bbc:	3e700000 	.word	0x3e700000
 8006bc0:	41700000 	.word	0x41700000
 8006bc4:	3fe00000 	.word	0x3fe00000
 8006bc8:	08008af0 	.word	0x08008af0
 8006bcc:	1e62      	subs	r2, r4, #1
 8006bce:	ab0c      	add	r3, sp, #48	; 0x30
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006bd8:	e7de      	b.n	8006b98 <__kernel_rem_pio2+0x318>
 8006bda:	a90c      	add	r1, sp, #48	; 0x30
 8006bdc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	430a      	orrs	r2, r1
 8006be4:	e790      	b.n	8006b08 <__kernel_rem_pio2+0x288>
 8006be6:	3301      	adds	r3, #1
 8006be8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0fa      	beq.n	8006be6 <__kernel_rem_pio2+0x366>
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	18e3      	adds	r3, r4, r3
 8006bf4:	18a6      	adds	r6, r4, r2
 8006bf6:	aa20      	add	r2, sp, #128	; 0x80
 8006bf8:	1c65      	adds	r5, r4, #1
 8006bfa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	42ab      	cmp	r3, r5
 8006c04:	da04      	bge.n	8006c10 <__kernel_rem_pio2+0x390>
 8006c06:	461c      	mov	r4, r3
 8006c08:	e6b5      	b.n	8006976 <__kernel_rem_pio2+0xf6>
 8006c0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7eb      	b.n	8006be8 <__kernel_rem_pio2+0x368>
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c16:	f7f9 fc85 	bl	8000524 <__aeabi_i2d>
 8006c1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c20:	46b3      	mov	fp, r6
 8006c22:	461c      	mov	r4, r3
 8006c24:	2700      	movs	r7, #0
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	f04f 0900 	mov.w	r9, #0
 8006c2e:	9b06      	ldr	r3, [sp, #24]
 8006c30:	429f      	cmp	r7, r3
 8006c32:	dd06      	ble.n	8006c42 <__kernel_rem_pio2+0x3c2>
 8006c34:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c3a:	e9c3 8900 	strd	r8, r9, [r3]
 8006c3e:	3501      	adds	r5, #1
 8006c40:	e7de      	b.n	8006c00 <__kernel_rem_pio2+0x380>
 8006c42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006c46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006c4a:	f7f9 fcd5 	bl	80005f8 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fb19 	bl	800028c <__adddf3>
 8006c5a:	3701      	adds	r7, #1
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4689      	mov	r9, r1
 8006c60:	e7e5      	b.n	8006c2e <__kernel_rem_pio2+0x3ae>
 8006c62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c66:	e754      	b.n	8006b12 <__kernel_rem_pio2+0x292>
 8006c68:	ec47 6b10 	vmov	d0, r6, r7
 8006c6c:	f1ca 0000 	rsb	r0, sl, #0
 8006c70:	f000 fa8e 	bl	8007190 <scalbn>
 8006c74:	ec57 6b10 	vmov	r6, r7, d0
 8006c78:	4b9f      	ldr	r3, [pc, #636]	; (8006ef8 <__kernel_rem_pio2+0x678>)
 8006c7a:	ee10 0a10 	vmov	r0, s0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 ff3f 	bl	8000b04 <__aeabi_dcmpge>
 8006c86:	b300      	cbz	r0, 8006cca <__kernel_rem_pio2+0x44a>
 8006c88:	4b9c      	ldr	r3, [pc, #624]	; (8006efc <__kernel_rem_pio2+0x67c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8006c94:	f7f9 ff4a 	bl	8000b2c <__aeabi_d2iz>
 8006c98:	4605      	mov	r5, r0
 8006c9a:	f7f9 fc43 	bl	8000524 <__aeabi_i2d>
 8006c9e:	4b96      	ldr	r3, [pc, #600]	; (8006ef8 <__kernel_rem_pio2+0x678>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4639      	mov	r1, r7
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	f7f9 ff3b 	bl	8000b2c <__aeabi_d2iz>
 8006cb6:	f104 0b01 	add.w	fp, r4, #1
 8006cba:	ab0c      	add	r3, sp, #48	; 0x30
 8006cbc:	f10a 0a18 	add.w	sl, sl, #24
 8006cc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cc4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006cc8:	e72b      	b.n	8006b22 <__kernel_rem_pio2+0x2a2>
 8006cca:	4630      	mov	r0, r6
 8006ccc:	4639      	mov	r1, r7
 8006cce:	f7f9 ff2d 	bl	8000b2c <__aeabi_d2iz>
 8006cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8006cd4:	46a3      	mov	fp, r4
 8006cd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006cda:	e722      	b.n	8006b22 <__kernel_rem_pio2+0x2a2>
 8006cdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8006cde:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006ce2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ce4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ce8:	f7f9 fc1c 	bl	8000524 <__aeabi_i2d>
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	f7f9 fc82 	bl	80005f8 <__aeabi_dmul>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	e9c9 0100 	strd	r0, r1, [r9]
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fc7a 	bl	80005f8 <__aeabi_dmul>
 8006d04:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	e713      	b.n	8006b36 <__kernel_rem_pio2+0x2b6>
 8006d0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006d12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006d16:	f7f9 fc6f 	bl	80005f8 <__aeabi_dmul>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fab3 	bl	800028c <__adddf3>
 8006d26:	3601      	adds	r6, #1
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	429e      	cmp	r6, r3
 8006d30:	dc01      	bgt.n	8006d36 <__kernel_rem_pio2+0x4b6>
 8006d32:	45b0      	cmp	r8, r6
 8006d34:	daeb      	bge.n	8006d0e <__kernel_rem_pio2+0x48e>
 8006d36:	ab48      	add	r3, sp, #288	; 0x120
 8006d38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d3c:	e9c3 4500 	strd	r4, r5, [r3]
 8006d40:	3f01      	subs	r7, #1
 8006d42:	f108 0801 	add.w	r8, r8, #1
 8006d46:	e6ff      	b.n	8006b48 <__kernel_rem_pio2+0x2c8>
 8006d48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	dc0b      	bgt.n	8006d66 <__kernel_rem_pio2+0x4e6>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc6e      	bgt.n	8006e30 <__kernel_rem_pio2+0x5b0>
 8006d52:	d045      	beq.n	8006de0 <__kernel_rem_pio2+0x560>
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	f003 0007 	and.w	r0, r3, #7
 8006d5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006d5e:	ecbd 8b02 	vpop	{d8}
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d1f3      	bne.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006d6c:	ab48      	add	r3, sp, #288	; 0x120
 8006d6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006d72:	46d0      	mov	r8, sl
 8006d74:	46d9      	mov	r9, fp
 8006d76:	f1b9 0f00 	cmp.w	r9, #0
 8006d7a:	f1a8 0808 	sub.w	r8, r8, #8
 8006d7e:	dc64      	bgt.n	8006e4a <__kernel_rem_pio2+0x5ca>
 8006d80:	465c      	mov	r4, fp
 8006d82:	2c01      	cmp	r4, #1
 8006d84:	f1aa 0a08 	sub.w	sl, sl, #8
 8006d88:	dc7e      	bgt.n	8006e88 <__kernel_rem_pio2+0x608>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	f1bb 0f01 	cmp.w	fp, #1
 8006d92:	f300 8097 	bgt.w	8006ec4 <__kernel_rem_pio2+0x644>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006d9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 8099 	bne.w	8006ed8 <__kernel_rem_pio2+0x658>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	e9c3 5600 	strd	r5, r6, [r3]
 8006dac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006db0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006db4:	e7ce      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006db6:	ab48      	add	r3, sp, #288	; 0x120
 8006db8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa64 	bl	800028c <__adddf3>
 8006dc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dc8:	f1bb 0f00 	cmp.w	fp, #0
 8006dcc:	daf3      	bge.n	8006db6 <__kernel_rem_pio2+0x536>
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	b113      	cbz	r3, 8006dd8 <__kernel_rem_pio2+0x558>
 8006dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	e9c3 0100 	strd	r0, r1, [r3]
 8006dde:	e7b9      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006de0:	2000      	movs	r0, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	e7f0      	b.n	8006dc8 <__kernel_rem_pio2+0x548>
 8006de6:	ab48      	add	r3, sp, #288	; 0x120
 8006de8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fa4c 	bl	800028c <__adddf3>
 8006df4:	3c01      	subs	r4, #1
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	daf5      	bge.n	8006de6 <__kernel_rem_pio2+0x566>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	b1e3      	cbz	r3, 8006e38 <__kernel_rem_pio2+0x5b8>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e04:	9c01      	ldr	r4, [sp, #4]
 8006e06:	e9c4 2300 	strd	r2, r3, [r4]
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006e12:	f7f9 fa39 	bl	8000288 <__aeabi_dsub>
 8006e16:	ad4a      	add	r5, sp, #296	; 0x128
 8006e18:	2401      	movs	r4, #1
 8006e1a:	45a3      	cmp	fp, r4
 8006e1c:	da0f      	bge.n	8006e3e <__kernel_rem_pio2+0x5be>
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	b113      	cbz	r3, 8006e28 <__kernel_rem_pio2+0x5a8>
 8006e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e26:	4619      	mov	r1, r3
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e2e:	e791      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006e30:	465c      	mov	r4, fp
 8006e32:	2000      	movs	r0, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	e7de      	b.n	8006df6 <__kernel_rem_pio2+0x576>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e7e2      	b.n	8006e04 <__kernel_rem_pio2+0x584>
 8006e3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e42:	f7f9 fa23 	bl	800028c <__adddf3>
 8006e46:	3401      	adds	r4, #1
 8006e48:	e7e7      	b.n	8006e1a <__kernel_rem_pio2+0x59a>
 8006e4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006e4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006e52:	4620      	mov	r0, r4
 8006e54:	4632      	mov	r2, r6
 8006e56:	463b      	mov	r3, r7
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fa17 	bl	800028c <__adddf3>
 8006e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fa0d 	bl	8000288 <__aeabi_dsub>
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463b      	mov	r3, r7
 8006e72:	f7f9 fa0b 	bl	800028c <__adddf3>
 8006e76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006e7e:	ed88 7b00 	vstr	d7, [r8]
 8006e82:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e86:	e776      	b.n	8006d76 <__kernel_rem_pio2+0x4f6>
 8006e88:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006e90:	4640      	mov	r0, r8
 8006e92:	4632      	mov	r2, r6
 8006e94:	463b      	mov	r3, r7
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 f9f8 	bl	800028c <__adddf3>
 8006e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 f9ee 	bl	8000288 <__aeabi_dsub>
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	f7f9 f9ec 	bl	800028c <__adddf3>
 8006eb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006eb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ebc:	ed8a 7b00 	vstr	d7, [sl]
 8006ec0:	3c01      	subs	r4, #1
 8006ec2:	e75e      	b.n	8006d82 <__kernel_rem_pio2+0x502>
 8006ec4:	ab48      	add	r3, sp, #288	; 0x120
 8006ec6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 f9dd 	bl	800028c <__adddf3>
 8006ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ed6:	e75a      	b.n	8006d8e <__kernel_rem_pio2+0x50e>
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	601d      	str	r5, [r3, #0]
 8006ede:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006ee2:	605c      	str	r4, [r3, #4]
 8006ee4:	609f      	str	r7, [r3, #8]
 8006ee6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006eea:	60d3      	str	r3, [r2, #12]
 8006eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ef0:	6110      	str	r0, [r2, #16]
 8006ef2:	6153      	str	r3, [r2, #20]
 8006ef4:	e72e      	b.n	8006d54 <__kernel_rem_pio2+0x4d4>
 8006ef6:	bf00      	nop
 8006ef8:	41700000 	.word	0x41700000
 8006efc:	3e700000 	.word	0x3e700000

08006f00 <__kernel_sin>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	ed2d 8b04 	vpush	{d8-d9}
 8006f08:	eeb0 8a41 	vmov.f32	s16, s2
 8006f0c:	eef0 8a61 	vmov.f32	s17, s3
 8006f10:	ec55 4b10 	vmov	r4, r5, d0
 8006f14:	b083      	sub	sp, #12
 8006f16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f1e:	9001      	str	r0, [sp, #4]
 8006f20:	da06      	bge.n	8006f30 <__kernel_sin+0x30>
 8006f22:	ee10 0a10 	vmov	r0, s0
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fe00 	bl	8000b2c <__aeabi_d2iz>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d051      	beq.n	8006fd4 <__kernel_sin+0xd4>
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	468b      	mov	fp, r1
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	a341      	add	r3, pc, #260	; (adr r3, 8007054 <__kernel_sin+0x154>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	4680      	mov	r8, r0
 8006f54:	4689      	mov	r9, r1
 8006f56:	4650      	mov	r0, sl
 8006f58:	4659      	mov	r1, fp
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	a33f      	add	r3, pc, #252	; (adr r3, 800705c <__kernel_sin+0x15c>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 f990 	bl	8000288 <__aeabi_dsub>
 8006f68:	4652      	mov	r2, sl
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	a33c      	add	r3, pc, #240	; (adr r3, 8007064 <__kernel_sin+0x164>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 f989 	bl	800028c <__adddf3>
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	f7f9 fb3b 	bl	80005f8 <__aeabi_dmul>
 8006f82:	a33a      	add	r3, pc, #232	; (adr r3, 800706c <__kernel_sin+0x16c>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 f97e 	bl	8000288 <__aeabi_dsub>
 8006f8c:	4652      	mov	r2, sl
 8006f8e:	465b      	mov	r3, fp
 8006f90:	f7f9 fb32 	bl	80005f8 <__aeabi_dmul>
 8006f94:	a337      	add	r3, pc, #220	; (adr r3, 8007074 <__kernel_sin+0x174>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f977 	bl	800028c <__adddf3>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	b9eb      	cbnz	r3, 8006fe2 <__kernel_sin+0xe2>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4650      	mov	r0, sl
 8006fac:	4659      	mov	r1, fp
 8006fae:	f7f9 fb23 	bl	80005f8 <__aeabi_dmul>
 8006fb2:	a325      	add	r3, pc, #148	; (adr r3, 8007048 <__kernel_sin+0x148>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 f966 	bl	8000288 <__aeabi_dsub>
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f7f9 fb1a 	bl	80005f8 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	ec45 4b10 	vmov	d0, r4, r5
 8006fd8:	b003      	add	sp, #12
 8006fda:	ecbd 8b04 	vpop	{d8-d9}
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <__kernel_sin+0x150>)
 8006fe4:	ec51 0b18 	vmov	r0, r1, d8
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f7f9 fb05 	bl	80005f8 <__aeabi_dmul>
 8006fee:	4632      	mov	r2, r6
 8006ff0:	ec41 0b19 	vmov	d9, r0, r1
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fafd 	bl	80005f8 <__aeabi_dmul>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	ec51 0b19 	vmov	r0, r1, d9
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	4652      	mov	r2, sl
 800700c:	465b      	mov	r3, fp
 800700e:	f7f9 faf3 	bl	80005f8 <__aeabi_dmul>
 8007012:	ec53 2b18 	vmov	r2, r3, d8
 8007016:	f7f9 f937 	bl	8000288 <__aeabi_dsub>
 800701a:	a30b      	add	r3, pc, #44	; (adr r3, 8007048 <__kernel_sin+0x148>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	4640      	mov	r0, r8
 8007026:	4649      	mov	r1, r9
 8007028:	f7f9 fae6 	bl	80005f8 <__aeabi_dmul>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4630      	mov	r0, r6
 8007032:	4639      	mov	r1, r7
 8007034:	f7f9 f92a 	bl	800028c <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f922 	bl	8000288 <__aeabi_dsub>
 8007044:	e7c4      	b.n	8006fd0 <__kernel_sin+0xd0>
 8007046:	bf00      	nop
 8007048:	55555549 	.word	0x55555549
 800704c:	3fc55555 	.word	0x3fc55555
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	5acfd57c 	.word	0x5acfd57c
 8007058:	3de5d93a 	.word	0x3de5d93a
 800705c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007060:	3e5ae5e6 	.word	0x3e5ae5e6
 8007064:	57b1fe7d 	.word	0x57b1fe7d
 8007068:	3ec71de3 	.word	0x3ec71de3
 800706c:	19c161d5 	.word	0x19c161d5
 8007070:	3f2a01a0 	.word	0x3f2a01a0
 8007074:	1110f8a6 	.word	0x1110f8a6
 8007078:	3f811111 	.word	0x3f811111

0800707c <fabs>:
 800707c:	ec51 0b10 	vmov	r0, r1, d0
 8007080:	ee10 2a10 	vmov	r2, s0
 8007084:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007088:	ec43 2b10 	vmov	d0, r2, r3
 800708c:	4770      	bx	lr
	...

08007090 <floor>:
 8007090:	ec51 0b10 	vmov	r0, r1, d0
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800709c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80070a0:	2e13      	cmp	r6, #19
 80070a2:	ee10 5a10 	vmov	r5, s0
 80070a6:	ee10 8a10 	vmov	r8, s0
 80070aa:	460c      	mov	r4, r1
 80070ac:	dc32      	bgt.n	8007114 <floor+0x84>
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	da14      	bge.n	80070dc <floor+0x4c>
 80070b2:	a333      	add	r3, pc, #204	; (adr r3, 8007180 <floor+0xf0>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 f8e8 	bl	800028c <__adddf3>
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	f7f9 fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80070c4:	b138      	cbz	r0, 80070d6 <floor+0x46>
 80070c6:	2c00      	cmp	r4, #0
 80070c8:	da57      	bge.n	800717a <floor+0xea>
 80070ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80070ce:	431d      	orrs	r5, r3
 80070d0:	d001      	beq.n	80070d6 <floor+0x46>
 80070d2:	4c2d      	ldr	r4, [pc, #180]	; (8007188 <floor+0xf8>)
 80070d4:	2500      	movs	r5, #0
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	e025      	b.n	8007128 <floor+0x98>
 80070dc:	4f2b      	ldr	r7, [pc, #172]	; (800718c <floor+0xfc>)
 80070de:	4137      	asrs	r7, r6
 80070e0:	ea01 0307 	and.w	r3, r1, r7
 80070e4:	4303      	orrs	r3, r0
 80070e6:	d01f      	beq.n	8007128 <floor+0x98>
 80070e8:	a325      	add	r3, pc, #148	; (adr r3, 8007180 <floor+0xf0>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f7f9 f8cd 	bl	800028c <__adddf3>
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fd0f 	bl	8000b18 <__aeabi_dcmpgt>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0eb      	beq.n	80070d6 <floor+0x46>
 80070fe:	2c00      	cmp	r4, #0
 8007100:	bfbe      	ittt	lt
 8007102:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007106:	fa43 f606 	asrlt.w	r6, r3, r6
 800710a:	19a4      	addlt	r4, r4, r6
 800710c:	ea24 0407 	bic.w	r4, r4, r7
 8007110:	2500      	movs	r5, #0
 8007112:	e7e0      	b.n	80070d6 <floor+0x46>
 8007114:	2e33      	cmp	r6, #51	; 0x33
 8007116:	dd0b      	ble.n	8007130 <floor+0xa0>
 8007118:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800711c:	d104      	bne.n	8007128 <floor+0x98>
 800711e:	ee10 2a10 	vmov	r2, s0
 8007122:	460b      	mov	r3, r1
 8007124:	f7f9 f8b2 	bl	800028c <__adddf3>
 8007128:	ec41 0b10 	vmov	d0, r0, r1
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007134:	f04f 33ff 	mov.w	r3, #4294967295
 8007138:	fa23 f707 	lsr.w	r7, r3, r7
 800713c:	4207      	tst	r7, r0
 800713e:	d0f3      	beq.n	8007128 <floor+0x98>
 8007140:	a30f      	add	r3, pc, #60	; (adr r3, 8007180 <floor+0xf0>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 f8a1 	bl	800028c <__adddf3>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	f7f9 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d0bf      	beq.n	80070d6 <floor+0x46>
 8007156:	2c00      	cmp	r4, #0
 8007158:	da02      	bge.n	8007160 <floor+0xd0>
 800715a:	2e14      	cmp	r6, #20
 800715c:	d103      	bne.n	8007166 <floor+0xd6>
 800715e:	3401      	adds	r4, #1
 8007160:	ea25 0507 	bic.w	r5, r5, r7
 8007164:	e7b7      	b.n	80070d6 <floor+0x46>
 8007166:	2301      	movs	r3, #1
 8007168:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800716c:	fa03 f606 	lsl.w	r6, r3, r6
 8007170:	4435      	add	r5, r6
 8007172:	4545      	cmp	r5, r8
 8007174:	bf38      	it	cc
 8007176:	18e4      	addcc	r4, r4, r3
 8007178:	e7f2      	b.n	8007160 <floor+0xd0>
 800717a:	2500      	movs	r5, #0
 800717c:	462c      	mov	r4, r5
 800717e:	e7aa      	b.n	80070d6 <floor+0x46>
 8007180:	8800759c 	.word	0x8800759c
 8007184:	7e37e43c 	.word	0x7e37e43c
 8007188:	bff00000 	.word	0xbff00000
 800718c:	000fffff 	.word	0x000fffff

08007190 <scalbn>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	ec55 4b10 	vmov	r4, r5, d0
 8007196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800719a:	4606      	mov	r6, r0
 800719c:	462b      	mov	r3, r5
 800719e:	b99a      	cbnz	r2, 80071c8 <scalbn+0x38>
 80071a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071a4:	4323      	orrs	r3, r4
 80071a6:	d036      	beq.n	8007216 <scalbn+0x86>
 80071a8:	4b39      	ldr	r3, [pc, #228]	; (8007290 <scalbn+0x100>)
 80071aa:	4629      	mov	r1, r5
 80071ac:	ee10 0a10 	vmov	r0, s0
 80071b0:	2200      	movs	r2, #0
 80071b2:	f7f9 fa21 	bl	80005f8 <__aeabi_dmul>
 80071b6:	4b37      	ldr	r3, [pc, #220]	; (8007294 <scalbn+0x104>)
 80071b8:	429e      	cmp	r6, r3
 80071ba:	4604      	mov	r4, r0
 80071bc:	460d      	mov	r5, r1
 80071be:	da10      	bge.n	80071e2 <scalbn+0x52>
 80071c0:	a32b      	add	r3, pc, #172	; (adr r3, 8007270 <scalbn+0xe0>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	e03a      	b.n	800723e <scalbn+0xae>
 80071c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80071cc:	428a      	cmp	r2, r1
 80071ce:	d10c      	bne.n	80071ea <scalbn+0x5a>
 80071d0:	ee10 2a10 	vmov	r2, s0
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7f9 f858 	bl	800028c <__adddf3>
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	e019      	b.n	8007216 <scalbn+0x86>
 80071e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071e6:	460b      	mov	r3, r1
 80071e8:	3a36      	subs	r2, #54	; 0x36
 80071ea:	4432      	add	r2, r6
 80071ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80071f0:	428a      	cmp	r2, r1
 80071f2:	dd08      	ble.n	8007206 <scalbn+0x76>
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	a120      	add	r1, pc, #128	; (adr r1, 8007278 <scalbn+0xe8>)
 80071f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fc:	da1c      	bge.n	8007238 <scalbn+0xa8>
 80071fe:	a120      	add	r1, pc, #128	; (adr r1, 8007280 <scalbn+0xf0>)
 8007200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007204:	e018      	b.n	8007238 <scalbn+0xa8>
 8007206:	2a00      	cmp	r2, #0
 8007208:	dd08      	ble.n	800721c <scalbn+0x8c>
 800720a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800720e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007216:	ec45 4b10 	vmov	d0, r4, r5
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007220:	da19      	bge.n	8007256 <scalbn+0xc6>
 8007222:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007226:	429e      	cmp	r6, r3
 8007228:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800722c:	dd0a      	ble.n	8007244 <scalbn+0xb4>
 800722e:	a112      	add	r1, pc, #72	; (adr r1, 8007278 <scalbn+0xe8>)
 8007230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e2      	bne.n	80071fe <scalbn+0x6e>
 8007238:	a30f      	add	r3, pc, #60	; (adr r3, 8007278 <scalbn+0xe8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f9db 	bl	80005f8 <__aeabi_dmul>
 8007242:	e7cb      	b.n	80071dc <scalbn+0x4c>
 8007244:	a10a      	add	r1, pc, #40	; (adr r1, 8007270 <scalbn+0xe0>)
 8007246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0b8      	beq.n	80071c0 <scalbn+0x30>
 800724e:	a10e      	add	r1, pc, #56	; (adr r1, 8007288 <scalbn+0xf8>)
 8007250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007254:	e7b4      	b.n	80071c0 <scalbn+0x30>
 8007256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800725a:	3236      	adds	r2, #54	; 0x36
 800725c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007260:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007264:	4620      	mov	r0, r4
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <scalbn+0x108>)
 8007268:	2200      	movs	r2, #0
 800726a:	e7e8      	b.n	800723e <scalbn+0xae>
 800726c:	f3af 8000 	nop.w
 8007270:	c2f8f359 	.word	0xc2f8f359
 8007274:	01a56e1f 	.word	0x01a56e1f
 8007278:	8800759c 	.word	0x8800759c
 800727c:	7e37e43c 	.word	0x7e37e43c
 8007280:	8800759c 	.word	0x8800759c
 8007284:	fe37e43c 	.word	0xfe37e43c
 8007288:	c2f8f359 	.word	0xc2f8f359
 800728c:	81a56e1f 	.word	0x81a56e1f
 8007290:	43500000 	.word	0x43500000
 8007294:	ffff3cb0 	.word	0xffff3cb0
 8007298:	3c900000 	.word	0x3c900000

0800729c <abort>:
 800729c:	b508      	push	{r3, lr}
 800729e:	2006      	movs	r0, #6
 80072a0:	f000 f96e 	bl	8007580 <raise>
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7fd fab7 	bl	8004818 <_exit>

080072aa <atexit>:
 80072aa:	2300      	movs	r3, #0
 80072ac:	4601      	mov	r1, r0
 80072ae:	461a      	mov	r2, r3
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 b9a1 	b.w	80075f8 <__register_exitproc>
	...

080072b8 <__errno>:
 80072b8:	4b01      	ldr	r3, [pc, #4]	; (80072c0 <__errno+0x8>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	2000000c 	.word	0x2000000c

080072c4 <__libc_init_array>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4d0d      	ldr	r5, [pc, #52]	; (80072fc <__libc_init_array+0x38>)
 80072c8:	4c0d      	ldr	r4, [pc, #52]	; (8007300 <__libc_init_array+0x3c>)
 80072ca:	1b64      	subs	r4, r4, r5
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	2600      	movs	r6, #0
 80072d0:	42a6      	cmp	r6, r4
 80072d2:	d109      	bne.n	80072e8 <__libc_init_array+0x24>
 80072d4:	4d0b      	ldr	r5, [pc, #44]	; (8007304 <__libc_init_array+0x40>)
 80072d6:	4c0c      	ldr	r4, [pc, #48]	; (8007308 <__libc_init_array+0x44>)
 80072d8:	f001 fa58 	bl	800878c <_init>
 80072dc:	1b64      	subs	r4, r4, r5
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	2600      	movs	r6, #0
 80072e2:	42a6      	cmp	r6, r4
 80072e4:	d105      	bne.n	80072f2 <__libc_init_array+0x2e>
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ec:	4798      	blx	r3
 80072ee:	3601      	adds	r6, #1
 80072f0:	e7ee      	b.n	80072d0 <__libc_init_array+0xc>
 80072f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f6:	4798      	blx	r3
 80072f8:	3601      	adds	r6, #1
 80072fa:	e7f2      	b.n	80072e2 <__libc_init_array+0x1e>
 80072fc:	08008c94 	.word	0x08008c94
 8007300:	08008c94 	.word	0x08008c94
 8007304:	08008c94 	.word	0x08008c94
 8007308:	08008c98 	.word	0x08008c98

0800730c <malloc>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <malloc+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f000 b863 	b.w	80073dc <_malloc_r>
 8007316:	bf00      	nop
 8007318:	2000000c 	.word	0x2000000c

0800731c <free>:
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <free+0xc>)
 800731e:	4601      	mov	r1, r0
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f000 b80b 	b.w	800733c <_free_r>
 8007326:	bf00      	nop
 8007328:	2000000c 	.word	0x2000000c

0800732c <memset>:
 800732c:	4402      	add	r2, r0
 800732e:	4603      	mov	r3, r0
 8007330:	4293      	cmp	r3, r2
 8007332:	d100      	bne.n	8007336 <memset+0xa>
 8007334:	4770      	bx	lr
 8007336:	f803 1b01 	strb.w	r1, [r3], #1
 800733a:	e7f9      	b.n	8007330 <memset+0x4>

0800733c <_free_r>:
 800733c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800733e:	2900      	cmp	r1, #0
 8007340:	d048      	beq.n	80073d4 <_free_r+0x98>
 8007342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007346:	9001      	str	r0, [sp, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f1a1 0404 	sub.w	r4, r1, #4
 800734e:	bfb8      	it	lt
 8007350:	18e4      	addlt	r4, r4, r3
 8007352:	f000 f9e7 	bl	8007724 <__malloc_lock>
 8007356:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <_free_r+0x9c>)
 8007358:	9801      	ldr	r0, [sp, #4]
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	4615      	mov	r5, r2
 800735e:	b933      	cbnz	r3, 800736e <_free_r+0x32>
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	6014      	str	r4, [r2, #0]
 8007364:	b003      	add	sp, #12
 8007366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800736a:	f000 b9e1 	b.w	8007730 <__malloc_unlock>
 800736e:	42a3      	cmp	r3, r4
 8007370:	d90b      	bls.n	800738a <_free_r+0x4e>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	1862      	adds	r2, r4, r1
 8007376:	4293      	cmp	r3, r2
 8007378:	bf04      	itt	eq
 800737a:	681a      	ldreq	r2, [r3, #0]
 800737c:	685b      	ldreq	r3, [r3, #4]
 800737e:	6063      	str	r3, [r4, #4]
 8007380:	bf04      	itt	eq
 8007382:	1852      	addeq	r2, r2, r1
 8007384:	6022      	streq	r2, [r4, #0]
 8007386:	602c      	str	r4, [r5, #0]
 8007388:	e7ec      	b.n	8007364 <_free_r+0x28>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x58>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x4e>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1855      	adds	r5, r2, r1
 8007398:	42a5      	cmp	r5, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x78>
 800739c:	6824      	ldr	r4, [r4, #0]
 800739e:	4421      	add	r1, r4
 80073a0:	1854      	adds	r4, r2, r1
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1dd      	bne.n	8007364 <_free_r+0x28>
 80073a8:	681c      	ldr	r4, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6053      	str	r3, [r2, #4]
 80073ae:	4421      	add	r1, r4
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	e7d7      	b.n	8007364 <_free_r+0x28>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x80>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	e7d3      	b.n	8007364 <_free_r+0x28>
 80073bc:	6825      	ldr	r5, [r4, #0]
 80073be:	1961      	adds	r1, r4, r5
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1949      	addeq	r1, r1, r5
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	6054      	str	r4, [r2, #4]
 80073d2:	e7c7      	b.n	8007364 <_free_r+0x28>
 80073d4:	b003      	add	sp, #12
 80073d6:	bd30      	pop	{r4, r5, pc}
 80073d8:	20002b84 	.word	0x20002b84

080073dc <_malloc_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	1ccd      	adds	r5, r1, #3
 80073e0:	f025 0503 	bic.w	r5, r5, #3
 80073e4:	3508      	adds	r5, #8
 80073e6:	2d0c      	cmp	r5, #12
 80073e8:	bf38      	it	cc
 80073ea:	250c      	movcc	r5, #12
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	4606      	mov	r6, r0
 80073f0:	db01      	blt.n	80073f6 <_malloc_r+0x1a>
 80073f2:	42a9      	cmp	r1, r5
 80073f4:	d903      	bls.n	80073fe <_malloc_r+0x22>
 80073f6:	230c      	movs	r3, #12
 80073f8:	6033      	str	r3, [r6, #0]
 80073fa:	2000      	movs	r0, #0
 80073fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fe:	f000 f991 	bl	8007724 <__malloc_lock>
 8007402:	4921      	ldr	r1, [pc, #132]	; (8007488 <_malloc_r+0xac>)
 8007404:	680a      	ldr	r2, [r1, #0]
 8007406:	4614      	mov	r4, r2
 8007408:	b99c      	cbnz	r4, 8007432 <_malloc_r+0x56>
 800740a:	4f20      	ldr	r7, [pc, #128]	; (800748c <_malloc_r+0xb0>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	b923      	cbnz	r3, 800741a <_malloc_r+0x3e>
 8007410:	4621      	mov	r1, r4
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f87c 	bl	8007510 <_sbrk_r>
 8007418:	6038      	str	r0, [r7, #0]
 800741a:	4629      	mov	r1, r5
 800741c:	4630      	mov	r0, r6
 800741e:	f000 f877 	bl	8007510 <_sbrk_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d123      	bne.n	800746e <_malloc_r+0x92>
 8007426:	230c      	movs	r3, #12
 8007428:	6033      	str	r3, [r6, #0]
 800742a:	4630      	mov	r0, r6
 800742c:	f000 f980 	bl	8007730 <__malloc_unlock>
 8007430:	e7e3      	b.n	80073fa <_malloc_r+0x1e>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	1b5b      	subs	r3, r3, r5
 8007436:	d417      	bmi.n	8007468 <_malloc_r+0x8c>
 8007438:	2b0b      	cmp	r3, #11
 800743a:	d903      	bls.n	8007444 <_malloc_r+0x68>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	441c      	add	r4, r3
 8007440:	6025      	str	r5, [r4, #0]
 8007442:	e004      	b.n	800744e <_malloc_r+0x72>
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	42a2      	cmp	r2, r4
 8007448:	bf0c      	ite	eq
 800744a:	600b      	streq	r3, [r1, #0]
 800744c:	6053      	strne	r3, [r2, #4]
 800744e:	4630      	mov	r0, r6
 8007450:	f000 f96e 	bl	8007730 <__malloc_unlock>
 8007454:	f104 000b 	add.w	r0, r4, #11
 8007458:	1d23      	adds	r3, r4, #4
 800745a:	f020 0007 	bic.w	r0, r0, #7
 800745e:	1ac2      	subs	r2, r0, r3
 8007460:	d0cc      	beq.n	80073fc <_malloc_r+0x20>
 8007462:	1a1b      	subs	r3, r3, r0
 8007464:	50a3      	str	r3, [r4, r2]
 8007466:	e7c9      	b.n	80073fc <_malloc_r+0x20>
 8007468:	4622      	mov	r2, r4
 800746a:	6864      	ldr	r4, [r4, #4]
 800746c:	e7cc      	b.n	8007408 <_malloc_r+0x2c>
 800746e:	1cc4      	adds	r4, r0, #3
 8007470:	f024 0403 	bic.w	r4, r4, #3
 8007474:	42a0      	cmp	r0, r4
 8007476:	d0e3      	beq.n	8007440 <_malloc_r+0x64>
 8007478:	1a21      	subs	r1, r4, r0
 800747a:	4630      	mov	r0, r6
 800747c:	f000 f848 	bl	8007510 <_sbrk_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d1dd      	bne.n	8007440 <_malloc_r+0x64>
 8007484:	e7cf      	b.n	8007426 <_malloc_r+0x4a>
 8007486:	bf00      	nop
 8007488:	20002b84 	.word	0x20002b84
 800748c:	20002b88 	.word	0x20002b88

08007490 <rand>:
 8007490:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <rand+0x60>)
 8007492:	b510      	push	{r4, lr}
 8007494:	681c      	ldr	r4, [r3, #0]
 8007496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007498:	b9b3      	cbnz	r3, 80074c8 <rand+0x38>
 800749a:	2018      	movs	r0, #24
 800749c:	f7ff ff36 	bl	800730c <malloc>
 80074a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80074a2:	b928      	cbnz	r0, 80074b0 <rand+0x20>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <rand+0x64>)
 80074a8:	4813      	ldr	r0, [pc, #76]	; (80074f8 <rand+0x68>)
 80074aa:	214e      	movs	r1, #78	; 0x4e
 80074ac:	f000 f906 	bl	80076bc <__assert_func>
 80074b0:	4a12      	ldr	r2, [pc, #72]	; (80074fc <rand+0x6c>)
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <rand+0x70>)
 80074b4:	e9c0 2300 	strd	r2, r3, [r0]
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <rand+0x74>)
 80074ba:	6083      	str	r3, [r0, #8]
 80074bc:	230b      	movs	r3, #11
 80074be:	8183      	strh	r3, [r0, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	2300      	movs	r3, #0
 80074c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80074c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074ca:	480f      	ldr	r0, [pc, #60]	; (8007508 <rand+0x78>)
 80074cc:	690a      	ldr	r2, [r1, #16]
 80074ce:	694b      	ldr	r3, [r1, #20]
 80074d0:	4c0e      	ldr	r4, [pc, #56]	; (800750c <rand+0x7c>)
 80074d2:	4350      	muls	r0, r2
 80074d4:	fb04 0003 	mla	r0, r4, r3, r0
 80074d8:	fba2 3404 	umull	r3, r4, r2, r4
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	4404      	add	r4, r0
 80074e0:	f144 0000 	adc.w	r0, r4, #0
 80074e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80074e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	bf00      	nop
 80074f0:	2000000c 	.word	0x2000000c
 80074f4:	08008b44 	.word	0x08008b44
 80074f8:	08008b5b 	.word	0x08008b5b
 80074fc:	abcd330e 	.word	0xabcd330e
 8007500:	e66d1234 	.word	0xe66d1234
 8007504:	0005deec 	.word	0x0005deec
 8007508:	5851f42d 	.word	0x5851f42d
 800750c:	4c957f2d 	.word	0x4c957f2d

08007510 <_sbrk_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d06      	ldr	r5, [pc, #24]	; (800752c <_sbrk_r+0x1c>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7fd f9f4 	bl	8004908 <_sbrk>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_sbrk_r+0x1a>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_sbrk_r+0x1a>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20002c2c 	.word	0x20002c2c

08007530 <_raise_r>:
 8007530:	291f      	cmp	r1, #31
 8007532:	b538      	push	{r3, r4, r5, lr}
 8007534:	4604      	mov	r4, r0
 8007536:	460d      	mov	r5, r1
 8007538:	d904      	bls.n	8007544 <_raise_r+0x14>
 800753a:	2316      	movs	r3, #22
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007546:	b112      	cbz	r2, 800754e <_raise_r+0x1e>
 8007548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800754c:	b94b      	cbnz	r3, 8007562 <_raise_r+0x32>
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f830 	bl	80075b4 <_getpid_r>
 8007554:	462a      	mov	r2, r5
 8007556:	4601      	mov	r1, r0
 8007558:	4620      	mov	r0, r4
 800755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755e:	f000 b817 	b.w	8007590 <_kill_r>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00a      	beq.n	800757c <_raise_r+0x4c>
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	d103      	bne.n	8007572 <_raise_r+0x42>
 800756a:	2316      	movs	r3, #22
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	2001      	movs	r0, #1
 8007570:	e7e7      	b.n	8007542 <_raise_r+0x12>
 8007572:	2400      	movs	r4, #0
 8007574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007578:	4628      	mov	r0, r5
 800757a:	4798      	blx	r3
 800757c:	2000      	movs	r0, #0
 800757e:	e7e0      	b.n	8007542 <_raise_r+0x12>

08007580 <raise>:
 8007580:	4b02      	ldr	r3, [pc, #8]	; (800758c <raise+0xc>)
 8007582:	4601      	mov	r1, r0
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	f7ff bfd3 	b.w	8007530 <_raise_r>
 800758a:	bf00      	nop
 800758c:	2000000c 	.word	0x2000000c

08007590 <_kill_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_kill_r+0x20>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	f7fd f92b 	bl	80047f8 <_kill>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d102      	bne.n	80075ac <_kill_r+0x1c>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	b103      	cbz	r3, 80075ac <_kill_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	20002c2c 	.word	0x20002c2c

080075b4 <_getpid_r>:
 80075b4:	f7fd b918 	b.w	80047e8 <_getpid>

080075b8 <_vsiprintf_r>:
 80075b8:	b500      	push	{lr}
 80075ba:	b09b      	sub	sp, #108	; 0x6c
 80075bc:	9100      	str	r1, [sp, #0]
 80075be:	9104      	str	r1, [sp, #16]
 80075c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075c4:	9105      	str	r1, [sp, #20]
 80075c6:	9102      	str	r1, [sp, #8]
 80075c8:	4905      	ldr	r1, [pc, #20]	; (80075e0 <_vsiprintf_r+0x28>)
 80075ca:	9103      	str	r1, [sp, #12]
 80075cc:	4669      	mov	r1, sp
 80075ce:	f000 f911 	bl	80077f4 <_svfiprintf_r>
 80075d2:	9b00      	ldr	r3, [sp, #0]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	b01b      	add	sp, #108	; 0x6c
 80075da:	f85d fb04 	ldr.w	pc, [sp], #4
 80075de:	bf00      	nop
 80075e0:	ffff0208 	.word	0xffff0208

080075e4 <vsiprintf>:
 80075e4:	4613      	mov	r3, r2
 80075e6:	460a      	mov	r2, r1
 80075e8:	4601      	mov	r1, r0
 80075ea:	4802      	ldr	r0, [pc, #8]	; (80075f4 <vsiprintf+0x10>)
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f7ff bfe3 	b.w	80075b8 <_vsiprintf_r>
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c

080075f8 <__register_exitproc>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80076b8 <__register_exitproc+0xc0>
 8007600:	4606      	mov	r6, r0
 8007602:	f8d8 0000 	ldr.w	r0, [r8]
 8007606:	461f      	mov	r7, r3
 8007608:	460d      	mov	r5, r1
 800760a:	4691      	mov	r9, r2
 800760c:	f000 f887 	bl	800771e <__retarget_lock_acquire_recursive>
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <__register_exitproc+0xb0>)
 8007612:	681c      	ldr	r4, [r3, #0]
 8007614:	b934      	cbnz	r4, 8007624 <__register_exitproc+0x2c>
 8007616:	4c25      	ldr	r4, [pc, #148]	; (80076ac <__register_exitproc+0xb4>)
 8007618:	601c      	str	r4, [r3, #0]
 800761a:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <__register_exitproc+0xb8>)
 800761c:	b113      	cbz	r3, 8007624 <__register_exitproc+0x2c>
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	2b1f      	cmp	r3, #31
 8007628:	dd07      	ble.n	800763a <__register_exitproc+0x42>
 800762a:	f8d8 0000 	ldr.w	r0, [r8]
 800762e:	f000 f878 	bl	8007722 <__retarget_lock_release_recursive>
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763a:	b34e      	cbz	r6, 8007690 <__register_exitproc+0x98>
 800763c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007640:	b988      	cbnz	r0, 8007666 <__register_exitproc+0x6e>
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <__register_exitproc+0xbc>)
 8007644:	b923      	cbnz	r3, 8007650 <__register_exitproc+0x58>
 8007646:	f8d8 0000 	ldr.w	r0, [r8]
 800764a:	f000 f869 	bl	8007720 <__retarget_lock_release>
 800764e:	e7f0      	b.n	8007632 <__register_exitproc+0x3a>
 8007650:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007654:	f7ff fe5a 	bl	800730c <malloc>
 8007658:	2800      	cmp	r0, #0
 800765a:	d0f4      	beq.n	8007646 <__register_exitproc+0x4e>
 800765c:	2300      	movs	r3, #0
 800765e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007662:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007674:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007678:	4313      	orrs	r3, r2
 800767a:	2e02      	cmp	r6, #2
 800767c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007680:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007684:	bf02      	ittt	eq
 8007686:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800768a:	431a      	orreq	r2, r3
 800768c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	f8d8 0000 	ldr.w	r0, [r8]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	3302      	adds	r3, #2
 800769a:	6062      	str	r2, [r4, #4]
 800769c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80076a0:	f000 f83f 	bl	8007722 <__retarget_lock_release_recursive>
 80076a4:	2000      	movs	r0, #0
 80076a6:	e7c6      	b.n	8007636 <__register_exitproc+0x3e>
 80076a8:	20002c18 	.word	0x20002c18
 80076ac:	20002b8c 	.word	0x20002b8c
 80076b0:	00000000 	.word	0x00000000
 80076b4:	0800730d 	.word	0x0800730d
 80076b8:	20000070 	.word	0x20000070

080076bc <__assert_func>:
 80076bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076be:	4614      	mov	r4, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <__assert_func+0x2c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4605      	mov	r5, r0
 80076c8:	68d8      	ldr	r0, [r3, #12]
 80076ca:	b14c      	cbz	r4, 80076e0 <__assert_func+0x24>
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <__assert_func+0x30>)
 80076ce:	9100      	str	r1, [sp, #0]
 80076d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d4:	4906      	ldr	r1, [pc, #24]	; (80076f0 <__assert_func+0x34>)
 80076d6:	462b      	mov	r3, r5
 80076d8:	f000 f80e 	bl	80076f8 <fiprintf>
 80076dc:	f7ff fdde 	bl	800729c <abort>
 80076e0:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <__assert_func+0x38>)
 80076e2:	461c      	mov	r4, r3
 80076e4:	e7f3      	b.n	80076ce <__assert_func+0x12>
 80076e6:	bf00      	nop
 80076e8:	2000000c 	.word	0x2000000c
 80076ec:	08008bba 	.word	0x08008bba
 80076f0:	08008bc7 	.word	0x08008bc7
 80076f4:	08008bf5 	.word	0x08008bf5

080076f8 <fiprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b503      	push	{r0, r1, lr}
 80076fc:	4601      	mov	r1, r0
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <fiprintf+0x20>)
 8007702:	f853 2b04 	ldr.w	r2, [r3], #4
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	f000 f99d 	bl	8007a48 <_vfiprintf_r>
 800770e:	b002      	add	sp, #8
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
 8007714:	b003      	add	sp, #12
 8007716:	4770      	bx	lr
 8007718:	2000000c 	.word	0x2000000c

0800771c <__retarget_lock_init_recursive>:
 800771c:	4770      	bx	lr

0800771e <__retarget_lock_acquire_recursive>:
 800771e:	4770      	bx	lr

08007720 <__retarget_lock_release>:
 8007720:	4770      	bx	lr

08007722 <__retarget_lock_release_recursive>:
 8007722:	4770      	bx	lr

08007724 <__malloc_lock>:
 8007724:	4801      	ldr	r0, [pc, #4]	; (800772c <__malloc_lock+0x8>)
 8007726:	f7ff bffa 	b.w	800771e <__retarget_lock_acquire_recursive>
 800772a:	bf00      	nop
 800772c:	20002c24 	.word	0x20002c24

08007730 <__malloc_unlock>:
 8007730:	4801      	ldr	r0, [pc, #4]	; (8007738 <__malloc_unlock+0x8>)
 8007732:	f7ff bff6 	b.w	8007722 <__retarget_lock_release_recursive>
 8007736:	bf00      	nop
 8007738:	20002c24 	.word	0x20002c24

0800773c <__ssputs_r>:
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	688e      	ldr	r6, [r1, #8]
 8007742:	429e      	cmp	r6, r3
 8007744:	4682      	mov	sl, r0
 8007746:	460c      	mov	r4, r1
 8007748:	4690      	mov	r8, r2
 800774a:	461f      	mov	r7, r3
 800774c:	d838      	bhi.n	80077c0 <__ssputs_r+0x84>
 800774e:	898a      	ldrh	r2, [r1, #12]
 8007750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007754:	d032      	beq.n	80077bc <__ssputs_r+0x80>
 8007756:	6825      	ldr	r5, [r4, #0]
 8007758:	6909      	ldr	r1, [r1, #16]
 800775a:	eba5 0901 	sub.w	r9, r5, r1
 800775e:	6965      	ldr	r5, [r4, #20]
 8007760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007768:	3301      	adds	r3, #1
 800776a:	444b      	add	r3, r9
 800776c:	106d      	asrs	r5, r5, #1
 800776e:	429d      	cmp	r5, r3
 8007770:	bf38      	it	cc
 8007772:	461d      	movcc	r5, r3
 8007774:	0553      	lsls	r3, r2, #21
 8007776:	d531      	bpl.n	80077dc <__ssputs_r+0xa0>
 8007778:	4629      	mov	r1, r5
 800777a:	f7ff fe2f 	bl	80073dc <_malloc_r>
 800777e:	4606      	mov	r6, r0
 8007780:	b950      	cbnz	r0, 8007798 <__ssputs_r+0x5c>
 8007782:	230c      	movs	r3, #12
 8007784:	f8ca 3000 	str.w	r3, [sl]
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007798:	6921      	ldr	r1, [r4, #16]
 800779a:	464a      	mov	r2, r9
 800779c:	f000 fef4 	bl	8008588 <memcpy>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	6165      	str	r5, [r4, #20]
 80077b0:	444e      	add	r6, r9
 80077b2:	eba5 0509 	sub.w	r5, r5, r9
 80077b6:	6026      	str	r6, [r4, #0]
 80077b8:	60a5      	str	r5, [r4, #8]
 80077ba:	463e      	mov	r6, r7
 80077bc:	42be      	cmp	r6, r7
 80077be:	d900      	bls.n	80077c2 <__ssputs_r+0x86>
 80077c0:	463e      	mov	r6, r7
 80077c2:	4632      	mov	r2, r6
 80077c4:	6820      	ldr	r0, [r4, #0]
 80077c6:	4641      	mov	r1, r8
 80077c8:	f000 feec 	bl	80085a4 <memmove>
 80077cc:	68a3      	ldr	r3, [r4, #8]
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	1b9b      	subs	r3, r3, r6
 80077d2:	4432      	add	r2, r6
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	2000      	movs	r0, #0
 80077da:	e7db      	b.n	8007794 <__ssputs_r+0x58>
 80077dc:	462a      	mov	r2, r5
 80077de:	f000 fefb 	bl	80085d8 <_realloc_r>
 80077e2:	4606      	mov	r6, r0
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d1e1      	bne.n	80077ac <__ssputs_r+0x70>
 80077e8:	6921      	ldr	r1, [r4, #16]
 80077ea:	4650      	mov	r0, sl
 80077ec:	f7ff fda6 	bl	800733c <_free_r>
 80077f0:	e7c7      	b.n	8007782 <__ssputs_r+0x46>
	...

080077f4 <_svfiprintf_r>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	4698      	mov	r8, r3
 80077fa:	898b      	ldrh	r3, [r1, #12]
 80077fc:	061b      	lsls	r3, r3, #24
 80077fe:	b09d      	sub	sp, #116	; 0x74
 8007800:	4607      	mov	r7, r0
 8007802:	460d      	mov	r5, r1
 8007804:	4614      	mov	r4, r2
 8007806:	d50e      	bpl.n	8007826 <_svfiprintf_r+0x32>
 8007808:	690b      	ldr	r3, [r1, #16]
 800780a:	b963      	cbnz	r3, 8007826 <_svfiprintf_r+0x32>
 800780c:	2140      	movs	r1, #64	; 0x40
 800780e:	f7ff fde5 	bl	80073dc <_malloc_r>
 8007812:	6028      	str	r0, [r5, #0]
 8007814:	6128      	str	r0, [r5, #16]
 8007816:	b920      	cbnz	r0, 8007822 <_svfiprintf_r+0x2e>
 8007818:	230c      	movs	r3, #12
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e0d1      	b.n	80079c6 <_svfiprintf_r+0x1d2>
 8007822:	2340      	movs	r3, #64	; 0x40
 8007824:	616b      	str	r3, [r5, #20]
 8007826:	2300      	movs	r3, #0
 8007828:	9309      	str	r3, [sp, #36]	; 0x24
 800782a:	2320      	movs	r3, #32
 800782c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007830:	f8cd 800c 	str.w	r8, [sp, #12]
 8007834:	2330      	movs	r3, #48	; 0x30
 8007836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079e0 <_svfiprintf_r+0x1ec>
 800783a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800783e:	f04f 0901 	mov.w	r9, #1
 8007842:	4623      	mov	r3, r4
 8007844:	469a      	mov	sl, r3
 8007846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800784a:	b10a      	cbz	r2, 8007850 <_svfiprintf_r+0x5c>
 800784c:	2a25      	cmp	r2, #37	; 0x25
 800784e:	d1f9      	bne.n	8007844 <_svfiprintf_r+0x50>
 8007850:	ebba 0b04 	subs.w	fp, sl, r4
 8007854:	d00b      	beq.n	800786e <_svfiprintf_r+0x7a>
 8007856:	465b      	mov	r3, fp
 8007858:	4622      	mov	r2, r4
 800785a:	4629      	mov	r1, r5
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff ff6d 	bl	800773c <__ssputs_r>
 8007862:	3001      	adds	r0, #1
 8007864:	f000 80aa 	beq.w	80079bc <_svfiprintf_r+0x1c8>
 8007868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800786a:	445a      	add	r2, fp
 800786c:	9209      	str	r2, [sp, #36]	; 0x24
 800786e:	f89a 3000 	ldrb.w	r3, [sl]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80a2 	beq.w	80079bc <_svfiprintf_r+0x1c8>
 8007878:	2300      	movs	r3, #0
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007882:	f10a 0a01 	add.w	sl, sl, #1
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	9307      	str	r3, [sp, #28]
 800788a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800788e:	931a      	str	r3, [sp, #104]	; 0x68
 8007890:	4654      	mov	r4, sl
 8007892:	2205      	movs	r2, #5
 8007894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007898:	4851      	ldr	r0, [pc, #324]	; (80079e0 <_svfiprintf_r+0x1ec>)
 800789a:	f7f8 fca1 	bl	80001e0 <memchr>
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	b9d8      	cbnz	r0, 80078da <_svfiprintf_r+0xe6>
 80078a2:	06d0      	lsls	r0, r2, #27
 80078a4:	bf44      	itt	mi
 80078a6:	2320      	movmi	r3, #32
 80078a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ac:	0711      	lsls	r1, r2, #28
 80078ae:	bf44      	itt	mi
 80078b0:	232b      	movmi	r3, #43	; 0x2b
 80078b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d015      	beq.n	80078ea <_svfiprintf_r+0xf6>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	4654      	mov	r4, sl
 80078c2:	2000      	movs	r0, #0
 80078c4:	f04f 0c0a 	mov.w	ip, #10
 80078c8:	4621      	mov	r1, r4
 80078ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ce:	3b30      	subs	r3, #48	; 0x30
 80078d0:	2b09      	cmp	r3, #9
 80078d2:	d94e      	bls.n	8007972 <_svfiprintf_r+0x17e>
 80078d4:	b1b0      	cbz	r0, 8007904 <_svfiprintf_r+0x110>
 80078d6:	9207      	str	r2, [sp, #28]
 80078d8:	e014      	b.n	8007904 <_svfiprintf_r+0x110>
 80078da:	eba0 0308 	sub.w	r3, r0, r8
 80078de:	fa09 f303 	lsl.w	r3, r9, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	46a2      	mov	sl, r4
 80078e8:	e7d2      	b.n	8007890 <_svfiprintf_r+0x9c>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	1d19      	adds	r1, r3, #4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	9103      	str	r1, [sp, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bfbb      	ittet	lt
 80078f6:	425b      	neglt	r3, r3
 80078f8:	f042 0202 	orrlt.w	r2, r2, #2
 80078fc:	9307      	strge	r3, [sp, #28]
 80078fe:	9307      	strlt	r3, [sp, #28]
 8007900:	bfb8      	it	lt
 8007902:	9204      	strlt	r2, [sp, #16]
 8007904:	7823      	ldrb	r3, [r4, #0]
 8007906:	2b2e      	cmp	r3, #46	; 0x2e
 8007908:	d10c      	bne.n	8007924 <_svfiprintf_r+0x130>
 800790a:	7863      	ldrb	r3, [r4, #1]
 800790c:	2b2a      	cmp	r3, #42	; 0x2a
 800790e:	d135      	bne.n	800797c <_svfiprintf_r+0x188>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9203      	str	r2, [sp, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfb8      	it	lt
 800791c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007920:	3402      	adds	r4, #2
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079f0 <_svfiprintf_r+0x1fc>
 8007928:	7821      	ldrb	r1, [r4, #0]
 800792a:	2203      	movs	r2, #3
 800792c:	4650      	mov	r0, sl
 800792e:	f7f8 fc57 	bl	80001e0 <memchr>
 8007932:	b140      	cbz	r0, 8007946 <_svfiprintf_r+0x152>
 8007934:	2340      	movs	r3, #64	; 0x40
 8007936:	eba0 000a 	sub.w	r0, r0, sl
 800793a:	fa03 f000 	lsl.w	r0, r3, r0
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	4303      	orrs	r3, r0
 8007942:	3401      	adds	r4, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794a:	4826      	ldr	r0, [pc, #152]	; (80079e4 <_svfiprintf_r+0x1f0>)
 800794c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007950:	2206      	movs	r2, #6
 8007952:	f7f8 fc45 	bl	80001e0 <memchr>
 8007956:	2800      	cmp	r0, #0
 8007958:	d038      	beq.n	80079cc <_svfiprintf_r+0x1d8>
 800795a:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <_svfiprintf_r+0x1f4>)
 800795c:	bb1b      	cbnz	r3, 80079a6 <_svfiprintf_r+0x1b2>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	3307      	adds	r3, #7
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	3308      	adds	r3, #8
 8007968:	9303      	str	r3, [sp, #12]
 800796a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796c:	4433      	add	r3, r6
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
 8007970:	e767      	b.n	8007842 <_svfiprintf_r+0x4e>
 8007972:	fb0c 3202 	mla	r2, ip, r2, r3
 8007976:	460c      	mov	r4, r1
 8007978:	2001      	movs	r0, #1
 800797a:	e7a5      	b.n	80078c8 <_svfiprintf_r+0xd4>
 800797c:	2300      	movs	r3, #0
 800797e:	3401      	adds	r4, #1
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	4619      	mov	r1, r3
 8007984:	f04f 0c0a 	mov.w	ip, #10
 8007988:	4620      	mov	r0, r4
 800798a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798e:	3a30      	subs	r2, #48	; 0x30
 8007990:	2a09      	cmp	r2, #9
 8007992:	d903      	bls.n	800799c <_svfiprintf_r+0x1a8>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0c5      	beq.n	8007924 <_svfiprintf_r+0x130>
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	e7c3      	b.n	8007924 <_svfiprintf_r+0x130>
 800799c:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a0:	4604      	mov	r4, r0
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7f0      	b.n	8007988 <_svfiprintf_r+0x194>
 80079a6:	ab03      	add	r3, sp, #12
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	462a      	mov	r2, r5
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <_svfiprintf_r+0x1f8>)
 80079ae:	a904      	add	r1, sp, #16
 80079b0:	4638      	mov	r0, r7
 80079b2:	f3af 8000 	nop.w
 80079b6:	1c42      	adds	r2, r0, #1
 80079b8:	4606      	mov	r6, r0
 80079ba:	d1d6      	bne.n	800796a <_svfiprintf_r+0x176>
 80079bc:	89ab      	ldrh	r3, [r5, #12]
 80079be:	065b      	lsls	r3, r3, #25
 80079c0:	f53f af2c 	bmi.w	800781c <_svfiprintf_r+0x28>
 80079c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c6:	b01d      	add	sp, #116	; 0x74
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	ab03      	add	r3, sp, #12
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	462a      	mov	r2, r5
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <_svfiprintf_r+0x1f8>)
 80079d4:	a904      	add	r1, sp, #16
 80079d6:	4638      	mov	r0, r7
 80079d8:	f000 f9d4 	bl	8007d84 <_printf_i>
 80079dc:	e7eb      	b.n	80079b6 <_svfiprintf_r+0x1c2>
 80079de:	bf00      	nop
 80079e0:	08008bf6 	.word	0x08008bf6
 80079e4:	08008c00 	.word	0x08008c00
 80079e8:	00000000 	.word	0x00000000
 80079ec:	0800773d 	.word	0x0800773d
 80079f0:	08008bfc 	.word	0x08008bfc

080079f4 <__sfputc_r>:
 80079f4:	6893      	ldr	r3, [r2, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	b410      	push	{r4}
 80079fc:	6093      	str	r3, [r2, #8]
 80079fe:	da08      	bge.n	8007a12 <__sfputc_r+0x1e>
 8007a00:	6994      	ldr	r4, [r2, #24]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	db01      	blt.n	8007a0a <__sfputc_r+0x16>
 8007a06:	290a      	cmp	r1, #10
 8007a08:	d103      	bne.n	8007a12 <__sfputc_r+0x1e>
 8007a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0e:	f000 badf 	b.w	8007fd0 <__swbuf_r>
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	1c58      	adds	r0, r3, #1
 8007a16:	6010      	str	r0, [r2, #0]
 8007a18:	7019      	strb	r1, [r3, #0]
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <__sfputs_r>:
 8007a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	18d5      	adds	r5, r2, r3
 8007a2c:	42ac      	cmp	r4, r5
 8007a2e:	d101      	bne.n	8007a34 <__sfputs_r+0x12>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e007      	b.n	8007a44 <__sfputs_r+0x22>
 8007a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffda 	bl	80079f4 <__sfputc_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d1f3      	bne.n	8007a2c <__sfputs_r+0xa>
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a48 <_vfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	b09d      	sub	sp, #116	; 0x74
 8007a50:	4614      	mov	r4, r2
 8007a52:	4698      	mov	r8, r3
 8007a54:	4606      	mov	r6, r0
 8007a56:	b118      	cbz	r0, 8007a60 <_vfiprintf_r+0x18>
 8007a58:	6983      	ldr	r3, [r0, #24]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x18>
 8007a5c:	f000 fc92 	bl	8008384 <__sinit>
 8007a60:	4b89      	ldr	r3, [pc, #548]	; (8007c88 <_vfiprintf_r+0x240>)
 8007a62:	429d      	cmp	r5, r3
 8007a64:	d11b      	bne.n	8007a9e <_vfiprintf_r+0x56>
 8007a66:	6875      	ldr	r5, [r6, #4]
 8007a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a6a:	07d9      	lsls	r1, r3, #31
 8007a6c:	d405      	bmi.n	8007a7a <_vfiprintf_r+0x32>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	059a      	lsls	r2, r3, #22
 8007a72:	d402      	bmi.n	8007a7a <_vfiprintf_r+0x32>
 8007a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a76:	f7ff fe52 	bl	800771e <__retarget_lock_acquire_recursive>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	d501      	bpl.n	8007a84 <_vfiprintf_r+0x3c>
 8007a80:	692b      	ldr	r3, [r5, #16]
 8007a82:	b9eb      	cbnz	r3, 8007ac0 <_vfiprintf_r+0x78>
 8007a84:	4629      	mov	r1, r5
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 faf4 	bl	8008074 <__swsetup_r>
 8007a8c:	b1c0      	cbz	r0, 8007ac0 <_vfiprintf_r+0x78>
 8007a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a90:	07dc      	lsls	r4, r3, #31
 8007a92:	d50e      	bpl.n	8007ab2 <_vfiprintf_r+0x6a>
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295
 8007a98:	b01d      	add	sp, #116	; 0x74
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	4b7b      	ldr	r3, [pc, #492]	; (8007c8c <_vfiprintf_r+0x244>)
 8007aa0:	429d      	cmp	r5, r3
 8007aa2:	d101      	bne.n	8007aa8 <_vfiprintf_r+0x60>
 8007aa4:	68b5      	ldr	r5, [r6, #8]
 8007aa6:	e7df      	b.n	8007a68 <_vfiprintf_r+0x20>
 8007aa8:	4b79      	ldr	r3, [pc, #484]	; (8007c90 <_vfiprintf_r+0x248>)
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	bf08      	it	eq
 8007aae:	68f5      	ldreq	r5, [r6, #12]
 8007ab0:	e7da      	b.n	8007a68 <_vfiprintf_r+0x20>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	0598      	lsls	r0, r3, #22
 8007ab6:	d4ed      	bmi.n	8007a94 <_vfiprintf_r+0x4c>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aba:	f7ff fe32 	bl	8007722 <__retarget_lock_release_recursive>
 8007abe:	e7e9      	b.n	8007a94 <_vfiprintf_r+0x4c>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ace:	2330      	movs	r3, #48	; 0x30
 8007ad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c94 <_vfiprintf_r+0x24c>
 8007ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ad8:	f04f 0901 	mov.w	r9, #1
 8007adc:	4623      	mov	r3, r4
 8007ade:	469a      	mov	sl, r3
 8007ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae4:	b10a      	cbz	r2, 8007aea <_vfiprintf_r+0xa2>
 8007ae6:	2a25      	cmp	r2, #37	; 0x25
 8007ae8:	d1f9      	bne.n	8007ade <_vfiprintf_r+0x96>
 8007aea:	ebba 0b04 	subs.w	fp, sl, r4
 8007aee:	d00b      	beq.n	8007b08 <_vfiprintf_r+0xc0>
 8007af0:	465b      	mov	r3, fp
 8007af2:	4622      	mov	r2, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7ff ff93 	bl	8007a22 <__sfputs_r>
 8007afc:	3001      	adds	r0, #1
 8007afe:	f000 80aa 	beq.w	8007c56 <_vfiprintf_r+0x20e>
 8007b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b04:	445a      	add	r2, fp
 8007b06:	9209      	str	r2, [sp, #36]	; 0x24
 8007b08:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80a2 	beq.w	8007c56 <_vfiprintf_r+0x20e>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f04f 32ff 	mov.w	r2, #4294967295
 8007b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1c:	f10a 0a01 	add.w	sl, sl, #1
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	9307      	str	r3, [sp, #28]
 8007b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b28:	931a      	str	r3, [sp, #104]	; 0x68
 8007b2a:	4654      	mov	r4, sl
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b32:	4858      	ldr	r0, [pc, #352]	; (8007c94 <_vfiprintf_r+0x24c>)
 8007b34:	f7f8 fb54 	bl	80001e0 <memchr>
 8007b38:	9a04      	ldr	r2, [sp, #16]
 8007b3a:	b9d8      	cbnz	r0, 8007b74 <_vfiprintf_r+0x12c>
 8007b3c:	06d1      	lsls	r1, r2, #27
 8007b3e:	bf44      	itt	mi
 8007b40:	2320      	movmi	r3, #32
 8007b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b46:	0713      	lsls	r3, r2, #28
 8007b48:	bf44      	itt	mi
 8007b4a:	232b      	movmi	r3, #43	; 0x2b
 8007b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b50:	f89a 3000 	ldrb.w	r3, [sl]
 8007b54:	2b2a      	cmp	r3, #42	; 0x2a
 8007b56:	d015      	beq.n	8007b84 <_vfiprintf_r+0x13c>
 8007b58:	9a07      	ldr	r2, [sp, #28]
 8007b5a:	4654      	mov	r4, sl
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f04f 0c0a 	mov.w	ip, #10
 8007b62:	4621      	mov	r1, r4
 8007b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b68:	3b30      	subs	r3, #48	; 0x30
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	d94e      	bls.n	8007c0c <_vfiprintf_r+0x1c4>
 8007b6e:	b1b0      	cbz	r0, 8007b9e <_vfiprintf_r+0x156>
 8007b70:	9207      	str	r2, [sp, #28]
 8007b72:	e014      	b.n	8007b9e <_vfiprintf_r+0x156>
 8007b74:	eba0 0308 	sub.w	r3, r0, r8
 8007b78:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	46a2      	mov	sl, r4
 8007b82:	e7d2      	b.n	8007b2a <_vfiprintf_r+0xe2>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1d19      	adds	r1, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	9103      	str	r1, [sp, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfbb      	ittet	lt
 8007b90:	425b      	neglt	r3, r3
 8007b92:	f042 0202 	orrlt.w	r2, r2, #2
 8007b96:	9307      	strge	r3, [sp, #28]
 8007b98:	9307      	strlt	r3, [sp, #28]
 8007b9a:	bfb8      	it	lt
 8007b9c:	9204      	strlt	r2, [sp, #16]
 8007b9e:	7823      	ldrb	r3, [r4, #0]
 8007ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba2:	d10c      	bne.n	8007bbe <_vfiprintf_r+0x176>
 8007ba4:	7863      	ldrb	r3, [r4, #1]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	d135      	bne.n	8007c16 <_vfiprintf_r+0x1ce>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	9203      	str	r2, [sp, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb8      	it	lt
 8007bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bba:	3402      	adds	r4, #2
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ca4 <_vfiprintf_r+0x25c>
 8007bc2:	7821      	ldrb	r1, [r4, #0]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	f7f8 fb0a 	bl	80001e0 <memchr>
 8007bcc:	b140      	cbz	r0, 8007be0 <_vfiprintf_r+0x198>
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	eba0 000a 	sub.w	r0, r0, sl
 8007bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	4303      	orrs	r3, r0
 8007bdc:	3401      	adds	r4, #1
 8007bde:	9304      	str	r3, [sp, #16]
 8007be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be4:	482c      	ldr	r0, [pc, #176]	; (8007c98 <_vfiprintf_r+0x250>)
 8007be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bea:	2206      	movs	r2, #6
 8007bec:	f7f8 faf8 	bl	80001e0 <memchr>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d03f      	beq.n	8007c74 <_vfiprintf_r+0x22c>
 8007bf4:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <_vfiprintf_r+0x254>)
 8007bf6:	bb1b      	cbnz	r3, 8007c40 <_vfiprintf_r+0x1f8>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	3307      	adds	r3, #7
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	3308      	adds	r3, #8
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	443b      	add	r3, r7
 8007c08:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0a:	e767      	b.n	8007adc <_vfiprintf_r+0x94>
 8007c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c10:	460c      	mov	r4, r1
 8007c12:	2001      	movs	r0, #1
 8007c14:	e7a5      	b.n	8007b62 <_vfiprintf_r+0x11a>
 8007c16:	2300      	movs	r3, #0
 8007c18:	3401      	adds	r4, #1
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f04f 0c0a 	mov.w	ip, #10
 8007c22:	4620      	mov	r0, r4
 8007c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c28:	3a30      	subs	r2, #48	; 0x30
 8007c2a:	2a09      	cmp	r2, #9
 8007c2c:	d903      	bls.n	8007c36 <_vfiprintf_r+0x1ee>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0c5      	beq.n	8007bbe <_vfiprintf_r+0x176>
 8007c32:	9105      	str	r1, [sp, #20]
 8007c34:	e7c3      	b.n	8007bbe <_vfiprintf_r+0x176>
 8007c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e7f0      	b.n	8007c22 <_vfiprintf_r+0x1da>
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <_vfiprintf_r+0x258>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f3af 8000 	nop.w
 8007c50:	4607      	mov	r7, r0
 8007c52:	1c78      	adds	r0, r7, #1
 8007c54:	d1d6      	bne.n	8007c04 <_vfiprintf_r+0x1bc>
 8007c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c58:	07d9      	lsls	r1, r3, #31
 8007c5a:	d405      	bmi.n	8007c68 <_vfiprintf_r+0x220>
 8007c5c:	89ab      	ldrh	r3, [r5, #12]
 8007c5e:	059a      	lsls	r2, r3, #22
 8007c60:	d402      	bmi.n	8007c68 <_vfiprintf_r+0x220>
 8007c62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c64:	f7ff fd5d 	bl	8007722 <__retarget_lock_release_recursive>
 8007c68:	89ab      	ldrh	r3, [r5, #12]
 8007c6a:	065b      	lsls	r3, r3, #25
 8007c6c:	f53f af12 	bmi.w	8007a94 <_vfiprintf_r+0x4c>
 8007c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c72:	e711      	b.n	8007a98 <_vfiprintf_r+0x50>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <_vfiprintf_r+0x258>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f880 	bl	8007d84 <_printf_i>
 8007c84:	e7e4      	b.n	8007c50 <_vfiprintf_r+0x208>
 8007c86:	bf00      	nop
 8007c88:	08008c4c 	.word	0x08008c4c
 8007c8c:	08008c6c 	.word	0x08008c6c
 8007c90:	08008c2c 	.word	0x08008c2c
 8007c94:	08008bf6 	.word	0x08008bf6
 8007c98:	08008c00 	.word	0x08008c00
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	08007a23 	.word	0x08007a23
 8007ca4:	08008bfc 	.word	0x08008bfc

08007ca8 <_printf_common>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	4616      	mov	r6, r2
 8007cae:	4699      	mov	r9, r3
 8007cb0:	688a      	ldr	r2, [r1, #8]
 8007cb2:	690b      	ldr	r3, [r1, #16]
 8007cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	bfb8      	it	lt
 8007cbc:	4613      	movlt	r3, r2
 8007cbe:	6033      	str	r3, [r6, #0]
 8007cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	b10a      	cbz	r2, 8007cce <_printf_common+0x26>
 8007cca:	3301      	adds	r3, #1
 8007ccc:	6033      	str	r3, [r6, #0]
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	0699      	lsls	r1, r3, #26
 8007cd2:	bf42      	ittt	mi
 8007cd4:	6833      	ldrmi	r3, [r6, #0]
 8007cd6:	3302      	addmi	r3, #2
 8007cd8:	6033      	strmi	r3, [r6, #0]
 8007cda:	6825      	ldr	r5, [r4, #0]
 8007cdc:	f015 0506 	ands.w	r5, r5, #6
 8007ce0:	d106      	bne.n	8007cf0 <_printf_common+0x48>
 8007ce2:	f104 0a19 	add.w	sl, r4, #25
 8007ce6:	68e3      	ldr	r3, [r4, #12]
 8007ce8:	6832      	ldr	r2, [r6, #0]
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	42ab      	cmp	r3, r5
 8007cee:	dc26      	bgt.n	8007d3e <_printf_common+0x96>
 8007cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cf4:	1e13      	subs	r3, r2, #0
 8007cf6:	6822      	ldr	r2, [r4, #0]
 8007cf8:	bf18      	it	ne
 8007cfa:	2301      	movne	r3, #1
 8007cfc:	0692      	lsls	r2, r2, #26
 8007cfe:	d42b      	bmi.n	8007d58 <_printf_common+0xb0>
 8007d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d04:	4649      	mov	r1, r9
 8007d06:	4638      	mov	r0, r7
 8007d08:	47c0      	blx	r8
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d01e      	beq.n	8007d4c <_printf_common+0xa4>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	68e5      	ldr	r5, [r4, #12]
 8007d12:	6832      	ldr	r2, [r6, #0]
 8007d14:	f003 0306 	and.w	r3, r3, #6
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	bf08      	it	eq
 8007d1c:	1aad      	subeq	r5, r5, r2
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	6922      	ldr	r2, [r4, #16]
 8007d22:	bf0c      	ite	eq
 8007d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d28:	2500      	movne	r5, #0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bfc4      	itt	gt
 8007d2e:	1a9b      	subgt	r3, r3, r2
 8007d30:	18ed      	addgt	r5, r5, r3
 8007d32:	2600      	movs	r6, #0
 8007d34:	341a      	adds	r4, #26
 8007d36:	42b5      	cmp	r5, r6
 8007d38:	d11a      	bne.n	8007d70 <_printf_common+0xc8>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e008      	b.n	8007d50 <_printf_common+0xa8>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4652      	mov	r2, sl
 8007d42:	4649      	mov	r1, r9
 8007d44:	4638      	mov	r0, r7
 8007d46:	47c0      	blx	r8
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d103      	bne.n	8007d54 <_printf_common+0xac>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	3501      	adds	r5, #1
 8007d56:	e7c6      	b.n	8007ce6 <_printf_common+0x3e>
 8007d58:	18e1      	adds	r1, r4, r3
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	2030      	movs	r0, #48	; 0x30
 8007d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d62:	4422      	add	r2, r4
 8007d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	e7c7      	b.n	8007d00 <_printf_common+0x58>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4622      	mov	r2, r4
 8007d74:	4649      	mov	r1, r9
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0e6      	beq.n	8007d4c <_printf_common+0xa4>
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7d9      	b.n	8007d36 <_printf_common+0x8e>
	...

08007d84 <_printf_i>:
 8007d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	7e27      	ldrb	r7, [r4, #24]
 8007d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d90:	2f78      	cmp	r7, #120	; 0x78
 8007d92:	4680      	mov	r8, r0
 8007d94:	469a      	mov	sl, r3
 8007d96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d9a:	d807      	bhi.n	8007dac <_printf_i+0x28>
 8007d9c:	2f62      	cmp	r7, #98	; 0x62
 8007d9e:	d80a      	bhi.n	8007db6 <_printf_i+0x32>
 8007da0:	2f00      	cmp	r7, #0
 8007da2:	f000 80d8 	beq.w	8007f56 <_printf_i+0x1d2>
 8007da6:	2f58      	cmp	r7, #88	; 0x58
 8007da8:	f000 80a3 	beq.w	8007ef2 <_printf_i+0x16e>
 8007dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007db4:	e03a      	b.n	8007e2c <_printf_i+0xa8>
 8007db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dba:	2b15      	cmp	r3, #21
 8007dbc:	d8f6      	bhi.n	8007dac <_printf_i+0x28>
 8007dbe:	a001      	add	r0, pc, #4	; (adr r0, 8007dc4 <_printf_i+0x40>)
 8007dc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007dc4:	08007e1d 	.word	0x08007e1d
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007dad 	.word	0x08007dad
 8007dd0:	08007dad 	.word	0x08007dad
 8007dd4:	08007dad 	.word	0x08007dad
 8007dd8:	08007dad 	.word	0x08007dad
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007dad 	.word	0x08007dad
 8007de4:	08007dad 	.word	0x08007dad
 8007de8:	08007dad 	.word	0x08007dad
 8007dec:	08007dad 	.word	0x08007dad
 8007df0:	08007f3d 	.word	0x08007f3d
 8007df4:	08007e61 	.word	0x08007e61
 8007df8:	08007f1f 	.word	0x08007f1f
 8007dfc:	08007dad 	.word	0x08007dad
 8007e00:	08007dad 	.word	0x08007dad
 8007e04:	08007f5f 	.word	0x08007f5f
 8007e08:	08007dad 	.word	0x08007dad
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007dad 	.word	0x08007dad
 8007e14:	08007dad 	.word	0x08007dad
 8007e18:	08007f27 	.word	0x08007f27
 8007e1c:	680b      	ldr	r3, [r1, #0]
 8007e1e:	1d1a      	adds	r2, r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	600a      	str	r2, [r1, #0]
 8007e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0a3      	b.n	8007f78 <_printf_i+0x1f4>
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	6808      	ldr	r0, [r1, #0]
 8007e34:	062e      	lsls	r6, r5, #24
 8007e36:	f100 0304 	add.w	r3, r0, #4
 8007e3a:	d50a      	bpl.n	8007e52 <_printf_i+0xce>
 8007e3c:	6805      	ldr	r5, [r0, #0]
 8007e3e:	600b      	str	r3, [r1, #0]
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	da03      	bge.n	8007e4c <_printf_i+0xc8>
 8007e44:	232d      	movs	r3, #45	; 0x2d
 8007e46:	426d      	negs	r5, r5
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4c:	485e      	ldr	r0, [pc, #376]	; (8007fc8 <_printf_i+0x244>)
 8007e4e:	230a      	movs	r3, #10
 8007e50:	e019      	b.n	8007e86 <_printf_i+0x102>
 8007e52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e56:	6805      	ldr	r5, [r0, #0]
 8007e58:	600b      	str	r3, [r1, #0]
 8007e5a:	bf18      	it	ne
 8007e5c:	b22d      	sxthne	r5, r5
 8007e5e:	e7ef      	b.n	8007e40 <_printf_i+0xbc>
 8007e60:	680b      	ldr	r3, [r1, #0]
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	1d18      	adds	r0, r3, #4
 8007e66:	6008      	str	r0, [r1, #0]
 8007e68:	0628      	lsls	r0, r5, #24
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0xec>
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <_printf_i+0xf2>
 8007e70:	0669      	lsls	r1, r5, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0xe8>
 8007e74:	881d      	ldrh	r5, [r3, #0]
 8007e76:	4854      	ldr	r0, [pc, #336]	; (8007fc8 <_printf_i+0x244>)
 8007e78:	2f6f      	cmp	r7, #111	; 0x6f
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2308      	moveq	r3, #8
 8007e7e:	230a      	movne	r3, #10
 8007e80:	2100      	movs	r1, #0
 8007e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e86:	6866      	ldr	r6, [r4, #4]
 8007e88:	60a6      	str	r6, [r4, #8]
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	bfa2      	ittt	ge
 8007e8e:	6821      	ldrge	r1, [r4, #0]
 8007e90:	f021 0104 	bicge.w	r1, r1, #4
 8007e94:	6021      	strge	r1, [r4, #0]
 8007e96:	b90d      	cbnz	r5, 8007e9c <_printf_i+0x118>
 8007e98:	2e00      	cmp	r6, #0
 8007e9a:	d04d      	beq.n	8007f38 <_printf_i+0x1b4>
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ea6:	5dc7      	ldrb	r7, [r0, r7]
 8007ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eac:	462f      	mov	r7, r5
 8007eae:	42bb      	cmp	r3, r7
 8007eb0:	460d      	mov	r5, r1
 8007eb2:	d9f4      	bls.n	8007e9e <_printf_i+0x11a>
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d10b      	bne.n	8007ed0 <_printf_i+0x14c>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	07df      	lsls	r7, r3, #31
 8007ebc:	d508      	bpl.n	8007ed0 <_printf_i+0x14c>
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	6861      	ldr	r1, [r4, #4]
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	bfde      	ittt	le
 8007ec6:	2330      	movle	r3, #48	; 0x30
 8007ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ecc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ed0:	1b92      	subs	r2, r2, r6
 8007ed2:	6122      	str	r2, [r4, #16]
 8007ed4:	f8cd a000 	str.w	sl, [sp]
 8007ed8:	464b      	mov	r3, r9
 8007eda:	aa03      	add	r2, sp, #12
 8007edc:	4621      	mov	r1, r4
 8007ede:	4640      	mov	r0, r8
 8007ee0:	f7ff fee2 	bl	8007ca8 <_printf_common>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d14c      	bne.n	8007f82 <_printf_i+0x1fe>
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	b004      	add	sp, #16
 8007eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef2:	4835      	ldr	r0, [pc, #212]	; (8007fc8 <_printf_i+0x244>)
 8007ef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	680e      	ldr	r6, [r1, #0]
 8007efc:	061f      	lsls	r7, r3, #24
 8007efe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f02:	600e      	str	r6, [r1, #0]
 8007f04:	d514      	bpl.n	8007f30 <_printf_i+0x1ac>
 8007f06:	07d9      	lsls	r1, r3, #31
 8007f08:	bf44      	itt	mi
 8007f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f0e:	6023      	strmi	r3, [r4, #0]
 8007f10:	b91d      	cbnz	r5, 8007f1a <_printf_i+0x196>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f023 0320 	bic.w	r3, r3, #32
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	2310      	movs	r3, #16
 8007f1c:	e7b0      	b.n	8007e80 <_printf_i+0xfc>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f043 0320 	orr.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	2378      	movs	r3, #120	; 0x78
 8007f28:	4828      	ldr	r0, [pc, #160]	; (8007fcc <_printf_i+0x248>)
 8007f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f2e:	e7e3      	b.n	8007ef8 <_printf_i+0x174>
 8007f30:	065e      	lsls	r6, r3, #25
 8007f32:	bf48      	it	mi
 8007f34:	b2ad      	uxthmi	r5, r5
 8007f36:	e7e6      	b.n	8007f06 <_printf_i+0x182>
 8007f38:	4616      	mov	r6, r2
 8007f3a:	e7bb      	b.n	8007eb4 <_printf_i+0x130>
 8007f3c:	680b      	ldr	r3, [r1, #0]
 8007f3e:	6826      	ldr	r6, [r4, #0]
 8007f40:	6960      	ldr	r0, [r4, #20]
 8007f42:	1d1d      	adds	r5, r3, #4
 8007f44:	600d      	str	r5, [r1, #0]
 8007f46:	0635      	lsls	r5, r6, #24
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	d501      	bpl.n	8007f50 <_printf_i+0x1cc>
 8007f4c:	6018      	str	r0, [r3, #0]
 8007f4e:	e002      	b.n	8007f56 <_printf_i+0x1d2>
 8007f50:	0671      	lsls	r1, r6, #25
 8007f52:	d5fb      	bpl.n	8007f4c <_printf_i+0x1c8>
 8007f54:	8018      	strh	r0, [r3, #0]
 8007f56:	2300      	movs	r3, #0
 8007f58:	6123      	str	r3, [r4, #16]
 8007f5a:	4616      	mov	r6, r2
 8007f5c:	e7ba      	b.n	8007ed4 <_printf_i+0x150>
 8007f5e:	680b      	ldr	r3, [r1, #0]
 8007f60:	1d1a      	adds	r2, r3, #4
 8007f62:	600a      	str	r2, [r1, #0]
 8007f64:	681e      	ldr	r6, [r3, #0]
 8007f66:	6862      	ldr	r2, [r4, #4]
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7f8 f938 	bl	80001e0 <memchr>
 8007f70:	b108      	cbz	r0, 8007f76 <_printf_i+0x1f2>
 8007f72:	1b80      	subs	r0, r0, r6
 8007f74:	6060      	str	r0, [r4, #4]
 8007f76:	6863      	ldr	r3, [r4, #4]
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f80:	e7a8      	b.n	8007ed4 <_printf_i+0x150>
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	4632      	mov	r2, r6
 8007f86:	4649      	mov	r1, r9
 8007f88:	4640      	mov	r0, r8
 8007f8a:	47d0      	blx	sl
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d0ab      	beq.n	8007ee8 <_printf_i+0x164>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	079b      	lsls	r3, r3, #30
 8007f94:	d413      	bmi.n	8007fbe <_printf_i+0x23a>
 8007f96:	68e0      	ldr	r0, [r4, #12]
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	4298      	cmp	r0, r3
 8007f9c:	bfb8      	it	lt
 8007f9e:	4618      	movlt	r0, r3
 8007fa0:	e7a4      	b.n	8007eec <_printf_i+0x168>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4632      	mov	r2, r6
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	4640      	mov	r0, r8
 8007faa:	47d0      	blx	sl
 8007fac:	3001      	adds	r0, #1
 8007fae:	d09b      	beq.n	8007ee8 <_printf_i+0x164>
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	68e3      	ldr	r3, [r4, #12]
 8007fb4:	9903      	ldr	r1, [sp, #12]
 8007fb6:	1a5b      	subs	r3, r3, r1
 8007fb8:	42ab      	cmp	r3, r5
 8007fba:	dcf2      	bgt.n	8007fa2 <_printf_i+0x21e>
 8007fbc:	e7eb      	b.n	8007f96 <_printf_i+0x212>
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	f104 0619 	add.w	r6, r4, #25
 8007fc4:	e7f5      	b.n	8007fb2 <_printf_i+0x22e>
 8007fc6:	bf00      	nop
 8007fc8:	08008c07 	.word	0x08008c07
 8007fcc:	08008c18 	.word	0x08008c18

08007fd0 <__swbuf_r>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	460e      	mov	r6, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	b118      	cbz	r0, 8007fe2 <__swbuf_r+0x12>
 8007fda:	6983      	ldr	r3, [r0, #24]
 8007fdc:	b90b      	cbnz	r3, 8007fe2 <__swbuf_r+0x12>
 8007fde:	f000 f9d1 	bl	8008384 <__sinit>
 8007fe2:	4b21      	ldr	r3, [pc, #132]	; (8008068 <__swbuf_r+0x98>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d12b      	bne.n	8008040 <__swbuf_r+0x70>
 8007fe8:	686c      	ldr	r4, [r5, #4]
 8007fea:	69a3      	ldr	r3, [r4, #24]
 8007fec:	60a3      	str	r3, [r4, #8]
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	071a      	lsls	r2, r3, #28
 8007ff2:	d52f      	bpl.n	8008054 <__swbuf_r+0x84>
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	b36b      	cbz	r3, 8008054 <__swbuf_r+0x84>
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	1ac0      	subs	r0, r0, r3
 8007ffe:	6963      	ldr	r3, [r4, #20]
 8008000:	b2f6      	uxtb	r6, r6
 8008002:	4283      	cmp	r3, r0
 8008004:	4637      	mov	r7, r6
 8008006:	dc04      	bgt.n	8008012 <__swbuf_r+0x42>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f926 	bl	800825c <_fflush_r>
 8008010:	bb30      	cbnz	r0, 8008060 <__swbuf_r+0x90>
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	3b01      	subs	r3, #1
 8008016:	60a3      	str	r3, [r4, #8]
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	701e      	strb	r6, [r3, #0]
 8008020:	6963      	ldr	r3, [r4, #20]
 8008022:	3001      	adds	r0, #1
 8008024:	4283      	cmp	r3, r0
 8008026:	d004      	beq.n	8008032 <__swbuf_r+0x62>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	07db      	lsls	r3, r3, #31
 800802c:	d506      	bpl.n	800803c <__swbuf_r+0x6c>
 800802e:	2e0a      	cmp	r6, #10
 8008030:	d104      	bne.n	800803c <__swbuf_r+0x6c>
 8008032:	4621      	mov	r1, r4
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f911 	bl	800825c <_fflush_r>
 800803a:	b988      	cbnz	r0, 8008060 <__swbuf_r+0x90>
 800803c:	4638      	mov	r0, r7
 800803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <__swbuf_r+0x9c>)
 8008042:	429c      	cmp	r4, r3
 8008044:	d101      	bne.n	800804a <__swbuf_r+0x7a>
 8008046:	68ac      	ldr	r4, [r5, #8]
 8008048:	e7cf      	b.n	8007fea <__swbuf_r+0x1a>
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <__swbuf_r+0xa0>)
 800804c:	429c      	cmp	r4, r3
 800804e:	bf08      	it	eq
 8008050:	68ec      	ldreq	r4, [r5, #12]
 8008052:	e7ca      	b.n	8007fea <__swbuf_r+0x1a>
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f80c 	bl	8008074 <__swsetup_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	d0cb      	beq.n	8007ff8 <__swbuf_r+0x28>
 8008060:	f04f 37ff 	mov.w	r7, #4294967295
 8008064:	e7ea      	b.n	800803c <__swbuf_r+0x6c>
 8008066:	bf00      	nop
 8008068:	08008c4c 	.word	0x08008c4c
 800806c:	08008c6c 	.word	0x08008c6c
 8008070:	08008c2c 	.word	0x08008c2c

08008074 <__swsetup_r>:
 8008074:	4b32      	ldr	r3, [pc, #200]	; (8008140 <__swsetup_r+0xcc>)
 8008076:	b570      	push	{r4, r5, r6, lr}
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	4606      	mov	r6, r0
 800807c:	460c      	mov	r4, r1
 800807e:	b125      	cbz	r5, 800808a <__swsetup_r+0x16>
 8008080:	69ab      	ldr	r3, [r5, #24]
 8008082:	b913      	cbnz	r3, 800808a <__swsetup_r+0x16>
 8008084:	4628      	mov	r0, r5
 8008086:	f000 f97d 	bl	8008384 <__sinit>
 800808a:	4b2e      	ldr	r3, [pc, #184]	; (8008144 <__swsetup_r+0xd0>)
 800808c:	429c      	cmp	r4, r3
 800808e:	d10f      	bne.n	80080b0 <__swsetup_r+0x3c>
 8008090:	686c      	ldr	r4, [r5, #4]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008098:	0719      	lsls	r1, r3, #28
 800809a:	d42c      	bmi.n	80080f6 <__swsetup_r+0x82>
 800809c:	06dd      	lsls	r5, r3, #27
 800809e:	d411      	bmi.n	80080c4 <__swsetup_r+0x50>
 80080a0:	2309      	movs	r3, #9
 80080a2:	6033      	str	r3, [r6, #0]
 80080a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	f04f 30ff 	mov.w	r0, #4294967295
 80080ae:	e03e      	b.n	800812e <__swsetup_r+0xba>
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <__swsetup_r+0xd4>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d101      	bne.n	80080ba <__swsetup_r+0x46>
 80080b6:	68ac      	ldr	r4, [r5, #8]
 80080b8:	e7eb      	b.n	8008092 <__swsetup_r+0x1e>
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <__swsetup_r+0xd8>)
 80080bc:	429c      	cmp	r4, r3
 80080be:	bf08      	it	eq
 80080c0:	68ec      	ldreq	r4, [r5, #12]
 80080c2:	e7e6      	b.n	8008092 <__swsetup_r+0x1e>
 80080c4:	0758      	lsls	r0, r3, #29
 80080c6:	d512      	bpl.n	80080ee <__swsetup_r+0x7a>
 80080c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ca:	b141      	cbz	r1, 80080de <__swsetup_r+0x6a>
 80080cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d002      	beq.n	80080da <__swsetup_r+0x66>
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff f931 	bl	800733c <_free_r>
 80080da:	2300      	movs	r3, #0
 80080dc:	6363      	str	r3, [r4, #52]	; 0x34
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	2300      	movs	r3, #0
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f043 0308 	orr.w	r3, r3, #8
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	b94b      	cbnz	r3, 800810e <__swsetup_r+0x9a>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008104:	d003      	beq.n	800810e <__swsetup_r+0x9a>
 8008106:	4621      	mov	r1, r4
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f9fd 	bl	8008508 <__smakebuf_r>
 800810e:	89a0      	ldrh	r0, [r4, #12]
 8008110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008114:	f010 0301 	ands.w	r3, r0, #1
 8008118:	d00a      	beq.n	8008130 <__swsetup_r+0xbc>
 800811a:	2300      	movs	r3, #0
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	6963      	ldr	r3, [r4, #20]
 8008120:	425b      	negs	r3, r3
 8008122:	61a3      	str	r3, [r4, #24]
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	b943      	cbnz	r3, 800813a <__swsetup_r+0xc6>
 8008128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800812c:	d1ba      	bne.n	80080a4 <__swsetup_r+0x30>
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	0781      	lsls	r1, r0, #30
 8008132:	bf58      	it	pl
 8008134:	6963      	ldrpl	r3, [r4, #20]
 8008136:	60a3      	str	r3, [r4, #8]
 8008138:	e7f4      	b.n	8008124 <__swsetup_r+0xb0>
 800813a:	2000      	movs	r0, #0
 800813c:	e7f7      	b.n	800812e <__swsetup_r+0xba>
 800813e:	bf00      	nop
 8008140:	2000000c 	.word	0x2000000c
 8008144:	08008c4c 	.word	0x08008c4c
 8008148:	08008c6c 	.word	0x08008c6c
 800814c:	08008c2c 	.word	0x08008c2c

08008150 <__sflush_r>:
 8008150:	898a      	ldrh	r2, [r1, #12]
 8008152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	4605      	mov	r5, r0
 8008158:	0710      	lsls	r0, r2, #28
 800815a:	460c      	mov	r4, r1
 800815c:	d458      	bmi.n	8008210 <__sflush_r+0xc0>
 800815e:	684b      	ldr	r3, [r1, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	dc05      	bgt.n	8008170 <__sflush_r+0x20>
 8008164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	dc02      	bgt.n	8008170 <__sflush_r+0x20>
 800816a:	2000      	movs	r0, #0
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008172:	2e00      	cmp	r6, #0
 8008174:	d0f9      	beq.n	800816a <__sflush_r+0x1a>
 8008176:	2300      	movs	r3, #0
 8008178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800817c:	682f      	ldr	r7, [r5, #0]
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	d032      	beq.n	80081e8 <__sflush_r+0x98>
 8008182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	075a      	lsls	r2, r3, #29
 8008188:	d505      	bpl.n	8008196 <__sflush_r+0x46>
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	1ac0      	subs	r0, r0, r3
 800818e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008190:	b10b      	cbz	r3, 8008196 <__sflush_r+0x46>
 8008192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	2300      	movs	r3, #0
 8008198:	4602      	mov	r2, r0
 800819a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800819c:	6a21      	ldr	r1, [r4, #32]
 800819e:	4628      	mov	r0, r5
 80081a0:	47b0      	blx	r6
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	d106      	bne.n	80081b6 <__sflush_r+0x66>
 80081a8:	6829      	ldr	r1, [r5, #0]
 80081aa:	291d      	cmp	r1, #29
 80081ac:	d82c      	bhi.n	8008208 <__sflush_r+0xb8>
 80081ae:	4a2a      	ldr	r2, [pc, #168]	; (8008258 <__sflush_r+0x108>)
 80081b0:	40ca      	lsrs	r2, r1
 80081b2:	07d6      	lsls	r6, r2, #31
 80081b4:	d528      	bpl.n	8008208 <__sflush_r+0xb8>
 80081b6:	2200      	movs	r2, #0
 80081b8:	6062      	str	r2, [r4, #4]
 80081ba:	04d9      	lsls	r1, r3, #19
 80081bc:	6922      	ldr	r2, [r4, #16]
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	d504      	bpl.n	80081cc <__sflush_r+0x7c>
 80081c2:	1c42      	adds	r2, r0, #1
 80081c4:	d101      	bne.n	80081ca <__sflush_r+0x7a>
 80081c6:	682b      	ldr	r3, [r5, #0]
 80081c8:	b903      	cbnz	r3, 80081cc <__sflush_r+0x7c>
 80081ca:	6560      	str	r0, [r4, #84]	; 0x54
 80081cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d0ca      	beq.n	800816a <__sflush_r+0x1a>
 80081d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d8:	4299      	cmp	r1, r3
 80081da:	d002      	beq.n	80081e2 <__sflush_r+0x92>
 80081dc:	4628      	mov	r0, r5
 80081de:	f7ff f8ad 	bl	800733c <_free_r>
 80081e2:	2000      	movs	r0, #0
 80081e4:	6360      	str	r0, [r4, #52]	; 0x34
 80081e6:	e7c1      	b.n	800816c <__sflush_r+0x1c>
 80081e8:	6a21      	ldr	r1, [r4, #32]
 80081ea:	2301      	movs	r3, #1
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	1c41      	adds	r1, r0, #1
 80081f2:	d1c7      	bne.n	8008184 <__sflush_r+0x34>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0c4      	beq.n	8008184 <__sflush_r+0x34>
 80081fa:	2b1d      	cmp	r3, #29
 80081fc:	d001      	beq.n	8008202 <__sflush_r+0xb2>
 80081fe:	2b16      	cmp	r3, #22
 8008200:	d101      	bne.n	8008206 <__sflush_r+0xb6>
 8008202:	602f      	str	r7, [r5, #0]
 8008204:	e7b1      	b.n	800816a <__sflush_r+0x1a>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	e7ad      	b.n	800816c <__sflush_r+0x1c>
 8008210:	690f      	ldr	r7, [r1, #16]
 8008212:	2f00      	cmp	r7, #0
 8008214:	d0a9      	beq.n	800816a <__sflush_r+0x1a>
 8008216:	0793      	lsls	r3, r2, #30
 8008218:	680e      	ldr	r6, [r1, #0]
 800821a:	bf08      	it	eq
 800821c:	694b      	ldreq	r3, [r1, #20]
 800821e:	600f      	str	r7, [r1, #0]
 8008220:	bf18      	it	ne
 8008222:	2300      	movne	r3, #0
 8008224:	eba6 0807 	sub.w	r8, r6, r7
 8008228:	608b      	str	r3, [r1, #8]
 800822a:	f1b8 0f00 	cmp.w	r8, #0
 800822e:	dd9c      	ble.n	800816a <__sflush_r+0x1a>
 8008230:	6a21      	ldr	r1, [r4, #32]
 8008232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008234:	4643      	mov	r3, r8
 8008236:	463a      	mov	r2, r7
 8008238:	4628      	mov	r0, r5
 800823a:	47b0      	blx	r6
 800823c:	2800      	cmp	r0, #0
 800823e:	dc06      	bgt.n	800824e <__sflush_r+0xfe>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e78e      	b.n	800816c <__sflush_r+0x1c>
 800824e:	4407      	add	r7, r0
 8008250:	eba8 0800 	sub.w	r8, r8, r0
 8008254:	e7e9      	b.n	800822a <__sflush_r+0xda>
 8008256:	bf00      	nop
 8008258:	20400001 	.word	0x20400001

0800825c <_fflush_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	690b      	ldr	r3, [r1, #16]
 8008260:	4605      	mov	r5, r0
 8008262:	460c      	mov	r4, r1
 8008264:	b913      	cbnz	r3, 800826c <_fflush_r+0x10>
 8008266:	2500      	movs	r5, #0
 8008268:	4628      	mov	r0, r5
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	b118      	cbz	r0, 8008276 <_fflush_r+0x1a>
 800826e:	6983      	ldr	r3, [r0, #24]
 8008270:	b90b      	cbnz	r3, 8008276 <_fflush_r+0x1a>
 8008272:	f000 f887 	bl	8008384 <__sinit>
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <_fflush_r+0x6c>)
 8008278:	429c      	cmp	r4, r3
 800827a:	d11b      	bne.n	80082b4 <_fflush_r+0x58>
 800827c:	686c      	ldr	r4, [r5, #4]
 800827e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0ef      	beq.n	8008266 <_fflush_r+0xa>
 8008286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008288:	07d0      	lsls	r0, r2, #31
 800828a:	d404      	bmi.n	8008296 <_fflush_r+0x3a>
 800828c:	0599      	lsls	r1, r3, #22
 800828e:	d402      	bmi.n	8008296 <_fflush_r+0x3a>
 8008290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008292:	f7ff fa44 	bl	800771e <__retarget_lock_acquire_recursive>
 8008296:	4628      	mov	r0, r5
 8008298:	4621      	mov	r1, r4
 800829a:	f7ff ff59 	bl	8008150 <__sflush_r>
 800829e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a0:	07da      	lsls	r2, r3, #31
 80082a2:	4605      	mov	r5, r0
 80082a4:	d4e0      	bmi.n	8008268 <_fflush_r+0xc>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	059b      	lsls	r3, r3, #22
 80082aa:	d4dd      	bmi.n	8008268 <_fflush_r+0xc>
 80082ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ae:	f7ff fa38 	bl	8007722 <__retarget_lock_release_recursive>
 80082b2:	e7d9      	b.n	8008268 <_fflush_r+0xc>
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <_fflush_r+0x70>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d101      	bne.n	80082be <_fflush_r+0x62>
 80082ba:	68ac      	ldr	r4, [r5, #8]
 80082bc:	e7df      	b.n	800827e <_fflush_r+0x22>
 80082be:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <_fflush_r+0x74>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	bf08      	it	eq
 80082c4:	68ec      	ldreq	r4, [r5, #12]
 80082c6:	e7da      	b.n	800827e <_fflush_r+0x22>
 80082c8:	08008c4c 	.word	0x08008c4c
 80082cc:	08008c6c 	.word	0x08008c6c
 80082d0:	08008c2c 	.word	0x08008c2c

080082d4 <std>:
 80082d4:	2300      	movs	r3, #0
 80082d6:	b510      	push	{r4, lr}
 80082d8:	4604      	mov	r4, r0
 80082da:	e9c0 3300 	strd	r3, r3, [r0]
 80082de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e2:	6083      	str	r3, [r0, #8]
 80082e4:	8181      	strh	r1, [r0, #12]
 80082e6:	6643      	str	r3, [r0, #100]	; 0x64
 80082e8:	81c2      	strh	r2, [r0, #14]
 80082ea:	6183      	str	r3, [r0, #24]
 80082ec:	4619      	mov	r1, r3
 80082ee:	2208      	movs	r2, #8
 80082f0:	305c      	adds	r0, #92	; 0x5c
 80082f2:	f7ff f81b 	bl	800732c <memset>
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <std+0x38>)
 80082f8:	6263      	str	r3, [r4, #36]	; 0x24
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x3c>)
 80082fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x40>)
 8008300:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x44>)
 8008304:	6224      	str	r4, [r4, #32]
 8008306:	6323      	str	r3, [r4, #48]	; 0x30
 8008308:	bd10      	pop	{r4, pc}
 800830a:	bf00      	nop
 800830c:	08008625 	.word	0x08008625
 8008310:	08008647 	.word	0x08008647
 8008314:	0800867f 	.word	0x0800867f
 8008318:	080086a3 	.word	0x080086a3

0800831c <_cleanup_r>:
 800831c:	4901      	ldr	r1, [pc, #4]	; (8008324 <_cleanup_r+0x8>)
 800831e:	f000 b8af 	b.w	8008480 <_fwalk_reent>
 8008322:	bf00      	nop
 8008324:	0800825d 	.word	0x0800825d

08008328 <__sfmoreglue>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	1e4a      	subs	r2, r1, #1
 800832c:	2568      	movs	r5, #104	; 0x68
 800832e:	4355      	muls	r5, r2
 8008330:	460e      	mov	r6, r1
 8008332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008336:	f7ff f851 	bl	80073dc <_malloc_r>
 800833a:	4604      	mov	r4, r0
 800833c:	b140      	cbz	r0, 8008350 <__sfmoreglue+0x28>
 800833e:	2100      	movs	r1, #0
 8008340:	e9c0 1600 	strd	r1, r6, [r0]
 8008344:	300c      	adds	r0, #12
 8008346:	60a0      	str	r0, [r4, #8]
 8008348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800834c:	f7fe ffee 	bl	800732c <memset>
 8008350:	4620      	mov	r0, r4
 8008352:	bd70      	pop	{r4, r5, r6, pc}

08008354 <__sfp_lock_acquire>:
 8008354:	4801      	ldr	r0, [pc, #4]	; (800835c <__sfp_lock_acquire+0x8>)
 8008356:	f7ff b9e2 	b.w	800771e <__retarget_lock_acquire_recursive>
 800835a:	bf00      	nop
 800835c:	20002c28 	.word	0x20002c28

08008360 <__sfp_lock_release>:
 8008360:	4801      	ldr	r0, [pc, #4]	; (8008368 <__sfp_lock_release+0x8>)
 8008362:	f7ff b9de 	b.w	8007722 <__retarget_lock_release_recursive>
 8008366:	bf00      	nop
 8008368:	20002c28 	.word	0x20002c28

0800836c <__sinit_lock_acquire>:
 800836c:	4801      	ldr	r0, [pc, #4]	; (8008374 <__sinit_lock_acquire+0x8>)
 800836e:	f7ff b9d6 	b.w	800771e <__retarget_lock_acquire_recursive>
 8008372:	bf00      	nop
 8008374:	20002c23 	.word	0x20002c23

08008378 <__sinit_lock_release>:
 8008378:	4801      	ldr	r0, [pc, #4]	; (8008380 <__sinit_lock_release+0x8>)
 800837a:	f7ff b9d2 	b.w	8007722 <__retarget_lock_release_recursive>
 800837e:	bf00      	nop
 8008380:	20002c23 	.word	0x20002c23

08008384 <__sinit>:
 8008384:	b510      	push	{r4, lr}
 8008386:	4604      	mov	r4, r0
 8008388:	f7ff fff0 	bl	800836c <__sinit_lock_acquire>
 800838c:	69a3      	ldr	r3, [r4, #24]
 800838e:	b11b      	cbz	r3, 8008398 <__sinit+0x14>
 8008390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008394:	f7ff bff0 	b.w	8008378 <__sinit_lock_release>
 8008398:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800839c:	6523      	str	r3, [r4, #80]	; 0x50
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <__sinit+0x68>)
 80083a0:	4a13      	ldr	r2, [pc, #76]	; (80083f0 <__sinit+0x6c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	bf04      	itt	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	61a3      	streq	r3, [r4, #24]
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f820 	bl	80083f4 <__sfp>
 80083b4:	6060      	str	r0, [r4, #4]
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f81c 	bl	80083f4 <__sfp>
 80083bc:	60a0      	str	r0, [r4, #8]
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 f818 	bl	80083f4 <__sfp>
 80083c4:	2200      	movs	r2, #0
 80083c6:	60e0      	str	r0, [r4, #12]
 80083c8:	2104      	movs	r1, #4
 80083ca:	6860      	ldr	r0, [r4, #4]
 80083cc:	f7ff ff82 	bl	80082d4 <std>
 80083d0:	68a0      	ldr	r0, [r4, #8]
 80083d2:	2201      	movs	r2, #1
 80083d4:	2109      	movs	r1, #9
 80083d6:	f7ff ff7d 	bl	80082d4 <std>
 80083da:	68e0      	ldr	r0, [r4, #12]
 80083dc:	2202      	movs	r2, #2
 80083de:	2112      	movs	r1, #18
 80083e0:	f7ff ff78 	bl	80082d4 <std>
 80083e4:	2301      	movs	r3, #1
 80083e6:	61a3      	str	r3, [r4, #24]
 80083e8:	e7d2      	b.n	8008390 <__sinit+0xc>
 80083ea:	bf00      	nop
 80083ec:	08008b40 	.word	0x08008b40
 80083f0:	0800831d 	.word	0x0800831d

080083f4 <__sfp>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	4607      	mov	r7, r0
 80083f8:	f7ff ffac 	bl	8008354 <__sfp_lock_acquire>
 80083fc:	4b1e      	ldr	r3, [pc, #120]	; (8008478 <__sfp+0x84>)
 80083fe:	681e      	ldr	r6, [r3, #0]
 8008400:	69b3      	ldr	r3, [r6, #24]
 8008402:	b913      	cbnz	r3, 800840a <__sfp+0x16>
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff ffbd 	bl	8008384 <__sinit>
 800840a:	3648      	adds	r6, #72	; 0x48
 800840c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008410:	3b01      	subs	r3, #1
 8008412:	d503      	bpl.n	800841c <__sfp+0x28>
 8008414:	6833      	ldr	r3, [r6, #0]
 8008416:	b30b      	cbz	r3, 800845c <__sfp+0x68>
 8008418:	6836      	ldr	r6, [r6, #0]
 800841a:	e7f7      	b.n	800840c <__sfp+0x18>
 800841c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008420:	b9d5      	cbnz	r5, 8008458 <__sfp+0x64>
 8008422:	4b16      	ldr	r3, [pc, #88]	; (800847c <__sfp+0x88>)
 8008424:	60e3      	str	r3, [r4, #12]
 8008426:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842a:	6665      	str	r5, [r4, #100]	; 0x64
 800842c:	f7ff f976 	bl	800771c <__retarget_lock_init_recursive>
 8008430:	f7ff ff96 	bl	8008360 <__sfp_lock_release>
 8008434:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008438:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800843c:	6025      	str	r5, [r4, #0]
 800843e:	61a5      	str	r5, [r4, #24]
 8008440:	2208      	movs	r2, #8
 8008442:	4629      	mov	r1, r5
 8008444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008448:	f7fe ff70 	bl	800732c <memset>
 800844c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008450:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008454:	4620      	mov	r0, r4
 8008456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008458:	3468      	adds	r4, #104	; 0x68
 800845a:	e7d9      	b.n	8008410 <__sfp+0x1c>
 800845c:	2104      	movs	r1, #4
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ff62 	bl	8008328 <__sfmoreglue>
 8008464:	4604      	mov	r4, r0
 8008466:	6030      	str	r0, [r6, #0]
 8008468:	2800      	cmp	r0, #0
 800846a:	d1d5      	bne.n	8008418 <__sfp+0x24>
 800846c:	f7ff ff78 	bl	8008360 <__sfp_lock_release>
 8008470:	230c      	movs	r3, #12
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	e7ee      	b.n	8008454 <__sfp+0x60>
 8008476:	bf00      	nop
 8008478:	08008b40 	.word	0x08008b40
 800847c:	ffff0001 	.word	0xffff0001

08008480 <_fwalk_reent>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	4606      	mov	r6, r0
 8008486:	4688      	mov	r8, r1
 8008488:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800848c:	2700      	movs	r7, #0
 800848e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008492:	f1b9 0901 	subs.w	r9, r9, #1
 8008496:	d505      	bpl.n	80084a4 <_fwalk_reent+0x24>
 8008498:	6824      	ldr	r4, [r4, #0]
 800849a:	2c00      	cmp	r4, #0
 800849c:	d1f7      	bne.n	800848e <_fwalk_reent+0xe>
 800849e:	4638      	mov	r0, r7
 80084a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a4:	89ab      	ldrh	r3, [r5, #12]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d907      	bls.n	80084ba <_fwalk_reent+0x3a>
 80084aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084ae:	3301      	adds	r3, #1
 80084b0:	d003      	beq.n	80084ba <_fwalk_reent+0x3a>
 80084b2:	4629      	mov	r1, r5
 80084b4:	4630      	mov	r0, r6
 80084b6:	47c0      	blx	r8
 80084b8:	4307      	orrs	r7, r0
 80084ba:	3568      	adds	r5, #104	; 0x68
 80084bc:	e7e9      	b.n	8008492 <_fwalk_reent+0x12>

080084be <__swhatbuf_r>:
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	460e      	mov	r6, r1
 80084c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	b096      	sub	sp, #88	; 0x58
 80084ca:	4614      	mov	r4, r2
 80084cc:	461d      	mov	r5, r3
 80084ce:	da07      	bge.n	80084e0 <__swhatbuf_r+0x22>
 80084d0:	2300      	movs	r3, #0
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	89b3      	ldrh	r3, [r6, #12]
 80084d6:	061a      	lsls	r2, r3, #24
 80084d8:	d410      	bmi.n	80084fc <__swhatbuf_r+0x3e>
 80084da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084de:	e00e      	b.n	80084fe <__swhatbuf_r+0x40>
 80084e0:	466a      	mov	r2, sp
 80084e2:	f000 f905 	bl	80086f0 <_fstat_r>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	dbf2      	blt.n	80084d0 <__swhatbuf_r+0x12>
 80084ea:	9a01      	ldr	r2, [sp, #4]
 80084ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084f4:	425a      	negs	r2, r3
 80084f6:	415a      	adcs	r2, r3
 80084f8:	602a      	str	r2, [r5, #0]
 80084fa:	e7ee      	b.n	80084da <__swhatbuf_r+0x1c>
 80084fc:	2340      	movs	r3, #64	; 0x40
 80084fe:	2000      	movs	r0, #0
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	b016      	add	sp, #88	; 0x58
 8008504:	bd70      	pop	{r4, r5, r6, pc}
	...

08008508 <__smakebuf_r>:
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800850c:	079d      	lsls	r5, r3, #30
 800850e:	4606      	mov	r6, r0
 8008510:	460c      	mov	r4, r1
 8008512:	d507      	bpl.n	8008524 <__smakebuf_r+0x1c>
 8008514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	6123      	str	r3, [r4, #16]
 800851c:	2301      	movs	r3, #1
 800851e:	6163      	str	r3, [r4, #20]
 8008520:	b002      	add	sp, #8
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	ab01      	add	r3, sp, #4
 8008526:	466a      	mov	r2, sp
 8008528:	f7ff ffc9 	bl	80084be <__swhatbuf_r>
 800852c:	9900      	ldr	r1, [sp, #0]
 800852e:	4605      	mov	r5, r0
 8008530:	4630      	mov	r0, r6
 8008532:	f7fe ff53 	bl	80073dc <_malloc_r>
 8008536:	b948      	cbnz	r0, 800854c <__smakebuf_r+0x44>
 8008538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853c:	059a      	lsls	r2, r3, #22
 800853e:	d4ef      	bmi.n	8008520 <__smakebuf_r+0x18>
 8008540:	f023 0303 	bic.w	r3, r3, #3
 8008544:	f043 0302 	orr.w	r3, r3, #2
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	e7e3      	b.n	8008514 <__smakebuf_r+0xc>
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <__smakebuf_r+0x7c>)
 800854e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	6020      	str	r0, [r4, #0]
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	6163      	str	r3, [r4, #20]
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	6120      	str	r0, [r4, #16]
 8008562:	b15b      	cbz	r3, 800857c <__smakebuf_r+0x74>
 8008564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f8d3 	bl	8008714 <_isatty_r>
 800856e:	b128      	cbz	r0, 800857c <__smakebuf_r+0x74>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	89a0      	ldrh	r0, [r4, #12]
 800857e:	4305      	orrs	r5, r0
 8008580:	81a5      	strh	r5, [r4, #12]
 8008582:	e7cd      	b.n	8008520 <__smakebuf_r+0x18>
 8008584:	0800831d 	.word	0x0800831d

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800859e:	4291      	cmp	r1, r2
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <memmove>:
 80085a4:	4288      	cmp	r0, r1
 80085a6:	b510      	push	{r4, lr}
 80085a8:	eb01 0402 	add.w	r4, r1, r2
 80085ac:	d902      	bls.n	80085b4 <memmove+0x10>
 80085ae:	4284      	cmp	r4, r0
 80085b0:	4623      	mov	r3, r4
 80085b2:	d807      	bhi.n	80085c4 <memmove+0x20>
 80085b4:	1e43      	subs	r3, r0, #1
 80085b6:	42a1      	cmp	r1, r4
 80085b8:	d008      	beq.n	80085cc <memmove+0x28>
 80085ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085c2:	e7f8      	b.n	80085b6 <memmove+0x12>
 80085c4:	4402      	add	r2, r0
 80085c6:	4601      	mov	r1, r0
 80085c8:	428a      	cmp	r2, r1
 80085ca:	d100      	bne.n	80085ce <memmove+0x2a>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085d6:	e7f7      	b.n	80085c8 <memmove+0x24>

080085d8 <_realloc_r>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	4607      	mov	r7, r0
 80085dc:	4614      	mov	r4, r2
 80085de:	460e      	mov	r6, r1
 80085e0:	b921      	cbnz	r1, 80085ec <_realloc_r+0x14>
 80085e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085e6:	4611      	mov	r1, r2
 80085e8:	f7fe bef8 	b.w	80073dc <_malloc_r>
 80085ec:	b922      	cbnz	r2, 80085f8 <_realloc_r+0x20>
 80085ee:	f7fe fea5 	bl	800733c <_free_r>
 80085f2:	4625      	mov	r5, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f8:	f000 f8ae 	bl	8008758 <_malloc_usable_size_r>
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d20f      	bcs.n	8008620 <_realloc_r+0x48>
 8008600:	4621      	mov	r1, r4
 8008602:	4638      	mov	r0, r7
 8008604:	f7fe feea 	bl	80073dc <_malloc_r>
 8008608:	4605      	mov	r5, r0
 800860a:	2800      	cmp	r0, #0
 800860c:	d0f2      	beq.n	80085f4 <_realloc_r+0x1c>
 800860e:	4631      	mov	r1, r6
 8008610:	4622      	mov	r2, r4
 8008612:	f7ff ffb9 	bl	8008588 <memcpy>
 8008616:	4631      	mov	r1, r6
 8008618:	4638      	mov	r0, r7
 800861a:	f7fe fe8f 	bl	800733c <_free_r>
 800861e:	e7e9      	b.n	80085f4 <_realloc_r+0x1c>
 8008620:	4635      	mov	r5, r6
 8008622:	e7e7      	b.n	80085f4 <_realloc_r+0x1c>

08008624 <__sread>:
 8008624:	b510      	push	{r4, lr}
 8008626:	460c      	mov	r4, r1
 8008628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862c:	f000 f89c 	bl	8008768 <_read_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	bfab      	itete	ge
 8008634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008636:	89a3      	ldrhlt	r3, [r4, #12]
 8008638:	181b      	addge	r3, r3, r0
 800863a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800863e:	bfac      	ite	ge
 8008640:	6563      	strge	r3, [r4, #84]	; 0x54
 8008642:	81a3      	strhlt	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__swrite>:
 8008646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864a:	461f      	mov	r7, r3
 800864c:	898b      	ldrh	r3, [r1, #12]
 800864e:	05db      	lsls	r3, r3, #23
 8008650:	4605      	mov	r5, r0
 8008652:	460c      	mov	r4, r1
 8008654:	4616      	mov	r6, r2
 8008656:	d505      	bpl.n	8008664 <__swrite+0x1e>
 8008658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865c:	2302      	movs	r3, #2
 800865e:	2200      	movs	r2, #0
 8008660:	f000 f868 	bl	8008734 <_lseek_r>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	4632      	mov	r2, r6
 8008672:	463b      	mov	r3, r7
 8008674:	4628      	mov	r0, r5
 8008676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867a:	f000 b817 	b.w	80086ac <_write_r>

0800867e <__sseek>:
 800867e:	b510      	push	{r4, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008686:	f000 f855 	bl	8008734 <_lseek_r>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	bf15      	itete	ne
 8008690:	6560      	strne	r0, [r4, #84]	; 0x54
 8008692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869a:	81a3      	strheq	r3, [r4, #12]
 800869c:	bf18      	it	ne
 800869e:	81a3      	strhne	r3, [r4, #12]
 80086a0:	bd10      	pop	{r4, pc}

080086a2 <__sclose>:
 80086a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a6:	f000 b813 	b.w	80086d0 <_close_r>
	...

080086ac <_write_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_write_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7fc f8d3 	bl	8004866 <_write>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_write_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_write_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20002c2c 	.word	0x20002c2c

080086d0 <_close_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_close_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7fc f8df 	bl	800489e <_close>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_close_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_close_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20002c2c 	.word	0x20002c2c

080086f0 <_fstat_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d07      	ldr	r5, [pc, #28]	; (8008710 <_fstat_r+0x20>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	f7fc f8da 	bl	80048b6 <_fstat>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d102      	bne.n	800870c <_fstat_r+0x1c>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	b103      	cbz	r3, 800870c <_fstat_r+0x1c>
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	bf00      	nop
 8008710:	20002c2c 	.word	0x20002c2c

08008714 <_isatty_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d06      	ldr	r5, [pc, #24]	; (8008730 <_isatty_r+0x1c>)
 8008718:	2300      	movs	r3, #0
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	f7fc f8d9 	bl	80048d6 <_isatty>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_isatty_r+0x1a>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_isatty_r+0x1a>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20002c2c 	.word	0x20002c2c

08008734 <_lseek_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_lseek_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7fc f8d2 	bl	80048ec <_lseek>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_lseek_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_lseek_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20002c2c 	.word	0x20002c2c

08008758 <_malloc_usable_size_r>:
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f18      	subs	r0, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbc      	itt	lt
 8008762:	580b      	ldrlt	r3, [r1, r0]
 8008764:	18c0      	addlt	r0, r0, r3
 8008766:	4770      	bx	lr

08008768 <_read_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_read_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7fc f858 	bl	800482c <_read>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_read_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_read_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20002c2c 	.word	0x20002c2c

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr
