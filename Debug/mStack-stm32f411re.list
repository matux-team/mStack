
mStack-stm32f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080071d8  080071d8  000171d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007584  08007584  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800758c  0800758c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003460  20000078  08007608  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200034d8  08007608  000234d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f56f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005731  00000000  00000000  0003f613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00044d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000460c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9da  00000000  00000000  000473c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001242e  00000000  00000000  00064da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097385  00000000  00000000  000771d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  0010e5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071c0 	.word	0x080071c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080071c0 	.word	0x080071c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <_ZN4core5QueueC1EPht>:
{

class Queue
{
public:
    Queue(uint8_t* buf, uint16_t size)
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80fb      	strh	r3, [r7, #6]
    {
        first_ = buf;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
        size_ = size;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	801a      	strh	r2, [r3, #0]
        last_ = first_ + size;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	441a      	add	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	609a      	str	r2, [r3, #8]
        inPtr_ = first_;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	60da      	str	r2, [r3, #12]
        outPtr_ = first_;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
    }
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN4core5Queue9availableEv>:
    uint16_t available()
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    {
    	uint16_t ret = size_+outPtr_-inPtr_;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	81fb      	strh	r3, [r7, #14]
    	if (ret > size_) ret -= size_;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	89fa      	ldrh	r2, [r7, #14]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d904      	bls.n	8000ee6 <_ZN4core5Queue9availableEv+0x2e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	81fb      	strh	r3, [r7, #14]
    	return ret;
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
    }
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN4core9Component4initEv>:
{

class Component
{
public:
    virtual void init(){/*empty*/}
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_ZN4core9ComponentD1Ev>:
    virtual ~Component(){}
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <_ZN4core9ComponentD1Ev+0x1c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	080072b4 	.word	0x080072b4

08000f28 <_ZN4core9ComponentD0Ev>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffe9 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 8000f36:	2104      	movs	r1, #4
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f004 fb67 	bl	800560c <_ZdlPvj>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZN4core5EventD1Ev>:

class Event
{
public:
    Event();
    virtual ~Event(){};
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <_ZN4core5EventD1Ev+0x1c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	080072a0 	.word	0x080072a0

08000f68 <_ZN4core5EventD0Ev>:
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe9 	bl	8000f48 <_ZN4core5EventD1Ev>
 8000f76:	210c      	movs	r1, #12
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f004 fb47 	bl	800560c <_ZdlPvj>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN4core5Event7executeEv>:

protected:
    virtual void execute(){};
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_ZN7console10ControllerD1Ev>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_ZN7console10ControllerD1Ev+0x20>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffab 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800728c 	.word	0x0800728c

08000fc0 <_ZN7console10ControllerD0Ev>:
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffe7 	bl	8000f9c <_ZN7console10ControllerD1Ev>
 8000fce:	2158      	movs	r1, #88	; 0x58
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f004 fb1b 	bl	800560c <_ZdlPvj>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZN4core9ComponentC1Ev>:
class Component
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <_ZN4core9ComponentC1Ev+0x1c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	080072b4 	.word	0x080072b4

08001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>:

class EmptyEvent: public Event
{
public:
    typedef void (Component::*Handler) ();
    EmptyEvent(Component* component, Handler handler):component_(component), handler_(handler){}
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	4639      	mov	r1, r7
 800100c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb98 	bl	8002748 <_ZN4core5EventC1Ev>
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE+0x3c>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3310      	adds	r3, #16
 8001028:	463a      	mov	r2, r7
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08007278 	.word	0x08007278

08001040 <_ZN4core10EmptyEvent7executeEv>:
    void post()
    {
        core::Engine::instance().events().post(container_);
    }
private:
    void execute() override
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    {
        (component_->*handler_)();
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6952      	ldr	r2, [r2, #20]
 8001050:	1052      	asrs	r2, r2, #1
 8001052:	1899      	adds	r1, r3, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_ZN4core10EmptyEvent7executeEv+0x26>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	e00a      	b.n	800107c <_ZN4core10EmptyEvent7executeEv+0x3c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6952      	ldr	r2, [r2, #20]
 800106e:	1052      	asrs	r2, r2, #1
 8001070:	4413      	add	r3, r2
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6912      	ldr	r2, [r2, #16]
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4608      	mov	r0, r1
 800107e:	4798      	blx	r3
    }
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN4core7Machine9NullStateEv>:
class Machine: public core::Component
{
public:
    typedef void (Machine::*State)();
protected:
    void NullState(){}
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_ZN4core7Machine6check_EhMS0_FvvE>:
    State nextState_ = nullptr;
    State currentState_ = &Machine::NullState;
    virtual bool check_(uint8_t event, State next){return false;}
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	4608      	mov	r0, r1
 80010a6:	4639      	mov	r1, r7
 80010a8:	e881 000c 	stmia.w	r1, {r2, r3}
 80010ac:	4603      	mov	r3, r0
 80010ae:	72fb      	strb	r3, [r7, #11]
 80010b0:	2300      	movs	r3, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN4core7Machine6start_EMS0_FvvE>:
    virtual void start_(State state){currentState_ = state;}
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	330c      	adds	r3, #12
 80010d0:	1d3a      	adds	r2, r7, #4
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <__tcf_3>:
#define TX_BUF_SIZE   		2048
#define HEADER_INDICATOR	0xFE
#define FOOTER_INDICATOR	0xFD
#define MAX_PACKET_LENGTH	250

MACHINE(console, Driver, uint8_t)
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <__tcf_3+0xc>)
 80010ee:	f000 f87b 	bl	80011e8 <_ZN7console6DriverD1Ev>
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000094 	.word	0x20000094

080010f8 <_ZN7console6Driver8instanceEv>:
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f3bf 8f5b 	dmb	ish
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <_ZN7console6Driver8instanceEv+0x48>
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 800111a:	f004 fa79 	bl	8005610 <__cxa_guard_acquire>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf14      	ite	ne
 8001124:	2301      	movne	r3, #1
 8001126:	2300      	moveq	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <_ZN7console6Driver8instanceEv+0x48>
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <_ZN7console6Driver8instanceEv+0x54>)
 8001130:	f000 f8c6 	bl	80012c0 <_ZN7console6DriverC1Ev>
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <_ZN7console6Driver8instanceEv+0x50>)
 8001136:	f004 fa77 	bl	8005628 <__cxa_guard_release>
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <_ZN7console6Driver8instanceEv+0x58>)
 800113c:	f005 fb21 	bl	8006782 <atexit>
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <_ZN7console6Driver8instanceEv+0x54>)
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200009f4 	.word	0x200009f4
 800114c:	20000094 	.word	0x20000094
 8001150:	080010e9 	.word	0x080010e9

08001154 <_ZN4core7MachineD1Ev>:
class Machine: public core::Component
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_ZN4core7MachineD1Ev+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fecf 	bl	8000f08 <_ZN4core9ComponentD1Ev>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800725c 	.word	0x0800725c

08001178 <_ZN4core7MachineD0Ev>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe7 	bl	8001154 <_ZN4core7MachineD1Ev>
 8001186:	2114      	movs	r1, #20
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f004 fa3f 	bl	800560c <_ZdlPvj>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN4core11ByteMachineIhED1Ev>:
        (this->*currentState_)();
    }
};

template <typename T>
class ByteMachine: public core::Machine
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <_ZN4core11ByteMachineIhED1Ev+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3318      	adds	r3, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fa7c 	bl	80016a8 <_ZN4core10FixedEventIhED1Ev>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffce 	bl	8001154 <_ZN4core7MachineD1Ev>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0800722c 	.word	0x0800722c

080011c8 <_ZN4core11ByteMachineIhED0Ev>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffe1 	bl	8001198 <_ZN4core11ByteMachineIhED1Ev>
 80011d6:	2134      	movs	r1, #52	; 0x34
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f004 fa17 	bl	800560c <_ZdlPvj>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN7console6DriverD1Ev>:
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <_ZN7console6DriverD1Ev+0x2c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3334      	adds	r3, #52	; 0x34
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa76 	bl	80016ec <_ZN4core10EmptyEventD1Ev>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffc8 	bl	8001198 <_ZN4core11ByteMachineIhED1Ev>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	080072c8 	.word	0x080072c8

08001218 <_ZN7console6DriverD0Ev>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe1 	bl	80011e8 <_ZN7console6DriverD1Ev>
 8001226:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f004 f9ee 	bl	800560c <_ZdlPvj>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <_ZN4core7MachineC1Ev>:
class Machine: public core::Component
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff feca 	bl	8000fe0 <_ZN4core9ComponentC1Ev>
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <_ZN4core7MachineC1Ev+0x38>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_ZN4core7MachineC1Ev+0x3c>)
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800725c 	.word	0x0800725c
 8001278:	08001089 	.word	0x08001089

0800127c <_ZN4core11ByteMachineIhEC1Ev>:
class ByteMachine: public core::Machine
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffd8 	bl	800123c <_ZN4core7MachineC1Ev>
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <_ZN4core11ByteMachineIhEC1Ev+0x3c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f103 0018 	add.w	r0, r3, #24
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_ZN4core11ByteMachineIhEC1Ev+0x40>)
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	cb0c      	ldmia	r3, {r2, r3}
 80012a8:	f000 f94e 	bl	8001548 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800722c 	.word	0x0800722c
 80012bc:	080015a5 	.word	0x080015a5

080012c0 <_ZN7console6DriverC1Ev>:
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffd6 	bl	800127c <_ZN4core11ByteMachineIhEC1Ev>
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <_ZN7console6DriverC1Ev+0x58>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <_ZN7console6DriverC1Ev+0x5c>)
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	cb0c      	ldmia	r3, {r2, r3}
 80012ec:	f7ff fe88 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	334c      	adds	r3, #76	; 0x4c
 80012fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fdb8 	bl	8000e74 <_ZN4core5QueueC1EPht>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	080072c8 	.word	0x080072c8
 800131c:	08001f55 	.word	0x08001f55

08001320 <_ZN7console10Controller4initEv>:
#include <stdio.h>
#include <stdarg.h>
#include <console/driver.h>

void console::Controller::init()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    console::Driver::instance().init();
 8001328:	f7ff fee6 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 800132c:	4603      	mov	r3, r0
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	4790      	blx	r2
    plotTask_.start(20);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3308      	adds	r3, #8
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	2114      	movs	r1, #20
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fbde 	bl	8002b02 <_ZN4core4Task5startEml>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZN7console10Controller6printfEPKcz>:

    return true;
}

void console::Controller::printf(const char* format, ...)
{
 800134e:	b40e      	push	{r1, r2, r3}
 8001350:	b580      	push	{r7, lr}
 8001352:	b0c5      	sub	sp, #276	; 0x114
 8001354:	af00      	add	r7, sp, #0
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	6018      	str	r0, [r3, #0]
    char buf[256];
    va_list args;
    va_start (args, format);
 800135a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	601a      	str	r2, [r3, #0]
    int l = vsprintf(buf, format ,args) + 1;
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	f107 000c 	add.w	r0, r7, #12
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001372:	f005 fb63 	bl	8006a3c <vsiprintf>
 8001376:	4603      	mov	r3, r0
 8001378:	3301      	adds	r3, #1
 800137a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    va_end(args);
    console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
 800137e:	f7ff febb 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8001382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001386:	b2da      	uxtb	r2, r3
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2101      	movs	r1, #1
 800138e:	f000 fd49 	bl	8001e24 <_ZN7console6Driver10sendPacketEthPKh>
//    bool ret = console::Driver::instance().sendPacket(console::Controller::MessageReceived, l, (uint8_t*)buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 8001392:	bf00      	nop
 8001394:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001398:	46bd      	mov	sp, r7
 800139a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800139e:	b003      	add	sp, #12
 80013a0:	4770      	bx	lr

080013a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>:

console::Command* console::Controller::registerCommand(uint16_t type, Handler handler)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	460b      	mov	r3, r1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	817b      	strh	r3, [r7, #10]
    Command* cmd = new Command();
 80013b0:	200c      	movs	r0, #12
 80013b2:	f004 f93c 	bl	800562e <_Znwj>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2200      	movs	r2, #0
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	617b      	str	r3, [r7, #20]
    cmd->type = type;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	897a      	ldrh	r2, [r7, #10]
 80013ca:	801a      	strh	r2, [r3, #0]
    cmd->handler = handler;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	605a      	str	r2, [r3, #4]
    cmd->next = commands_;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	609a      	str	r2, [r3, #8]
    commands_ = cmd;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    return cmd;
 80013e0:	697b      	ldr	r3, [r7, #20]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN7console10Controller14updateIntFieldEtl>:

void console::Controller::updateIntField(uint16_t command, int32_t value)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	460b      	mov	r3, r1
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	817b      	strh	r3, [r7, #10]
    uint8_t buf[6];
    ENCODE_16(command,buf,0);
 80013f8:	897b      	ldrh	r3, [r7, #10]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	743b      	strb	r3, [r7, #16]
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	747b      	strb	r3, [r7, #17]
    ENCODE_32(value,buf,2);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0e1b      	lsrs	r3, r3, #24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	74bb      	strb	r3, [r7, #18]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	141b      	asrs	r3, r3, #16
 8001414:	b2db      	uxtb	r3, r3
 8001416:	74fb      	strb	r3, [r7, #19]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	121b      	asrs	r3, r3, #8
 800141c:	b2db      	uxtb	r3, r3
 800141e:	753b      	strb	r3, [r7, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	757b      	strb	r3, [r7, #21]
    console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
 8001426:	f7ff fe67 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	2206      	movs	r2, #6
 8001430:	2102      	movs	r1, #2
 8001432:	f000 fcf7 	bl	8001e24 <_ZN7console6Driver10sendPacketEthPKh>
//    bool ret = console::Driver::instance().sendPacket(console::Controller::IntFieldReceived, 6, buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZN7console10Controller14processCommandEthPh>:

void console::Controller::processCommand(uint16_t type, uint8_t length, uint8_t* data)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	817b      	strh	r3, [r7, #10]
 800144c:	4613      	mov	r3, r2
 800144e:	727b      	strb	r3, [r7, #9]
	Command* it = commands_;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d010      	beq.n	800147e <_ZN7console10Controller14processCommandEthPh+0x40>
	{
		if (it->type==type)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	897a      	ldrh	r2, [r7, #10]
 8001462:	429a      	cmp	r2, r3
 8001464:	d107      	bne.n	8001476 <_ZN7console10Controller14processCommandEthPh+0x38>
		{
			(*it->handler)(type, length,data);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	7a79      	ldrb	r1, [r7, #9]
 800146c:	8978      	ldrh	r0, [r7, #10]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4798      	blx	r3
			break;
 8001472:	bf00      	nop
		}
		it=it->next;
	}
}
 8001474:	e003      	b.n	800147e <_ZN7console10Controller14processCommandEthPh+0x40>
		it=it->next;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	617b      	str	r3, [r7, #20]
	while (it!=nullptr)
 800147c:	e7eb      	b.n	8001456 <_ZN7console10Controller14processCommandEthPh+0x18>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_ZN7console10Controller15updateTextFieldEthPh>:
    int8_t length = strlen(data);
    updateTextField(command, length, (uint8_t*)data);
}

void console::Controller::updateTextField(uint16_t command, uint8_t length, uint8_t* data)
{
 8001486:	b5b0      	push	{r4, r5, r7, lr}
 8001488:	b088      	sub	sp, #32
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	817b      	strh	r3, [r7, #10]
 8001494:	4613      	mov	r3, r2
 8001496:	727b      	strb	r3, [r7, #9]
    if (length > MAX_PACKET_LENGTH-6) return;
    uint8_t buf[length+2];
    ENCODE_16(command,buf,0);
    for (int i=0;i<length;i++) buf[i+2] = data[i];
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 8001498:	466b      	mov	r3, sp
 800149a:	461d      	mov	r5, r3
    if (length > MAX_PACKET_LENGTH-6) return;
 800149c:	7a7b      	ldrb	r3, [r7, #9]
 800149e:	2bf4      	cmp	r3, #244	; 0xf4
 80014a0:	d901      	bls.n	80014a6 <_ZN7console10Controller15updateTextFieldEthPh+0x20>
 80014a2:	46ad      	mov	sp, r5
 80014a4:	e04c      	b.n	8001540 <_ZN7console10Controller15updateTextFieldEthPh+0xba>
    uint8_t buf[length+2];
 80014a6:	7a7b      	ldrb	r3, [r7, #9]
 80014a8:	1c5c      	adds	r4, r3, #1
 80014aa:	61bc      	str	r4, [r7, #24]
 80014ac:	4623      	mov	r3, r4
 80014ae:	3301      	adds	r3, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	00cb      	lsls	r3, r1, #3
 80014c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014c4:	00c2      	lsls	r2, r0, #3
 80014c6:	4623      	mov	r3, r4
 80014c8:	3301      	adds	r3, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	00cb      	lsls	r3, r1, #3
 80014da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014de:	00c2      	lsls	r2, r0, #3
 80014e0:	4623      	mov	r3, r4
 80014e2:	3301      	adds	r3, #1
 80014e4:	3307      	adds	r3, #7
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	ebad 0d03 	sub.w	sp, sp, r3
 80014ee:	466b      	mov	r3, sp
 80014f0:	3300      	adds	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    ENCODE_16(command,buf,0);
 80014f4:	897b      	ldrh	r3, [r7, #10]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	705a      	strb	r2, [r3, #1]
    for (int i=0;i<length;i++) buf[i+2] = data[i];
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	7a7b      	ldrb	r3, [r7, #9]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	429a      	cmp	r2, r3
 8001512:	da0b      	bge.n	800152c <_ZN7console10Controller15updateTextFieldEthPh+0xa6>
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	441a      	add	r2, r3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3302      	adds	r3, #2
 800151e:	7811      	ldrb	r1, [r2, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	54d1      	strb	r1, [r2, r3]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3301      	adds	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e7ef      	b.n	800150c <_ZN7console10Controller15updateTextFieldEthPh+0x86>
    console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
 800152c:	f7ff fde4 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8001530:	7a7b      	ldrb	r3, [r7, #9]
 8001532:	3302      	adds	r3, #2
 8001534:	b2da      	uxtb	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2103      	movs	r1, #3
 800153a:	f000 fc73 	bl	8001e24 <_ZN7console6Driver10sendPacketEthPKh>
 800153e:	46ad      	mov	sp, r5
//    bool ret = console::Driver::instance().sendPacket(console::Controller::TextFieldReceived, length+2, buf);
//    if(!ret)
//    {
//    	Error_Handler();
//    }
}
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001548 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>:
template <typename E>
class FixedEvent: public Event
{
public:
    typedef void (Component::*Handler) (const E&);
    FixedEvent(Component* component, Handler handler)
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4639      	mov	r1, r7
 8001554:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f8f4 	bl	8002748 <_ZN4core5EventC1Ev>
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE+0x58>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    	component_ = component;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3310      	adds	r3, #16
 8001576:	463a      	mov	r2, r7
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	e883 0003 	stmia.w	r3, {r0, r1}
//    	Declare MemPool with correspond type here
    	pool_ = new MemPool<E>(2);	//FIXME: 3 is constant
 8001580:	200c      	movs	r0, #12
 8001582:	f004 f854 	bl	800562e <_Znwj>
 8001586:	4603      	mov	r3, r0
 8001588:	461c      	mov	r4, r3
 800158a:	2102      	movs	r1, #2
 800158c:	4620      	mov	r0, r4
 800158e:	f000 f84d 	bl	800162c <_ZN7MemPoolIhEC1Em>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	619c      	str	r4, [r3, #24]
    }
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	08007248 	.word	0x08007248

080015a4 <_ZN4core11ByteMachineIhE8execute_ERKh>:
protected:
    T data_;
    typedef void (Component::*Handler) (const T&);
    core::FixedEvent<T> postEvent_ = core::FixedEvent<T>(this, (Handler)&ByteMachine<T>::execute_);

    void execute_(const T& c)
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    {
        data_ = c;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	751a      	strb	r2, [r3, #20]
        nextState_ = nullptr;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
        (this->*currentState_)();
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6912      	ldr	r2, [r2, #16]
 80015c8:	1052      	asrs	r2, r2, #1
 80015ca:	1899      	adds	r1, r3, r2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_ZN4core11ByteMachineIhE8execute_ERKh+0x3a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	e009      	b.n	80015f2 <_ZN4core11ByteMachineIhE8execute_ERKh+0x4e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6912      	ldr	r2, [r2, #16]
 80015e4:	1052      	asrs	r2, r2, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4608      	mov	r0, r1
 80015f4:	4798      	blx	r3
        if (nextState_ != nullptr) currentState_ = nextState_;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <_ZN4core11ByteMachineIhE8execute_ERKh+0x6a>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <_ZN4core11ByteMachineIhE8execute_ERKh+0x6c>
 800160e:	2300      	movs	r3, #0
 8001610:	2b01      	cmp	r3, #1
 8001612:	d007      	beq.n	8001624 <_ZN4core11ByteMachineIhE8execute_ERKh+0x80>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	330c      	adds	r3, #12
 800161a:	3204      	adds	r2, #4
 800161c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001620:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZN7MemPoolIhEC1Em>:
    struct _Unit*    m_pAllocatedMemBlock; //Head pointer to Allocated linkedlist.
    struct _Unit*    m_pFreeMemBlock;      //Head pointer to Free linkedlist.

public:

    MemPool(unsigned long ulUnitNum):
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
            m_pMemBlock(nullptr),
            m_pAllocatedMemBlock(nullptr),
            m_pFreeMemBlock(nullptr)//,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    {
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f005 f8c7 	bl	80067e4 <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d018      	beq.n	8001698 <_ZN7MemPoolIhEC1Em+0x6c>
        {
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d214      	bcs.n	800169c <_ZN7MemPoolIhEC1Em+0x70>
            {
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	440b      	add	r3, r1
 8001680:	60bb      	str	r3, [r7, #8]

                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	601a      	str	r2, [r3, #0]

                m_pFreeMemBlock = pCurUnit;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e7e8      	b.n	800166a <_ZN7MemPoolIhEC1Em+0x3e>
            }
        }
        else
        {
        	Error_Handler();
 8001698:	f002 fb52 	bl	8003d40 <Error_Handler>
        }
    }
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <_ZN4core10FixedEventIhED1Ev>:
class FixedEvent: public Event
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_ZN4core10FixedEventIhED1Ev+0x20>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc45 	bl	8000f48 <_ZN4core5EventD1Ev>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08007248 	.word	0x08007248

080016cc <_ZN4core10FixedEventIhED0Ev>:
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe7 	bl	80016a8 <_ZN4core10FixedEventIhED1Ev>
 80016da:	211c      	movs	r1, #28
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f003 ff95 	bl	800560c <_ZdlPvj>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN4core10EmptyEventD1Ev>:
class EmptyEvent: public Event
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <_ZN4core10EmptyEventD1Ev+0x20>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fc23 	bl	8000f48 <_ZN4core5EventD1Ev>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08007278 	.word	0x08007278

08001710 <_ZN4core10EmptyEventD0Ev>:
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_ZN4core10EmptyEventD1Ev>
 800171e:	2118      	movs	r1, #24
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f003 ff73 	bl	800560c <_ZdlPvj>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN4core11ByteMachineIhE6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        currentState_ = s;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	330c      	adds	r3, #12
 8001742:	1d3a      	adds	r2, r7, #4
 8001744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001748:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN4core10FixedEventIhE7executeEv>:
    	memcpy(container_.payload_, &e, sizeof(E));

    	core::Engine::instance().events().post(container_);
    }
protected:
    void execute() override
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    {
    	E* e = (E*)container_.payload_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	60fb      	str	r3, [r7, #12]
        (component_->*handler_)(*e);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6952      	ldr	r2, [r2, #20]
 800176e:	1052      	asrs	r2, r2, #1
 8001770:	1898      	adds	r0, r3, r2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <_ZN4core10FixedEventIhE7executeEv+0x2c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	e00a      	b.n	800179a <_ZN4core10FixedEventIhE7executeEv+0x42>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6952      	ldr	r2, [r2, #20]
 800178c:	1052      	asrs	r2, r2, #1
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6912      	ldr	r2, [r2, #16]
 8001796:	4413      	add	r3, r2
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	4798      	blx	r3
        pool_->Free(e);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f804 	bl	80017b2 <_ZN7MemPoolIhE4FreeEPh>
    }
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN7MemPoolIhE4FreeEPh>:
        m_pAllocatedMemBlock = pCurUnit;

        return (T *)((char *)pCurUnit + sizeof(struct _Unit) );
    }

    void Free(T* p)
 80017b2:	b480      	push	{r7}
 80017b4:	b087      	sub	sp, #28
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
    {
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3b04      	subs	r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01e      	beq.n	8001810 <_ZN7MemPoolIhE4FreeEPh+0x5e>
		{
			if(it == pCurUnit)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d114      	bne.n	8001804 <_ZN7MemPoolIhE4FreeEPh+0x52>
			{
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <_ZN7MemPoolIhE4FreeEPh+0x38>
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	e003      	b.n	80017f2 <_ZN7MemPoolIhE4FreeEPh+0x40>
				else prev->pNext = it->pNext;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	609a      	str	r2, [r3, #8]
				break;
 8001800:	bf00      	nop
			}
			prev = it;
		}
    }
 8001802:	e005      	b.n	8001810 <_ZN7MemPoolIhE4FreeEPh+0x5e>
			prev = it;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e7dd      	b.n	80017cc <_ZN7MemPoolIhE4FreeEPh+0x1a>
    }
 8001810:	bf00      	nop
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN4core5Queue5emptyEv>:
    bool notEmpty(){return (inPtr_ != outPtr_);}
    bool empty(){return (inPtr_ == outPtr_);}
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_ZN4core5Queue4pushEh>:
    {
        inPtr_ = first_;
        outPtr_ = first_;
    }

    void push(uint8_t val)
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	70fb      	strb	r3, [r7, #3]
    {
    	uint8_t* next = inPtr_ + 1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
    	if (next == last_) next = first_;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d102      	bne.n	8001866 <_ZN4core5Queue4pushEh+0x24>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
		if (next!=outPtr_) //queue not full
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d006      	beq.n	800187e <_ZN4core5Queue4pushEh+0x3c>
		{
			*inPtr_ = val;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	701a      	strb	r2, [r3, #0]
			inPtr_ = next;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	60da      	str	r2, [r3, #12]
		}
    }
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_ZN4core5Queue3popEv>:

    uint8_t pop()
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
    {
    	if (outPtr_ != inPtr_)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	d014      	beq.n	80018c8 <_ZN4core5Queue3popEv+0x3e>
		{
			uint8_t ret = *outPtr_;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	73fb      	strb	r3, [r7, #15]
			outPtr_++;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
			if (outPtr_ == last_) outPtr_ = first_;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d103      	bne.n	80018c4 <_ZN4core5Queue3popEv+0x3a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	611a      	str	r2, [r3, #16]
			return ret;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	e000      	b.n	80018ca <_ZN4core5Queue3popEv+0x40>
		}
        return 0;
 80018c8:	2300      	movs	r3, #0
    }
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <_ZN4core10EventQueueD1Ev>:
{

class EventQueue//: public AbstractEventQueue
{
public:
	virtual ~EventQueue(){}
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <_ZN4core10EventQueueD1Ev+0x1c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	080072e4 	.word	0x080072e4

080018f8 <_ZN4core10EventQueueD0Ev>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe9 	bl	80018d8 <_ZN4core10EventQueueD1Ev>
 8001906:	f242 211c 	movw	r1, #8732	; 0x221c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f003 fe7e 	bl	800560c <_ZdlPvj>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_ZN4core10EventQueue4postENS_9ContainerE>:
        	Error_Handler();
        }
		return true;
	}

    inline void post(container_t container)
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        uint16_t avail = size_ + outPtr_ - inPtr_;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800192e:	3314      	adds	r3, #20
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001938:	3304      	adds	r3, #4
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	441a      	add	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001946:	3310      	adds	r3, #16
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	10db      	asrs	r3, r3, #3
 800194e:	82fb      	strh	r3, [r7, #22]
        if (avail > size_) avail -= size_;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001956:	3304      	adds	r3, #4
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	8afa      	ldrh	r2, [r7, #22]
 800195c:	429a      	cmp	r2, r3
 800195e:	d907      	bls.n	8001970 <_ZN4core10EventQueue4postENS_9ContainerE+0x56>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001966:	3304      	adds	r3, #4
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	8afa      	ldrh	r2, [r7, #22]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	82fb      	strh	r3, [r7, #22]
        if (avail < 1)
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <_ZN4core10EventQueue4postENS_9ContainerE+0x62>
        {
        	Error_Handler();
 8001976:	f002 f9e3 	bl	8003d40 <Error_Handler>
        	return;
 800197a:	e005      	b.n	8001988 <_ZN4core10EventQueue4postENS_9ContainerE+0x6e>
        }

        push_(container);
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f803 	bl	800198e <_ZN4core10EventQueue5push_ENS_9ContainerE>
    }
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZN4core10EventQueue5push_ENS_9ContainerE>:

private:
    inline void push_(container_t val)
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	e883 0006 	stmia.w	r3, {r1, r2}
    {
        *(inPtr_) = val;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019a2:	3310      	adds	r3, #16
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019ae:	e882 0003 	stmia.w	r2, {r0, r1}
        inPtr_++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019b8:	3310      	adds	r3, #16
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f103 0208 	add.w	r2, r3, #8
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019c6:	3310      	adds	r3, #16
 80019c8:	601a      	str	r2, [r3, #0]
        if (inPtr_ == last_) inPtr_ = first_;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019d0:	3310      	adds	r3, #16
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019da:	330c      	adds	r3, #12
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d109      	bne.n	80019f6 <_ZN4core10EventQueue5push_ENS_9ContainerE+0x68>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019e8:	3308      	adds	r3, #8
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80019f2:	3310      	adds	r3, #16
 80019f4:	601a      	str	r2, [r3, #0]
    }
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_ZN4core6EngineD1Ev>:
class Task;

class Engine: public Event
{
public:
    ~Engine(){}
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <_ZN4core6EngineD1Ev+0x2c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	330c      	adds	r3, #12
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff5e 	bl	80018d8 <_ZN4core10EventQueueD1Ev>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa92 	bl	8000f48 <_ZN4core5EventD1Ev>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	080072f4 	.word	0x080072f4

08001a34 <_ZN4core6EngineD0Ev>:
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe1 	bl	8001a04 <_ZN4core6EngineD1Ev>
 8001a42:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f003 fde0 	bl	800560c <_ZdlPvj>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZN4core6Engine6eventsEv>:
    void run();
    inline void tick(); /*must be called in timer interrupt or SysTick interrupt, 1ms usually*/
    inline uint64_t tickCount(){return tickCount_;}
    void delay(uint32_t t); //t in ms, WARNING: this function is blocking, use in some limited context only
    EventQueue& events(){return events_;}
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	330c      	adds	r3, #12
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <__tcf_0>:
    static Engine& instance()
    {
        static Engine engine;
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4801      	ldr	r0, [pc, #4]	; (8001a7c <__tcf_0+0xc>)
 8001a76:	f7ff ffc5 	bl	8001a04 <_ZN4core6EngineD1Ev>
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200009f8 	.word	0x200009f8

08001a80 <_ZN4core6Engine8instanceEv>:
    static Engine& instance()
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
        static Engine engine;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <_ZN4core6Engine8instanceEv+0x50>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f3bf 8f5b 	dmb	ish
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <_ZN4core6Engine8instanceEv+0x48>
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <_ZN4core6Engine8instanceEv+0x50>)
 8001aa2:	f003 fdb5 	bl	8005610 <__cxa_guard_acquire>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <_ZN4core6Engine8instanceEv+0x48>
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <_ZN4core6Engine8instanceEv+0x54>)
 8001ab8:	f000 fe66 	bl	8002788 <_ZN4core6EngineC1Ev>
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <_ZN4core6Engine8instanceEv+0x50>)
 8001abe:	f003 fdb3 	bl	8005628 <__cxa_guard_release>
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <_ZN4core6Engine8instanceEv+0x58>)
 8001ac4:	f004 fe5d 	bl	8006782 <atexit>
        return engine;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <_ZN4core6Engine8instanceEv+0x54>)
    }
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20002c38 	.word	0x20002c38
 8001ad4:	200009f8 	.word	0x200009f8
 8001ad8:	08001a71 	.word	0x08001a71

08001adc <__tcf_1>:
#include <core/queue.h>
#include <core/engine.h>
#include <core/task.h>
#include "command.h"

COMPONENT(console, Controller)
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4801      	ldr	r0, [pc, #4]	; (8001ae8 <__tcf_1+0xc>)
 8001ae2:	f7ff fa5b 	bl	8000f9c <_ZN7console10ControllerD1Ev>
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20002c40 	.word	0x20002c40

08001aec <_ZN7console10Controller8instanceEv>:
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <_ZN7console10Controller8instanceEv+0x50>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f3bf 8f5b 	dmb	ish
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <_ZN7console10Controller8instanceEv+0x48>
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <_ZN7console10Controller8instanceEv+0x50>)
 8001b0e:	f003 fd7f 	bl	8005610 <__cxa_guard_acquire>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <_ZN7console10Controller8instanceEv+0x48>
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <_ZN7console10Controller8instanceEv+0x54>)
 8001b24:	f000 f810 	bl	8001b48 <_ZN7console10ControllerC1Ev>
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <_ZN7console10Controller8instanceEv+0x50>)
 8001b2a:	f003 fd7d 	bl	8005628 <__cxa_guard_release>
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <_ZN7console10Controller8instanceEv+0x58>)
 8001b30:	f004 fe27 	bl	8006782 <atexit>
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <_ZN7console10Controller8instanceEv+0x54>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20002c98 	.word	0x20002c98
 8001b40:	20002c40 	.word	0x20002c40
 8001b44:	08001add 	.word	0x08001add

08001b48 <_ZN7console10ControllerC1Ev>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa44 	bl	8000fe0 <_ZN4core9ComponentC1Ev>
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <_ZN7console10ControllerC1Ev+0x50>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 0008 	add.w	r0, r3, #8
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <_ZN7console10ControllerC1Ev+0x54>)
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	cb0c      	ldmia	r3, {r2, r3}
 8001b74:	f000 ffa1 	bl	8002aba <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	0800728c 	.word	0x0800728c
 8001b9c:	080023d3 	.word	0x080023d3

08001ba0 <_ZN4core10EmptyEvent4postEv>:
    void post()
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
        core::Engine::instance().events().post(container_);
 8001ba8:	f7ff ff6a 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff51 	bl	8001a56 <_ZN4core6Engine6eventsEv>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bbc:	f7ff fead 	bl	800191a <_ZN4core10EventQueue4postENS_9ContainerE>
    }
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN7console6Driver4initEv>:
#include <console/controller.h>
#include <console/driver.h>
#include <console/hal.h>

void console::Driver::init()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    console::HAL::init();
 8001bd0:	f000 fb00 	bl	80021d4 <_ZN7console3HAL4initEv>
    SM_START(ReceiveHeader);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3310      	adds	r3, #16
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <_ZN7console6Driver4initEv+0x30>)
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	2200      	movs	r2, #0
 8001be4:	60fa      	str	r2, [r7, #12]
 8001be6:	f107 0208 	add.w	r2, r7, #8
 8001bea:	ca06      	ldmia	r2, {r1, r2}
 8001bec:	4798      	blx	r3
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08001bfd 	.word	0x08001bfd

08001bfc <_ZN7console6Driver13ReceiveHeaderEv>:

STATE_BODY(console::Driver::ReceiveHeader)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    if (data_ == HEADER_INDICATOR) SM_SWITCH(Driver::ReceiveLength);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d1b      	ldrb	r3, [r3, #20]
 8001c08:	2bfe      	cmp	r3, #254	; 0xfe
 8001c0a:	d105      	bne.n	8001c18 <_ZN7console6Driver13ReceiveHeaderEv+0x1c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_ZN7console6Driver13ReceiveHeaderEv+0x28>)
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	08001c29 	.word	0x08001c29

08001c28 <_ZN7console6Driver13ReceiveLengthEv>:

STATE_BODY(console::Driver::ReceiveLength)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    rxLength_ = data_;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7d1a      	ldrb	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f883 295b 	strb.w	r2, [r3, #2395]	; 0x95b
    if (rxLength_ < MAX_PACKET_LENGTH)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001c40:	2bf9      	cmp	r3, #249	; 0xf9
 8001c42:	d816      	bhi.n	8001c72 <_ZN7console6Driver13ReceiveLengthEv+0x4a>
    {
        rxIndex_ = 2;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
        rxType_ = 0;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
        checksum_ = HEADER_INDICATOR + rxLength_;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001c5a:	3b02      	subs	r3, #2
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
        SM_SWITCH(ReceiveType);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <_ZN7console6Driver13ReceiveLengthEv+0x64>)
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
    }
    else SM_SWITCH(ReceiveHeader);
}
 8001c70:	e005      	b.n	8001c7e <_ZN7console6Driver13ReceiveLengthEv+0x56>
    else SM_SWITCH(ReceiveHeader);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <_ZN7console6Driver13ReceiveLengthEv+0x68>)
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08001c95 	.word	0x08001c95
 8001c90:	08001bfd 	.word	0x08001bfd

08001c94 <_ZN7console6Driver11ReceiveTypeEv>:

STATE_BODY(console::Driver::ReceiveType)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7d1b      	ldrb	r3, [r3, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxType_ <<= 8;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8b3 395e 	ldrh.w	r3, [r3, #2398]	; 0x95e
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    rxType_+= data_;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8b3 295e 	ldrh.w	r2, [r3, #2398]	; 0x95e
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7d1b      	ldrb	r3, [r3, #20]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8a3 295e 	strh.w	r2, [r3, #2398]	; 0x95e
    if (--rxIndex_ == 0)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d011      	beq.n	8001d1e <_ZN7console6Driver11ReceiveTypeEv+0x8a>
    {
        if (rxLength_ > 0) SM_SWITCH(ReceiveData);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <_ZN7console6Driver11ReceiveTypeEv+0x7e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <_ZN7console6Driver11ReceiveTypeEv+0x98>)
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
        else SM_SWITCH(ReceiveChecksum);
    }
}
 8001d10:	e005      	b.n	8001d1e <_ZN7console6Driver11ReceiveTypeEv+0x8a>
        else SM_SWITCH(ReceiveChecksum);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <_ZN7console6Driver11ReceiveTypeEv+0x9c>)
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08001d35 	.word	0x08001d35
 8001d30:	08001d9d 	.word	0x08001d9d

08001d34 <_ZN7console6Driver11ReceiveDataEv>:

STATE_BODY(console::Driver::ReceiveData)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    checksum_ += data_;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 295c 	ldrb.w	r2, [r3, #2396]	; 0x95c
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7d1b      	ldrb	r3, [r3, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
    rxBuffer_[rxIndex_++] = data_;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 395d 	ldrb.w	r3, [r3, #2397]	; 0x95d
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	b2d1      	uxtb	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	f882 195d 	strb.w	r1, [r2, #2397]	; 0x95d
 8001d60:	4619      	mov	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7d1a      	ldrb	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	440b      	add	r3, r1
 8001d6a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
    if (rxIndex_==rxLength_) SM_SWITCH(ReceiveChecksum);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 295d 	ldrb.w	r2, [r3, #2397]	; 0x95d
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 395b 	ldrb.w	r3, [r3, #2395]	; 0x95b
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d105      	bne.n	8001d8a <_ZN7console6Driver11ReceiveDataEv+0x56>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_ZN7console6Driver11ReceiveDataEv+0x64>)
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	08001d9d 	.word	0x08001d9d

08001d9c <_ZN7console6Driver15ReceiveChecksumEv>:
STATE_BODY(console::Driver::ReceiveChecksum)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    if (data_ == checksum_) SM_SWITCH(ReceiveFooter);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7d1a      	ldrb	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 395c 	ldrb.w	r3, [r3, #2396]	; 0x95c
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <_ZN7console6Driver15ReceiveChecksumEv+0x24>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <_ZN7console6Driver15ReceiveChecksumEv+0x3c>)
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    else SM_SWITCH(ReceiveHeader);
}
 8001dbe:	e005      	b.n	8001dcc <_ZN7console6Driver15ReceiveChecksumEv+0x30>
    else SM_SWITCH(ReceiveHeader);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <_ZN7console6Driver15ReceiveChecksumEv+0x40>)
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001bfd 	.word	0x08001bfd

08001de0 <_ZN7console6Driver13ReceiveFooterEv>:

STATE_BODY(console::Driver::ReceiveFooter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    if (data_ == FOOTER_INDICATOR)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7d1b      	ldrb	r3, [r3, #20]
 8001dec:	2bfd      	cmp	r3, #253	; 0xfd
 8001dee:	d10c      	bne.n	8001e0a <_ZN7console6Driver13ReceiveFooterEv+0x2a>
    {
        Controller::instance().processCommand(rxType_, rxLength_, rxBuffer_);
 8001df0:	f7ff fe7c 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8b3 195e 	ldrh.w	r1, [r3, #2398]	; 0x95e
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 295b 	ldrb.w	r2, [r3, #2395]	; 0x95b
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f603 0361 	addw	r3, r3, #2145	; 0x861
 8001e06:	f7ff fb1a 	bl	800143e <_ZN7console10Controller14processCommandEthPh>
    }
    SM_SWITCH(ReceiveHeader);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <_ZN7console6Driver13ReceiveFooterEv+0x40>)
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08001bfd 	.word	0x08001bfd

08001e24 <_ZN7console6Driver10sendPacketEthPKh>:

bool console::Driver::sendPacket(uint16_t type, uint8_t length, const uint8_t* data)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	4613      	mov	r3, r2
 8001e34:	727b      	strb	r3, [r7, #9]
    uint8_t checksum = 0u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    if (txQueue_.available() < length + 5)
 8001e3a:	7a7b      	ldrb	r3, [r7, #9]
 8001e3c:	1d1c      	adds	r4, r3, #4
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f837 	bl	8000eb8 <_ZN4core5Queue9availableEv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bfac      	ite	ge
 8001e50:	2301      	movge	r3, #1
 8001e52:	2300      	movlt	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <_ZN7console6Driver10sendPacketEthPKh+0x44>
    {
    	sendEvent.post();
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3334      	adds	r3, #52	; 0x34
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fe9e 	bl	8001ba0 <_ZN4core10EmptyEvent4postEv>
    	return false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e071      	b.n	8001f4c <_ZN7console6Driver10sendPacketEthPKh+0x128>
    }
    txQueue_.push(HEADER_INDICATOR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001e6e:	21fe      	movs	r1, #254	; 0xfe
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fce6 	bl	8001842 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) HEADER_INDICATOR;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	3b02      	subs	r3, #2
 8001e7a:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(length);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001e82:	7a7a      	ldrb	r2, [r7, #9]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fcdb 	bl	8001842 <_ZN4core5Queue4pushEh>
    checksum += length;
 8001e8c:	7dfa      	ldrb	r2, [r7, #23]
 8001e8e:	7a7b      	ldrb	r3, [r7, #9]
 8001e90:	4413      	add	r3, r2
 8001e92:	75fb      	strb	r3, [r7, #23]
    txQueue_.push((type >> 8) & 0xFF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f603 024c 	addw	r2, r3, #2124	; 0x84c
 8001e9a:	897b      	ldrh	r3, [r7, #10]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7ff fccc 	bl	8001842 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) ((type >> 8) & 0xFF);
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	75fb      	strb	r3, [r7, #23]
    txQueue_.push(type & 0xFF);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001ebe:	897a      	ldrh	r2, [r7, #10]
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fcbc 	bl	8001842 <_ZN4core5Queue4pushEh>
    checksum += (uint8_t) (type & 0xFF);
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	75fb      	strb	r3, [r7, #23]

    for (int i =0;i < length;i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	7a7b      	ldrb	r3, [r7, #9]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	da14      	bge.n	8001f0a <_ZN7console6Driver10sendPacketEthPKh+0xe6>
    {
        txQueue_.push(data[i]);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f603 004c 	addw	r0, r3, #2124	; 0x84c
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7ff fca7 	bl	8001842 <_ZN4core5Queue4pushEh>
        checksum += data[i];
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	4413      	add	r3, r2
 8001f00:	75fb      	strb	r3, [r7, #23]
    for (int i =0;i < length;i++)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3301      	adds	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e7e6      	b.n	8001ed8 <_ZN7console6Driver10sendPacketEthPKh+0xb4>
    }
    txQueue_.push(checksum);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f10:	7dfa      	ldrb	r2, [r7, #23]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc94 	bl	8001842 <_ZN4core5Queue4pushEh>
    txQueue_.push(FOOTER_INDICATOR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f20:	21fd      	movs	r1, #253	; 0xfd
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc8d 	bl	8001842 <_ZN4core5Queue4pushEh>

    if (!sending_)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <_ZN7console6Driver10sendPacketEthPKh+0x126>
    {
        sendEvent.post();
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3334      	adds	r3, #52	; 0x34
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fe2f 	bl	8001ba0 <_ZN4core10EmptyEvent4postEv>
        sending_ = true;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
    return true;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <_ZN7console6Driver12sendHandler_Ev>:

M_EVENT_HANDLER(console::Driver,send)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    if (txQueue_.empty())
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc5a 	bl	800181c <_ZN4core5Queue5emptyEv>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <_ZN7console6Driver12sendHandler_Ev+0x24>
    {
    	sending_ = false;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    	return;
 8001f76:	e013      	b.n	8001fa0 <_ZN7console6Driver12sendHandler_Ev+0x4c>
    }
    if (console::HAL::txReady()) console::HAL::write(txQueue_.pop());
 8001f78:	f000 f940 	bl	80021fc <_ZN7console3HAL7txReadyEv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <_ZN7console6Driver12sendHandler_Ev+0x42>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fc7e 	bl	800188a <_ZN4core5Queue3popEv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f943 	bl	800221c <_ZN7console3HAL5writeEh>
    sendEvent.post();
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3334      	adds	r3, #52	; 0x34
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fe00 	bl	8001ba0 <_ZN4core10EmptyEvent4postEv>
}
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	330c      	adds	r3, #12
 8002040:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	60bb      	str	r3, [r7, #8]
   return(result);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	330c      	adds	r3, #12
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	61ba      	str	r2, [r7, #24]
 800205a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205c:	6979      	ldr	r1, [r7, #20]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	e841 2300 	strex	r3, r2, [r1]
 8002064:	613b      	str	r3, [r7, #16]
   return(result);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d000      	beq.n	8002078 <LL_USART_EnableIT_RXNE+0x44>
 8002076:	e7e1      	b.n	800203c <LL_USART_EnableIT_RXNE+0x8>
}
 8002078:	bf00      	nop
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3314      	adds	r3, #20
 8002090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	60bb      	str	r3, [r7, #8]
   return(result);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3314      	adds	r3, #20
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	61ba      	str	r2, [r7, #24]
 80020aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	e841 2300 	strex	r3, r2, [r1]
 80020b4:	613b      	str	r3, [r7, #16]
   return(result);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d000      	beq.n	80020c8 <LL_USART_EnableIT_ERROR+0x44>
 80020c6:	e7e1      	b.n	800208c <LL_USART_EnableIT_ERROR+0x8>
}
 80020c8:	bf00      	nop
 80020ca:	3724      	adds	r7, #36	; 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	330c      	adds	r3, #12
 80020e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	330c      	adds	r3, #12
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	61ba      	str	r2, [r7, #24]
 80020fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fc:	6979      	ldr	r1, [r7, #20]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	e841 2300 	strex	r3, r2, [r1]
 8002104:	613b      	str	r3, [r7, #16]
   return(result);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d000      	beq.n	8002118 <LL_USART_DisableIT_TC+0x44>
 8002116:	e7e1      	b.n	80020dc <LL_USART_DisableIT_TC+0x8>
}
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	330c      	adds	r3, #12
 8002130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	e853 3f00 	ldrex	r3, [r3]
 8002138:	60bb      	str	r3, [r7, #8]
   return(result);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	330c      	adds	r3, #12
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	61ba      	str	r2, [r7, #24]
 800214a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	e841 2300 	strex	r3, r2, [r1]
 8002154:	613b      	str	r3, [r7, #16]
   return(result);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d000      	beq.n	8002168 <LL_USART_DisableIT_TXE+0x44>
 8002166:	e7e1      	b.n	800212c <LL_USART_DisableIT_TXE+0x8>
}
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b2db      	uxtb	r3, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	605a      	str	r2, [r3, #4]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <_ZN7console3HAL4initEv>:

#define UART_PORT			USART2
#define UART_ISR_HANDLER()	extern "C" void USART2_IRQHandler(void)

void console::HAL::init()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 80021d8:	f001 ff2a 	bl	8004030 <MX_USART2_UART_Init>
	LL_USART_EnableIT_RXNE(UART_PORT);
 80021dc:	4806      	ldr	r0, [pc, #24]	; (80021f8 <_ZN7console3HAL4initEv+0x24>)
 80021de:	f7ff ff29 	bl	8002034 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(UART_PORT);
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <_ZN7console3HAL4initEv+0x24>)
 80021e4:	f7ff ff4e 	bl	8002084 <LL_USART_EnableIT_ERROR>
	LL_USART_DisableIT_TC(UART_PORT);
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <_ZN7console3HAL4initEv+0x24>)
 80021ea:	f7ff ff73 	bl	80020d4 <LL_USART_DisableIT_TC>
	LL_USART_DisableIT_TXE(UART_PORT);
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <_ZN7console3HAL4initEv+0x24>)
 80021f0:	f7ff ff98 	bl	8002124 <LL_USART_DisableIT_TXE>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40004400 	.word	0x40004400

080021fc <_ZN7console3HAL7txReadyEv>:

bool console::HAL::txReady()
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	return (LL_USART_IsActiveFlag_TXE(UART_PORT));
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <_ZN7console3HAL7txReadyEv+0x1c>)
 8002202:	f7ff fef6 	bl	8001ff2 <LL_USART_IsActiveFlag_TXE>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40004400 	.word	0x40004400

0800221c <_ZN7console3HAL5writeEh>:

void console::HAL::write(uint8_t c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(UART_PORT, c);
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	4619      	mov	r1, r3
 800222a:	4803      	ldr	r0, [pc, #12]	; (8002238 <_ZN7console3HAL5writeEh+0x1c>)
 800222c:	f7ff ffc2 	bl	80021b4 <LL_USART_TransmitData8>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40004400 	.word	0x40004400

0800223c <USART2_IRQHandler>:

UART_ISR_HANDLER()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(UART_PORT) && LL_USART_IsEnabledIT_RXNE(UART_PORT))
 8002242:	4822      	ldr	r0, [pc, #136]	; (80022cc <USART2_IRQHandler+0x90>)
 8002244:	f7ff feaf 	bl	8001fa6 <LL_USART_IsActiveFlag_RXNE>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <USART2_IRQHandler+0x22>
 800224e:	481f      	ldr	r0, [pc, #124]	; (80022cc <USART2_IRQHandler+0x90>)
 8002250:	f7ff ff90 	bl	8002174 <LL_USART_IsEnabledIT_RXNE>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <USART2_IRQHandler+0x22>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <USART2_IRQHandler+0x24>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00e      	beq.n	8002282 <USART2_IRQHandler+0x46>
	{
		uint8_t c = LL_USART_ReceiveData8(UART_PORT);
 8002264:	4819      	ldr	r0, [pc, #100]	; (80022cc <USART2_IRQHandler+0x90>)
 8002266:	f7ff ff98 	bl	800219a <LL_USART_ReceiveData8>
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
		console::Driver::instance().post(c);
 800226e:	f7fe ff43 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 f84e 	bl	800231c <_ZN4core11ByteMachineIhE4postEh>
	}
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
	{
		LL_USART_DisableIT_TXE(UART_PORT);
	}
}
 8002280:	e01f      	b.n	80022c2 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TC(UART_PORT))
 8002282:	4812      	ldr	r0, [pc, #72]	; (80022cc <USART2_IRQHandler+0x90>)
 8002284:	f7ff fea2 	bl	8001fcc <LL_USART_IsActiveFlag_TC>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <USART2_IRQHandler+0x6a>
		LL_USART_ClearFlag_TC(UART_PORT);
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <USART2_IRQHandler+0x90>)
 800229a:	f7ff febd 	bl	8002018 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART_PORT);
 800229e:	480b      	ldr	r0, [pc, #44]	; (80022cc <USART2_IRQHandler+0x90>)
 80022a0:	f7ff ff18 	bl	80020d4 <LL_USART_DisableIT_TC>
}
 80022a4:	e00d      	b.n	80022c2 <USART2_IRQHandler+0x86>
	else if(LL_USART_IsActiveFlag_TXE(UART_PORT))
 80022a6:	4809      	ldr	r0, [pc, #36]	; (80022cc <USART2_IRQHandler+0x90>)
 80022a8:	f7ff fea3 	bl	8001ff2 <LL_USART_IsActiveFlag_TXE>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <USART2_IRQHandler+0x86>
		LL_USART_DisableIT_TXE(UART_PORT);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <USART2_IRQHandler+0x90>)
 80022be:	f7ff ff31 	bl	8002124 <LL_USART_DisableIT_TXE>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40004400 	.word	0x40004400

080022d0 <_ZN4core10FixedEventIhE4postERKh>:
    void post(const E& e)
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022da:	b672      	cpsid	i
}
 80022dc:	bf00      	nop
    	container_.payload_ = pool_->Alloc();
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f82b 	bl	800233e <_ZN7MemPoolIhE5AllocEv>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80022ee:	b662      	cpsie	i
}
 80022f0:	bf00      	nop
    	memcpy(container_.payload_, &e, sizeof(E));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	701a      	strb	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 80022fc:	f7ff fbc0 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8002300:	4603      	mov	r3, r0
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fba7 	bl	8001a56 <_ZN4core6Engine6eventsEv>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002310:	f7ff fb03 	bl	800191a <_ZN4core10EventQueue4postENS_9ContainerE>
    }
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN4core11ByteMachineIhE4postEh>:
    void post(T c)
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
        postEvent_.post(c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3318      	adds	r3, #24
 800232c:	1cfa      	adds	r2, r7, #3
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ffcd 	bl	80022d0 <_ZN4core10FixedEventIhE4postERKh>
    }
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZN7MemPoolIhE5AllocEv>:
    T* Alloc()
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <_ZN7MemPoolIhE5AllocEv+0x18>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <_ZN7MemPoolIhE5AllocEv+0x1c>
			return nullptr;
 8002356:	2300      	movs	r3, #0
 8002358:	e00f      	b.n	800237a <_ZN7MemPoolIhE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
        return (T *)((char *)pCurUnit + sizeof(struct _Unit) );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3304      	adds	r3, #4
    }
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_ZN7console10Controller4plotEhl>:

#define MAX_ONE (1<<7)
#define MAX_TWO (1<<15)

void console::Controller::plot(uint8_t channel, int32_t value)
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	460b      	mov	r3, r1
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	72fb      	strb	r3, [r7, #11]
    if (channel>7) return;
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	2b07      	cmp	r3, #7
 8002398:	d815      	bhi.n	80023c6 <_ZN7console10Controller4plotEhl+0x40>
    plotReg_ |= (1<<channel);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023a0:	b25a      	sxtb	r2, r3
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    plotValues_[channel] = value;
 80023b8:	7afa      	ldrb	r2, [r7, #11]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	320c      	adds	r2, #12
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023c4:	e000      	b.n	80023c8 <_ZN7console10Controller4plotEhl+0x42>
    if (channel>7) return;
 80023c6:	bf00      	nop
}
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZN7console10Controller12plotHandler_Ev>:

M_TASK_HANDLER(console::Controller,plot)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08e      	sub	sp, #56	; 0x38
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
    if (plotReg_ == 0) return;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80bf 	beq.w	8002564 <_ZN7console10Controller12plotHandler_Ev+0x192>
    uint16_t plotMask = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t buf[34];
    uint8_t index = 2;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    for (int i=0;i<8;i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	f300 80a2 	bgt.w	8002540 <_ZN7console10Controller12plotHandler_Ev+0x16e>
    {
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002402:	461a      	mov	r2, r3
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	fa42 f303 	asr.w	r3, r2, r3
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8091 	beq.w	8002536 <_ZN7console10Controller12plotHandler_Ev+0x164>
        int32_t value = plotValues_[i];
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002418:	320c      	adds	r2, #12
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (value < MAX_ONE && value > -MAX_ONE)
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b7f      	cmp	r3, #127	; 0x7f
 8002424:	dc1b      	bgt.n	800245e <_ZN7console10Controller12plotHandler_Ev+0x8c>
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800242c:	db17      	blt.n	800245e <_ZN7console10Controller12plotHandler_Ev+0x8c>
        {
        	plotMask |= (1 << (i*2));
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2201      	movs	r2, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	b21a      	sxth	r2, r3
 800243a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800243e:	4313      	orrs	r3, r2
 8002440:	b21b      	sxth	r3, r3
 8002442:	86fb      	strh	r3, [r7, #54]	; 0x36
        	buf[index++] = (value & 0xFF);
 8002444:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 800244e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002456:	440b      	add	r3, r1
 8002458:	f803 2c30 	strb.w	r2, [r3, #-48]
 800245c:	e06c      	b.n	8002538 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else if (value < MAX_TWO && value > -MAX_TWO)
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	da28      	bge.n	80024b8 <_ZN7console10Controller12plotHandler_Ev+0xe6>
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800246c:	dd24      	ble.n	80024b8 <_ZN7console10Controller12plotHandler_Ev+0xe6>
        {
        	plotMask |= (2 << (i*2));
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2202      	movs	r2, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	b21a      	sxth	r2, r3
 800247a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800247e:	4313      	orrs	r3, r2
 8002480:	b21b      	sxth	r3, r3
 8002482:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value >>8) & 0xFF);
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	121a      	asrs	r2, r3, #8
 8002488:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800248c:	1c59      	adds	r1, r3, #1
 800248e:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002498:	440b      	add	r3, r1
 800249a:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 800249e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 80024a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024b0:	440b      	add	r3, r1
 80024b2:	f803 2c30 	strb.w	r2, [r3, #-48]
 80024b6:	e03f      	b.n	8002538 <_ZN7console10Controller12plotHandler_Ev+0x166>
        }
        else
        {
        	plotMask |= (3 << (i*2));
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	86fb      	strh	r3, [r7, #54]	; 0x36
            buf[index++] = ((value>>24) & 0xFF);
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	0e1a      	lsrs	r2, r3, #24
 80024d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024e2:	440b      	add	r3, r1
 80024e4:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>16) & 0xFF);
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	141a      	asrs	r2, r3, #16
 80024ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024fc:	440b      	add	r3, r1
 80024fe:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = ((value>>8) & 0xFF);
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	121a      	asrs	r2, r3, #8
 8002506:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	f803 2c30 	strb.w	r2, [r3, #-48]
            buf[index++] = (value & 0xFF);
 800251c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800252e:	440b      	add	r3, r1
 8002530:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002534:	e000      	b.n	8002538 <_ZN7console10Controller12plotHandler_Ev+0x166>
    	if (((plotReg_>>i) & 0x01) == 0) continue;
 8002536:	bf00      	nop
    for (int i=0;i<8;i++)
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	3301      	adds	r3, #1
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
 800253e:	e759      	b.n	80023f4 <_ZN7console10Controller12plotHandler_Ev+0x22>
        }
    }

    buf[0] = ((plotMask>>8) & 0xFF);
 8002540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b29b      	uxth	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	723b      	strb	r3, [r7, #8]
    buf[1] = (plotMask& 0xFF);
 800254a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254c:	b2db      	uxtb	r3, r3
 800254e:	727b      	strb	r3, [r7, #9]

    console::Driver::instance().sendPacket(PlotReceived,index,buf);
 8002550:	f7fe fdd2 	bl	80010f8 <_ZN7console6Driver8instanceEv>
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800255c:	2104      	movs	r1, #4
 800255e:	f7ff fc61 	bl	8001e24 <_ZN7console6Driver10sendPacketEthPKh>
 8002562:	e000      	b.n	8002566 <_ZN7console10Controller12plotHandler_Ev+0x194>
    if (plotReg_ == 0) return;
 8002564:	bf00      	nop
}
 8002566:	3738      	adds	r7, #56	; 0x38
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZN4core5EventC1Eh>:
    Event(uint8_t index)
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
    {
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <_ZN4core5EventC1Eh+0x2c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
    	container_.index_ = index;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	711a      	strb	r2, [r3, #4]
    	container_.payload_ = nullptr;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
    }
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	080072a0 	.word	0x080072a0

0800259c <_ZN4core10EventQueueC1Ev>:
    EventQueue(){}
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <_ZN4core10EventQueueC1Ev+0x74>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025b0:	3304      	adds	r3, #4
 80025b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1d1a      	adds	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025c2:	3308      	adds	r3, #8
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025d4:	330c      	adds	r3, #12
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1d1a      	adds	r2, r3, #4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025e2:	3310      	adds	r3, #16
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1d1a      	adds	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025f0:	3314      	adds	r3, #20
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80025fa:	3318      	adds	r3, #24
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	080072e4 	.word	0x080072e4

08002614 <_ZN4core10EventQueue4nextEv>:
	inline bool next()
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
		if (inPtr_ == outPtr_) return false;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002622:	3310      	adds	r3, #16
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800262c:	3314      	adds	r3, #20
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d101      	bne.n	8002638 <_ZN4core10EventQueue4nextEv+0x24>
 8002634:	2300      	movs	r3, #0
 8002636:	e01f      	b.n	8002678 <_ZN4core10EventQueue4nextEv+0x64>
        container_t container_ = pop_();
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f81e 	bl	8002680 <_ZN4core10EventQueue4pop_Ev>
        if (container_.index_ < poolSize_)
 8002644:	7b3a      	ldrb	r2, [r7, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800264c:	3318      	adds	r3, #24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d20e      	bcs.n	8002672 <_ZN4core10EventQueue4nextEv+0x5e>
            Event* e = events_[container_.index_];
 8002654:	7b3b      	ldrb	r3, [r7, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f602 0206 	addw	r2, r2, #2054	; 0x806
 800265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002662:	617b      	str	r3, [r7, #20]
            e->execute();
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3308      	adds	r3, #8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	4798      	blx	r3
 8002670:	e001      	b.n	8002676 <_ZN4core10EventQueue4nextEv+0x62>
        	Error_Handler();
 8002672:	f001 fb65 	bl	8003d40 <Error_Handler>
		return true;
 8002676:	2301      	movs	r3, #1
	}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN4core10EventQueue4pop_Ev>:

    inline container_t pop_()
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    {
    	container_t ret = *(outPtr_);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002690:	3314      	adds	r3, #20
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269a:	e883 0003 	stmia.w	r3, {r0, r1}
		outPtr_++;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026a4:	3314      	adds	r3, #20
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f103 0208 	add.w	r2, r3, #8
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026b2:	3314      	adds	r3, #20
 80026b4:	601a      	str	r2, [r3, #0]
		if (outPtr_ == last_) outPtr_ = first_;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026bc:	3314      	adds	r3, #20
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026c6:	330c      	adds	r3, #12
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d109      	bne.n	80026e2 <_ZN4core10EventQueue4pop_Ev+0x62>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026d4:	3308      	adds	r3, #8
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026de:	3314      	adds	r3, #20
 80026e0:	601a      	str	r2, [r3, #0]
		return ret;
 80026e2:	bf00      	nop
    }
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>:
    container_t* outPtr_ = buffer_;
private:
    Event* events_[EVENT_POOL_SIZE];
    uint8_t poolSize_ = 0;

    uint8_t registerEvent_(Event* event)
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    {
        events_[poolSize_] = event;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002700:	3318      	adds	r3, #24
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f602 0206 	addw	r2, r2, #2054	; 0x806
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (poolSize_>= EVENT_POOL_SIZE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002718:	3318      	adds	r3, #24
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b25b      	sxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	da01      	bge.n	8002726 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE+0x36>
        {
            /*TODO: warning here. Over Event Pool*/
        	Error_Handler();
 8002722:	f001 fb0d 	bl	8003d40 <Error_Handler>
        }
        return poolSize_++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800272c:	3318      	adds	r3, #24
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	1c53      	adds	r3, r2, #1
 8002732:	b2d9      	uxtb	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800273a:	3318      	adds	r3, #24
 800273c:	7019      	strb	r1, [r3, #0]
 800273e:	4613      	mov	r3, r2
    }
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_ZN4core5EventC1Ev>:
#include "engine.h"
#include <core/system.h>
#include <core/event.h>
#include <console/log.h>

core::Event::Event()
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <_ZN4core5EventC1Ev+0x3c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
{
    container_.index_ = core::Engine::instance().events().registerEvent_(this);
 8002756:	f7ff f993 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 800275a:	4603      	mov	r3, r0
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f97a 	bl	8001a56 <_ZN4core6Engine6eventsEv>
 8002762:	4603      	mov	r3, r0
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ffc2 	bl	80026f0 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	711a      	strb	r2, [r3, #4]
    container_.payload_ = nullptr;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
}
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	080072a0 	.word	0x080072a0

08002788 <_ZN4core6EngineC1Ev>:

core::Engine::Engine(): Event(0)
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fee9 	bl	800256c <_ZN4core5EventC1Eh>
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <_ZN4core6EngineC1Ev+0x80>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	330c      	adds	r3, #12
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fef9 	bl	800259c <_ZN4core10EventQueueC1Ev>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80027b0:	3328      	adds	r3, #40	; 0x28
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80027bc:	332c      	adds	r3, #44	; 0x2c
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80027c8:	3330      	adds	r3, #48	; 0x30
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	e9c3 0100 	strd	r0, r1, [r3]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	f04f 30ff 	mov.w	r0, #4294967295
 80027e2:	f04f 31ff 	mov.w	r1, #4294967295
 80027e6:	e9c3 0100 	strd	r0, r1, [r3]
{
    events_.registerEvent_(this);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	330c      	adds	r3, #12
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff7c 	bl	80026f0 <_ZN4core10EventQueue14registerEvent_EPNS_5EventE>
    systemInit();
 80027f8:	f000 f953 	bl	8002aa2 <_Z10systemInitv>
}
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	080072f4 	.word	0x080072f4

0800280c <_ZN4core6Engine3runEv>:

void core::Engine::run()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    while (true)
    {
        if (events_.next()) continue;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	330c      	adds	r3, #12
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fefb 	bl	8002614 <_ZN4core10EventQueue4nextEv>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <_ZN4core6Engine3runEv+0x1c>
        WAIT_FOR_INTERUPT;
 8002824:	bf30      	wfi
 8002826:	e7f5      	b.n	8002814 <_ZN4core6Engine3runEv+0x8>
        if (events_.next()) continue;
 8002828:	bf00      	nop
 800282a:	e7f3      	b.n	8002814 <_ZN4core6Engine3runEv+0x8>

0800282c <_ZN4core6Engine13registerTask_EPNS_4TaskE>:
    }
}

void core::Engine::registerTask_(Task* task)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    task->next_ = tasks_;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800283c:	3328      	adds	r3, #40	; 0x28
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	601a      	str	r2, [r3, #0]
    tasks_ = task;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800284a:	3328      	adds	r3, #40	; 0x28
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_ZN4core6Engine10startTask_EPNS_4TaskE>:

void core::Engine::startTask_(Task* task)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002870:	3328      	adds	r3, #40	; 0x28
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d026      	beq.n	80028ca <_ZN4core6Engine10startTask_EPNS_4TaskE+0x6e>
    {
        if (it == task)
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d11c      	bne.n	80028be <_ZN4core6Engine10startTask_EPNS_4TaskE+0x62>
        {
            if (prev == nullptr) tasks_ = it->next_;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <_ZN4core6Engine10startTask_EPNS_4TaskE+0x3e>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002894:	3328      	adds	r3, #40	; 0x28
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e003      	b.n	80028a2 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x46>
            else prev->next_ = it->next_;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]
            task->next_ = activeTasks_;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80028a8:	332c      	adds	r3, #44	; 0x2c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	601a      	str	r2, [r3, #0]
            activeTasks_ = task;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80028b6:	332c      	adds	r3, #44	; 0x2c
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]
            break;
 80028bc:	e005      	b.n	80028ca <_ZN4core6Engine10startTask_EPNS_4TaskE+0x6e>
        }
        prev = it;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	60fb      	str	r3, [r7, #12]
    for (Task* it = tasks_; it!=nullptr; it = it->next_)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e7d5      	b.n	8002876 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x1a>
    }
    if (nextTick_ > task->nextTick_) nextTick_ = task->nextTick_;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80028dc:	4299      	cmp	r1, r3
 80028de:	bf08      	it	eq
 80028e0:	4290      	cmpeq	r0, r2
 80028e2:	d208      	bcs.n	80028f6 <_ZN4core6Engine10startTask_EPNS_4TaskE+0x9a>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_ZN4core6Engine9stopTask_EPNS_4TaskE>:

void core::Engine::stopTask_(Task* task)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
    Task* prev = nullptr;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002916:	332c      	adds	r3, #44	; 0x2c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d027      	beq.n	8002972 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x70>
    {
        if (it == task)
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d11d      	bne.n	8002966 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x64>
        {
            if (prev == nullptr) activeTasks_ = it->next_;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x3e>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800293a:	332c      	adds	r3, #44	; 0x2c
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e003      	b.n	8002948 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x46>
            else prev->next_ = it->next_;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]
            task->next_ = tasks_;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800294e:	3328      	adds	r3, #40	; 0x28
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	601a      	str	r2, [r3, #0]
            tasks_ = task;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 800295c:	3328      	adds	r3, #40	; 0x28
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	601a      	str	r2, [r3, #0]
            break;
 8002962:	bf00      	nop
        }
        prev = it;
    }
}
 8002964:	e005      	b.n	8002972 <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x70>
        prev = it;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	60fb      	str	r3, [r7, #12]
    for (Task* it = activeTasks_; it!=nullptr; it = it->next_)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	e7d4      	b.n	800291c <_ZN4core6Engine9stopTask_EPNS_4TaskE+0x1a>
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_ZN4core6Engine7executeEv>:
    auto timeout = tickCount_ + t;
    while (tickCount_ < timeout){NO_OPERATION;}
}

void core::Engine::execute()
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
    uint64_t min = LAST_TICK;
 8002986:	f04f 32ff 	mov.w	r2, #4294967295
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    Task* it = activeTasks_;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002998:	332c      	adds	r3, #44	; 0x2c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
    Task* next;
    while (it!=nullptr)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d028      	beq.n	80029f6 <_ZN4core6Engine7executeEv+0x78>
    {
        next = it->next_;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60bb      	str	r3, [r7, #8]
        if (tickCount_ >= it->nextTick_) it->run_();
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80029b0:	3330      	adds	r3, #48	; 0x30
 80029b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029bc:	4299      	cmp	r1, r3
 80029be:	bf08      	it	eq
 80029c0:	4290      	cmpeq	r0, r2
 80029c2:	bf2c      	ite	cs
 80029c4:	2301      	movcs	r3, #1
 80029c6:	2300      	movcc	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <_ZN4core6Engine7executeEv+0x56>
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8be 	bl	8002b50 <_ZN4core4Task4run_Ev>
        if (min > it->nextTick_) min = it->nextTick_;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80029da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029de:	4299      	cmp	r1, r3
 80029e0:	bf08      	it	eq
 80029e2:	4290      	cmpeq	r0, r2
 80029e4:	d204      	bcs.n	80029f0 <_ZN4core6Engine7executeEv+0x72>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
        it = next;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60fb      	str	r3, [r7, #12]
    while (it!=nullptr)
 80029f4:	e7d3      	b.n	800299e <_ZN4core6Engine7executeEv+0x20>
    }
    nextTick_ = min;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80029fc:	3338      	adds	r3, #56	; 0x38
 80029fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a02:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <LL_SYSTICK_EnableIT+0x1c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <LL_SYSTICK_EnableIT+0x1c>)
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <_ZN4core6Engine4tickEv>:
private:
    friend class Task;
};

inline void core::Engine::tick()
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    if (++tickCount_ >= nextTick_) events_.post(container_);
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8002a3e:	3130      	adds	r1, #48	; 0x30
 8002a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a44:	1c42      	adds	r2, r0, #1
 8002a46:	f141 0300 	adc.w	r3, r1, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8002a50:	3130      	adds	r1, #48	; 0x30
 8002a52:	e9c1 2300 	strd	r2, r3, [r1]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8002a5c:	3138      	adds	r1, #56	; 0x38
 8002a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a62:	428b      	cmp	r3, r1
 8002a64:	bf08      	it	eq
 8002a66:	4282      	cmpeq	r2, r0
 8002a68:	bf2c      	ite	cs
 8002a6a:	2301      	movcs	r3, #1
 8002a6c:	2300      	movcc	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <_ZN4core6Engine4tickEv+0x56>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 000c 	add.w	r0, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a82:	f7fe ff4a 	bl	800191a <_ZN4core10EventQueue4postENS_9ContainerE>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <SysTick_Handler>:
#include "gpio.h"

extern "C" void SystemClock_Config(void);

extern "C" void SysTick_Handler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
	core::Engine::instance().tick();
 8002a92:	f7fe fff5 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ffc9 	bl	8002a30 <_ZN4core6Engine4tickEv>
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_Z10systemInitv>:

void systemInit()
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
	HAL_Init();
 8002aa6:	f001 fb4d 	bl	8004144 <HAL_Init>
	SystemClock_Config();
 8002aaa:	f001 f8e1 	bl	8003c70 <SystemClock_Config>
	MX_GPIO_Init();
 8002aae:	f001 f8b5 	bl	8003c1c <MX_GPIO_Init>
	LL_SYSTICK_EnableIT();
 8002ab2:	f7ff ffad 	bl	8002a10 <LL_SYSTICK_EnableIT>
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>:
#include <core/task.h>
#include <core/engine.h>

core::Task::Task(Component* component, Handler handler): component_(component), handler_(handler)
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	4639      	mov	r1, r7
 8002ac6:	e881 000c 	stmia.w	r1, {r2, r3}
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	615a      	str	r2, [r3, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3318      	adds	r3, #24
 8002ae0:	463a      	mov	r2, r7
 8002ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae6:	e883 0003 	stmia.w	r3, {r0, r1}
{
    core::Engine::instance().registerTask_(this);
 8002aea:	f7fe ffc9 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fe9a 	bl	800282c <_ZN4core6Engine13registerTask_EPNS_4TaskE>
}
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_ZN4core4Task5startEml>:

void core::Task::start(uint32_t interval, int32_t loop)
{
 8002b02:	b5b0      	push	{r4, r5, r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
    core::Engine& engine = core::Engine::instance();
 8002b0e:	f7fe ffb7 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8002b12:	6178      	str	r0, [r7, #20]
    this->interval_ = interval;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	605a      	str	r2, [r3, #4]
    this->nextTick_ = engine.tickCount_ + interval;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8002b20:	3330      	adds	r3, #48	; 0x30
 8002b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	1884      	adds	r4, r0, r2
 8002b30:	eb41 0503 	adc.w	r5, r1, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	e9c3 4502 	strd	r4, r5, [r3, #8]
    this->loop_ = loop;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]
    engine.startTask_(this);
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff fe8a 	bl	800285c <_ZN4core6Engine10startTask_EPNS_4TaskE>
}
 8002b48:	bf00      	nop
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}

08002b50 <_ZN4core4Task4run_Ev>:
    core::Engine::instance().stopTask_(this);
    this->nextTick_ = LAST_TICK - 1;
}

void core::Task::run_()
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    if (--loop_ == 0)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	1e5a      	subs	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <_ZN4core4Task4run_Ev+0x42>
    {
        core::Engine::instance().stopTask_(this);
 8002b74:	f7fe ff84 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fec0 	bl	8002902 <_ZN4core6Engine9stopTask_EPNS_4TaskE>
        this->nextTick_ = LAST_TICK - 1;
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b90:	e015      	b.n	8002bbe <_ZN4core4Task4run_Ev+0x6e>
    }
    else
    {
        nextTick_ += interval_;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	1884      	adds	r4, r0, r2
 8002ba4:	eb41 0503 	adc.w	r5, r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	e9c3 4502 	strd	r4, r5, [r3, #8]
        if (loop_ < 0) loop_ = -1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da03      	bge.n	8002bbe <_ZN4core4Task4run_Ev+0x6e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	611a      	str	r2, [r3, #16]
    }

    (component_->*handler_)();
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	69d2      	ldr	r2, [r2, #28]
 8002bc6:	1052      	asrs	r2, r2, #1
 8002bc8:	1899      	adds	r1, r3, r2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <_ZN4core4Task4run_Ev+0x8c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	e00a      	b.n	8002bf2 <_ZN4core4Task4run_Ev+0xa2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	69d2      	ldr	r2, [r2, #28]
 8002be4:	1052      	asrs	r2, r2, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6992      	ldr	r2, [r2, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	4798      	blx	r3
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c00 <_ZN2ex4Test7StartUpEv>:
#include <console/log.h>
#include <test/example/example.h>

STATE_BODY(ex::Test::StartUp)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("START UP");
	}
	TRANSITION_(Event::TIMEOUT, Running){}
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	681c      	ldr	r4, [r3, #0]
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <_ZN2ex4Test7StartUpEv+0x2c>)
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	cb0c      	ldmia	r3, {r2, r3}
 8002c20:	2100      	movs	r1, #0
 8002c22:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT START UP");
//	}
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	08002c31 	.word	0x08002c31

08002c30 <_ZN2ex4Test7RunningEv>:

STATE_BODY(ex::Test::Running)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("RUNNING");
	}
	TRANSITION_(Event::TIMEOUT, Pause){}
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	681c      	ldr	r4, [r3, #0]
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <_ZN2ex4Test7RunningEv+0x2c>)
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	cb0c      	ldmia	r3, {r2, r3}
 8002c50:	2100      	movs	r1, #0
 8002c52:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT RUNNING");
//	}
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	08002c61 	.word	0x08002c61

08002c60 <_ZN2ex4Test5PauseEv>:

STATE_BODY(ex::Test::Pause)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	ENTER_()
	{
//		LOG_PRINTF("PAUSE");
	}
	TRANSITION_(Event::TIMEOUT, StartUp){}
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	681c      	ldr	r4, [r3, #0]
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <_ZN2ex4Test5PauseEv+0x2c>)
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	cb0c      	ldmia	r3, {r2, r3}
 8002c80:	2100      	movs	r1, #0
 8002c82:	47a0      	blx	r4
//	EXIT_()
//	{
//		LOG_PRINTF("EXIT PAUSE");
//	}
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	08002c01 	.word	0x08002c01

08002c90 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	400b      	ands	r3, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_ZN4core13SimpleMachine9postEventEh>:
    void postEvent(uint8_t event)
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
        postEvent_.post(event);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	1cfa      	adds	r2, r7, #3
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fafa 	bl	80022d0 <_ZN4core10FixedEventIhE4postERKh>
    }
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE>:
    bool check_(uint8_t input, State state) override
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4639      	mov	r1, r7
 8002cf0:	e881 000c 	stmia.w	r1, {r2, r3}
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	72fb      	strb	r3, [r7, #11]
        if (nextEvent_ != input) return false;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	7d1b      	ldrb	r3, [r3, #20]
 8002cfc:	7afa      	ldrb	r2, [r7, #11]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d001      	beq.n	8002d06 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x22>
 8002d02:	2300      	movs	r3, #0
 8002d04:	e007      	b.n	8002d16 <_ZN4core13SimpleMachine6check_EhMNS_7MachineEFvvE+0x32>
        nextState_ = state;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	463a      	mov	r2, r7
 8002d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d10:	e883 0003 	stmia.w	r3, {r0, r1}
        return true;
 8002d14:	2301      	movs	r3, #1
    }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE>:
    void start_(State s) override
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	e883 0006 	stmia.w	r3, {r1, r2}
        currentState_ = s;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	330c      	adds	r3, #12
 8002d34:	1d3a      	adds	r2, r7, #4
 8002d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d3a:	e883 0003 	stmia.w	r3, {r0, r1}
        nextEvent_ = ENTER;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	22fe      	movs	r2, #254	; 0xfe
 8002d42:	751a      	strb	r2, [r3, #20]
        (this->*currentState_)();
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6912      	ldr	r2, [r2, #16]
 8002d4a:	1052      	asrs	r2, r2, #1
 8002d4c:	1899      	adds	r1, r3, r2
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x3e>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	e009      	b.n	8002d74 <_ZN4core13SimpleMachine6start_EMNS_7MachineEFvvE+0x52>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6912      	ldr	r2, [r2, #16]
 8002d66:	1052      	asrs	r2, r2, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4798      	blx	r3
    }
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>:
{

class EmptySignalOne
{
public:
    void connect(EmptyEvent* event){this->event_ = event;}
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_ZN4core14EmptySignalOne4emitEv>:
    void disconnect(){event_ = nullptr;}
    inline void emit(){if (event_ != nullptr) event_->post();}
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <_ZN4core14EmptySignalOne4emitEv+0x1a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fef5 	bl	8001ba0 <_ZN4core10EmptyEvent4postEv>
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <_ZN4core13SimpleMachineD1Ev>:
class SimpleMachine: public core::Machine
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <_ZN4core13SimpleMachineD1Ev+0x2c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fc68 	bl	80016a8 <_ZN4core10FixedEventIhED1Ev>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f9ba 	bl	8001154 <_ZN4core7MachineD1Ev>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	0800734c 	.word	0x0800734c

08002df0 <_ZN4core13SimpleMachineD0Ev>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe1 	bl	8002dc0 <_ZN4core13SimpleMachineD1Ev>
 8002dfe:	2134      	movs	r1, #52	; 0x34
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f002 fc03 	bl	800560c <_ZdlPvj>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZN2ex4TestD1Ev>:
#include <core/signal.h>
#include <oscilloscope/dual.h>
#include <oscilloscope/quad.h>
#include <console/controller.h>

MACHINE(ex, Test)
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <_ZN2ex4TestD1Ev+0x48>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	33ec      	adds	r3, #236	; 0xec
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fa9a 	bl	800335c <_ZN4core10FixedEventItED1Ev>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	33d4      	adds	r3, #212	; 0xd4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fc5d 	bl	80016ec <_ZN4core10EmptyEventD1Ev>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	33b0      	adds	r3, #176	; 0xb0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fab2 	bl	80033a0 <_ZN4core10FixedEventImED1Ev>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3398      	adds	r3, #152	; 0x98
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fc53 	bl	80016ec <_ZN4core10EmptyEventD1Ev>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ffb9 	bl	8002dc0 <_ZN4core13SimpleMachineD1Ev>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	08007308 	.word	0x08007308

08002e5c <_ZN2ex4TestD0Ev>:
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffd3 	bl	8002e10 <_ZN2ex4TestD1Ev>
 8002e6a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f002 fbcc 	bl	800560c <_ZdlPvj>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <_ZN2ex4Test4initEv>:
#include <math.h>
#include <test/example/example.h>
#define PI 3.14159265358979323846

void ex::Test::init()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    for (int i=0;i<400;i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002e92:	da53      	bge.n	8002f3c <_ZN2ex4Test4initEv+0xbc>
    {
        double v = ((double)i/200) * PI;
 8002e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e96:	f7fd fb45 	bl	8000524 <__aeabi_i2d>
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <_ZN2ex4Test4initEv+0x130>)
 8002ea0:	f7fd fcd4 	bl	800084c <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	a33e      	add	r3, pc, #248	; (adr r3, 8002fa8 <_ZN2ex4Test4initEv+0x128>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd fba1 	bl	80005f8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	e9c7 2306 	strd	r2, r3, [r7, #24]
        int16_t sine = (int16_t)(sin(v)*512.0);
 8002ebe:	ed97 0b06 	vldr	d0, [r7, #24]
 8002ec2:	f002 fc21 	bl	8005708 <sin>
 8002ec6:	ec51 0b10 	vmov	r0, r1, d0
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002ed2:	f7fd fb91 	bl	80005f8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fe25 	bl	8000b2c <__aeabi_d2iz>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	82fb      	strh	r3, [r7, #22]
        int16_t cosine = (int16_t)(cos(v)*512.0);
 8002ee6:	ed97 0b06 	vldr	d0, [r7, #24]
 8002eea:	f002 fbbd 	bl	8005668 <cos>
 8002eee:	ec51 0b10 	vmov	r0, r1, d0
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002efa:	f7fd fb7d 	bl	80005f8 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe11 	bl	8000b2c <__aeabi_d2iz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	82bb      	strh	r3, [r7, #20]
        sine_[i] = sine + 512;
 8002f0e:	8afb      	ldrh	r3, [r7, #22]
 8002f10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f14:	b299      	uxth	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	3290      	adds	r2, #144	; 0x90
 8002f1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        cosine_[i] = cosine + 512;
 8002f20:	8abb      	ldrh	r3, [r7, #20]
 8002f22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f26:	b299      	uxth	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8002f30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0;i<400;i++)
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	3301      	adds	r3, #1
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	e7a7      	b.n	8002e8c <_ZN2ex4Test4initEv+0xc>
    }

    plotTask_.start(10); //100Hz
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3358      	adds	r3, #88	; 0x58
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	210a      	movs	r1, #10
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fddb 	bl	8002b02 <_ZN4core4Task5startEml>
//    oscilloscopeTask_.start(1);

    emptySignal.connect(&emptySignalReceivedEvent);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	33d4      	adds	r3, #212	; 0xd4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7ff ff11 	bl	8002d80 <_ZN4core14EmptySignalOne7connectEPNS_10EmptyEventE>
    fixedSignal.connect(&fixedSignalReceivedEvent);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	33ec      	adds	r3, #236	; 0xec
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 f93e 	bl	80031ec <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>

	timeoutTask_.start(500);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3338      	adds	r3, #56	; 0x38
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fdc0 	bl	8002b02 <_ZN4core4Task5startEml>
	SM_START(StartUp);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3310      	adds	r3, #16
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <_ZN2ex4Test4initEv+0x134>)
 8002f8e:	60fa      	str	r2, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	613a      	str	r2, [r7, #16]
 8002f94:	f107 020c 	add.w	r2, r7, #12
 8002f98:	ca06      	ldmia	r2, {r1, r2}
 8002f9a:	4798      	blx	r3
}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	54442d18 	.word	0x54442d18
 8002fac:	400921fb 	.word	0x400921fb
 8002fb0:	40690000 	.word	0x40690000
 8002fb4:	08002c01 	.word	0x08002c01

08002fb8 <_ZN2ex4Test12plotHandler_Ev>:

M_TASK_HANDLER(ex::Test, plot)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	emptySignal.emit();
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	33cc      	adds	r3, #204	; 0xcc
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fee9 	bl	8002d9c <_ZN4core14EmptySignalOne4emitEv>
	fixedSignal.emit(cosine_[angle_]);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8002fdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f000 f911 	bl	8003208 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitEt>
	if (++angle_>=400) angle_=0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002ffa:	f240 128f 	movw	r2, #399	; 0x18f
 8002ffe:	4293      	cmp	r3, r2
 8003000:	bf8c      	ite	hi
 8003002:	2301      	movhi	r3, #1
 8003004:	2300      	movls	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <_ZN2ex4Test12plotHandler_Ev+0x5c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN2ex4Test20oscilloscopeHandler_Ev>:

M_TASK_HANDLER(ex::Test, oscilloscope)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    //singlePlot(sine_[angle] + rand()%10);
//    dualPlot(sine_[angle_] + rand()%10, cosine_[angle_] + rand()%10);
    //triplePlot(sine_[angle] + rand()%10, cosine_[angle] + rand()%10, cosine_[angle]/2 + rand()%5);
//    quadPlot(sine_[angle_] + rand()%10, cosine_[angle_] + rand()%10, cosine_[angle_]/2 + rand()%5, sine_[angle_]/2 + rand()%5);
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_ZN2ex4Test15timeoutHandler_Ev>:

M_TASK_HANDLER(ex::Test, timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	emptyEventEvent.post();
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3398      	adds	r3, #152	; 0x98
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fdaf 	bl	8001ba0 <_ZN4core10EmptyEvent4postEv>
	fixedEventEvent.post(count_++);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4619      	mov	r1, r3
 800305e:	f000 f8e8 	bl	8003232 <_ZN4core10FixedEventImE4postERKm>
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8003062:	2120      	movs	r1, #32
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <_ZN2ex4Test15timeoutHandler_Ev+0x4c>)
 8003066:	f7ff fe13 	bl	8002c90 <LL_GPIO_TogglePin>
	SM_POST(Event::TIMEOUT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fe27 	bl	8002cc2 <_ZN4core13SimpleMachine9postEventEh>
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40020000 	.word	0x40020000

08003080 <_ZN2ex4Test18emptyEventHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptyEvent)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("Empty Event Called");
 8003088:	f7fe fd30 	bl	8001aec <_ZN7console10Controller8instanceEv>
 800308c:	4603      	mov	r3, r0
 800308e:	4904      	ldr	r1, [pc, #16]	; (80030a0 <_ZN2ex4Test18emptyEventHandler_Ev+0x20>)
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe f95c 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	080071d8 	.word	0x080071d8

080030a4 <_ZN2ex4Test18fixedEventHandler_ERKm>:

M_EVENT_HANDLER(ex::Test, fixedEvent, uint32_t)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("Fixed Event Called %d", event);
 80030ae:	f7fe fd1d 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <_ZN2ex4Test18fixedEventHandler_ERKm+0x24>)
 80030ba:	f7fe f948 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	080071ec 	.word	0x080071ec

080030cc <_ZN2ex4Test27emptySignalReceivedHandler_Ev>:

M_EVENT_HANDLER(ex::Test, emptySignalReceived)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    console::Controller::instance().plot(0, sine_[angle_]);
 80030d4:	f7fe fd0a 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3290      	adds	r2, #144	; 0x90
 80030e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030e6:	461a      	mov	r2, r3
 80030e8:	2100      	movs	r1, #0
 80030ea:	f7ff f94c 	bl	8002386 <_ZN7console10Controller4plotEhl>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZN2ex4Test27fixedSignalReceivedHandler_ERKt>:

M_EVENT_HANDLER(ex::Test, fixedSignalReceived, uint16_t)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
	console::Controller::instance().plot(1, event);
 8003100:	f7fe fcf4 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	2101      	movs	r1, #1
 800310c:	f7ff f93b 	bl	8002386 <_ZN7console10Controller4plotEhl>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_ZN2ex4Test20startCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, start)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("START");
 8003120:	f7fe fce4 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8003124:	4603      	mov	r3, r0
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <_ZN2ex4Test20startCommandHandler_Ev+0x20>)
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f910 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	08007204 	.word	0x08007204

0800313c <_ZN2ex4Test19stopCommandHandler_Ev>:

U_ACTION_HANDLER(ex::Test, stop)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	LOG_PRINTF("STOP");
 8003144:	f7fe fcd2 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8003148:	4603      	mov	r3, r0
 800314a:	4904      	ldr	r1, [pc, #16]	; (800315c <_ZN2ex4Test19stopCommandHandler_Ev+0x20>)
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe f8fe 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	0800720c 	.word	0x0800720c

08003160 <_ZN2ex4Test22integerCommandHandler_El>:

U_INTEGER_HANDLER(ex::Test, integer)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	LOG_PRINTF("Integer: %d", value);
 800316a:	f7fe fcbf 	bl	8001aec <_ZN7console10Controller8instanceEv>
 800316e:	4603      	mov	r3, r0
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4904      	ldr	r1, [pc, #16]	; (8003184 <_ZN2ex4Test22integerCommandHandler_El+0x24>)
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f8ea 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	08007214 	.word	0x08007214

08003188 <_ZN2ex4Test19nameCommandHandler_EhPh>:

U_TEXT_HANDLER(ex::Test, name)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	460b      	mov	r3, r1
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
	for(; i < length; i++)
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	429a      	cmp	r2, r3
 80031a0:	da0e      	bge.n	80031c0 <_ZN2ex4Test19nameCommandHandler_EhPh+0x38>
	{
		name_[i] = data[i];
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	7819      	ldrb	r1, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80031b4:	460a      	mov	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
	for(; i < length; i++)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e7ec      	b.n	800319a <_ZN2ex4Test19nameCommandHandler_EhPh+0x12>
	}
	name_[i] = 0;
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	LOG_PRINTF("%s", name_);
 80031ce:	f7fe fc8d 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80031d8:	461a      	mov	r2, r3
 80031da:	4903      	ldr	r1, [pc, #12]	; (80031e8 <_ZN2ex4Test19nameCommandHandler_EhPh+0x60>)
 80031dc:	f7fe f8b7 	bl	800134e <_ZN7console10Controller6printfEPKcz>
}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	08007220 	.word	0x08007220

080031ec <_ZN4core9SignalOneINS_10FixedEventItEEtE7connectEPS2_>:

template <typename EV, typename E>
class SignalOne
{
public:
    void connect(EV* event){this->event_ = event;}
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitEt>:
    void disconnect(){event_ = nullptr;}
    inline void emit(E e){if (event_ != nullptr) event_->post(e);}
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <_ZN4core9SignalOneINS_10FixedEventItEEtE4emitEt+0x22>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	1cba      	adds	r2, r7, #2
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f82a 	bl	800327e <_ZN4core10FixedEventItE4postERKt>
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <_ZN4core10FixedEventImE4postERKm>:
    void post(const E& e)
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800323c:	b672      	cpsid	i
}
 800323e:	bf00      	nop
    	container_.payload_ = pool_->Alloc();
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f841 	bl	80032cc <_ZN7MemPoolImE5AllocEv>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003250:	b662      	cpsie	i
}
 8003252:	bf00      	nop
    	memcpy(container_.payload_, &e, sizeof(E));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	601a      	str	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 800325e:	f7fe fc0f 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8003262:	4603      	mov	r3, r0
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fbf6 	bl	8001a56 <_ZN4core6Engine6eventsEv>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003272:	f7fe fb52 	bl	800191a <_ZN4core10EventQueue4postENS_9ContainerE>
    }
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN4core10FixedEventItE4postERKt>:
    void post(const E& e)
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003288:	b672      	cpsid	i
}
 800328a:	bf00      	nop
    	container_.payload_ = pool_->Alloc();
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f83f 	bl	8003314 <_ZN7MemPoolItE5AllocEv>
 8003296:	4602      	mov	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800329c:	b662      	cpsie	i
}
 800329e:	bf00      	nop
    	memcpy(container_.payload_, &e, sizeof(E));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	b292      	uxth	r2, r2
 80032aa:	801a      	strh	r2, [r3, #0]
    	core::Engine::instance().events().post(container_);
 80032ac:	f7fe fbe8 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fbcf 	bl	8001a56 <_ZN4core6Engine6eventsEv>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032c0:	f7fe fb2b 	bl	800191a <_ZN4core10EventQueue4postENS_9ContainerE>
    }
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_ZN7MemPoolImE5AllocEv>:
    T* Alloc()
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <_ZN7MemPoolImE5AllocEv+0x18>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <_ZN7MemPoolImE5AllocEv+0x1c>
			return nullptr;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e00f      	b.n	8003308 <_ZN7MemPoolImE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
        return (T *)((char *)pCurUnit + sizeof(struct _Unit) );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3304      	adds	r3, #4
    }
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_ZN7MemPoolItE5AllocEv>:
    T* Alloc()
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
        if(nullptr == m_pMemBlock   || nullptr == m_pFreeMemBlock)	// Pool Full
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <_ZN7MemPoolItE5AllocEv+0x18>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <_ZN7MemPoolItE5AllocEv+0x1c>
			return nullptr;
 800332c:	2300      	movs	r3, #0
 800332e:	e00f      	b.n	8003350 <_ZN7MemPoolItE5AllocEv+0x3c>
        struct _Unit *pCurUnit = m_pFreeMemBlock;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60fb      	str	r3, [r7, #12]
        m_pFreeMemBlock = pCurUnit->pNext;  //Get a unit from free linkedlist.
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]
        pCurUnit->pNext = m_pAllocatedMemBlock;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]
        m_pAllocatedMemBlock = pCurUnit;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
        return (T *)((char *)pCurUnit + sizeof(struct _Unit) );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3304      	adds	r3, #4
    }
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_ZN4core10FixedEventItED1Ev>:
class FixedEvent: public Event
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <_ZN4core10FixedEventItED1Ev+0x20>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fdeb 	bl	8000f48 <_ZN4core5EventD1Ev>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08007324 	.word	0x08007324

08003380 <_ZN4core10FixedEventItED0Ev>:
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffe7 	bl	800335c <_ZN4core10FixedEventItED1Ev>
 800338e:	211c      	movs	r1, #28
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f002 f93b 	bl	800560c <_ZdlPvj>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZN4core10FixedEventImED1Ev>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <_ZN4core10FixedEventImED1Ev+0x20>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd fdc9 	bl	8000f48 <_ZN4core5EventD1Ev>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	08007338 	.word	0x08007338

080033c4 <_ZN4core10FixedEventImED0Ev>:
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffe7 	bl	80033a0 <_ZN4core10FixedEventImED1Ev>
 80033d2:	211c      	movs	r1, #28
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f002 f919 	bl	800560c <_ZdlPvj>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_ZN4core10FixedEventItE7executeEv>:
    void execute() override
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    	E* e = (E*)container_.payload_;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
        (component_->*handler_)(*e);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6952      	ldr	r2, [r2, #20]
 80033fa:	1052      	asrs	r2, r2, #1
 80033fc:	1898      	adds	r0, r3, r2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <_ZN4core10FixedEventItE7executeEv+0x2c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	e00a      	b.n	8003426 <_ZN4core10FixedEventItE7executeEv+0x42>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6952      	ldr	r2, [r2, #20]
 8003418:	1052      	asrs	r2, r2, #1
 800341a:	4413      	add	r3, r2
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6912      	ldr	r2, [r2, #16]
 8003422:	4413      	add	r3, r2
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	4798      	blx	r3
        pool_->Free(e);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f831 	bl	8003498 <_ZN7MemPoolItE4FreeEPt>
    }
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN4core10FixedEventImE7executeEv>:
    void execute() override
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
    	E* e = (E*)container_.payload_;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60fb      	str	r3, [r7, #12]
        (component_->*handler_)(*e);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6952      	ldr	r2, [r2, #20]
 8003454:	1052      	asrs	r2, r2, #1
 8003456:	1898      	adds	r0, r3, r2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <_ZN4core10FixedEventImE7executeEv+0x2c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	e00a      	b.n	8003480 <_ZN4core10FixedEventImE7executeEv+0x42>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6952      	ldr	r2, [r2, #20]
 8003472:	1052      	asrs	r2, r2, #1
 8003474:	4413      	add	r3, r2
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6912      	ldr	r2, [r2, #16]
 800347c:	4413      	add	r3, r2
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	4798      	blx	r3
        pool_->Free(e);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f839 	bl	8003502 <_ZN7MemPoolImE4FreeEPm>
    }
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN7MemPoolItE4FreeEPt>:
    void Free(T* p)
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3b04      	subs	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01e      	beq.n	80034f6 <_ZN7MemPoolItE4FreeEPt+0x5e>
			if(it == pCurUnit)
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d114      	bne.n	80034ea <_ZN7MemPoolItE4FreeEPt+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <_ZN7MemPoolItE4FreeEPt+0x38>
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e003      	b.n	80034d8 <_ZN7MemPoolItE4FreeEPt+0x40>
				else prev->pNext = it->pNext;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	609a      	str	r2, [r3, #8]
				break;
 80034e6:	bf00      	nop
    }
 80034e8:	e005      	b.n	80034f6 <_ZN7MemPoolItE4FreeEPt+0x5e>
			prev = it;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e7dd      	b.n	80034b2 <_ZN7MemPoolItE4FreeEPt+0x1a>
    }
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_ZN7MemPoolImE4FreeEPm>:
    void Free(T* p)
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
		struct _Unit *pCurUnit = (struct _Unit *)((char *)p - sizeof(struct _Unit) );
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	3b04      	subs	r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
		struct _Unit* prev = nullptr;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01e      	beq.n	8003560 <_ZN7MemPoolImE4FreeEPm+0x5e>
			if(it == pCurUnit)
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	429a      	cmp	r2, r3
 8003528:	d114      	bne.n	8003554 <_ZN7MemPoolImE4FreeEPm+0x52>
				if(prev == nullptr) m_pAllocatedMemBlock = it->pNext;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <_ZN7MemPoolImE4FreeEPm+0x38>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	e003      	b.n	8003542 <_ZN7MemPoolImE4FreeEPm+0x40>
				else prev->pNext = it->pNext;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
				pCurUnit->pNext = m_pFreeMemBlock;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
				m_pFreeMemBlock = pCurUnit;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
				break;
 8003550:	bf00      	nop
    }
 8003552:	e005      	b.n	8003560 <_ZN7MemPoolImE4FreeEPm+0x5e>
			prev = it;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	617b      	str	r3, [r7, #20]
		for(struct _Unit* it = m_pAllocatedMemBlock; it!= nullptr; it = it->pNext)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e7dd      	b.n	800351c <_ZN7MemPoolImE4FreeEPm+0x1a>
    }
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_ZN4core13SimpleMachine7executeERh>:
    void execute(uint8_t& event)
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
        nextState_ = nullptr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
        nextEvent_ = event; (this->*currentState_)();
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	751a      	strb	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6912      	ldr	r2, [r2, #16]
 8003590:	1052      	asrs	r2, r2, #1
 8003592:	1899      	adds	r1, r3, r2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <_ZN4core13SimpleMachine7executeERh+0x3a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	e009      	b.n	80035ba <_ZN4core13SimpleMachine7executeERh+0x4e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6912      	ldr	r2, [r2, #16]
 80035ac:	1052      	asrs	r2, r2, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4608      	mov	r0, r1
 80035bc:	4798      	blx	r3
        if (nextState_ != nullptr && nextState_ != currentState_)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <_ZN4core13SimpleMachine7executeERh+0x6a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <_ZN4core13SimpleMachine7executeERh+0x6a>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <_ZN4core13SimpleMachine7executeERh+0x6c>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d062      	beq.n	80036a2 <_ZN4core13SimpleMachine7executeERh+0x136>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d117      	bne.n	8003618 <_ZN4core13SimpleMachine7executeERh+0xac>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d00f      	beq.n	8003614 <_ZN4core13SimpleMachine7executeERh+0xa8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10d      	bne.n	8003618 <_ZN4core13SimpleMachine7executeERh+0xac>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <_ZN4core13SimpleMachine7executeERh+0xac>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <_ZN4core13SimpleMachine7executeERh+0xac>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <_ZN4core13SimpleMachine7executeERh+0xae>
 8003618:	2300      	movs	r3, #0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d141      	bne.n	80036a2 <_ZN4core13SimpleMachine7executeERh+0x136>
            nextEvent_ = EXIT; (this->*currentState_)();
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	751a      	strb	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6912      	ldr	r2, [r2, #16]
 800362a:	1052      	asrs	r2, r2, #1
 800362c:	1899      	adds	r1, r3, r2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <_ZN4core13SimpleMachine7executeERh+0xd4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	e009      	b.n	8003654 <_ZN4core13SimpleMachine7executeERh+0xe8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6912      	ldr	r2, [r2, #16]
 8003646:	1052      	asrs	r2, r2, #1
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	4413      	add	r3, r2
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4608      	mov	r0, r1
 8003656:	4798      	blx	r3
            currentState_ = nextState_;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	330c      	adds	r3, #12
 800365e:	3204      	adds	r2, #4
 8003660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003664:	e883 0003 	stmia.w	r3, {r0, r1}
            nextEvent_ = ENTER; (this->*currentState_)();
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	22fe      	movs	r2, #254	; 0xfe
 800366c:	751a      	strb	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6912      	ldr	r2, [r2, #16]
 8003674:	1052      	asrs	r2, r2, #1
 8003676:	1899      	adds	r1, r3, r2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <_ZN4core13SimpleMachine7executeERh+0x11e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	e009      	b.n	800369e <_ZN4core13SimpleMachine7executeERh+0x132>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6912      	ldr	r2, [r2, #16]
 8003690:	1052      	asrs	r2, r2, #1
 8003692:	4413      	add	r3, r2
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4608      	mov	r0, r1
 80036a0:	4798      	blx	r3
    }
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <__tcf_3>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4801      	ldr	r0, [pc, #4]	; (80036b8 <__tcf_3+0xc>)
 80036b2:	f7ff fbad 	bl	8002e10 <_ZN2ex4TestD1Ev>
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20002ca0 	.word	0x20002ca0

080036bc <_ZN2ex4Test8instanceEv>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <_ZN2ex4Test8instanceEv+0x50>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	f3bf 8f5b 	dmb	ish
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <_ZN2ex4Test8instanceEv+0x48>
 80036dc:	480b      	ldr	r0, [pc, #44]	; (800370c <_ZN2ex4Test8instanceEv+0x50>)
 80036de:	f001 ff97 	bl	8005610 <__cxa_guard_acquire>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <_ZN2ex4Test8instanceEv+0x48>
 80036f2:	4807      	ldr	r0, [pc, #28]	; (8003710 <_ZN2ex4Test8instanceEv+0x54>)
 80036f4:	f000 f850 	bl	8003798 <_ZN2ex4TestC1Ev>
 80036f8:	4804      	ldr	r0, [pc, #16]	; (800370c <_ZN2ex4Test8instanceEv+0x50>)
 80036fa:	f001 ff95 	bl	8005628 <__cxa_guard_release>
 80036fe:	4805      	ldr	r0, [pc, #20]	; (8003714 <_ZN2ex4Test8instanceEv+0x58>)
 8003700:	f003 f83f 	bl	8006782 <atexit>
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <_ZN2ex4Test8instanceEv+0x54>)
 8003706:	4618      	mov	r0, r3
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20003420 	.word	0x20003420
 8003710:	20002ca0 	.word	0x20002ca0
 8003714:	080036ad 	.word	0x080036ad

08003718 <_ZN4core13SimpleMachineC1Ev>:
class SimpleMachine: public core::Machine
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fd8a 	bl	800123c <_ZN4core7MachineC1Ev>
 8003728:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <_ZN4core13SimpleMachineC1Ev+0x40>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	751a      	strb	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f103 0018 	add.w	r0, r3, #24
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <_ZN4core13SimpleMachineC1Ev+0x44>)
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	cb0c      	ldmia	r3, {r2, r3}
 800374a:	f7fd fefd 	bl	8001548 <_ZN4core10FixedEventIhEC1EPNS_9ComponentEMS2_FvRKhE>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	0800734c 	.word	0x0800734c
 800375c:	0800356d 	.word	0x0800356d

08003760 <_ZN4core14EmptySignalOneC1Ev>:
class EmptySignalOne
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>:
class SignalOne
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_ZN2ex4TestC1Ev>:
 8003798:	b580      	push	{r7, lr}
 800379a:	b090      	sub	sp, #64	; 0x40
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ffb8 	bl	8003718 <_ZN4core13SimpleMachineC1Ev>
 80037a8:	4a50      	ldr	r2, [pc, #320]	; (80038ec <_ZN2ex4TestC1Ev+0x154>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <_ZN2ex4TestC1Ev+0x158>)
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	cb0c      	ldmia	r3, {r2, r3}
 80037c4:	f7ff f979 	bl	8002aba <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <_ZN2ex4TestC1Ev+0x15c>)
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	cb0c      	ldmia	r3, {r2, r3}
 80037de:	f7ff f96c 	bl	8002aba <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <_ZN2ex4TestC1Ev+0x160>)
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	f107 0318 	add.w	r3, r7, #24
 80037f6:	cb0c      	ldmia	r3, {r2, r3}
 80037f8:	f7ff f95f 	bl	8002aba <_ZN4core4TaskC1EPNS_9ComponentEMS1_FvvE>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <_ZN2ex4TestC1Ev+0x164>)
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	f107 0320 	add.w	r3, r7, #32
 8003810:	cb0c      	ldmia	r3, {r2, r3}
 8003812:	f7fd fbf5 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <_ZN2ex4TestC1Ev+0x168>)
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382a:	cb0c      	ldmia	r3, {r2, r3}
 800382c:	f000 f8fa 	bl	8003a24 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	33cc      	adds	r3, #204	; 0xcc
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff93 	bl	8003760 <_ZN4core14EmptySignalOneC1Ev>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	33d0      	adds	r3, #208	; 0xd0
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff9c 	bl	800377c <_ZN4core9SignalOneINS_10FixedEventItEEtEC1Ev>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <_ZN2ex4TestC1Ev+0x16c>)
 800384e:	633b      	str	r3, [r7, #48]	; 0x30
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003858:	cb0c      	ldmia	r3, {r2, r3}
 800385a:	f7fd fbd1 	bl	8001000 <_ZN4core10EmptyEventC1EPNS_9ComponentEMS1_FvvE>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4b28      	ldr	r3, [pc, #160]	; (8003908 <_ZN2ex4TestC1Ev+0x170>)
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
 800386a:	2300      	movs	r3, #0
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003872:	cb0c      	ldmia	r3, {r2, r3}
 8003874:	f000 f904 	bl	8003a80 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>
 8003878:	f7fe f938 	bl	8001aec <_ZN7console10Controller8instanceEv>
 800387c:	4603      	mov	r3, r0
 800387e:	4a23      	ldr	r2, [pc, #140]	; (800390c <_ZN2ex4TestC1Ev+0x174>)
 8003880:	2165      	movs	r1, #101	; 0x65
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fd8d 	bl	80013a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8003890:	f7fe f92c 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8003894:	4603      	mov	r3, r0
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <_ZN2ex4TestC1Ev+0x178>)
 8003898:	2166      	movs	r1, #102	; 0x66
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fd81 	bl	80013a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80038a8:	f7fe f920 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a19      	ldr	r2, [pc, #100]	; (8003914 <_ZN2ex4TestC1Ev+0x17c>)
 80038b0:	2164      	movs	r1, #100	; 0x64
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fd75 	bl	80013a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80038c0:	f7fe f914 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_ZN2ex4TestC1Ev+0x180>)
 80038c8:	2167      	movs	r1, #103	; 0x67
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fd69 	bl	80013a2 <_ZN7console10Controller15registerCommandEtPFvthPhE>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	3740      	adds	r7, #64	; 0x40
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08007308 	.word	0x08007308
 80038f0:	08003031 	.word	0x08003031
 80038f4:	08002fb9 	.word	0x08002fb9
 80038f8:	0800301d 	.word	0x0800301d
 80038fc:	08003081 	.word	0x08003081
 8003900:	080030a5 	.word	0x080030a5
 8003904:	080030cd 	.word	0x080030cd
 8003908:	080030f7 	.word	0x080030f7
 800390c:	0800391d 	.word	0x0800391d
 8003910:	08003941 	.word	0x08003941
 8003914:	08003965 	.word	0x08003965
 8003918:	080039bd 	.word	0x080039bd

0800391c <_ZN2ex4Test12startCommandEthPh>:
	M_SIGNAL(fixed, uint16_t)

	M_EVENT(emptySignalReceived)
	M_EVENT(fixedSignalReceived, uint16_t)

	U_ACTION(101, start)
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	603a      	str	r2, [r7, #0]
 8003926:	80fb      	strh	r3, [r7, #6]
 8003928:	460b      	mov	r3, r1
 800392a:	717b      	strb	r3, [r7, #5]
 800392c:	f7ff fec6 	bl	80036bc <_ZN2ex4Test8instanceEv>
 8003930:	4603      	mov	r3, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fbf0 	bl	8003118 <_ZN2ex4Test20startCommandHandler_Ev>
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN2ex4Test11stopCommandEthPh>:
	U_ACTION(102, stop)
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	603a      	str	r2, [r7, #0]
 800394a:	80fb      	strh	r3, [r7, #6]
 800394c:	460b      	mov	r3, r1
 800394e:	717b      	strb	r3, [r7, #5]
 8003950:	f7ff feb4 	bl	80036bc <_ZN2ex4Test8instanceEv>
 8003954:	4603      	mov	r3, r0
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fbf0 	bl	800313c <_ZN2ex4Test19stopCommandHandler_Ev>
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN2ex4Test14integerCommandEthPh>:
	U_INTEGER(100, integer)
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	603a      	str	r2, [r7, #0]
 800396e:	80fb      	strh	r3, [r7, #6]
 8003970:	460b      	mov	r3, r1
 8003972:	717b      	strb	r3, [r7, #5]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	061a      	lsls	r2, r3, #24
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	3302      	adds	r3, #2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	4313      	orrs	r3, r2
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	3203      	adds	r2, #3
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	f7ff fe90 	bl	80036bc <_ZN2ex4Test8instanceEv>
 800399c:	4603      	mov	r3, r0
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fbdd 	bl	8003160 <_ZN2ex4Test22integerCommandHandler_El>
 80039a6:	f7fe f8a1 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4619      	mov	r1, r3
 80039b0:	f7fd fd1b 	bl	80013ea <_ZN7console10Controller14updateIntFieldEtl>
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZN2ex4Test11nameCommandEthPh>:
	U_TEXT(103, name)
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	603a      	str	r2, [r7, #0]
 80039c6:	80fb      	strh	r3, [r7, #6]
 80039c8:	460b      	mov	r3, r1
 80039ca:	717b      	strb	r3, [r7, #5]
 80039cc:	f7ff fe76 	bl	80036bc <_ZN2ex4Test8instanceEv>
 80039d0:	797b      	ldrb	r3, [r7, #5]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7ff fbd7 	bl	8003188 <_ZN2ex4Test19nameCommandHandler_EhPh>
 80039da:	f7fe f887 	bl	8001aec <_ZN7console10Controller8instanceEv>
 80039de:	797a      	ldrb	r2, [r7, #5]
 80039e0:	88f9      	ldrh	r1, [r7, #6]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f7fd fd4f 	bl	8001486 <_ZN7console10Controller15updateTextFieldEthPh>
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <main>:
#include <console/controller.h>
#include <test/example/example.h>

int main()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	COMPONENT_REG(ex, Test);
 80039f4:	f7ff fe62 	bl	80036bc <_ZN2ex4Test8instanceEv>
 80039f8:	4603      	mov	r3, r0
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	4790      	blx	r2
	COMPONENT_REG(console, Controller);
 8003a02:	f7fe f873 	bl	8001aec <_ZN7console10Controller8instanceEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	4790      	blx	r2

	core::Engine::instance().run();
 8003a10:	f7fe f836 	bl	8001a80 <_ZN4core6Engine8instanceEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fef8 	bl	800280c <_ZN4core6Engine3runEv>
	return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE>:
    FixedEvent(Component* component, Handler handler)
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4639      	mov	r1, r7
 8003a30:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fe86 	bl	8002748 <_ZN4core5EventC1Ev>
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <_ZN4core10FixedEventImEC1EPNS_9ComponentEMS2_FvRKmE+0x58>)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3310      	adds	r3, #16
 8003a52:	463a      	mov	r2, r7
 8003a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a58:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(2);	//FIXME: 3 is constant
 8003a5c:	200c      	movs	r0, #12
 8003a5e:	f001 fde6 	bl	800562e <_Znwj>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461c      	mov	r4, r3
 8003a66:	2102      	movs	r1, #2
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 f837 	bl	8003adc <_ZN7MemPoolImEC1Em>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	619c      	str	r4, [r3, #24]
    }
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	08007338 	.word	0x08007338

08003a80 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE>:
    FixedEvent(Component* component, Handler handler)
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fe58 	bl	8002748 <_ZN4core5EventC1Ev>
 8003a98:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <_ZN4core10FixedEventItEC1EPNS_9ComponentEMS2_FvRKtE+0x58>)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
    	component_ = component;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
    	handler_ = handler;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3310      	adds	r3, #16
 8003aae:	463a      	mov	r2, r7
 8003ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ab4:	e883 0003 	stmia.w	r3, {r0, r1}
    	pool_ = new MemPool<E>(2);	//FIXME: 3 is constant
 8003ab8:	200c      	movs	r0, #12
 8003aba:	f001 fdb8 	bl	800562e <_Znwj>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f000 f842 	bl	8003b4e <_ZN7MemPoolItEC1Em>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	619c      	str	r4, [r3, #24]
    }
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	08007324 	.word	0x08007324

08003adc <_ZN7MemPoolImEC1Em>:
    MemPool(unsigned long ulUnitNum):
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fe71 	bl	80067e4 <malloc>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <_ZN7MemPoolImEC1Em+0x64>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d212      	bcs.n	8003b44 <_ZN7MemPoolImEC1Em+0x68>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e7ea      	b.n	8003b16 <_ZN7MemPoolImEC1Em+0x3a>
        	Error_Handler();
 8003b40:	f000 f8fe 	bl	8003d40 <Error_Handler>
    }
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZN7MemPoolItEC1Em>:
    MemPool(unsigned long ulUnitNum):
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
            m_pFreeMemBlock(nullptr)//,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
        m_pMemBlock = malloc(ulUnitNum * (sizeof(T) + sizeof(struct _Unit))); //Allocate a memory block.
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fe35 	bl	80067e4 <malloc>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
        if(m_pMemBlock)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <_ZN7MemPoolItEC1Em+0x70>
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d215      	bcs.n	8003bc2 <_ZN7MemPoolItEC1Em+0x74>
                struct _Unit *pCurUnit = (struct _Unit *)( (uint8_t*)m_pMemBlock + i*(sizeof(T)+sizeof(struct _Unit)) );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	60bb      	str	r3, [r7, #8]
                pCurUnit->pNext = m_pFreeMemBlock;    //Insert the new unit at head.
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	601a      	str	r2, [r3, #0]
                m_pFreeMemBlock = pCurUnit;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
            for(unsigned long i=0; i<ulUnitNum; i++)  //Link all mem unit . Create linked list.
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e7e7      	b.n	8003b8e <_ZN7MemPoolItEC1Em+0x40>
        	Error_Handler();
 8003bbe:	f000 f8bf 	bl	8003d40 <Error_Handler>
    }
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LL_GPIO_ResetOutputPin>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	4907      	ldr	r1, [pc, #28]	; (8003c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40023800 	.word	0x40023800

08003c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	463b      	mov	r3, r7
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
 8003c30:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003c32:	2080      	movs	r0, #128	; 0x80
 8003c34:	f7ff ffda 	bl	8003bec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7ff ffd7 	bl	8003bec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8003c3e:	2120      	movs	r1, #32
 8003c40:	480a      	ldr	r0, [pc, #40]	; (8003c6c <MX_GPIO_Init+0x50>)
 8003c42:	f7ff ffc3 	bl	8003bcc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003c46:	2320      	movs	r3, #32
 8003c48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4803      	ldr	r0, [pc, #12]	; (8003c6c <MX_GPIO_Init+0x50>)
 8003c60:	f001 f8f9 	bl	8004e56 <LL_GPIO_Init>

}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40020000 	.word	0x40020000

08003c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b094      	sub	sp, #80	; 0x50
 8003c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c76:	f107 0320 	add.w	r3, r7, #32
 8003c7a:	2230      	movs	r2, #48	; 0x30
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 fdc0 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <SystemClock_Config+0xc8>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <SystemClock_Config+0xc8>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <SystemClock_Config+0xc8>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <SystemClock_Config+0xcc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <SystemClock_Config+0xcc>)
 8003cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <SystemClock_Config+0xcc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003ce4:	2364      	movs	r3, #100	; 0x64
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003cec:	2304      	movs	r3, #4
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cf0:	f107 0320 	add.w	r3, r7, #32
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fb69 	bl	80043cc <HAL_RCC_OscConfig>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003d00:	f000 f81e 	bl	8003d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d04:	230f      	movs	r3, #15
 8003d06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	2103      	movs	r1, #3
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fdcb 	bl	80048bc <HAL_RCC_ClockConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003d2c:	f000 f808 	bl	8003d40 <Error_Handler>
  }
}
 8003d30:	bf00      	nop
 8003d32:	3750      	adds	r7, #80	; 0x50
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40007000 	.word	0x40007000

08003d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d44:	b672      	cpsid	i
}
 8003d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <Error_Handler+0x8>
	...

08003d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	return 1;
 8003da0:	2301      	movs	r3, #1
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_kill>:

int _kill(int pid, int sig)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003db6:	f002 fceb 	bl	8006790 <__errno>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2216      	movs	r2, #22
 8003dbe:	601a      	str	r2, [r3, #0]
	return -1;
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_exit>:

void _exit (int status)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ffe7 	bl	8003dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dde:	e7fe      	b.n	8003dde <_exit+0x12>

08003de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <_sbrk+0x5c>)
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <_sbrk+0x60>)
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003df4:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <_sbrk+0x64>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <_sbrk+0x64>)
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <_sbrk+0x68>)
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <_sbrk+0x64>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e10:	f002 fcbe 	bl	8006790 <__errno>
 8003e14:	4603      	mov	r3, r0
 8003e16:	220c      	movs	r2, #12
 8003e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e009      	b.n	8003e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <_sbrk+0x64>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <_sbrk+0x64>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <_sbrk+0x64>)
 8003e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20020000 	.word	0x20020000
 8003e40:	00000400 	.word	0x00000400
 8003e44:	20003424 	.word	0x20003424
 8003e48:	200034d8 	.word	0x200034d8

08003e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <SystemInit+0x20>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <SystemInit+0x20>)
 8003e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <__NVIC_GetPriorityGrouping+0x18>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 0307 	and.w	r3, r3, #7
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	db0b      	blt.n	8003eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	4907      	ldr	r1, [pc, #28]	; (8003ec4 <__NVIC_EnableIRQ+0x38>)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2001      	movs	r0, #1
 8003eae:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000e100 	.word	0xe000e100

08003ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	6039      	str	r1, [r7, #0]
 8003ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	db0a      	blt.n	8003ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	490c      	ldr	r1, [pc, #48]	; (8003f14 <__NVIC_SetPriority+0x4c>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	0112      	lsls	r2, r2, #4
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	440b      	add	r3, r1
 8003eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef0:	e00a      	b.n	8003f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	4908      	ldr	r1, [pc, #32]	; (8003f18 <__NVIC_SetPriority+0x50>)
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	3b04      	subs	r3, #4
 8003f00:	0112      	lsls	r2, r2, #4
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	440b      	add	r3, r1
 8003f06:	761a      	strb	r2, [r3, #24]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000e100 	.word	0xe000e100
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	; 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f1c3 0307 	rsb	r3, r3, #7
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	bf28      	it	cs
 8003f3a:	2304      	movcs	r3, #4
 8003f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3304      	adds	r3, #4
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d902      	bls.n	8003f4c <NVIC_EncodePriority+0x30>
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3b03      	subs	r3, #3
 8003f4a:	e000      	b.n	8003f4e <NVIC_EncodePriority+0x32>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	401a      	ands	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f64:	f04f 31ff 	mov.w	r1, #4294967295
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	43d9      	mvns	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	4313      	orrs	r3, r2
         );
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_USART_Enable>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <LL_USART_ConfigAsyncMode>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	615a      	str	r2, [r3, #20]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <LL_AHB1_GRP1_EnableClock>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40023800 	.word	0x40023800

08004000 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <LL_APB1_GRP1_EnableClock+0x2c>)
 800400a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400c:	4907      	ldr	r1, [pc, #28]	; (800402c <LL_APB1_GRP1_EnableClock+0x2c>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4013      	ands	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40023800 	.word	0x40023800

08004030 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	; 0x38
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	611a      	str	r2, [r3, #16]
 8004046:	615a      	str	r2, [r3, #20]
 8004048:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800405a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800405e:	f7ff ffcf 	bl	8004000 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004062:	2001      	movs	r0, #1
 8004064:	f7ff ffb4 	bl	8003fd0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004068:	230c      	movs	r3, #12
 800406a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800406c:	2302      	movs	r3, #2
 800406e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800407c:	2307      	movs	r3, #7
 800407e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4818      	ldr	r0, [pc, #96]	; (80040e8 <MX_USART2_UART_Init+0xb8>)
 8004086:	f000 fee6 	bl	8004e56 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800408a:	f7ff fef1 	bl	8003e70 <__NVIC_GetPriorityGrouping>
 800408e:	4603      	mov	r3, r0
 8004090:	2200      	movs	r2, #0
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff41 	bl	8003f1c <NVIC_EncodePriority>
 800409a:	4603      	mov	r3, r0
 800409c:	4619      	mov	r1, r3
 800409e:	2026      	movs	r0, #38	; 0x26
 80040a0:	f7ff ff12 	bl	8003ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80040a4:	2026      	movs	r0, #38	; 0x26
 80040a6:	f7ff fef1 	bl	8003e8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 460800;
 80040aa:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 80040ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80040b0:	2300      	movs	r3, #0
 80040b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80040bc:	230c      	movs	r3, #12
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80040c8:	f107 031c 	add.w	r3, r7, #28
 80040cc:	4619      	mov	r1, r3
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <MX_USART2_UART_Init+0xbc>)
 80040d0:	f001 fa38 	bl	8005544 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80040d4:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_USART2_UART_Init+0xbc>)
 80040d6:	f7ff ff64 	bl	8003fa2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80040da:	4804      	ldr	r0, [pc, #16]	; (80040ec <MX_USART2_UART_Init+0xbc>)
 80040dc:	f7ff ff51 	bl	8003f82 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040e0:	bf00      	nop
 80040e2:	3738      	adds	r7, #56	; 0x38
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40020000 	.word	0x40020000
 80040ec:	40004400 	.word	0x40004400

080040f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80040f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040f4:	480d      	ldr	r0, [pc, #52]	; (800412c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040f6:	490e      	ldr	r1, [pc, #56]	; (8004130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040f8:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040fc:	e002      	b.n	8004104 <LoopCopyDataInit>

080040fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004102:	3304      	adds	r3, #4

08004104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004108:	d3f9      	bcc.n	80040fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800410a:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800410c:	4c0b      	ldr	r4, [pc, #44]	; (800413c <LoopFillZerobss+0x26>)
  movs r3, #0
 800410e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004110:	e001      	b.n	8004116 <LoopFillZerobss>

08004112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004114:	3204      	adds	r2, #4

08004116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004118:	d3fb      	bcc.n	8004112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800411a:	f7ff fe97 	bl	8003e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800411e:	f002 fb3d 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004122:	f7ff fc65 	bl	80039f0 <main>
  bx  lr    
 8004126:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800412c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004130:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004134:	08007594 	.word	0x08007594
  ldr r2, =_sbss
 8004138:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800413c:	200034d8 	.word	0x200034d8

08004140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004140:	e7fe      	b.n	8004140 <ADC_IRQHandler>
	...

08004144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_Init+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <HAL_Init+0x40>)
 800414e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_Init+0x40>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_Init+0x40>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_Init+0x40>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a07      	ldr	r2, [pc, #28]	; (8004184 <HAL_Init+0x40>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416c:	2003      	movs	r0, #3
 800416e:	f000 f8f9 	bl	8004364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004172:	200f      	movs	r0, #15
 8004174:	f000 f808 	bl	8004188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004178:	f7ff fde8 	bl	8003d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00

08004188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_InitTick+0x54>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_InitTick+0x58>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800419e:	fbb3 f3f1 	udiv	r3, r3, r1
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f903 	bl	80043b2 <HAL_SYSTICK_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00e      	b.n	80041d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b0f      	cmp	r3, #15
 80041ba:	d80a      	bhi.n	80041d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041bc:	2200      	movs	r2, #0
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	f000 f8d9 	bl	800437a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041c8:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <HAL_InitTick+0x5c>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000008 	.word	0x20000008
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return uwTick;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_GetTick+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	200034c4 	.word	0x200034c4

08004200 <__NVIC_SetPriorityGrouping>:
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_GetPriorityGrouping>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <__NVIC_GetPriorityGrouping+0x18>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	f003 0307 	and.w	r3, r3, #7
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_SetPriority>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <NVIC_EncodePriority>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	bf28      	it	cs
 80042d6:	2304      	movcs	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3304      	adds	r3, #4
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004300:	f04f 31ff 	mov.w	r1, #4294967295
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43d9      	mvns	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	4313      	orrs	r3, r2
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004330:	d301      	bcc.n	8004336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004332:	2301      	movs	r3, #1
 8004334:	e00f      	b.n	8004356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <SysTick_Config+0x40>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433e:	210f      	movs	r1, #15
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	f7ff ff8e 	bl	8004264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <SysTick_Config+0x40>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <SysTick_Config+0x40>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010

08004364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff47 	bl	8004200 <__NVIC_SetPriorityGrouping>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800438c:	f7ff ff5c 	bl	8004248 <__NVIC_GetPriorityGrouping>
 8004390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	6978      	ldr	r0, [r7, #20]
 8004398:	f7ff ff8e 	bl	80042b8 <NVIC_EncodePriority>
 800439c:	4602      	mov	r2, r0
 800439e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff5d 	bl	8004264 <__NVIC_SetPriority>
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ffb0 	bl	8004320 <SysTick_Config>
 80043c0:	4603      	mov	r3, r0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e264      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d075      	beq.n	80044d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	4ba3      	ldr	r3, [pc, #652]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x108>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e23f      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x74>
 8004432:	4b91      	ldr	r3, [pc, #580]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a90      	ldr	r2, [pc, #576]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x98>
 800444a:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a87      	ldr	r2, [pc, #540]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a83      	ldr	r2, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b81      	ldr	r3, [pc, #516]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7ff feb0 	bl	80041e8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7ff feac 	bl	80041e8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e204      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xc0>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7ff fe9c 	bl	80041e8 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7ff fe98 	bl	80041e8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1f0      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0xe8>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1c4      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4952      	ldr	r1, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b4f      	ldr	r3, [pc, #316]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7ff fe51 	bl	80041e8 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454a:	f7ff fe4d 	bl	80041e8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1a5      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4940      	ldr	r1, [pc, #256]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7ff fe30 	bl	80041e8 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458c:	f7ff fe2c 	bl	80041e8 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e184      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d030      	beq.n	8004618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7ff fe10 	bl	80041e8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045cc:	f7ff fe0c 	bl	80041e8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e164      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x200>
 80045ea:	e015      	b.n	8004618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7ff fdf9 	bl	80041e8 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fa:	f7ff fdf5 	bl	80041e8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e14d      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a0 	beq.w	8004766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7ff fdbb 	bl	80041e8 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e011      	b.n	800469a <HAL_RCC_OscConfig+0x2ce>
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	42470000 	.word	0x42470000
 8004680:	42470e80 	.word	0x42470e80
 8004684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004688:	f7ff fdae 	bl	80041e8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e106      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <HAL_RCC_OscConfig+0x4e4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x2f0>
 80046ae:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a80      	ldr	r2, [pc, #512]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	e01c      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_OscConfig+0x312>
 80046c4:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a7a      	ldr	r2, [pc, #488]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a77      	ldr	r2, [pc, #476]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e00b      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046de:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a74      	ldr	r2, [pc, #464]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d015      	beq.n	800472a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7ff fd73 	bl	80041e8 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7ff fd6f 	bl	80041e8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0c5      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCC_OscConfig+0x33a>
 8004728:	e014      	b.n	8004754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7ff fd5d 	bl	80041e8 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7ff fd59 	bl	80041e8 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0af      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004748:	4b5a      	ldr	r3, [pc, #360]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ee      	bne.n	8004732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a55      	ldr	r2, [pc, #340]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 809b 	beq.w	80048a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004770:	4b50      	ldr	r3, [pc, #320]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d05c      	beq.n	8004836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d141      	bne.n	8004808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7ff fd2d 	bl	80041e8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7ff fd29 	bl	80041e8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e081      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	3b01      	subs	r3, #1
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	4937      	ldr	r1, [pc, #220]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7ff fd02 	bl	80041e8 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7ff fcfe 	bl	80041e8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e056      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x41c>
 8004806:	e04e      	b.n	80048a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x4ec>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7ff fceb 	bl	80041e8 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7ff fce7 	bl	80041e8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e03f      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x44a>
 8004834:	e037      	b.n	80048a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e032      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_RCC_OscConfig+0x4e8>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d028      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d121      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d11a      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004878:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40007000 	.word	0x40007000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	42470060 	.word	0x42470060

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cc      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d90c      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b65      	ldr	r3, [pc, #404]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d044      	beq.n	80049dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d119      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e067      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4934      	ldr	r1, [pc, #208]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7ff fc1c 	bl	80041e8 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7ff fc18 	bl	80041e8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d20c      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fb90 	bl	8004188 <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08007360 	.word	0x08007360
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80bd 	bhi.w	8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e0b7      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004abe:	60bb      	str	r3, [r7, #8]
       break;
 8004ac0:	e0b7      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ac4:	60bb      	str	r3, [r7, #8]
      break;
 8004ac6:	e0b4      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04d      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	ea02 0800 	and.w	r8, r2, r0
 8004af6:	ea03 0901 	and.w	r9, r3, r1
 8004afa:	4640      	mov	r0, r8
 8004afc:	4649      	mov	r1, r9
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	014b      	lsls	r3, r1, #5
 8004b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b0c:	0142      	lsls	r2, r0, #5
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	ebb0 0008 	subs.w	r0, r0, r8
 8004b16:	eb61 0109 	sbc.w	r1, r1, r9
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b28:	0182      	lsls	r2, r0, #6
 8004b2a:	1a12      	subs	r2, r2, r0
 8004b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	00d9      	lsls	r1, r3, #3
 8004b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3e:	00d0      	lsls	r0, r2, #3
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	eb12 0208 	adds.w	r2, r2, r8
 8004b48:	eb43 0309 	adc.w	r3, r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0259      	lsls	r1, r3, #9
 8004b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b5a:	0250      	lsls	r0, r2, #9
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	f7fc f806 	bl	8000b7c <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e04a      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	ea02 0400 	and.w	r4, r2, r0
 8004b92:	ea03 0501 	and.w	r5, r3, r1
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	014b      	lsls	r3, r1, #5
 8004ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ba8:	0142      	lsls	r2, r0, #5
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	1b00      	subs	r0, r0, r4
 8004bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	018b      	lsls	r3, r1, #6
 8004bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bc2:	0182      	lsls	r2, r0, #6
 8004bc4:	1a12      	subs	r2, r2, r0
 8004bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	00d9      	lsls	r1, r3, #3
 8004bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd8:	00d0      	lsls	r0, r2, #3
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	1912      	adds	r2, r2, r4
 8004be0:	eb45 0303 	adc.w	r3, r5, r3
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	0299      	lsls	r1, r3, #10
 8004bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bf2:	0290      	lsls	r0, r2, #10
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	f7fb ffba 	bl	8000b7c <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c2e:	60bb      	str	r3, [r7, #8]
      break;
 8004c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c32:	68bb      	ldr	r3, [r7, #8]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <LL_GPIO_SetPinMode>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	613b      	str	r3, [r7, #16]
  return result;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2103      	movs	r1, #3
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	61bb      	str	r3, [r7, #24]
  return result;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3724      	adds	r7, #36	; 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_GPIO_SetPinOutputType>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_GPIO_SetPinSpeed>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b089      	sub	sp, #36	; 0x24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	613b      	str	r3, [r7, #16]
  return result;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	2103      	movs	r1, #3
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	401a      	ands	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	61bb      	str	r3, [r7, #24]
  return result;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	431a      	orrs	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	3724      	adds	r7, #36	; 0x24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_GPIO_SetPinPull>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	613b      	str	r3, [r7, #16]
  return result;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	2103      	movs	r1, #3
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	401a      	ands	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	61bb      	str	r3, [r7, #24]
  return result;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60da      	str	r2, [r3, #12]
}
 8004d8a:	bf00      	nop
 8004d8c:	3724      	adds	r7, #36	; 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_GPIO_SetAFPin_0_7>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	b089      	sub	sp, #36	; 0x24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	613b      	str	r3, [r7, #16]
  return result;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	210f      	movs	r1, #15
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
  return result;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	fab3 f383 	clz	r3, r3
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	3724      	adds	r7, #36	; 0x24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_GPIO_SetAFPin_8_15>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	613b      	str	r3, [r7, #16]
  return result;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	210f      	movs	r1, #15
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	401a      	ands	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	61bb      	str	r3, [r7, #24]
  return result;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004e4a:	bf00      	nop
 8004e4c:	3724      	adds	r7, #36	; 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	613b      	str	r3, [r7, #16]
  return result;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	fab3 f383 	clz	r3, r3
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004e80:	e050      	b.n	8004f24 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	2101      	movs	r1, #1
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d042      	beq.n	8004f1e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d003      	beq.n	8004ea8 <LL_GPIO_Init+0x52>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d10d      	bne.n	8004ec4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	461a      	mov	r2, r3
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ff12 	bl	8004cda <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fef3 	bl	8004caa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff33 	bl	8004d38 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d11a      	bne.n	8004f10 <LL_GPIO_Init+0xba>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	60bb      	str	r3, [r7, #8]
  return result;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	d807      	bhi.n	8004f02 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ff4b 	bl	8004d96 <LL_GPIO_SetAFPin_0_7>
 8004f00:	e006      	b.n	8004f10 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	461a      	mov	r2, r3
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ff72 	bl	8004df4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	461a      	mov	r2, r3
 8004f16:	69b9      	ldr	r1, [r7, #24]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fe97 	bl	8004c4c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1a7      	bne.n	8004e82 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <LL_RCC_GetSysClkSource+0x18>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <LL_RCC_GetAHBPrescaler+0x18>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800

08004f74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <LL_RCC_GetAPB1Prescaler+0x18>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800

08004f90 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <LL_RCC_PLL_GetMainSource+0x18>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800

08004fc8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <LL_RCC_PLL_GetN+0x18>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <LL_RCC_PLL_GetP+0x18>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800

08005000 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <LL_RCC_PLL_GetDivider+0x18>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800

0800501c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005024:	f000 f820 	bl	8005068 <RCC_GetSystemClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f840 	bl	80050b8 <RCC_GetHCLKClockFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f84e 	bl	80050e4 <RCC_GetPCLK1ClockFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f85a 	bl	800510c <RCC_GetPCLK2ClockFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005072:	f7ff ff63 	bl	8004f3c <LL_RCC_GetSysClkSource>
 8005076:	4603      	mov	r3, r0
 8005078:	2b08      	cmp	r3, #8
 800507a:	d00c      	beq.n	8005096 <RCC_GetSystemClockFreq+0x2e>
 800507c:	2b08      	cmp	r3, #8
 800507e:	d80f      	bhi.n	80050a0 <RCC_GetSystemClockFreq+0x38>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <RCC_GetSystemClockFreq+0x22>
 8005084:	2b04      	cmp	r3, #4
 8005086:	d003      	beq.n	8005090 <RCC_GetSystemClockFreq+0x28>
 8005088:	e00a      	b.n	80050a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <RCC_GetSystemClockFreq+0x48>)
 800508c:	607b      	str	r3, [r7, #4]
      break;
 800508e:	e00a      	b.n	80050a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <RCC_GetSystemClockFreq+0x4c>)
 8005092:	607b      	str	r3, [r7, #4]
      break;
 8005094:	e007      	b.n	80050a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005096:	2008      	movs	r0, #8
 8005098:	f000 f84c 	bl	8005134 <RCC_PLL_GetFreqDomain_SYS>
 800509c:	6078      	str	r0, [r7, #4]
      break;
 800509e:	e002      	b.n	80050a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <RCC_GetSystemClockFreq+0x48>)
 80050a2:	607b      	str	r3, [r7, #4]
      break;
 80050a4:	bf00      	nop
  }

  return frequency;
 80050a6:	687b      	ldr	r3, [r7, #4]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80050c0:	f7ff ff4a 	bl	8004f58 <LL_RCC_GetAHBPrescaler>
 80050c4:	4603      	mov	r3, r0
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <RCC_GetHCLKClockFreq+0x28>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	40d3      	lsrs	r3, r2
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08007360 	.word	0x08007360

080050e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80050ec:	f7ff ff42 	bl	8004f74 <LL_RCC_GetAPB1Prescaler>
 80050f0:	4603      	mov	r3, r0
 80050f2:	0a9b      	lsrs	r3, r3, #10
 80050f4:	4a04      	ldr	r2, [pc, #16]	; (8005108 <RCC_GetPCLK1ClockFreq+0x24>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	40d3      	lsrs	r3, r2
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	08007370 	.word	0x08007370

0800510c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005114:	f7ff ff3c 	bl	8004f90 <LL_RCC_GetAPB2Prescaler>
 8005118:	4603      	mov	r3, r0
 800511a:	0b5b      	lsrs	r3, r3, #13
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <RCC_GetPCLK2ClockFreq+0x24>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	40d3      	lsrs	r3, r2
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	08007370 	.word	0x08007370

08005134 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005148:	f7ff ff30 	bl	8004fac <LL_RCC_PLL_GetMainSource>
 800514c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515a:	d003      	beq.n	8005164 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800515c:	e005      	b.n	800516a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005160:	617b      	str	r3, [r7, #20]
      break;
 8005162:	e005      	b.n	8005170 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005164:	4b11      	ldr	r3, [pc, #68]	; (80051ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005166:	617b      	str	r3, [r7, #20]
      break;
 8005168:	e002      	b.n	8005170 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800516a:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800516c:	617b      	str	r3, [r7, #20]
      break;
 800516e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d113      	bne.n	800519e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005176:	f7ff ff43 	bl	8005000 <LL_RCC_PLL_GetDivider>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fbb3 f4f2 	udiv	r4, r3, r2
 8005182:	f7ff ff21 	bl	8004fc8 <LL_RCC_PLL_GetN>
 8005186:	4603      	mov	r3, r0
 8005188:	fb03 f404 	mul.w	r4, r3, r4
 800518c:	f7ff ff2a 	bl	8004fe4 <LL_RCC_PLL_GetP>
 8005190:	4603      	mov	r3, r0
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	3301      	adds	r3, #1
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	fbb4 f3f3 	udiv	r3, r4, r3
 800519c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800519e:	693b      	ldr	r3, [r7, #16]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd90      	pop	{r4, r7, pc}
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	007a1200 	.word	0x007a1200

080051b0 <LL_USART_IsEnabled>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_USART_SetStopBitsLength>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_USART_SetHWFlowCtrl>:
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	615a      	str	r2, [r3, #20]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_USART_SetBaudRate>:
{
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	b09f      	sub	sp, #124	; 0x7c
 800522a:	af00      	add	r7, sp, #0
 800522c:	6778      	str	r0, [r7, #116]	; 0x74
 800522e:	6739      	str	r1, [r7, #112]	; 0x70
 8005230:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523a:	f040 80bc 	bne.w	80053b6 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800523e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005240:	461c      	mov	r4, r3
 8005242:	f04f 0500 	mov.w	r5, #0
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	eb12 0a02 	adds.w	sl, r2, r2
 800524e:	eb43 0b03 	adc.w	fp, r3, r3
 8005252:	4652      	mov	r2, sl
 8005254:	465b      	mov	r3, fp
 8005256:	1912      	adds	r2, r2, r4
 8005258:	eb45 0303 	adc.w	r3, r5, r3
 800525c:	f04f 0000 	mov.w	r0, #0
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	00d9      	lsls	r1, r3, #3
 8005266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800526a:	00d0      	lsls	r0, r2, #3
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	1911      	adds	r1, r2, r4
 8005272:	6639      	str	r1, [r7, #96]	; 0x60
 8005274:	416b      	adcs	r3, r5
 8005276:	667b      	str	r3, [r7, #100]	; 0x64
 8005278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800527a:	461a      	mov	r2, r3
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	1891      	adds	r1, r2, r2
 8005282:	6339      	str	r1, [r7, #48]	; 0x30
 8005284:	415b      	adcs	r3, r3
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
 8005288:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800528c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005290:	f7fb fc74 	bl	8000b7c <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4ba9      	ldr	r3, [pc, #676]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 800529a:	fba3 2302 	umull	r2, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	b29e      	uxth	r6, r3
 80052a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a8:	461c      	mov	r4, r3
 80052aa:	f04f 0500 	mov.w	r5, #0
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80052b6:	415b      	adcs	r3, r3
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052be:	1912      	adds	r2, r2, r4
 80052c0:	eb45 0303 	adc.w	r3, r5, r3
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	00d9      	lsls	r1, r3, #3
 80052ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d2:	00d0      	lsls	r0, r2, #3
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	1911      	adds	r1, r2, r4
 80052da:	65b9      	str	r1, [r7, #88]	; 0x58
 80052dc:	416b      	adcs	r3, r5
 80052de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e2:	461a      	mov	r2, r3
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	6239      	str	r1, [r7, #32]
 80052ec:	415b      	adcs	r3, r3
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
 80052f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052f8:	f7fb fc40 	bl	8000b7c <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4b8f      	ldr	r3, [pc, #572]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005302:	fba3 1302 	umull	r1, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2164      	movs	r1, #100	; 0x64
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	3332      	adds	r3, #50	; 0x32
 8005314:	4a8a      	ldr	r2, [pc, #552]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	b29b      	uxth	r3, r3
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	b29b      	uxth	r3, r3
 8005322:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005326:	b29b      	uxth	r3, r3
 8005328:	4433      	add	r3, r6
 800532a:	b29e      	uxth	r6, r3
 800532c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800532e:	4618      	mov	r0, r3
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	1894      	adds	r4, r2, r2
 800533a:	61bc      	str	r4, [r7, #24]
 800533c:	415b      	adcs	r3, r3
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005344:	1812      	adds	r2, r2, r0
 8005346:	eb41 0303 	adc.w	r3, r1, r3
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	f04f 0500 	mov.w	r5, #0
 8005352:	00dd      	lsls	r5, r3, #3
 8005354:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005358:	00d4      	lsls	r4, r2, #3
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	1814      	adds	r4, r2, r0
 8005360:	653c      	str	r4, [r7, #80]	; 0x50
 8005362:	414b      	adcs	r3, r1
 8005364:	657b      	str	r3, [r7, #84]	; 0x54
 8005366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	1891      	adds	r1, r2, r2
 8005370:	6139      	str	r1, [r7, #16]
 8005372:	415b      	adcs	r3, r3
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800537a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800537e:	f7fb fbfd 	bl	8000b7c <__aeabi_uldivmod>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4b6e      	ldr	r3, [pc, #440]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005388:	fba3 1302 	umull	r1, r3, r3, r2
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3332      	adds	r3, #50	; 0x32
 800539a:	4a69      	ldr	r2, [pc, #420]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	4433      	add	r3, r6
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	e0be      	b.n	8005534 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80053b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b8:	461c      	mov	r4, r3
 80053ba:	f04f 0500 	mov.w	r5, #0
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	eb12 0802 	adds.w	r8, r2, r2
 80053c6:	eb43 0903 	adc.w	r9, r3, r3
 80053ca:	4642      	mov	r2, r8
 80053cc:	464b      	mov	r3, r9
 80053ce:	1912      	adds	r2, r2, r4
 80053d0:	eb45 0303 	adc.w	r3, r5, r3
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	00d9      	lsls	r1, r3, #3
 80053de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053e2:	00d0      	lsls	r0, r2, #3
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	1911      	adds	r1, r2, r4
 80053ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80053ec:	416b      	adcs	r3, r5
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053f2:	4618      	mov	r0, r3
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	008b      	lsls	r3, r1, #2
 8005402:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005406:	0082      	lsls	r2, r0, #2
 8005408:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800540c:	f7fb fbb6 	bl	8000b7c <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005416:	fba3 2302 	umull	r2, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	b29b      	uxth	r3, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	b29e      	uxth	r6, r3
 8005422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005424:	4618      	mov	r0, r3
 8005426:	f04f 0100 	mov.w	r1, #0
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	1894      	adds	r4, r2, r2
 8005430:	60bc      	str	r4, [r7, #8]
 8005432:	415b      	adcs	r3, r3
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800543a:	1812      	adds	r2, r2, r0
 800543c:	eb41 0303 	adc.w	r3, r1, r3
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	f04f 0500 	mov.w	r5, #0
 8005448:	00dd      	lsls	r5, r3, #3
 800544a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800544e:	00d4      	lsls	r4, r2, #3
 8005450:	4622      	mov	r2, r4
 8005452:	462b      	mov	r3, r5
 8005454:	1814      	adds	r4, r2, r0
 8005456:	643c      	str	r4, [r7, #64]	; 0x40
 8005458:	414b      	adcs	r3, r1
 800545a:	647b      	str	r3, [r7, #68]	; 0x44
 800545c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800545e:	4618      	mov	r0, r3
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	008b      	lsls	r3, r1, #2
 800546e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005472:	0082      	lsls	r2, r0, #2
 8005474:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005478:	f7fb fb80 	bl	8000b7c <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005482:	fba3 1302 	umull	r1, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2164      	movs	r1, #100	; 0x64
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	3332      	adds	r3, #50	; 0x32
 8005494:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	b29b      	uxth	r3, r3
 800549e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	4433      	add	r3, r6
 80054a6:	b29e      	uxth	r6, r3
 80054a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054aa:	4618      	mov	r0, r3
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	1894      	adds	r4, r2, r2
 80054b6:	603c      	str	r4, [r7, #0]
 80054b8:	415b      	adcs	r3, r3
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c0:	1812      	adds	r2, r2, r0
 80054c2:	eb41 0303 	adc.w	r3, r1, r3
 80054c6:	f04f 0400 	mov.w	r4, #0
 80054ca:	f04f 0500 	mov.w	r5, #0
 80054ce:	00dd      	lsls	r5, r3, #3
 80054d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054d4:	00d4      	lsls	r4, r2, #3
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	1814      	adds	r4, r2, r0
 80054dc:	63bc      	str	r4, [r7, #56]	; 0x38
 80054de:	414b      	adcs	r3, r1
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e4:	4618      	mov	r0, r3
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054f8:	0082      	lsls	r2, r0, #2
 80054fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80054fe:	f7fb fb3d 	bl	8000b7c <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <LL_USART_SetBaudRate+0x31c>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	b29b      	uxth	r3, r3
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	b29b      	uxth	r3, r3
 800552a:	4433      	add	r3, r6
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005532:	609a      	str	r2, [r3, #8]
}
 8005534:	bf00      	nop
 8005536:	377c      	adds	r7, #124	; 0x7c
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	51eb851f 	.word	0x51eb851f

08005544 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fe2a 	bl	80051b0 <LL_USART_IsEnabled>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d149      	bne.n	80055f6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800556a:	f023 030c 	bic.w	r3, r3, #12
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	6851      	ldr	r1, [r2, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	4311      	orrs	r1, r2
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	6912      	ldr	r2, [r2, #16]
 800557c:	4311      	orrs	r1, r2
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	6992      	ldr	r2, [r2, #24]
 8005582:	430a      	orrs	r2, r1
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fe21 	bl	80051d8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff fe2e 	bl	80051fe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fd38 	bl	800501c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <LL_USART_Init+0xbc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d102      	bne.n	80055ba <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	e00c      	b.n	80055d4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <LL_USART_Init+0xc0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d102      	bne.n	80055c8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e005      	b.n	80055d4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <LL_USART_Init+0xc4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69b9      	ldr	r1, [r7, #24]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fe17 	bl	8005224 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80055f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40011000 	.word	0x40011000
 8005604:	40004400 	.word	0x40004400
 8005608:	40011400 	.word	0x40011400

0800560c <_ZdlPvj>:
 800560c:	f000 b820 	b.w	8005650 <_ZdlPv>

08005610 <__cxa_guard_acquire>:
 8005610:	6803      	ldr	r3, [r0, #0]
 8005612:	07db      	lsls	r3, r3, #31
 8005614:	d406      	bmi.n	8005624 <__cxa_guard_acquire+0x14>
 8005616:	7843      	ldrb	r3, [r0, #1]
 8005618:	b103      	cbz	r3, 800561c <__cxa_guard_acquire+0xc>
 800561a:	deff      	udf	#255	; 0xff
 800561c:	2301      	movs	r3, #1
 800561e:	7043      	strb	r3, [r0, #1]
 8005620:	4618      	mov	r0, r3
 8005622:	4770      	bx	lr
 8005624:	2000      	movs	r0, #0
 8005626:	4770      	bx	lr

08005628 <__cxa_guard_release>:
 8005628:	2301      	movs	r3, #1
 800562a:	6003      	str	r3, [r0, #0]
 800562c:	4770      	bx	lr

0800562e <_Znwj>:
 800562e:	2801      	cmp	r0, #1
 8005630:	bf38      	it	cc
 8005632:	2001      	movcc	r0, #1
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	4620      	mov	r0, r4
 800563a:	f001 f8d3 	bl	80067e4 <malloc>
 800563e:	b930      	cbnz	r0, 800564e <_Znwj+0x20>
 8005640:	f000 f808 	bl	8005654 <_ZSt15get_new_handlerv>
 8005644:	b908      	cbnz	r0, 800564a <_Znwj+0x1c>
 8005646:	f001 f895 	bl	8006774 <abort>
 800564a:	4780      	blx	r0
 800564c:	e7f4      	b.n	8005638 <_Znwj+0xa>
 800564e:	bd10      	pop	{r4, pc}

08005650 <_ZdlPv>:
 8005650:	f001 b8d0 	b.w	80067f4 <free>

08005654 <_ZSt15get_new_handlerv>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <_ZSt15get_new_handlerv+0xc>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	f3bf 8f5b 	dmb	ish
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20003428 	.word	0x20003428
 8005664:	00000000 	.word	0x00000000

08005668 <cos>:
 8005668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800566a:	ec53 2b10 	vmov	r2, r3, d0
 800566e:	4824      	ldr	r0, [pc, #144]	; (8005700 <cos+0x98>)
 8005670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005674:	4281      	cmp	r1, r0
 8005676:	dc06      	bgt.n	8005686 <cos+0x1e>
 8005678:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80056f8 <cos+0x90>
 800567c:	f000 faa4 	bl	8005bc8 <__kernel_cos>
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	e007      	b.n	8005696 <cos+0x2e>
 8005686:	481f      	ldr	r0, [pc, #124]	; (8005704 <cos+0x9c>)
 8005688:	4281      	cmp	r1, r0
 800568a:	dd09      	ble.n	80056a0 <cos+0x38>
 800568c:	ee10 0a10 	vmov	r0, s0
 8005690:	4619      	mov	r1, r3
 8005692:	f7fa fdf9 	bl	8000288 <__aeabi_dsub>
 8005696:	ec41 0b10 	vmov	d0, r0, r1
 800569a:	b005      	add	sp, #20
 800569c:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a0:	4668      	mov	r0, sp
 80056a2:	f000 f885 	bl	80057b0 <__ieee754_rem_pio2>
 80056a6:	f000 0003 	and.w	r0, r0, #3
 80056aa:	2801      	cmp	r0, #1
 80056ac:	d007      	beq.n	80056be <cos+0x56>
 80056ae:	2802      	cmp	r0, #2
 80056b0:	d012      	beq.n	80056d8 <cos+0x70>
 80056b2:	b9c0      	cbnz	r0, 80056e6 <cos+0x7e>
 80056b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056b8:	ed9d 0b00 	vldr	d0, [sp]
 80056bc:	e7de      	b.n	800567c <cos+0x14>
 80056be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056c2:	ed9d 0b00 	vldr	d0, [sp]
 80056c6:	f000 fe87 	bl	80063d8 <__kernel_sin>
 80056ca:	ec53 2b10 	vmov	r2, r3, d0
 80056ce:	ee10 0a10 	vmov	r0, s0
 80056d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80056d6:	e7de      	b.n	8005696 <cos+0x2e>
 80056d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056dc:	ed9d 0b00 	vldr	d0, [sp]
 80056e0:	f000 fa72 	bl	8005bc8 <__kernel_cos>
 80056e4:	e7f1      	b.n	80056ca <cos+0x62>
 80056e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056ea:	ed9d 0b00 	vldr	d0, [sp]
 80056ee:	2001      	movs	r0, #1
 80056f0:	f000 fe72 	bl	80063d8 <__kernel_sin>
 80056f4:	e7c4      	b.n	8005680 <cos+0x18>
 80056f6:	bf00      	nop
	...
 8005700:	3fe921fb 	.word	0x3fe921fb
 8005704:	7fefffff 	.word	0x7fefffff

08005708 <sin>:
 8005708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800570a:	ec53 2b10 	vmov	r2, r3, d0
 800570e:	4826      	ldr	r0, [pc, #152]	; (80057a8 <sin+0xa0>)
 8005710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005714:	4281      	cmp	r1, r0
 8005716:	dc07      	bgt.n	8005728 <sin+0x20>
 8005718:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80057a0 <sin+0x98>
 800571c:	2000      	movs	r0, #0
 800571e:	f000 fe5b 	bl	80063d8 <__kernel_sin>
 8005722:	ec51 0b10 	vmov	r0, r1, d0
 8005726:	e007      	b.n	8005738 <sin+0x30>
 8005728:	4820      	ldr	r0, [pc, #128]	; (80057ac <sin+0xa4>)
 800572a:	4281      	cmp	r1, r0
 800572c:	dd09      	ble.n	8005742 <sin+0x3a>
 800572e:	ee10 0a10 	vmov	r0, s0
 8005732:	4619      	mov	r1, r3
 8005734:	f7fa fda8 	bl	8000288 <__aeabi_dsub>
 8005738:	ec41 0b10 	vmov	d0, r0, r1
 800573c:	b005      	add	sp, #20
 800573e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005742:	4668      	mov	r0, sp
 8005744:	f000 f834 	bl	80057b0 <__ieee754_rem_pio2>
 8005748:	f000 0003 	and.w	r0, r0, #3
 800574c:	2801      	cmp	r0, #1
 800574e:	d008      	beq.n	8005762 <sin+0x5a>
 8005750:	2802      	cmp	r0, #2
 8005752:	d00d      	beq.n	8005770 <sin+0x68>
 8005754:	b9d0      	cbnz	r0, 800578c <sin+0x84>
 8005756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800575a:	ed9d 0b00 	vldr	d0, [sp]
 800575e:	2001      	movs	r0, #1
 8005760:	e7dd      	b.n	800571e <sin+0x16>
 8005762:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005766:	ed9d 0b00 	vldr	d0, [sp]
 800576a:	f000 fa2d 	bl	8005bc8 <__kernel_cos>
 800576e:	e7d8      	b.n	8005722 <sin+0x1a>
 8005770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005774:	ed9d 0b00 	vldr	d0, [sp]
 8005778:	2001      	movs	r0, #1
 800577a:	f000 fe2d 	bl	80063d8 <__kernel_sin>
 800577e:	ec53 2b10 	vmov	r2, r3, d0
 8005782:	ee10 0a10 	vmov	r0, s0
 8005786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800578a:	e7d5      	b.n	8005738 <sin+0x30>
 800578c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005790:	ed9d 0b00 	vldr	d0, [sp]
 8005794:	f000 fa18 	bl	8005bc8 <__kernel_cos>
 8005798:	e7f1      	b.n	800577e <sin+0x76>
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
	...
 80057a8:	3fe921fb 	.word	0x3fe921fb
 80057ac:	7fefffff 	.word	0x7fefffff

080057b0 <__ieee754_rem_pio2>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	ed2d 8b02 	vpush	{d8}
 80057b8:	ec55 4b10 	vmov	r4, r5, d0
 80057bc:	4bca      	ldr	r3, [pc, #808]	; (8005ae8 <__ieee754_rem_pio2+0x338>)
 80057be:	b08b      	sub	sp, #44	; 0x2c
 80057c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80057c4:	4598      	cmp	r8, r3
 80057c6:	4682      	mov	sl, r0
 80057c8:	9502      	str	r5, [sp, #8]
 80057ca:	dc08      	bgt.n	80057de <__ieee754_rem_pio2+0x2e>
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	ed80 0b00 	vstr	d0, [r0]
 80057d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80057d8:	f04f 0b00 	mov.w	fp, #0
 80057dc:	e028      	b.n	8005830 <__ieee754_rem_pio2+0x80>
 80057de:	4bc3      	ldr	r3, [pc, #780]	; (8005aec <__ieee754_rem_pio2+0x33c>)
 80057e0:	4598      	cmp	r8, r3
 80057e2:	dc78      	bgt.n	80058d6 <__ieee754_rem_pio2+0x126>
 80057e4:	9b02      	ldr	r3, [sp, #8]
 80057e6:	4ec2      	ldr	r6, [pc, #776]	; (8005af0 <__ieee754_rem_pio2+0x340>)
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	ee10 0a10 	vmov	r0, s0
 80057ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x300>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	4629      	mov	r1, r5
 80057f6:	dd39      	ble.n	800586c <__ieee754_rem_pio2+0xbc>
 80057f8:	f7fa fd46 	bl	8000288 <__aeabi_dsub>
 80057fc:	45b0      	cmp	r8, r6
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	d01b      	beq.n	800583c <__ieee754_rem_pio2+0x8c>
 8005804:	a3ac      	add	r3, pc, #688	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x308>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f7fa fd3d 	bl	8000288 <__aeabi_dsub>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	e9ca 2300 	strd	r2, r3, [sl]
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fa fd35 	bl	8000288 <__aeabi_dsub>
 800581e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x308>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f7fa fd30 	bl	8000288 <__aeabi_dsub>
 8005828:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800582c:	f04f 0b01 	mov.w	fp, #1
 8005830:	4658      	mov	r0, fp
 8005832:	b00b      	add	sp, #44	; 0x2c
 8005834:	ecbd 8b02 	vpop	{d8}
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x310>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fd21 	bl	8000288 <__aeabi_dsub>
 8005846:	a3a0      	add	r3, pc, #640	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x318>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	f7fa fd1a 	bl	8000288 <__aeabi_dsub>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	e9ca 2300 	strd	r2, r3, [sl]
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fa fd12 	bl	8000288 <__aeabi_dsub>
 8005864:	a398      	add	r3, pc, #608	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x318>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	e7db      	b.n	8005824 <__ieee754_rem_pio2+0x74>
 800586c:	f7fa fd0e 	bl	800028c <__adddf3>
 8005870:	45b0      	cmp	r8, r6
 8005872:	4604      	mov	r4, r0
 8005874:	460d      	mov	r5, r1
 8005876:	d016      	beq.n	80058a6 <__ieee754_rem_pio2+0xf6>
 8005878:	a38f      	add	r3, pc, #572	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x308>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fd05 	bl	800028c <__adddf3>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	e9ca 2300 	strd	r2, r3, [sl]
 800588a:	4620      	mov	r0, r4
 800588c:	4629      	mov	r1, r5
 800588e:	f7fa fcfb 	bl	8000288 <__aeabi_dsub>
 8005892:	a389      	add	r3, pc, #548	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x308>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fcf8 	bl	800028c <__adddf3>
 800589c:	f04f 3bff 	mov.w	fp, #4294967295
 80058a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058a4:	e7c4      	b.n	8005830 <__ieee754_rem_pio2+0x80>
 80058a6:	a386      	add	r3, pc, #536	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x310>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fcee 	bl	800028c <__adddf3>
 80058b0:	a385      	add	r3, pc, #532	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x318>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
 80058ba:	f7fa fce7 	bl	800028c <__adddf3>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9ca 2300 	strd	r2, r3, [sl]
 80058c6:	4620      	mov	r0, r4
 80058c8:	4629      	mov	r1, r5
 80058ca:	f7fa fcdd 	bl	8000288 <__aeabi_dsub>
 80058ce:	a37e      	add	r3, pc, #504	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x318>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	e7e0      	b.n	8005898 <__ieee754_rem_pio2+0xe8>
 80058d6:	4b87      	ldr	r3, [pc, #540]	; (8005af4 <__ieee754_rem_pio2+0x344>)
 80058d8:	4598      	cmp	r8, r3
 80058da:	f300 80d9 	bgt.w	8005a90 <__ieee754_rem_pio2+0x2e0>
 80058de:	f000 fe39 	bl	8006554 <fabs>
 80058e2:	ec55 4b10 	vmov	r4, r5, d0
 80058e6:	ee10 0a10 	vmov	r0, s0
 80058ea:	a379      	add	r3, pc, #484	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x320>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fa fe81 	bl	80005f8 <__aeabi_dmul>
 80058f6:	4b80      	ldr	r3, [pc, #512]	; (8005af8 <__ieee754_rem_pio2+0x348>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f7fa fcc7 	bl	800028c <__adddf3>
 80058fe:	f7fb f915 	bl	8000b2c <__aeabi_d2iz>
 8005902:	4683      	mov	fp, r0
 8005904:	f7fa fe0e 	bl	8000524 <__aeabi_i2d>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	ec43 2b18 	vmov	d8, r2, r3
 8005910:	a367      	add	r3, pc, #412	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x300>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa fe6f 	bl	80005f8 <__aeabi_dmul>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fcb1 	bl	8000288 <__aeabi_dsub>
 8005926:	a364      	add	r3, pc, #400	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x308>)
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	ec51 0b18 	vmov	r0, r1, d8
 8005934:	f7fa fe60 	bl	80005f8 <__aeabi_dmul>
 8005938:	f1bb 0f1f 	cmp.w	fp, #31
 800593c:	4604      	mov	r4, r0
 800593e:	460d      	mov	r5, r1
 8005940:	dc0d      	bgt.n	800595e <__ieee754_rem_pio2+0x1ae>
 8005942:	4b6e      	ldr	r3, [pc, #440]	; (8005afc <__ieee754_rem_pio2+0x34c>)
 8005944:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	4543      	cmp	r3, r8
 800594e:	d006      	beq.n	800595e <__ieee754_rem_pio2+0x1ae>
 8005950:	4622      	mov	r2, r4
 8005952:	462b      	mov	r3, r5
 8005954:	4630      	mov	r0, r6
 8005956:	4639      	mov	r1, r7
 8005958:	f7fa fc96 	bl	8000288 <__aeabi_dsub>
 800595c:	e00f      	b.n	800597e <__ieee754_rem_pio2+0x1ce>
 800595e:	462b      	mov	r3, r5
 8005960:	4622      	mov	r2, r4
 8005962:	4630      	mov	r0, r6
 8005964:	4639      	mov	r1, r7
 8005966:	f7fa fc8f 	bl	8000288 <__aeabi_dsub>
 800596a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005974:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005978:	f1b8 0f10 	cmp.w	r8, #16
 800597c:	dc02      	bgt.n	8005984 <__ieee754_rem_pio2+0x1d4>
 800597e:	e9ca 0100 	strd	r0, r1, [sl]
 8005982:	e039      	b.n	80059f8 <__ieee754_rem_pio2+0x248>
 8005984:	a34e      	add	r3, pc, #312	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x310>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	ec51 0b18 	vmov	r0, r1, d8
 800598e:	f7fa fe33 	bl	80005f8 <__aeabi_dmul>
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	f7fa fc73 	bl	8000288 <__aeabi_dsub>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4680      	mov	r8, r0
 80059a8:	4689      	mov	r9, r1
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fa fc6b 	bl	8000288 <__aeabi_dsub>
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	f7fa fc67 	bl	8000288 <__aeabi_dsub>
 80059ba:	a343      	add	r3, pc, #268	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x318>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	4604      	mov	r4, r0
 80059c2:	460d      	mov	r5, r1
 80059c4:	ec51 0b18 	vmov	r0, r1, d8
 80059c8:	f7fa fe16 	bl	80005f8 <__aeabi_dmul>
 80059cc:	4622      	mov	r2, r4
 80059ce:	462b      	mov	r3, r5
 80059d0:	f7fa fc5a 	bl	8000288 <__aeabi_dsub>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	4640      	mov	r0, r8
 80059de:	4649      	mov	r1, r9
 80059e0:	f7fa fc52 	bl	8000288 <__aeabi_dsub>
 80059e4:	9a03      	ldr	r2, [sp, #12]
 80059e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b31      	cmp	r3, #49	; 0x31
 80059ee:	dc24      	bgt.n	8005a3a <__ieee754_rem_pio2+0x28a>
 80059f0:	e9ca 0100 	strd	r0, r1, [sl]
 80059f4:	4646      	mov	r6, r8
 80059f6:	464f      	mov	r7, r9
 80059f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80059fc:	4630      	mov	r0, r6
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	4639      	mov	r1, r7
 8005a04:	f7fa fc40 	bl	8000288 <__aeabi_dsub>
 8005a08:	462b      	mov	r3, r5
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	f7fa fc3c 	bl	8000288 <__aeabi_dsub>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a18:	f6bf af0a 	bge.w	8005830 <__ieee754_rem_pio2+0x80>
 8005a1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005a20:	f8ca 3004 	str.w	r3, [sl, #4]
 8005a24:	f8ca 8000 	str.w	r8, [sl]
 8005a28:	f8ca 0008 	str.w	r0, [sl, #8]
 8005a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a30:	f8ca 300c 	str.w	r3, [sl, #12]
 8005a34:	f1cb 0b00 	rsb	fp, fp, #0
 8005a38:	e6fa      	b.n	8005830 <__ieee754_rem_pio2+0x80>
 8005a3a:	a327      	add	r3, pc, #156	; (adr r3, 8005ad8 <__ieee754_rem_pio2+0x328>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	ec51 0b18 	vmov	r0, r1, d8
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4640      	mov	r0, r8
 8005a52:	4649      	mov	r1, r9
 8005a54:	f7fa fc18 	bl	8000288 <__aeabi_dsub>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4640      	mov	r0, r8
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fa fc10 	bl	8000288 <__aeabi_dsub>
 8005a68:	4622      	mov	r2, r4
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	f7fa fc0c 	bl	8000288 <__aeabi_dsub>
 8005a70:	a31b      	add	r3, pc, #108	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x330>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	4604      	mov	r4, r0
 8005a78:	460d      	mov	r5, r1
 8005a7a:	ec51 0b18 	vmov	r0, r1, d8
 8005a7e:	f7fa fdbb 	bl	80005f8 <__aeabi_dmul>
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f7fa fbff 	bl	8000288 <__aeabi_dsub>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	e75f      	b.n	8005950 <__ieee754_rem_pio2+0x1a0>
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <__ieee754_rem_pio2+0x350>)
 8005a92:	4598      	cmp	r8, r3
 8005a94:	dd36      	ble.n	8005b04 <__ieee754_rem_pio2+0x354>
 8005a96:	ee10 2a10 	vmov	r2, s0
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fbf2 	bl	8000288 <__aeabi_dsub>
 8005aa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005aa8:	e9ca 0100 	strd	r0, r1, [sl]
 8005aac:	e694      	b.n	80057d8 <__ieee754_rem_pio2+0x28>
 8005aae:	bf00      	nop
 8005ab0:	54400000 	.word	0x54400000
 8005ab4:	3ff921fb 	.word	0x3ff921fb
 8005ab8:	1a626331 	.word	0x1a626331
 8005abc:	3dd0b461 	.word	0x3dd0b461
 8005ac0:	1a600000 	.word	0x1a600000
 8005ac4:	3dd0b461 	.word	0x3dd0b461
 8005ac8:	2e037073 	.word	0x2e037073
 8005acc:	3ba3198a 	.word	0x3ba3198a
 8005ad0:	6dc9c883 	.word	0x6dc9c883
 8005ad4:	3fe45f30 	.word	0x3fe45f30
 8005ad8:	2e000000 	.word	0x2e000000
 8005adc:	3ba3198a 	.word	0x3ba3198a
 8005ae0:	252049c1 	.word	0x252049c1
 8005ae4:	397b839a 	.word	0x397b839a
 8005ae8:	3fe921fb 	.word	0x3fe921fb
 8005aec:	4002d97b 	.word	0x4002d97b
 8005af0:	3ff921fb 	.word	0x3ff921fb
 8005af4:	413921fb 	.word	0x413921fb
 8005af8:	3fe00000 	.word	0x3fe00000
 8005afc:	08007378 	.word	0x08007378
 8005b00:	7fefffff 	.word	0x7fefffff
 8005b04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005b08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005b0c:	ee10 0a10 	vmov	r0, s0
 8005b10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005b14:	ee10 6a10 	vmov	r6, s0
 8005b18:	460f      	mov	r7, r1
 8005b1a:	f7fb f807 	bl	8000b2c <__aeabi_d2iz>
 8005b1e:	f7fa fd01 	bl	8000524 <__aeabi_i2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b2e:	f7fa fbab 	bl	8000288 <__aeabi_dsub>
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <__ieee754_rem_pio2+0x40c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	f7fa fd5f 	bl	80005f8 <__aeabi_dmul>
 8005b3a:	460f      	mov	r7, r1
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	f7fa fff5 	bl	8000b2c <__aeabi_d2iz>
 8005b42:	f7fa fcef 	bl	8000524 <__aeabi_i2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b52:	f7fa fb99 	bl	8000288 <__aeabi_dsub>
 8005b56:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <__ieee754_rem_pio2+0x40c>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b62:	ad04      	add	r5, sp, #16
 8005b64:	f04f 0803 	mov.w	r8, #3
 8005b68:	46a9      	mov	r9, r5
 8005b6a:	2600      	movs	r6, #0
 8005b6c:	2700      	movs	r7, #0
 8005b6e:	4632      	mov	r2, r6
 8005b70:	463b      	mov	r3, r7
 8005b72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005b76:	46c3      	mov	fp, r8
 8005b78:	3d08      	subs	r5, #8
 8005b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b7e:	f7fa ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d1f3      	bne.n	8005b6e <__ieee754_rem_pio2+0x3be>
 8005b86:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <__ieee754_rem_pio2+0x410>)
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	4622      	mov	r2, r4
 8005b90:	465b      	mov	r3, fp
 8005b92:	4651      	mov	r1, sl
 8005b94:	4648      	mov	r0, r9
 8005b96:	f000 f8df 	bl	8005d58 <__kernel_rem_pio2>
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	4683      	mov	fp, r0
 8005ba0:	f6bf ae46 	bge.w	8005830 <__ieee754_rem_pio2+0x80>
 8005ba4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	f8ca 3004 	str.w	r3, [sl, #4]
 8005bb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005bb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bb8:	e73a      	b.n	8005a30 <__ieee754_rem_pio2+0x280>
 8005bba:	bf00      	nop
 8005bbc:	41700000 	.word	0x41700000
 8005bc0:	080073f8 	.word	0x080073f8
 8005bc4:	00000000 	.word	0x00000000

08005bc8 <__kernel_cos>:
 8005bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ec57 6b10 	vmov	r6, r7, d0
 8005bd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005bd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005bd8:	ed8d 1b00 	vstr	d1, [sp]
 8005bdc:	da07      	bge.n	8005bee <__kernel_cos+0x26>
 8005bde:	ee10 0a10 	vmov	r0, s0
 8005be2:	4639      	mov	r1, r7
 8005be4:	f7fa ffa2 	bl	8000b2c <__aeabi_d2iz>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f000 8088 	beq.w	8005cfe <__kernel_cos+0x136>
 8005bee:	4632      	mov	r2, r6
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <__kernel_cos+0x178>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	460d      	mov	r5, r1
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	a340      	add	r3, pc, #256	; (adr r3, 8005d08 <__kernel_cos+0x140>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	4620      	mov	r0, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa fcf0 	bl	80005f8 <__aeabi_dmul>
 8005c18:	a33d      	add	r3, pc, #244	; (adr r3, 8005d10 <__kernel_cos+0x148>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fb35 	bl	800028c <__adddf3>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fce7 	bl	80005f8 <__aeabi_dmul>
 8005c2a:	a33b      	add	r3, pc, #236	; (adr r3, 8005d18 <__kernel_cos+0x150>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fb2a 	bl	8000288 <__aeabi_dsub>
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	f7fa fcde 	bl	80005f8 <__aeabi_dmul>
 8005c3c:	a338      	add	r3, pc, #224	; (adr r3, 8005d20 <__kernel_cos+0x158>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fb23 	bl	800028c <__adddf3>
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	a336      	add	r3, pc, #216	; (adr r3, 8005d28 <__kernel_cos+0x160>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fb18 	bl	8000288 <__aeabi_dsub>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	f7fa fccc 	bl	80005f8 <__aeabi_dmul>
 8005c60:	a333      	add	r3, pc, #204	; (adr r3, 8005d30 <__kernel_cos+0x168>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa fb11 	bl	800028c <__adddf3>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f7fa fcc3 	bl	80005f8 <__aeabi_dmul>
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f7fa fcbf 	bl	80005f8 <__aeabi_dmul>
 8005c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460d      	mov	r5, r1
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa fcb7 	bl	80005f8 <__aeabi_dmul>
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4620      	mov	r0, r4
 8005c92:	f7fa faf9 	bl	8000288 <__aeabi_dsub>
 8005c96:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <__kernel_cos+0x17c>)
 8005c98:	4598      	cmp	r8, r3
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	dc10      	bgt.n	8005cc2 <__kernel_cos+0xfa>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f7fa faee 	bl	8000288 <__aeabi_dsub>
 8005cac:	460b      	mov	r3, r1
 8005cae:	4926      	ldr	r1, [pc, #152]	; (8005d48 <__kernel_cos+0x180>)
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f7fa fae8 	bl	8000288 <__aeabi_dsub>
 8005cb8:	ec41 0b10 	vmov	d0, r0, r1
 8005cbc:	b003      	add	sp, #12
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <__kernel_cos+0x184>)
 8005cc4:	4920      	ldr	r1, [pc, #128]	; (8005d48 <__kernel_cos+0x180>)
 8005cc6:	4598      	cmp	r8, r3
 8005cc8:	bfcc      	ite	gt
 8005cca:	4d21      	ldrgt	r5, [pc, #132]	; (8005d50 <__kernel_cos+0x188>)
 8005ccc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005cd0:	2400      	movs	r4, #0
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	f7fa fad6 	bl	8000288 <__aeabi_dsub>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	4680      	mov	r8, r0
 8005ce0:	4689      	mov	r9, r1
 8005ce2:	462b      	mov	r3, r5
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	4659      	mov	r1, fp
 8005ce8:	f7fa face 	bl	8000288 <__aeabi_dsub>
 8005cec:	4632      	mov	r2, r6
 8005cee:	463b      	mov	r3, r7
 8005cf0:	f7fa faca 	bl	8000288 <__aeabi_dsub>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	e7da      	b.n	8005cb4 <__kernel_cos+0xec>
 8005cfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005d38 <__kernel_cos+0x170>
 8005d02:	e7db      	b.n	8005cbc <__kernel_cos+0xf4>
 8005d04:	f3af 8000 	nop.w
 8005d08:	be8838d4 	.word	0xbe8838d4
 8005d0c:	bda8fae9 	.word	0xbda8fae9
 8005d10:	bdb4b1c4 	.word	0xbdb4b1c4
 8005d14:	3e21ee9e 	.word	0x3e21ee9e
 8005d18:	809c52ad 	.word	0x809c52ad
 8005d1c:	3e927e4f 	.word	0x3e927e4f
 8005d20:	19cb1590 	.word	0x19cb1590
 8005d24:	3efa01a0 	.word	0x3efa01a0
 8005d28:	16c15177 	.word	0x16c15177
 8005d2c:	3f56c16c 	.word	0x3f56c16c
 8005d30:	5555554c 	.word	0x5555554c
 8005d34:	3fa55555 	.word	0x3fa55555
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	3ff00000 	.word	0x3ff00000
 8005d40:	3fe00000 	.word	0x3fe00000
 8005d44:	3fd33332 	.word	0x3fd33332
 8005d48:	3ff00000 	.word	0x3ff00000
 8005d4c:	3fe90000 	.word	0x3fe90000
 8005d50:	3fd20000 	.word	0x3fd20000
 8005d54:	00000000 	.word	0x00000000

08005d58 <__kernel_rem_pio2>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ed2d 8b02 	vpush	{d8}
 8005d60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d64:	f112 0f14 	cmn.w	r2, #20
 8005d68:	9308      	str	r3, [sp, #32]
 8005d6a:	9101      	str	r1, [sp, #4]
 8005d6c:	4bc6      	ldr	r3, [pc, #792]	; (8006088 <__kernel_rem_pio2+0x330>)
 8005d6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005d70:	9009      	str	r0, [sp, #36]	; 0x24
 8005d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9b08      	ldr	r3, [sp, #32]
 8005d7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d7e:	bfa8      	it	ge
 8005d80:	1ed4      	subge	r4, r2, #3
 8005d82:	9306      	str	r3, [sp, #24]
 8005d84:	bfb2      	itee	lt
 8005d86:	2400      	movlt	r4, #0
 8005d88:	2318      	movge	r3, #24
 8005d8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d8e:	f06f 0317 	mvn.w	r3, #23
 8005d92:	fb04 3303 	mla	r3, r4, r3, r3
 8005d96:	eb03 0a02 	add.w	sl, r3, r2
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	9a06      	ldr	r2, [sp, #24]
 8005d9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006078 <__kernel_rem_pio2+0x320>
 8005da2:	eb03 0802 	add.w	r8, r3, r2
 8005da6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005da8:	1aa7      	subs	r7, r4, r2
 8005daa:	ae20      	add	r6, sp, #128	; 0x80
 8005dac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005db0:	2500      	movs	r5, #0
 8005db2:	4545      	cmp	r5, r8
 8005db4:	dd18      	ble.n	8005de8 <__kernel_rem_pio2+0x90>
 8005db6:	9b08      	ldr	r3, [sp, #32]
 8005db8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005dbc:	aa20      	add	r2, sp, #128	; 0x80
 8005dbe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006078 <__kernel_rem_pio2+0x320>
 8005dc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005dc6:	f1c3 0301 	rsb	r3, r3, #1
 8005dca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	9b07      	ldr	r3, [sp, #28]
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	4443      	add	r3, r8
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	db2f      	blt.n	8005e3a <__kernel_rem_pio2+0xe2>
 8005dda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005dde:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005de2:	462f      	mov	r7, r5
 8005de4:	2600      	movs	r6, #0
 8005de6:	e01b      	b.n	8005e20 <__kernel_rem_pio2+0xc8>
 8005de8:	42ef      	cmn	r7, r5
 8005dea:	d407      	bmi.n	8005dfc <__kernel_rem_pio2+0xa4>
 8005dec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005df0:	f7fa fb98 	bl	8000524 <__aeabi_i2d>
 8005df4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7da      	b.n	8005db2 <__kernel_rem_pio2+0x5a>
 8005dfc:	ec51 0b18 	vmov	r0, r1, d8
 8005e00:	e7f8      	b.n	8005df4 <__kernel_rem_pio2+0x9c>
 8005e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e06:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005e0a:	f7fa fbf5 	bl	80005f8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	f7fa fa39 	bl	800028c <__adddf3>
 8005e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e1e:	3601      	adds	r6, #1
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	429e      	cmp	r6, r3
 8005e24:	f1a7 0708 	sub.w	r7, r7, #8
 8005e28:	ddeb      	ble.n	8005e02 <__kernel_rem_pio2+0xaa>
 8005e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e2e:	3508      	adds	r5, #8
 8005e30:	ecab 7b02 	vstmia	fp!, {d7}
 8005e34:	f108 0801 	add.w	r8, r8, #1
 8005e38:	e7ca      	b.n	8005dd0 <__kernel_rem_pio2+0x78>
 8005e3a:	9b04      	ldr	r3, [sp, #16]
 8005e3c:	aa0c      	add	r2, sp, #48	; 0x30
 8005e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e44:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005e46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e4a:	9c04      	ldr	r4, [sp, #16]
 8005e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4e:	ab98      	add	r3, sp, #608	; 0x260
 8005e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e54:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005e58:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005e5c:	f8cd b008 	str.w	fp, [sp, #8]
 8005e60:	4625      	mov	r5, r4
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	dc78      	bgt.n	8005f58 <__kernel_rem_pio2+0x200>
 8005e66:	ec47 6b10 	vmov	d0, r6, r7
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	f000 fbfc 	bl	8006668 <scalbn>
 8005e70:	ec57 6b10 	vmov	r6, r7, d0
 8005e74:	2200      	movs	r2, #0
 8005e76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e7a:	ee10 0a10 	vmov	r0, s0
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	ec41 0b10 	vmov	d0, r0, r1
 8005e88:	f000 fb6e 	bl	8006568 <floor>
 8005e8c:	4b7f      	ldr	r3, [pc, #508]	; (800608c <__kernel_rem_pio2+0x334>)
 8005e8e:	ec51 0b10 	vmov	r0, r1, d0
 8005e92:	2200      	movs	r2, #0
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa f9f2 	bl	8000288 <__aeabi_dsub>
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	f7fa fe40 	bl	8000b2c <__aeabi_d2iz>
 8005eac:	9007      	str	r0, [sp, #28]
 8005eae:	f7fa fb39 	bl	8000524 <__aeabi_i2d>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	4639      	mov	r1, r7
 8005eba:	f7fa f9e5 	bl	8000288 <__aeabi_dsub>
 8005ebe:	f1ba 0f00 	cmp.w	sl, #0
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	dd70      	ble.n	8005faa <__kernel_rem_pio2+0x252>
 8005ec8:	1e62      	subs	r2, r4, #1
 8005eca:	ab0c      	add	r3, sp, #48	; 0x30
 8005ecc:	9d07      	ldr	r5, [sp, #28]
 8005ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ed2:	f1ca 0118 	rsb	r1, sl, #24
 8005ed6:	fa40 f301 	asr.w	r3, r0, r1
 8005eda:	441d      	add	r5, r3
 8005edc:	408b      	lsls	r3, r1
 8005ede:	1ac0      	subs	r0, r0, r3
 8005ee0:	ab0c      	add	r3, sp, #48	; 0x30
 8005ee2:	9507      	str	r5, [sp, #28]
 8005ee4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005ee8:	f1ca 0317 	rsb	r3, sl, #23
 8005eec:	fa40 f303 	asr.w	r3, r0, r3
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	9b02      	ldr	r3, [sp, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd66      	ble.n	8005fc6 <__kernel_rem_pio2+0x26e>
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	2200      	movs	r2, #0
 8005efc:	3301      	adds	r3, #1
 8005efe:	9307      	str	r3, [sp, #28]
 8005f00:	4615      	mov	r5, r2
 8005f02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005f06:	4294      	cmp	r4, r2
 8005f08:	f300 8099 	bgt.w	800603e <__kernel_rem_pio2+0x2e6>
 8005f0c:	f1ba 0f00 	cmp.w	sl, #0
 8005f10:	dd07      	ble.n	8005f22 <__kernel_rem_pio2+0x1ca>
 8005f12:	f1ba 0f01 	cmp.w	sl, #1
 8005f16:	f000 80a5 	beq.w	8006064 <__kernel_rem_pio2+0x30c>
 8005f1a:	f1ba 0f02 	cmp.w	sl, #2
 8005f1e:	f000 80c1 	beq.w	80060a4 <__kernel_rem_pio2+0x34c>
 8005f22:	9b02      	ldr	r3, [sp, #8]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d14e      	bne.n	8005fc6 <__kernel_rem_pio2+0x26e>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	4958      	ldr	r1, [pc, #352]	; (8006090 <__kernel_rem_pio2+0x338>)
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f7fa f9aa 	bl	8000288 <__aeabi_dsub>
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	d044      	beq.n	8005fc6 <__kernel_rem_pio2+0x26e>
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006080 <__kernel_rem_pio2+0x328>
 8005f42:	f000 fb91 	bl	8006668 <scalbn>
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	ec53 2b10 	vmov	r2, r3, d0
 8005f4e:	f7fa f99b 	bl	8000288 <__aeabi_dsub>
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	e036      	b.n	8005fc6 <__kernel_rem_pio2+0x26e>
 8005f58:	4b4e      	ldr	r3, [pc, #312]	; (8006094 <__kernel_rem_pio2+0x33c>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4639      	mov	r1, r7
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	f7fa fde2 	bl	8000b2c <__aeabi_d2iz>
 8005f68:	f7fa fadc 	bl	8000524 <__aeabi_i2d>
 8005f6c:	4b4a      	ldr	r3, [pc, #296]	; (8006098 <__kernel_rem_pio2+0x340>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4680      	mov	r8, r0
 8005f72:	4689      	mov	r9, r1
 8005f74:	f7fa fb40 	bl	80005f8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa f982 	bl	8000288 <__aeabi_dsub>
 8005f84:	f7fa fdd2 	bl	8000b2c <__aeabi_d2iz>
 8005f88:	9b02      	ldr	r3, [sp, #8]
 8005f8a:	f843 0b04 	str.w	r0, [r3], #4
 8005f8e:	3d01      	subs	r5, #1
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f94:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa f974 	bl	800028c <__adddf3>
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	e75b      	b.n	8005e62 <__kernel_rem_pio2+0x10a>
 8005faa:	d105      	bne.n	8005fb8 <__kernel_rem_pio2+0x260>
 8005fac:	1e63      	subs	r3, r4, #1
 8005fae:	aa0c      	add	r2, sp, #48	; 0x30
 8005fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005fb4:	15c3      	asrs	r3, r0, #23
 8005fb6:	e79b      	b.n	8005ef0 <__kernel_rem_pio2+0x198>
 8005fb8:	4b38      	ldr	r3, [pc, #224]	; (800609c <__kernel_rem_pio2+0x344>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fa fda2 	bl	8000b04 <__aeabi_dcmpge>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d139      	bne.n	8006038 <__kernel_rem_pio2+0x2e0>
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	4639      	mov	r1, r7
 8005fce:	f7fa fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f000 80b4 	beq.w	8006140 <__kernel_rem_pio2+0x3e8>
 8005fd8:	f104 3bff 	add.w	fp, r4, #4294967295
 8005fdc:	465b      	mov	r3, fp
 8005fde:	2200      	movs	r2, #0
 8005fe0:	9904      	ldr	r1, [sp, #16]
 8005fe2:	428b      	cmp	r3, r1
 8005fe4:	da65      	bge.n	80060b2 <__kernel_rem_pio2+0x35a>
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	d07b      	beq.n	80060e2 <__kernel_rem_pio2+0x38a>
 8005fea:	ab0c      	add	r3, sp, #48	; 0x30
 8005fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8005ff0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a0 	beq.w	800613a <__kernel_rem_pio2+0x3e2>
 8005ffa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006080 <__kernel_rem_pio2+0x328>
 8005ffe:	4650      	mov	r0, sl
 8006000:	f000 fb32 	bl	8006668 <scalbn>
 8006004:	4f23      	ldr	r7, [pc, #140]	; (8006094 <__kernel_rem_pio2+0x33c>)
 8006006:	ec55 4b10 	vmov	r4, r5, d0
 800600a:	46d8      	mov	r8, fp
 800600c:	2600      	movs	r6, #0
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	f280 80cf 	bge.w	80061b4 <__kernel_rem_pio2+0x45c>
 8006016:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006078 <__kernel_rem_pio2+0x320>
 800601a:	465f      	mov	r7, fp
 800601c:	f04f 0800 	mov.w	r8, #0
 8006020:	2f00      	cmp	r7, #0
 8006022:	f2c0 80fd 	blt.w	8006220 <__kernel_rem_pio2+0x4c8>
 8006026:	ab70      	add	r3, sp, #448	; 0x1c0
 8006028:	f8df a074 	ldr.w	sl, [pc, #116]	; 80060a0 <__kernel_rem_pio2+0x348>
 800602c:	ec55 4b18 	vmov	r4, r5, d8
 8006030:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006034:	2600      	movs	r6, #0
 8006036:	e0e5      	b.n	8006204 <__kernel_rem_pio2+0x4ac>
 8006038:	2302      	movs	r3, #2
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	e75c      	b.n	8005ef8 <__kernel_rem_pio2+0x1a0>
 800603e:	f8db 3000 	ldr.w	r3, [fp]
 8006042:	b955      	cbnz	r5, 800605a <__kernel_rem_pio2+0x302>
 8006044:	b123      	cbz	r3, 8006050 <__kernel_rem_pio2+0x2f8>
 8006046:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800604a:	f8cb 3000 	str.w	r3, [fp]
 800604e:	2301      	movs	r3, #1
 8006050:	3201      	adds	r2, #1
 8006052:	f10b 0b04 	add.w	fp, fp, #4
 8006056:	461d      	mov	r5, r3
 8006058:	e755      	b.n	8005f06 <__kernel_rem_pio2+0x1ae>
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	f8cb 3000 	str.w	r3, [fp]
 8006060:	462b      	mov	r3, r5
 8006062:	e7f5      	b.n	8006050 <__kernel_rem_pio2+0x2f8>
 8006064:	1e62      	subs	r2, r4, #1
 8006066:	ab0c      	add	r3, sp, #48	; 0x30
 8006068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006070:	a90c      	add	r1, sp, #48	; 0x30
 8006072:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006076:	e754      	b.n	8005f22 <__kernel_rem_pio2+0x1ca>
	...
 8006084:	3ff00000 	.word	0x3ff00000
 8006088:	08007540 	.word	0x08007540
 800608c:	40200000 	.word	0x40200000
 8006090:	3ff00000 	.word	0x3ff00000
 8006094:	3e700000 	.word	0x3e700000
 8006098:	41700000 	.word	0x41700000
 800609c:	3fe00000 	.word	0x3fe00000
 80060a0:	08007500 	.word	0x08007500
 80060a4:	1e62      	subs	r2, r4, #1
 80060a6:	ab0c      	add	r3, sp, #48	; 0x30
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80060b0:	e7de      	b.n	8006070 <__kernel_rem_pio2+0x318>
 80060b2:	a90c      	add	r1, sp, #48	; 0x30
 80060b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	430a      	orrs	r2, r1
 80060bc:	e790      	b.n	8005fe0 <__kernel_rem_pio2+0x288>
 80060be:	3301      	adds	r3, #1
 80060c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80060c4:	2900      	cmp	r1, #0
 80060c6:	d0fa      	beq.n	80060be <__kernel_rem_pio2+0x366>
 80060c8:	9a08      	ldr	r2, [sp, #32]
 80060ca:	18e3      	adds	r3, r4, r3
 80060cc:	18a6      	adds	r6, r4, r2
 80060ce:	aa20      	add	r2, sp, #128	; 0x80
 80060d0:	1c65      	adds	r5, r4, #1
 80060d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	9b02      	ldr	r3, [sp, #8]
 80060da:	42ab      	cmp	r3, r5
 80060dc:	da04      	bge.n	80060e8 <__kernel_rem_pio2+0x390>
 80060de:	461c      	mov	r4, r3
 80060e0:	e6b5      	b.n	8005e4e <__kernel_rem_pio2+0xf6>
 80060e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060e4:	2301      	movs	r3, #1
 80060e6:	e7eb      	b.n	80060c0 <__kernel_rem_pio2+0x368>
 80060e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ee:	f7fa fa19 	bl	8000524 <__aeabi_i2d>
 80060f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	46b3      	mov	fp, r6
 80060fa:	461c      	mov	r4, r3
 80060fc:	2700      	movs	r7, #0
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	429f      	cmp	r7, r3
 800610a:	dd06      	ble.n	800611a <__kernel_rem_pio2+0x3c2>
 800610c:	ab70      	add	r3, sp, #448	; 0x1c0
 800610e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006112:	e9c3 8900 	strd	r8, r9, [r3]
 8006116:	3501      	adds	r5, #1
 8006118:	e7de      	b.n	80060d8 <__kernel_rem_pio2+0x380>
 800611a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800611e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006122:	f7fa fa69 	bl	80005f8 <__aeabi_dmul>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f7fa f8ad 	bl	800028c <__adddf3>
 8006132:	3701      	adds	r7, #1
 8006134:	4680      	mov	r8, r0
 8006136:	4689      	mov	r9, r1
 8006138:	e7e5      	b.n	8006106 <__kernel_rem_pio2+0x3ae>
 800613a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800613e:	e754      	b.n	8005fea <__kernel_rem_pio2+0x292>
 8006140:	ec47 6b10 	vmov	d0, r6, r7
 8006144:	f1ca 0000 	rsb	r0, sl, #0
 8006148:	f000 fa8e 	bl	8006668 <scalbn>
 800614c:	ec57 6b10 	vmov	r6, r7, d0
 8006150:	4b9f      	ldr	r3, [pc, #636]	; (80063d0 <__kernel_rem_pio2+0x678>)
 8006152:	ee10 0a10 	vmov	r0, s0
 8006156:	2200      	movs	r2, #0
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa fcd3 	bl	8000b04 <__aeabi_dcmpge>
 800615e:	b300      	cbz	r0, 80061a2 <__kernel_rem_pio2+0x44a>
 8006160:	4b9c      	ldr	r3, [pc, #624]	; (80063d4 <__kernel_rem_pio2+0x67c>)
 8006162:	2200      	movs	r2, #0
 8006164:	4630      	mov	r0, r6
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa fa46 	bl	80005f8 <__aeabi_dmul>
 800616c:	f7fa fcde 	bl	8000b2c <__aeabi_d2iz>
 8006170:	4605      	mov	r5, r0
 8006172:	f7fa f9d7 	bl	8000524 <__aeabi_i2d>
 8006176:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <__kernel_rem_pio2+0x678>)
 8006178:	2200      	movs	r2, #0
 800617a:	f7fa fa3d 	bl	80005f8 <__aeabi_dmul>
 800617e:	460b      	mov	r3, r1
 8006180:	4602      	mov	r2, r0
 8006182:	4639      	mov	r1, r7
 8006184:	4630      	mov	r0, r6
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	f7fa fccf 	bl	8000b2c <__aeabi_d2iz>
 800618e:	f104 0b01 	add.w	fp, r4, #1
 8006192:	ab0c      	add	r3, sp, #48	; 0x30
 8006194:	f10a 0a18 	add.w	sl, sl, #24
 8006198:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800619c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80061a0:	e72b      	b.n	8005ffa <__kernel_rem_pio2+0x2a2>
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa fcc1 	bl	8000b2c <__aeabi_d2iz>
 80061aa:	ab0c      	add	r3, sp, #48	; 0x30
 80061ac:	46a3      	mov	fp, r4
 80061ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80061b2:	e722      	b.n	8005ffa <__kernel_rem_pio2+0x2a2>
 80061b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80061b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80061ba:	ab0c      	add	r3, sp, #48	; 0x30
 80061bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80061c0:	f7fa f9b0 	bl	8000524 <__aeabi_i2d>
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	f7fa fa16 	bl	80005f8 <__aeabi_dmul>
 80061cc:	4632      	mov	r2, r6
 80061ce:	e9c9 0100 	strd	r0, r1, [r9]
 80061d2:	463b      	mov	r3, r7
 80061d4:	4620      	mov	r0, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
 80061e4:	e713      	b.n	800600e <__kernel_rem_pio2+0x2b6>
 80061e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80061ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80061ee:	f7fa fa03 	bl	80005f8 <__aeabi_dmul>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f847 	bl	800028c <__adddf3>
 80061fe:	3601      	adds	r6, #1
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	429e      	cmp	r6, r3
 8006208:	dc01      	bgt.n	800620e <__kernel_rem_pio2+0x4b6>
 800620a:	45b0      	cmp	r8, r6
 800620c:	daeb      	bge.n	80061e6 <__kernel_rem_pio2+0x48e>
 800620e:	ab48      	add	r3, sp, #288	; 0x120
 8006210:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006214:	e9c3 4500 	strd	r4, r5, [r3]
 8006218:	3f01      	subs	r7, #1
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	e6ff      	b.n	8006020 <__kernel_rem_pio2+0x2c8>
 8006220:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006222:	2b02      	cmp	r3, #2
 8006224:	dc0b      	bgt.n	800623e <__kernel_rem_pio2+0x4e6>
 8006226:	2b00      	cmp	r3, #0
 8006228:	dc6e      	bgt.n	8006308 <__kernel_rem_pio2+0x5b0>
 800622a:	d045      	beq.n	80062b8 <__kernel_rem_pio2+0x560>
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	f003 0007 	and.w	r0, r3, #7
 8006232:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006236:	ecbd 8b02 	vpop	{d8}
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006240:	2b03      	cmp	r3, #3
 8006242:	d1f3      	bne.n	800622c <__kernel_rem_pio2+0x4d4>
 8006244:	ab48      	add	r3, sp, #288	; 0x120
 8006246:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800624a:	46d0      	mov	r8, sl
 800624c:	46d9      	mov	r9, fp
 800624e:	f1b9 0f00 	cmp.w	r9, #0
 8006252:	f1a8 0808 	sub.w	r8, r8, #8
 8006256:	dc64      	bgt.n	8006322 <__kernel_rem_pio2+0x5ca>
 8006258:	465c      	mov	r4, fp
 800625a:	2c01      	cmp	r4, #1
 800625c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006260:	dc7e      	bgt.n	8006360 <__kernel_rem_pio2+0x608>
 8006262:	2000      	movs	r0, #0
 8006264:	2100      	movs	r1, #0
 8006266:	f1bb 0f01 	cmp.w	fp, #1
 800626a:	f300 8097 	bgt.w	800639c <__kernel_rem_pio2+0x644>
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006274:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8099 	bne.w	80063b0 <__kernel_rem_pio2+0x658>
 800627e:	9b01      	ldr	r3, [sp, #4]
 8006280:	e9c3 5600 	strd	r5, r6, [r3]
 8006284:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006288:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800628c:	e7ce      	b.n	800622c <__kernel_rem_pio2+0x4d4>
 800628e:	ab48      	add	r3, sp, #288	; 0x120
 8006290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7f9 fff8 	bl	800028c <__adddf3>
 800629c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062a0:	f1bb 0f00 	cmp.w	fp, #0
 80062a4:	daf3      	bge.n	800628e <__kernel_rem_pio2+0x536>
 80062a6:	9b02      	ldr	r3, [sp, #8]
 80062a8:	b113      	cbz	r3, 80062b0 <__kernel_rem_pio2+0x558>
 80062aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ae:	4619      	mov	r1, r3
 80062b0:	9b01      	ldr	r3, [sp, #4]
 80062b2:	e9c3 0100 	strd	r0, r1, [r3]
 80062b6:	e7b9      	b.n	800622c <__kernel_rem_pio2+0x4d4>
 80062b8:	2000      	movs	r0, #0
 80062ba:	2100      	movs	r1, #0
 80062bc:	e7f0      	b.n	80062a0 <__kernel_rem_pio2+0x548>
 80062be:	ab48      	add	r3, sp, #288	; 0x120
 80062c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ffe0 	bl	800028c <__adddf3>
 80062cc:	3c01      	subs	r4, #1
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	daf5      	bge.n	80062be <__kernel_rem_pio2+0x566>
 80062d2:	9b02      	ldr	r3, [sp, #8]
 80062d4:	b1e3      	cbz	r3, 8006310 <__kernel_rem_pio2+0x5b8>
 80062d6:	4602      	mov	r2, r0
 80062d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062dc:	9c01      	ldr	r4, [sp, #4]
 80062de:	e9c4 2300 	strd	r2, r3, [r4]
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80062ea:	f7f9 ffcd 	bl	8000288 <__aeabi_dsub>
 80062ee:	ad4a      	add	r5, sp, #296	; 0x128
 80062f0:	2401      	movs	r4, #1
 80062f2:	45a3      	cmp	fp, r4
 80062f4:	da0f      	bge.n	8006316 <__kernel_rem_pio2+0x5be>
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	b113      	cbz	r3, 8006300 <__kernel_rem_pio2+0x5a8>
 80062fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062fe:	4619      	mov	r1, r3
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006306:	e791      	b.n	800622c <__kernel_rem_pio2+0x4d4>
 8006308:	465c      	mov	r4, fp
 800630a:	2000      	movs	r0, #0
 800630c:	2100      	movs	r1, #0
 800630e:	e7de      	b.n	80062ce <__kernel_rem_pio2+0x576>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	e7e2      	b.n	80062dc <__kernel_rem_pio2+0x584>
 8006316:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800631a:	f7f9 ffb7 	bl	800028c <__adddf3>
 800631e:	3401      	adds	r4, #1
 8006320:	e7e7      	b.n	80062f2 <__kernel_rem_pio2+0x59a>
 8006322:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006326:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800632a:	4620      	mov	r0, r4
 800632c:	4632      	mov	r2, r6
 800632e:	463b      	mov	r3, r7
 8006330:	4629      	mov	r1, r5
 8006332:	f7f9 ffab 	bl	800028c <__adddf3>
 8006336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7f9 ffa1 	bl	8000288 <__aeabi_dsub>
 8006346:	4632      	mov	r2, r6
 8006348:	463b      	mov	r3, r7
 800634a:	f7f9 ff9f 	bl	800028c <__adddf3>
 800634e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006352:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006356:	ed88 7b00 	vstr	d7, [r8]
 800635a:	f109 39ff 	add.w	r9, r9, #4294967295
 800635e:	e776      	b.n	800624e <__kernel_rem_pio2+0x4f6>
 8006360:	e9da 8900 	ldrd	r8, r9, [sl]
 8006364:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006368:	4640      	mov	r0, r8
 800636a:	4632      	mov	r2, r6
 800636c:	463b      	mov	r3, r7
 800636e:	4649      	mov	r1, r9
 8006370:	f7f9 ff8c 	bl	800028c <__adddf3>
 8006374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7f9 ff82 	bl	8000288 <__aeabi_dsub>
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	f7f9 ff80 	bl	800028c <__adddf3>
 800638c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006390:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006394:	ed8a 7b00 	vstr	d7, [sl]
 8006398:	3c01      	subs	r4, #1
 800639a:	e75e      	b.n	800625a <__kernel_rem_pio2+0x502>
 800639c:	ab48      	add	r3, sp, #288	; 0x120
 800639e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff71 	bl	800028c <__adddf3>
 80063aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063ae:	e75a      	b.n	8006266 <__kernel_rem_pio2+0x50e>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	9a01      	ldr	r2, [sp, #4]
 80063b4:	601d      	str	r5, [r3, #0]
 80063b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80063ba:	605c      	str	r4, [r3, #4]
 80063bc:	609f      	str	r7, [r3, #8]
 80063be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80063c2:	60d3      	str	r3, [r2, #12]
 80063c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063c8:	6110      	str	r0, [r2, #16]
 80063ca:	6153      	str	r3, [r2, #20]
 80063cc:	e72e      	b.n	800622c <__kernel_rem_pio2+0x4d4>
 80063ce:	bf00      	nop
 80063d0:	41700000 	.word	0x41700000
 80063d4:	3e700000 	.word	0x3e700000

080063d8 <__kernel_sin>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b04 	vpush	{d8-d9}
 80063e0:	eeb0 8a41 	vmov.f32	s16, s2
 80063e4:	eef0 8a61 	vmov.f32	s17, s3
 80063e8:	ec55 4b10 	vmov	r4, r5, d0
 80063ec:	b083      	sub	sp, #12
 80063ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80063f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80063f6:	9001      	str	r0, [sp, #4]
 80063f8:	da06      	bge.n	8006408 <__kernel_sin+0x30>
 80063fa:	ee10 0a10 	vmov	r0, s0
 80063fe:	4629      	mov	r1, r5
 8006400:	f7fa fb94 	bl	8000b2c <__aeabi_d2iz>
 8006404:	2800      	cmp	r0, #0
 8006406:	d051      	beq.n	80064ac <__kernel_sin+0xd4>
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	4620      	mov	r0, r4
 800640e:	4629      	mov	r1, r5
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	4682      	mov	sl, r0
 8006416:	468b      	mov	fp, r1
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7fa f8ea 	bl	80005f8 <__aeabi_dmul>
 8006424:	a341      	add	r3, pc, #260	; (adr r3, 800652c <__kernel_sin+0x154>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	4680      	mov	r8, r0
 800642c:	4689      	mov	r9, r1
 800642e:	4650      	mov	r0, sl
 8006430:	4659      	mov	r1, fp
 8006432:	f7fa f8e1 	bl	80005f8 <__aeabi_dmul>
 8006436:	a33f      	add	r3, pc, #252	; (adr r3, 8006534 <__kernel_sin+0x15c>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	4652      	mov	r2, sl
 8006442:	465b      	mov	r3, fp
 8006444:	f7fa f8d8 	bl	80005f8 <__aeabi_dmul>
 8006448:	a33c      	add	r3, pc, #240	; (adr r3, 800653c <__kernel_sin+0x164>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7f9 ff1d 	bl	800028c <__adddf3>
 8006452:	4652      	mov	r2, sl
 8006454:	465b      	mov	r3, fp
 8006456:	f7fa f8cf 	bl	80005f8 <__aeabi_dmul>
 800645a:	a33a      	add	r3, pc, #232	; (adr r3, 8006544 <__kernel_sin+0x16c>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7f9 ff12 	bl	8000288 <__aeabi_dsub>
 8006464:	4652      	mov	r2, sl
 8006466:	465b      	mov	r3, fp
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	a337      	add	r3, pc, #220	; (adr r3, 800654c <__kernel_sin+0x174>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7f9 ff0b 	bl	800028c <__adddf3>
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	4606      	mov	r6, r0
 800647a:	460f      	mov	r7, r1
 800647c:	b9eb      	cbnz	r3, 80064ba <__kernel_sin+0xe2>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4650      	mov	r0, sl
 8006484:	4659      	mov	r1, fp
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	a325      	add	r3, pc, #148	; (adr r3, 8006520 <__kernel_sin+0x148>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7f9 fefa 	bl	8000288 <__aeabi_dsub>
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	f7fa f8ae 	bl	80005f8 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 fef2 	bl	800028c <__adddf3>
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	ec45 4b10 	vmov	d0, r4, r5
 80064b0:	b003      	add	sp, #12
 80064b2:	ecbd 8b04 	vpop	{d8-d9}
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <__kernel_sin+0x150>)
 80064bc:	ec51 0b18 	vmov	r0, r1, d8
 80064c0:	2200      	movs	r2, #0
 80064c2:	f7fa f899 	bl	80005f8 <__aeabi_dmul>
 80064c6:	4632      	mov	r2, r6
 80064c8:	ec41 0b19 	vmov	d9, r0, r1
 80064cc:	463b      	mov	r3, r7
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7fa f891 	bl	80005f8 <__aeabi_dmul>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	ec51 0b19 	vmov	r0, r1, d9
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	4652      	mov	r2, sl
 80064e4:	465b      	mov	r3, fp
 80064e6:	f7fa f887 	bl	80005f8 <__aeabi_dmul>
 80064ea:	ec53 2b18 	vmov	r2, r3, d8
 80064ee:	f7f9 fecb 	bl	8000288 <__aeabi_dsub>
 80064f2:	a30b      	add	r3, pc, #44	; (adr r3, 8006520 <__kernel_sin+0x148>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	4606      	mov	r6, r0
 80064fa:	460f      	mov	r7, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7fa f87a 	bl	80005f8 <__aeabi_dmul>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7f9 febe 	bl	800028c <__adddf3>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7f9 feb6 	bl	8000288 <__aeabi_dsub>
 800651c:	e7c4      	b.n	80064a8 <__kernel_sin+0xd0>
 800651e:	bf00      	nop
 8006520:	55555549 	.word	0x55555549
 8006524:	3fc55555 	.word	0x3fc55555
 8006528:	3fe00000 	.word	0x3fe00000
 800652c:	5acfd57c 	.word	0x5acfd57c
 8006530:	3de5d93a 	.word	0x3de5d93a
 8006534:	8a2b9ceb 	.word	0x8a2b9ceb
 8006538:	3e5ae5e6 	.word	0x3e5ae5e6
 800653c:	57b1fe7d 	.word	0x57b1fe7d
 8006540:	3ec71de3 	.word	0x3ec71de3
 8006544:	19c161d5 	.word	0x19c161d5
 8006548:	3f2a01a0 	.word	0x3f2a01a0
 800654c:	1110f8a6 	.word	0x1110f8a6
 8006550:	3f811111 	.word	0x3f811111

08006554 <fabs>:
 8006554:	ec51 0b10 	vmov	r0, r1, d0
 8006558:	ee10 2a10 	vmov	r2, s0
 800655c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006560:	ec43 2b10 	vmov	d0, r2, r3
 8006564:	4770      	bx	lr
	...

08006568 <floor>:
 8006568:	ec51 0b10 	vmov	r0, r1, d0
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006578:	2e13      	cmp	r6, #19
 800657a:	ee10 5a10 	vmov	r5, s0
 800657e:	ee10 8a10 	vmov	r8, s0
 8006582:	460c      	mov	r4, r1
 8006584:	dc32      	bgt.n	80065ec <floor+0x84>
 8006586:	2e00      	cmp	r6, #0
 8006588:	da14      	bge.n	80065b4 <floor+0x4c>
 800658a:	a333      	add	r3, pc, #204	; (adr r3, 8006658 <floor+0xf0>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7f9 fe7c 	bl	800028c <__adddf3>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7fa fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800659c:	b138      	cbz	r0, 80065ae <floor+0x46>
 800659e:	2c00      	cmp	r4, #0
 80065a0:	da57      	bge.n	8006652 <floor+0xea>
 80065a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80065a6:	431d      	orrs	r5, r3
 80065a8:	d001      	beq.n	80065ae <floor+0x46>
 80065aa:	4c2d      	ldr	r4, [pc, #180]	; (8006660 <floor+0xf8>)
 80065ac:	2500      	movs	r5, #0
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	e025      	b.n	8006600 <floor+0x98>
 80065b4:	4f2b      	ldr	r7, [pc, #172]	; (8006664 <floor+0xfc>)
 80065b6:	4137      	asrs	r7, r6
 80065b8:	ea01 0307 	and.w	r3, r1, r7
 80065bc:	4303      	orrs	r3, r0
 80065be:	d01f      	beq.n	8006600 <floor+0x98>
 80065c0:	a325      	add	r3, pc, #148	; (adr r3, 8006658 <floor+0xf0>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe61 	bl	800028c <__adddf3>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	f7fa faa3 	bl	8000b18 <__aeabi_dcmpgt>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d0eb      	beq.n	80065ae <floor+0x46>
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	bfbe      	ittt	lt
 80065da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065de:	fa43 f606 	asrlt.w	r6, r3, r6
 80065e2:	19a4      	addlt	r4, r4, r6
 80065e4:	ea24 0407 	bic.w	r4, r4, r7
 80065e8:	2500      	movs	r5, #0
 80065ea:	e7e0      	b.n	80065ae <floor+0x46>
 80065ec:	2e33      	cmp	r6, #51	; 0x33
 80065ee:	dd0b      	ble.n	8006608 <floor+0xa0>
 80065f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065f4:	d104      	bne.n	8006600 <floor+0x98>
 80065f6:	ee10 2a10 	vmov	r2, s0
 80065fa:	460b      	mov	r3, r1
 80065fc:	f7f9 fe46 	bl	800028c <__adddf3>
 8006600:	ec41 0b10 	vmov	d0, r0, r1
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006608:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	fa23 f707 	lsr.w	r7, r3, r7
 8006614:	4207      	tst	r7, r0
 8006616:	d0f3      	beq.n	8006600 <floor+0x98>
 8006618:	a30f      	add	r3, pc, #60	; (adr r3, 8006658 <floor+0xf0>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 fe35 	bl	800028c <__adddf3>
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	f7fa fa77 	bl	8000b18 <__aeabi_dcmpgt>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0bf      	beq.n	80065ae <floor+0x46>
 800662e:	2c00      	cmp	r4, #0
 8006630:	da02      	bge.n	8006638 <floor+0xd0>
 8006632:	2e14      	cmp	r6, #20
 8006634:	d103      	bne.n	800663e <floor+0xd6>
 8006636:	3401      	adds	r4, #1
 8006638:	ea25 0507 	bic.w	r5, r5, r7
 800663c:	e7b7      	b.n	80065ae <floor+0x46>
 800663e:	2301      	movs	r3, #1
 8006640:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006644:	fa03 f606 	lsl.w	r6, r3, r6
 8006648:	4435      	add	r5, r6
 800664a:	4545      	cmp	r5, r8
 800664c:	bf38      	it	cc
 800664e:	18e4      	addcc	r4, r4, r3
 8006650:	e7f2      	b.n	8006638 <floor+0xd0>
 8006652:	2500      	movs	r5, #0
 8006654:	462c      	mov	r4, r5
 8006656:	e7aa      	b.n	80065ae <floor+0x46>
 8006658:	8800759c 	.word	0x8800759c
 800665c:	7e37e43c 	.word	0x7e37e43c
 8006660:	bff00000 	.word	0xbff00000
 8006664:	000fffff 	.word	0x000fffff

08006668 <scalbn>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	ec55 4b10 	vmov	r4, r5, d0
 800666e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006672:	4606      	mov	r6, r0
 8006674:	462b      	mov	r3, r5
 8006676:	b99a      	cbnz	r2, 80066a0 <scalbn+0x38>
 8006678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800667c:	4323      	orrs	r3, r4
 800667e:	d036      	beq.n	80066ee <scalbn+0x86>
 8006680:	4b39      	ldr	r3, [pc, #228]	; (8006768 <scalbn+0x100>)
 8006682:	4629      	mov	r1, r5
 8006684:	ee10 0a10 	vmov	r0, s0
 8006688:	2200      	movs	r2, #0
 800668a:	f7f9 ffb5 	bl	80005f8 <__aeabi_dmul>
 800668e:	4b37      	ldr	r3, [pc, #220]	; (800676c <scalbn+0x104>)
 8006690:	429e      	cmp	r6, r3
 8006692:	4604      	mov	r4, r0
 8006694:	460d      	mov	r5, r1
 8006696:	da10      	bge.n	80066ba <scalbn+0x52>
 8006698:	a32b      	add	r3, pc, #172	; (adr r3, 8006748 <scalbn+0xe0>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	e03a      	b.n	8006716 <scalbn+0xae>
 80066a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80066a4:	428a      	cmp	r2, r1
 80066a6:	d10c      	bne.n	80066c2 <scalbn+0x5a>
 80066a8:	ee10 2a10 	vmov	r2, s0
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f7f9 fdec 	bl	800028c <__adddf3>
 80066b4:	4604      	mov	r4, r0
 80066b6:	460d      	mov	r5, r1
 80066b8:	e019      	b.n	80066ee <scalbn+0x86>
 80066ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066be:	460b      	mov	r3, r1
 80066c0:	3a36      	subs	r2, #54	; 0x36
 80066c2:	4432      	add	r2, r6
 80066c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066c8:	428a      	cmp	r2, r1
 80066ca:	dd08      	ble.n	80066de <scalbn+0x76>
 80066cc:	2d00      	cmp	r5, #0
 80066ce:	a120      	add	r1, pc, #128	; (adr r1, 8006750 <scalbn+0xe8>)
 80066d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066d4:	da1c      	bge.n	8006710 <scalbn+0xa8>
 80066d6:	a120      	add	r1, pc, #128	; (adr r1, 8006758 <scalbn+0xf0>)
 80066d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066dc:	e018      	b.n	8006710 <scalbn+0xa8>
 80066de:	2a00      	cmp	r2, #0
 80066e0:	dd08      	ble.n	80066f4 <scalbn+0x8c>
 80066e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066ee:	ec45 4b10 	vmov	d0, r4, r5
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066f8:	da19      	bge.n	800672e <scalbn+0xc6>
 80066fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066fe:	429e      	cmp	r6, r3
 8006700:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006704:	dd0a      	ble.n	800671c <scalbn+0xb4>
 8006706:	a112      	add	r1, pc, #72	; (adr r1, 8006750 <scalbn+0xe8>)
 8006708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e2      	bne.n	80066d6 <scalbn+0x6e>
 8006710:	a30f      	add	r3, pc, #60	; (adr r3, 8006750 <scalbn+0xe8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	e7cb      	b.n	80066b4 <scalbn+0x4c>
 800671c:	a10a      	add	r1, pc, #40	; (adr r1, 8006748 <scalbn+0xe0>)
 800671e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0b8      	beq.n	8006698 <scalbn+0x30>
 8006726:	a10e      	add	r1, pc, #56	; (adr r1, 8006760 <scalbn+0xf8>)
 8006728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800672c:	e7b4      	b.n	8006698 <scalbn+0x30>
 800672e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006732:	3236      	adds	r2, #54	; 0x36
 8006734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800673c:	4620      	mov	r0, r4
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <scalbn+0x108>)
 8006740:	2200      	movs	r2, #0
 8006742:	e7e8      	b.n	8006716 <scalbn+0xae>
 8006744:	f3af 8000 	nop.w
 8006748:	c2f8f359 	.word	0xc2f8f359
 800674c:	01a56e1f 	.word	0x01a56e1f
 8006750:	8800759c 	.word	0x8800759c
 8006754:	7e37e43c 	.word	0x7e37e43c
 8006758:	8800759c 	.word	0x8800759c
 800675c:	fe37e43c 	.word	0xfe37e43c
 8006760:	c2f8f359 	.word	0xc2f8f359
 8006764:	81a56e1f 	.word	0x81a56e1f
 8006768:	43500000 	.word	0x43500000
 800676c:	ffff3cb0 	.word	0xffff3cb0
 8006770:	3c900000 	.word	0x3c900000

08006774 <abort>:
 8006774:	b508      	push	{r3, lr}
 8006776:	2006      	movs	r0, #6
 8006778:	f000 f92e 	bl	80069d8 <raise>
 800677c:	2001      	movs	r0, #1
 800677e:	f7fd fb25 	bl	8003dcc <_exit>

08006782 <atexit>:
 8006782:	2300      	movs	r3, #0
 8006784:	4601      	mov	r1, r0
 8006786:	461a      	mov	r2, r3
 8006788:	4618      	mov	r0, r3
 800678a:	f000 b961 	b.w	8006a50 <__register_exitproc>
	...

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	2000000c 	.word	0x2000000c

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	; (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 fd06 	bl	80071c0 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	0800758c 	.word	0x0800758c
 80067d8:	0800758c 	.word	0x0800758c
 80067dc:	0800758c 	.word	0x0800758c
 80067e0:	08007590 	.word	0x08007590

080067e4 <malloc>:
 80067e4:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <malloc+0xc>)
 80067e6:	4601      	mov	r1, r0
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	f000 b863 	b.w	80068b4 <_malloc_r>
 80067ee:	bf00      	nop
 80067f0:	2000000c 	.word	0x2000000c

080067f4 <free>:
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <free+0xc>)
 80067f6:	4601      	mov	r1, r0
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f000 b80b 	b.w	8006814 <_free_r>
 80067fe:	bf00      	nop
 8006800:	2000000c 	.word	0x2000000c

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <_free_r>:
 8006814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006816:	2900      	cmp	r1, #0
 8006818:	d048      	beq.n	80068ac <_free_r+0x98>
 800681a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800681e:	9001      	str	r0, [sp, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f1a1 0404 	sub.w	r4, r1, #4
 8006826:	bfb8      	it	lt
 8006828:	18e4      	addlt	r4, r4, r3
 800682a:	f000 f977 	bl	8006b1c <__malloc_lock>
 800682e:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <_free_r+0x9c>)
 8006830:	9801      	ldr	r0, [sp, #4]
 8006832:	6813      	ldr	r3, [r2, #0]
 8006834:	4615      	mov	r5, r2
 8006836:	b933      	cbnz	r3, 8006846 <_free_r+0x32>
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	6014      	str	r4, [r2, #0]
 800683c:	b003      	add	sp, #12
 800683e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006842:	f000 b971 	b.w	8006b28 <__malloc_unlock>
 8006846:	42a3      	cmp	r3, r4
 8006848:	d90b      	bls.n	8006862 <_free_r+0x4e>
 800684a:	6821      	ldr	r1, [r4, #0]
 800684c:	1862      	adds	r2, r4, r1
 800684e:	4293      	cmp	r3, r2
 8006850:	bf04      	itt	eq
 8006852:	681a      	ldreq	r2, [r3, #0]
 8006854:	685b      	ldreq	r3, [r3, #4]
 8006856:	6063      	str	r3, [r4, #4]
 8006858:	bf04      	itt	eq
 800685a:	1852      	addeq	r2, r2, r1
 800685c:	6022      	streq	r2, [r4, #0]
 800685e:	602c      	str	r4, [r5, #0]
 8006860:	e7ec      	b.n	800683c <_free_r+0x28>
 8006862:	461a      	mov	r2, r3
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b10b      	cbz	r3, 800686c <_free_r+0x58>
 8006868:	42a3      	cmp	r3, r4
 800686a:	d9fa      	bls.n	8006862 <_free_r+0x4e>
 800686c:	6811      	ldr	r1, [r2, #0]
 800686e:	1855      	adds	r5, r2, r1
 8006870:	42a5      	cmp	r5, r4
 8006872:	d10b      	bne.n	800688c <_free_r+0x78>
 8006874:	6824      	ldr	r4, [r4, #0]
 8006876:	4421      	add	r1, r4
 8006878:	1854      	adds	r4, r2, r1
 800687a:	42a3      	cmp	r3, r4
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	d1dd      	bne.n	800683c <_free_r+0x28>
 8006880:	681c      	ldr	r4, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	6053      	str	r3, [r2, #4]
 8006886:	4421      	add	r1, r4
 8006888:	6011      	str	r1, [r2, #0]
 800688a:	e7d7      	b.n	800683c <_free_r+0x28>
 800688c:	d902      	bls.n	8006894 <_free_r+0x80>
 800688e:	230c      	movs	r3, #12
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	e7d3      	b.n	800683c <_free_r+0x28>
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	1961      	adds	r1, r4, r5
 8006898:	428b      	cmp	r3, r1
 800689a:	bf04      	itt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	bf04      	itt	eq
 80068a4:	1949      	addeq	r1, r1, r5
 80068a6:	6021      	streq	r1, [r4, #0]
 80068a8:	6054      	str	r4, [r2, #4]
 80068aa:	e7c7      	b.n	800683c <_free_r+0x28>
 80068ac:	b003      	add	sp, #12
 80068ae:	bd30      	pop	{r4, r5, pc}
 80068b0:	2000342c 	.word	0x2000342c

080068b4 <_malloc_r>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	1ccd      	adds	r5, r1, #3
 80068b8:	f025 0503 	bic.w	r5, r5, #3
 80068bc:	3508      	adds	r5, #8
 80068be:	2d0c      	cmp	r5, #12
 80068c0:	bf38      	it	cc
 80068c2:	250c      	movcc	r5, #12
 80068c4:	2d00      	cmp	r5, #0
 80068c6:	4606      	mov	r6, r0
 80068c8:	db01      	blt.n	80068ce <_malloc_r+0x1a>
 80068ca:	42a9      	cmp	r1, r5
 80068cc:	d903      	bls.n	80068d6 <_malloc_r+0x22>
 80068ce:	230c      	movs	r3, #12
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	2000      	movs	r0, #0
 80068d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d6:	f000 f921 	bl	8006b1c <__malloc_lock>
 80068da:	4921      	ldr	r1, [pc, #132]	; (8006960 <_malloc_r+0xac>)
 80068dc:	680a      	ldr	r2, [r1, #0]
 80068de:	4614      	mov	r4, r2
 80068e0:	b99c      	cbnz	r4, 800690a <_malloc_r+0x56>
 80068e2:	4f20      	ldr	r7, [pc, #128]	; (8006964 <_malloc_r+0xb0>)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	b923      	cbnz	r3, 80068f2 <_malloc_r+0x3e>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f83c 	bl	8006968 <_sbrk_r>
 80068f0:	6038      	str	r0, [r7, #0]
 80068f2:	4629      	mov	r1, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 f837 	bl	8006968 <_sbrk_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d123      	bne.n	8006946 <_malloc_r+0x92>
 80068fe:	230c      	movs	r3, #12
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f910 	bl	8006b28 <__malloc_unlock>
 8006908:	e7e3      	b.n	80068d2 <_malloc_r+0x1e>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	1b5b      	subs	r3, r3, r5
 800690e:	d417      	bmi.n	8006940 <_malloc_r+0x8c>
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d903      	bls.n	800691c <_malloc_r+0x68>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	441c      	add	r4, r3
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	e004      	b.n	8006926 <_malloc_r+0x72>
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	42a2      	cmp	r2, r4
 8006920:	bf0c      	ite	eq
 8006922:	600b      	streq	r3, [r1, #0]
 8006924:	6053      	strne	r3, [r2, #4]
 8006926:	4630      	mov	r0, r6
 8006928:	f000 f8fe 	bl	8006b28 <__malloc_unlock>
 800692c:	f104 000b 	add.w	r0, r4, #11
 8006930:	1d23      	adds	r3, r4, #4
 8006932:	f020 0007 	bic.w	r0, r0, #7
 8006936:	1ac2      	subs	r2, r0, r3
 8006938:	d0cc      	beq.n	80068d4 <_malloc_r+0x20>
 800693a:	1a1b      	subs	r3, r3, r0
 800693c:	50a3      	str	r3, [r4, r2]
 800693e:	e7c9      	b.n	80068d4 <_malloc_r+0x20>
 8006940:	4622      	mov	r2, r4
 8006942:	6864      	ldr	r4, [r4, #4]
 8006944:	e7cc      	b.n	80068e0 <_malloc_r+0x2c>
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d0e3      	beq.n	8006918 <_malloc_r+0x64>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4630      	mov	r0, r6
 8006954:	f000 f808 	bl	8006968 <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d1dd      	bne.n	8006918 <_malloc_r+0x64>
 800695c:	e7cf      	b.n	80068fe <_malloc_r+0x4a>
 800695e:	bf00      	nop
 8006960:	2000342c 	.word	0x2000342c
 8006964:	20003430 	.word	0x20003430

08006968 <_sbrk_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d06      	ldr	r5, [pc, #24]	; (8006984 <_sbrk_r+0x1c>)
 800696c:	2300      	movs	r3, #0
 800696e:	4604      	mov	r4, r0
 8006970:	4608      	mov	r0, r1
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	f7fd fa34 	bl	8003de0 <_sbrk>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d102      	bne.n	8006982 <_sbrk_r+0x1a>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	b103      	cbz	r3, 8006982 <_sbrk_r+0x1a>
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	200034d4 	.word	0x200034d4

08006988 <_raise_r>:
 8006988:	291f      	cmp	r1, #31
 800698a:	b538      	push	{r3, r4, r5, lr}
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	d904      	bls.n	800699c <_raise_r+0x14>
 8006992:	2316      	movs	r3, #22
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800699e:	b112      	cbz	r2, 80069a6 <_raise_r+0x1e>
 80069a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069a4:	b94b      	cbnz	r3, 80069ba <_raise_r+0x32>
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f830 	bl	8006a0c <_getpid_r>
 80069ac:	462a      	mov	r2, r5
 80069ae:	4601      	mov	r1, r0
 80069b0:	4620      	mov	r0, r4
 80069b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b6:	f000 b817 	b.w	80069e8 <_kill_r>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d00a      	beq.n	80069d4 <_raise_r+0x4c>
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	d103      	bne.n	80069ca <_raise_r+0x42>
 80069c2:	2316      	movs	r3, #22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7e7      	b.n	800699a <_raise_r+0x12>
 80069ca:	2400      	movs	r4, #0
 80069cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069d0:	4628      	mov	r0, r5
 80069d2:	4798      	blx	r3
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7e0      	b.n	800699a <_raise_r+0x12>

080069d8 <raise>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <raise+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfd3 	b.w	8006988 <_raise_r>
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c

080069e8 <_kill_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	; (8006a08 <_kill_r+0x20>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	f7fd f9d9 	bl	8003dac <_kill>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d102      	bne.n	8006a04 <_kill_r+0x1c>
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	b103      	cbz	r3, 8006a04 <_kill_r+0x1c>
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	200034d4 	.word	0x200034d4

08006a0c <_getpid_r>:
 8006a0c:	f7fd b9c6 	b.w	8003d9c <_getpid>

08006a10 <_vsiprintf_r>:
 8006a10:	b500      	push	{lr}
 8006a12:	b09b      	sub	sp, #108	; 0x6c
 8006a14:	9100      	str	r1, [sp, #0]
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	9102      	str	r1, [sp, #8]
 8006a20:	4905      	ldr	r1, [pc, #20]	; (8006a38 <_vsiprintf_r+0x28>)
 8006a22:	9103      	str	r1, [sp, #12]
 8006a24:	4669      	mov	r1, sp
 8006a26:	f000 f8e1 	bl	8006bec <_svfiprintf_r>
 8006a2a:	9b00      	ldr	r3, [sp, #0]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	b01b      	add	sp, #108	; 0x6c
 8006a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a36:	bf00      	nop
 8006a38:	ffff0208 	.word	0xffff0208

08006a3c <vsiprintf>:
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	460a      	mov	r2, r1
 8006a40:	4601      	mov	r1, r0
 8006a42:	4802      	ldr	r0, [pc, #8]	; (8006a4c <vsiprintf+0x10>)
 8006a44:	6800      	ldr	r0, [r0, #0]
 8006a46:	f7ff bfe3 	b.w	8006a10 <_vsiprintf_r>
 8006a4a:	bf00      	nop
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <__register_exitproc>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006b10 <__register_exitproc+0xc0>
 8006a58:	4606      	mov	r6, r0
 8006a5a:	f8d8 0000 	ldr.w	r0, [r8]
 8006a5e:	461f      	mov	r7, r3
 8006a60:	460d      	mov	r5, r1
 8006a62:	4691      	mov	r9, r2
 8006a64:	f000 f856 	bl	8006b14 <__retarget_lock_acquire_recursive>
 8006a68:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <__register_exitproc+0xb0>)
 8006a6a:	681c      	ldr	r4, [r3, #0]
 8006a6c:	b934      	cbnz	r4, 8006a7c <__register_exitproc+0x2c>
 8006a6e:	4c25      	ldr	r4, [pc, #148]	; (8006b04 <__register_exitproc+0xb4>)
 8006a70:	601c      	str	r4, [r3, #0]
 8006a72:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <__register_exitproc+0xb8>)
 8006a74:	b113      	cbz	r3, 8006a7c <__register_exitproc+0x2c>
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	2b1f      	cmp	r3, #31
 8006a80:	dd07      	ble.n	8006a92 <__register_exitproc+0x42>
 8006a82:	f8d8 0000 	ldr.w	r0, [r8]
 8006a86:	f000 f847 	bl	8006b18 <__retarget_lock_release_recursive>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a92:	b34e      	cbz	r6, 8006ae8 <__register_exitproc+0x98>
 8006a94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8006a98:	b988      	cbnz	r0, 8006abe <__register_exitproc+0x6e>
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <__register_exitproc+0xbc>)
 8006a9c:	b923      	cbnz	r3, 8006aa8 <__register_exitproc+0x58>
 8006a9e:	f8d8 0000 	ldr.w	r0, [r8]
 8006aa2:	f000 f838 	bl	8006b16 <__retarget_lock_release>
 8006aa6:	e7f0      	b.n	8006a8a <__register_exitproc+0x3a>
 8006aa8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8006aac:	f7ff fe9a 	bl	80067e4 <malloc>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0f4      	beq.n	8006a9e <__register_exitproc+0x4e>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8006aba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8006acc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	2e02      	cmp	r6, #2
 8006ad4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8006ad8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8006adc:	bf02      	ittt	eq
 8006ade:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8006ae2:	431a      	orreq	r2, r3
 8006ae4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8006ae8:	6863      	ldr	r3, [r4, #4]
 8006aea:	f8d8 0000 	ldr.w	r0, [r8]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	3302      	adds	r3, #2
 8006af2:	6062      	str	r2, [r4, #4]
 8006af4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8006af8:	f000 f80e 	bl	8006b18 <__retarget_lock_release_recursive>
 8006afc:	2000      	movs	r0, #0
 8006afe:	e7c6      	b.n	8006a8e <__register_exitproc+0x3e>
 8006b00:	200034c0 	.word	0x200034c0
 8006b04:	20003434 	.word	0x20003434
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	080067e5 	.word	0x080067e5
 8006b10:	20000070 	.word	0x20000070

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release>:
 8006b16:	4770      	bx	lr

08006b18 <__retarget_lock_release_recursive>:
 8006b18:	4770      	bx	lr
	...

08006b1c <__malloc_lock>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__malloc_lock+0x8>)
 8006b1e:	f7ff bff9 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006b22:	bf00      	nop
 8006b24:	200034cc 	.word	0x200034cc

08006b28 <__malloc_unlock>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__malloc_unlock+0x8>)
 8006b2a:	f7ff bff5 	b.w	8006b18 <__retarget_lock_release_recursive>
 8006b2e:	bf00      	nop
 8006b30:	200034cc 	.word	0x200034cc

08006b34 <__ssputs_r>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	688e      	ldr	r6, [r1, #8]
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4690      	mov	r8, r2
 8006b42:	461f      	mov	r7, r3
 8006b44:	d838      	bhi.n	8006bb8 <__ssputs_r+0x84>
 8006b46:	898a      	ldrh	r2, [r1, #12]
 8006b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b4c:	d032      	beq.n	8006bb4 <__ssputs_r+0x80>
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	6909      	ldr	r1, [r1, #16]
 8006b52:	eba5 0901 	sub.w	r9, r5, r1
 8006b56:	6965      	ldr	r5, [r4, #20]
 8006b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b60:	3301      	adds	r3, #1
 8006b62:	444b      	add	r3, r9
 8006b64:	106d      	asrs	r5, r5, #1
 8006b66:	429d      	cmp	r5, r3
 8006b68:	bf38      	it	cc
 8006b6a:	461d      	movcc	r5, r3
 8006b6c:	0553      	lsls	r3, r2, #21
 8006b6e:	d531      	bpl.n	8006bd4 <__ssputs_r+0xa0>
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7ff fe9f 	bl	80068b4 <_malloc_r>
 8006b76:	4606      	mov	r6, r0
 8006b78:	b950      	cbnz	r0, 8006b90 <__ssputs_r+0x5c>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	f8ca 3000 	str.w	r3, [sl]
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	6921      	ldr	r1, [r4, #16]
 8006b92:	464a      	mov	r2, r9
 8006b94:	f000 fabe 	bl	8007114 <memcpy>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	6126      	str	r6, [r4, #16]
 8006ba6:	6165      	str	r5, [r4, #20]
 8006ba8:	444e      	add	r6, r9
 8006baa:	eba5 0509 	sub.w	r5, r5, r9
 8006bae:	6026      	str	r6, [r4, #0]
 8006bb0:	60a5      	str	r5, [r4, #8]
 8006bb2:	463e      	mov	r6, r7
 8006bb4:	42be      	cmp	r6, r7
 8006bb6:	d900      	bls.n	8006bba <__ssputs_r+0x86>
 8006bb8:	463e      	mov	r6, r7
 8006bba:	4632      	mov	r2, r6
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	f000 fab6 	bl	8007130 <memmove>
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	1b9b      	subs	r3, r3, r6
 8006bca:	4432      	add	r2, r6
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	e7db      	b.n	8006b8c <__ssputs_r+0x58>
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	f000 fac5 	bl	8007164 <_realloc_r>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1e1      	bne.n	8006ba4 <__ssputs_r+0x70>
 8006be0:	6921      	ldr	r1, [r4, #16]
 8006be2:	4650      	mov	r0, sl
 8006be4:	f7ff fe16 	bl	8006814 <_free_r>
 8006be8:	e7c7      	b.n	8006b7a <__ssputs_r+0x46>
	...

08006bec <_svfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	4698      	mov	r8, r3
 8006bf2:	898b      	ldrh	r3, [r1, #12]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	b09d      	sub	sp, #116	; 0x74
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	d50e      	bpl.n	8006c1e <_svfiprintf_r+0x32>
 8006c00:	690b      	ldr	r3, [r1, #16]
 8006c02:	b963      	cbnz	r3, 8006c1e <_svfiprintf_r+0x32>
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	f7ff fe55 	bl	80068b4 <_malloc_r>
 8006c0a:	6028      	str	r0, [r5, #0]
 8006c0c:	6128      	str	r0, [r5, #16]
 8006c0e:	b920      	cbnz	r0, 8006c1a <_svfiprintf_r+0x2e>
 8006c10:	230c      	movs	r3, #12
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e0d1      	b.n	8006dbe <_svfiprintf_r+0x1d2>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	616b      	str	r3, [r5, #20]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9309      	str	r3, [sp, #36]	; 0x24
 8006c22:	2320      	movs	r3, #32
 8006c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dd8 <_svfiprintf_r+0x1ec>
 8006c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c36:	f04f 0901 	mov.w	r9, #1
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c42:	b10a      	cbz	r2, 8006c48 <_svfiprintf_r+0x5c>
 8006c44:	2a25      	cmp	r2, #37	; 0x25
 8006c46:	d1f9      	bne.n	8006c3c <_svfiprintf_r+0x50>
 8006c48:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4c:	d00b      	beq.n	8006c66 <_svfiprintf_r+0x7a>
 8006c4e:	465b      	mov	r3, fp
 8006c50:	4622      	mov	r2, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff ff6d 	bl	8006b34 <__ssputs_r>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f000 80aa 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c62:	445a      	add	r2, fp
 8006c64:	9209      	str	r2, [sp, #36]	; 0x24
 8006c66:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a2 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7a:	f10a 0a01 	add.w	sl, sl, #1
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9307      	str	r3, [sp, #28]
 8006c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c86:	931a      	str	r3, [sp, #104]	; 0x68
 8006c88:	4654      	mov	r4, sl
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c90:	4851      	ldr	r0, [pc, #324]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006c92:	f7f9 faa5 	bl	80001e0 <memchr>
 8006c96:	9a04      	ldr	r2, [sp, #16]
 8006c98:	b9d8      	cbnz	r0, 8006cd2 <_svfiprintf_r+0xe6>
 8006c9a:	06d0      	lsls	r0, r2, #27
 8006c9c:	bf44      	itt	mi
 8006c9e:	2320      	movmi	r3, #32
 8006ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca4:	0711      	lsls	r1, r2, #28
 8006ca6:	bf44      	itt	mi
 8006ca8:	232b      	movmi	r3, #43	; 0x2b
 8006caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cae:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d015      	beq.n	8006ce2 <_svfiprintf_r+0xf6>
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	4654      	mov	r4, sl
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f04f 0c0a 	mov.w	ip, #10
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc6:	3b30      	subs	r3, #48	; 0x30
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d94e      	bls.n	8006d6a <_svfiprintf_r+0x17e>
 8006ccc:	b1b0      	cbz	r0, 8006cfc <_svfiprintf_r+0x110>
 8006cce:	9207      	str	r2, [sp, #28]
 8006cd0:	e014      	b.n	8006cfc <_svfiprintf_r+0x110>
 8006cd2:	eba0 0308 	sub.w	r3, r0, r8
 8006cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	46a2      	mov	sl, r4
 8006ce0:	e7d2      	b.n	8006c88 <_svfiprintf_r+0x9c>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	1d19      	adds	r1, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9103      	str	r1, [sp, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfbb      	ittet	lt
 8006cee:	425b      	neglt	r3, r3
 8006cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf4:	9307      	strge	r3, [sp, #28]
 8006cf6:	9307      	strlt	r3, [sp, #28]
 8006cf8:	bfb8      	it	lt
 8006cfa:	9204      	strlt	r2, [sp, #16]
 8006cfc:	7823      	ldrb	r3, [r4, #0]
 8006cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006d00:	d10c      	bne.n	8006d1c <_svfiprintf_r+0x130>
 8006d02:	7863      	ldrb	r3, [r4, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d135      	bne.n	8006d74 <_svfiprintf_r+0x188>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9203      	str	r2, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfb8      	it	lt
 8006d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d18:	3402      	adds	r4, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006de8 <_svfiprintf_r+0x1fc>
 8006d20:	7821      	ldrb	r1, [r4, #0]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4650      	mov	r0, sl
 8006d26:	f7f9 fa5b 	bl	80001e0 <memchr>
 8006d2a:	b140      	cbz	r0, 8006d3e <_svfiprintf_r+0x152>
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	eba0 000a 	sub.w	r0, r0, sl
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	4303      	orrs	r3, r0
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d42:	4826      	ldr	r0, [pc, #152]	; (8006ddc <_svfiprintf_r+0x1f0>)
 8006d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d48:	2206      	movs	r2, #6
 8006d4a:	f7f9 fa49 	bl	80001e0 <memchr>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d038      	beq.n	8006dc4 <_svfiprintf_r+0x1d8>
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <_svfiprintf_r+0x1f4>)
 8006d54:	bb1b      	cbnz	r3, 8006d9e <_svfiprintf_r+0x1b2>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	3308      	adds	r3, #8
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d64:	4433      	add	r3, r6
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	e767      	b.n	8006c3a <_svfiprintf_r+0x4e>
 8006d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2001      	movs	r0, #1
 8006d72:	e7a5      	b.n	8006cc0 <_svfiprintf_r+0xd4>
 8006d74:	2300      	movs	r3, #0
 8006d76:	3401      	adds	r4, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0c0a 	mov.w	ip, #10
 8006d80:	4620      	mov	r0, r4
 8006d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d86:	3a30      	subs	r2, #48	; 0x30
 8006d88:	2a09      	cmp	r2, #9
 8006d8a:	d903      	bls.n	8006d94 <_svfiprintf_r+0x1a8>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0c5      	beq.n	8006d1c <_svfiprintf_r+0x130>
 8006d90:	9105      	str	r1, [sp, #20]
 8006d92:	e7c3      	b.n	8006d1c <_svfiprintf_r+0x130>
 8006d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d98:	4604      	mov	r4, r0
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7f0      	b.n	8006d80 <_svfiprintf_r+0x194>
 8006d9e:	ab03      	add	r3, sp, #12
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4638      	mov	r0, r7
 8006daa:	f3af 8000 	nop.w
 8006dae:	1c42      	adds	r2, r0, #1
 8006db0:	4606      	mov	r6, r0
 8006db2:	d1d6      	bne.n	8006d62 <_svfiprintf_r+0x176>
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	065b      	lsls	r3, r3, #25
 8006db8:	f53f af2c 	bmi.w	8006c14 <_svfiprintf_r+0x28>
 8006dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dbe:	b01d      	add	sp, #116	; 0x74
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f000 f87a 	bl	8006ec8 <_printf_i>
 8006dd4:	e7eb      	b.n	8006dae <_svfiprintf_r+0x1c2>
 8006dd6:	bf00      	nop
 8006dd8:	08007550 	.word	0x08007550
 8006ddc:	0800755a 	.word	0x0800755a
 8006de0:	00000000 	.word	0x00000000
 8006de4:	08006b35 	.word	0x08006b35
 8006de8:	08007556 	.word	0x08007556

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e38:	1e13      	subs	r3, r2, #0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	68e5      	ldr	r5, [r4, #12]
 8006e56:	6832      	ldr	r2, [r6, #0]
 8006e58:	f003 0306 	and.w	r3, r3, #6
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	bf08      	it	eq
 8006e60:	1aad      	subeq	r5, r5, r2
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	6922      	ldr	r2, [r4, #16]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4649      	mov	r1, r9
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c0      	blx	r8
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	; 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4691      	mov	r9, r2
 8006ed0:	7e27      	ldrb	r7, [r4, #24]
 8006ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ed4:	2f78      	cmp	r7, #120	; 0x78
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	; 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d8 	beq.w	800709a <_printf_i+0x1d2>
 8006eea:	2f58      	cmp	r7, #88	; 0x58
 8006eec:	f000 80a3 	beq.w	8007036 <_printf_i+0x16e>
 8006ef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a001      	add	r0, pc, #4	; (adr r0, 8006f08 <_printf_i+0x40>)
 8006f04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007081 	.word	0x08007081
 8006f38:	08006fa5 	.word	0x08006fa5
 8006f3c:	08007063 	.word	0x08007063
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	080070a3 	.word	0x080070a3
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	0800706b 	.word	0x0800706b
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	600a      	str	r2, [r1, #0]
 8006f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0a3      	b.n	80070bc <_printf_i+0x1f4>
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	6808      	ldr	r0, [r1, #0]
 8006f78:	062e      	lsls	r6, r5, #24
 8006f7a:	f100 0304 	add.w	r3, r0, #4
 8006f7e:	d50a      	bpl.n	8006f96 <_printf_i+0xce>
 8006f80:	6805      	ldr	r5, [r0, #0]
 8006f82:	600b      	str	r3, [r1, #0]
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	da03      	bge.n	8006f90 <_printf_i+0xc8>
 8006f88:	232d      	movs	r3, #45	; 0x2d
 8006f8a:	426d      	negs	r5, r5
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	485e      	ldr	r0, [pc, #376]	; (800710c <_printf_i+0x244>)
 8006f92:	230a      	movs	r3, #10
 8006f94:	e019      	b.n	8006fca <_printf_i+0x102>
 8006f96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f9a:	6805      	ldr	r5, [r0, #0]
 8006f9c:	600b      	str	r3, [r1, #0]
 8006f9e:	bf18      	it	ne
 8006fa0:	b22d      	sxthne	r5, r5
 8006fa2:	e7ef      	b.n	8006f84 <_printf_i+0xbc>
 8006fa4:	680b      	ldr	r3, [r1, #0]
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	1d18      	adds	r0, r3, #4
 8006faa:	6008      	str	r0, [r1, #0]
 8006fac:	0628      	lsls	r0, r5, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xec>
 8006fb0:	681d      	ldr	r5, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0xf2>
 8006fb4:	0669      	lsls	r1, r5, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xe8>
 8006fb8:	881d      	ldrh	r5, [r3, #0]
 8006fba:	4854      	ldr	r0, [pc, #336]	; (800710c <_printf_i+0x244>)
 8006fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2308      	moveq	r3, #8
 8006fc2:	230a      	movne	r3, #10
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fca:	6866      	ldr	r6, [r4, #4]
 8006fcc:	60a6      	str	r6, [r4, #8]
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	bfa2      	ittt	ge
 8006fd2:	6821      	ldrge	r1, [r4, #0]
 8006fd4:	f021 0104 	bicge.w	r1, r1, #4
 8006fd8:	6021      	strge	r1, [r4, #0]
 8006fda:	b90d      	cbnz	r5, 8006fe0 <_printf_i+0x118>
 8006fdc:	2e00      	cmp	r6, #0
 8006fde:	d04d      	beq.n	800707c <_printf_i+0x1b4>
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fe6:	fb03 5711 	mls	r7, r3, r1, r5
 8006fea:	5dc7      	ldrb	r7, [r0, r7]
 8006fec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ff0:	462f      	mov	r7, r5
 8006ff2:	42bb      	cmp	r3, r7
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	d9f4      	bls.n	8006fe2 <_printf_i+0x11a>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x14c>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07df      	lsls	r7, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x14c>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4299      	cmp	r1, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	; 0x30
 800700c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007010:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007014:	1b92      	subs	r2, r2, r6
 8007016:	6122      	str	r2, [r4, #16]
 8007018:	f8cd a000 	str.w	sl, [sp]
 800701c:	464b      	mov	r3, r9
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fee2 	bl	8006dec <_printf_common>
 8007028:	3001      	adds	r0, #1
 800702a:	d14c      	bne.n	80070c6 <_printf_i+0x1fe>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	b004      	add	sp, #16
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	4835      	ldr	r0, [pc, #212]	; (800710c <_printf_i+0x244>)
 8007038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	680e      	ldr	r6, [r1, #0]
 8007040:	061f      	lsls	r7, r3, #24
 8007042:	f856 5b04 	ldr.w	r5, [r6], #4
 8007046:	600e      	str	r6, [r1, #0]
 8007048:	d514      	bpl.n	8007074 <_printf_i+0x1ac>
 800704a:	07d9      	lsls	r1, r3, #31
 800704c:	bf44      	itt	mi
 800704e:	f043 0320 	orrmi.w	r3, r3, #32
 8007052:	6023      	strmi	r3, [r4, #0]
 8007054:	b91d      	cbnz	r5, 800705e <_printf_i+0x196>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f023 0320 	bic.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	2310      	movs	r3, #16
 8007060:	e7b0      	b.n	8006fc4 <_printf_i+0xfc>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	f043 0320 	orr.w	r3, r3, #32
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	2378      	movs	r3, #120	; 0x78
 800706c:	4828      	ldr	r0, [pc, #160]	; (8007110 <_printf_i+0x248>)
 800706e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007072:	e7e3      	b.n	800703c <_printf_i+0x174>
 8007074:	065e      	lsls	r6, r3, #25
 8007076:	bf48      	it	mi
 8007078:	b2ad      	uxthmi	r5, r5
 800707a:	e7e6      	b.n	800704a <_printf_i+0x182>
 800707c:	4616      	mov	r6, r2
 800707e:	e7bb      	b.n	8006ff8 <_printf_i+0x130>
 8007080:	680b      	ldr	r3, [r1, #0]
 8007082:	6826      	ldr	r6, [r4, #0]
 8007084:	6960      	ldr	r0, [r4, #20]
 8007086:	1d1d      	adds	r5, r3, #4
 8007088:	600d      	str	r5, [r1, #0]
 800708a:	0635      	lsls	r5, r6, #24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	d501      	bpl.n	8007094 <_printf_i+0x1cc>
 8007090:	6018      	str	r0, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0x1d2>
 8007094:	0671      	lsls	r1, r6, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0x1c8>
 8007098:	8018      	strh	r0, [r3, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	4616      	mov	r6, r2
 80070a0:	e7ba      	b.n	8007018 <_printf_i+0x150>
 80070a2:	680b      	ldr	r3, [r1, #0]
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	600a      	str	r2, [r1, #0]
 80070a8:	681e      	ldr	r6, [r3, #0]
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	2100      	movs	r1, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7f9 f896 	bl	80001e0 <memchr>
 80070b4:	b108      	cbz	r0, 80070ba <_printf_i+0x1f2>
 80070b6:	1b80      	subs	r0, r0, r6
 80070b8:	6060      	str	r0, [r4, #4]
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	2300      	movs	r3, #0
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c4:	e7a8      	b.n	8007018 <_printf_i+0x150>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	4632      	mov	r2, r6
 80070ca:	4649      	mov	r1, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	47d0      	blx	sl
 80070d0:	3001      	adds	r0, #1
 80070d2:	d0ab      	beq.n	800702c <_printf_i+0x164>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	079b      	lsls	r3, r3, #30
 80070d8:	d413      	bmi.n	8007102 <_printf_i+0x23a>
 80070da:	68e0      	ldr	r0, [r4, #12]
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	4298      	cmp	r0, r3
 80070e0:	bfb8      	it	lt
 80070e2:	4618      	movlt	r0, r3
 80070e4:	e7a4      	b.n	8007030 <_printf_i+0x168>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4632      	mov	r2, r6
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	47d0      	blx	sl
 80070f0:	3001      	adds	r0, #1
 80070f2:	d09b      	beq.n	800702c <_printf_i+0x164>
 80070f4:	3501      	adds	r5, #1
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	9903      	ldr	r1, [sp, #12]
 80070fa:	1a5b      	subs	r3, r3, r1
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dcf2      	bgt.n	80070e6 <_printf_i+0x21e>
 8007100:	e7eb      	b.n	80070da <_printf_i+0x212>
 8007102:	2500      	movs	r5, #0
 8007104:	f104 0619 	add.w	r6, r4, #25
 8007108:	e7f5      	b.n	80070f6 <_printf_i+0x22e>
 800710a:	bf00      	nop
 800710c:	08007561 	.word	0x08007561
 8007110:	08007572 	.word	0x08007572

08007114 <memcpy>:
 8007114:	440a      	add	r2, r1
 8007116:	4291      	cmp	r1, r2
 8007118:	f100 33ff 	add.w	r3, r0, #4294967295
 800711c:	d100      	bne.n	8007120 <memcpy+0xc>
 800711e:	4770      	bx	lr
 8007120:	b510      	push	{r4, lr}
 8007122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800712a:	4291      	cmp	r1, r2
 800712c:	d1f9      	bne.n	8007122 <memcpy+0xe>
 800712e:	bd10      	pop	{r4, pc}

08007130 <memmove>:
 8007130:	4288      	cmp	r0, r1
 8007132:	b510      	push	{r4, lr}
 8007134:	eb01 0402 	add.w	r4, r1, r2
 8007138:	d902      	bls.n	8007140 <memmove+0x10>
 800713a:	4284      	cmp	r4, r0
 800713c:	4623      	mov	r3, r4
 800713e:	d807      	bhi.n	8007150 <memmove+0x20>
 8007140:	1e43      	subs	r3, r0, #1
 8007142:	42a1      	cmp	r1, r4
 8007144:	d008      	beq.n	8007158 <memmove+0x28>
 8007146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800714e:	e7f8      	b.n	8007142 <memmove+0x12>
 8007150:	4402      	add	r2, r0
 8007152:	4601      	mov	r1, r0
 8007154:	428a      	cmp	r2, r1
 8007156:	d100      	bne.n	800715a <memmove+0x2a>
 8007158:	bd10      	pop	{r4, pc}
 800715a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800715e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007162:	e7f7      	b.n	8007154 <memmove+0x24>

08007164 <_realloc_r>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	4607      	mov	r7, r0
 8007168:	4614      	mov	r4, r2
 800716a:	460e      	mov	r6, r1
 800716c:	b921      	cbnz	r1, 8007178 <_realloc_r+0x14>
 800716e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007172:	4611      	mov	r1, r2
 8007174:	f7ff bb9e 	b.w	80068b4 <_malloc_r>
 8007178:	b922      	cbnz	r2, 8007184 <_realloc_r+0x20>
 800717a:	f7ff fb4b 	bl	8006814 <_free_r>
 800717e:	4625      	mov	r5, r4
 8007180:	4628      	mov	r0, r5
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007184:	f000 f814 	bl	80071b0 <_malloc_usable_size_r>
 8007188:	42a0      	cmp	r0, r4
 800718a:	d20f      	bcs.n	80071ac <_realloc_r+0x48>
 800718c:	4621      	mov	r1, r4
 800718e:	4638      	mov	r0, r7
 8007190:	f7ff fb90 	bl	80068b4 <_malloc_r>
 8007194:	4605      	mov	r5, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d0f2      	beq.n	8007180 <_realloc_r+0x1c>
 800719a:	4631      	mov	r1, r6
 800719c:	4622      	mov	r2, r4
 800719e:	f7ff ffb9 	bl	8007114 <memcpy>
 80071a2:	4631      	mov	r1, r6
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff fb35 	bl	8006814 <_free_r>
 80071aa:	e7e9      	b.n	8007180 <_realloc_r+0x1c>
 80071ac:	4635      	mov	r5, r6
 80071ae:	e7e7      	b.n	8007180 <_realloc_r+0x1c>

080071b0 <_malloc_usable_size_r>:
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f18      	subs	r0, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfbc      	itt	lt
 80071ba:	580b      	ldrlt	r3, [r1, r0]
 80071bc:	18c0      	addlt	r0, r0, r3
 80071be:	4770      	bx	lr

080071c0 <_init>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr

080071cc <_fini>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr
